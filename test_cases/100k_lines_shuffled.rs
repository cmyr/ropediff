                }
    }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

            // if using breaks update cursor
    fn bench_single_timestamp(b: &mut Bencher) {
#[cfg(test)]
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// This uniquely represents the identity of this revision and it stays
                    rev_id: rev.rev_id,
        Self::with_limit_bytes(1 * 1024 * 1024)
use std::str::FromStr;
    }
            rev_id, max_undo_so_far,
        let trace = Trace::enabled(Config::default());
impl Rope {
        assert_eq!(snapshot[1].name, "thread_name");
    FlowStart,
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    }
    assert!(a[0].rev_id == b[0].rev_id);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    size: Size,
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
            args: Some(SampleArgs {

    fn bench_trace_instant_disabled(b: &mut Bencher) {
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
            priority: 0,

            }
    }
            Assert(1, "ab".to_owned()),
        // todo: the correct Find instance needs to be updated with the new parameters

    },
        }
    #[serde(rename = "sort_index")]
            match modify_selection {
        let mut all_samples = self.samples.lock().unwrap();
use selection::{Affinity, Selection, SelRegion};
        self.send_update_for_plan(text, client, styles,
            thread_name: Sample::thread_name(),
//     http://www.apache.org/licenses/LICENSE-2.0
                }
                                priority,
            //leaf.len() - start_pos
                                     categories: C,
/// Boundary is atomic and determined by codepoint boundary.
                    "something", &["benchmark"], || {},
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
        } else { // no toggled groups, return past end

    {
    }
    }
    min: usize,
                        // no need to un-delete undone inserts since we'll just shrink them out
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
        // we add the special find highlights (1) and selection (0) styles first.
    }
    }
// Additional APIs custom to strings
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
        let base_sel = Selection::new();
                s.len()
        for find in &mut self.find {
        let mut style_map = style_map.borrow_mut();
            None => return "",
    fn prev_codepoint_offset_small() {
        match *self {
        if !selection.regions_in_range(offset, offset).is_empty() {
            'f' => SampleEventType::FlowEnd,
    fragment: &'a str
categories_from_constant_array!(6);
        let first_rev = engine.get_head_rev_id().token();
            thread_name: Sample::thread_name(),

    fn can_fragment() -> bool { true }
            let b_to_merge = &other.revs[base_index..];
            Assert(2, "adfc".to_owned()),
/// Enable tracing with a specific configuration. Tracing is disabled initially
        all_samples.push_back(sample);
            max_undo_so_far,
        }
/// * `categories` - A static array of static strings that tags the samples in
    /// than this will panic.
categories_from_constant_array!(0);
    // TODO: replace this with a version of `lines` that accepts a range
    fn delta_rev_head_3() {
    fn compute_info(s: &String) -> Self {
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    //TODO: implement lines_raw using ranges and delete this
        engine.edit_rev(1, 1, first_rev, d1.clone());
        } else { // no toggled groups, return past end
    fn merge_priorities() {

                Contents::Undo { .. } => panic!(),
                        &mut rest[bi - ai - 1]
        }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    #[test]
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
        let mut cur_len_utf16 = 0;
        }
            if self.fragment.is_empty() {
            1 if self.selection[0].is_caret() => {
    fn find_base_1() {
                        first_sample_timestamp,
                    text.slice_to_string(start, end)
    enum MergeTestOp {
        }
        assert_eq!(0, r.line_of_offset(a.len() - 1));
            pos += 1;
    /// The session ID used to create new `RevId`s for edits made on this device
                (!region.is_upstream() && c == start_pos) ||

            to_payload("some description of the trace"))));

//     http://www.apache.org/licenses/LICENSE-2.0
pub fn samples_len() -> usize {
    ///

        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    }
                }
    where S: serde::Serializer {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    {
}
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
    }
            event_type: SampleEventType::Metadata,
categories_from_constant_array!(3);
    /// Time complexity: O(log n)
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
            Assert(2, "ab".to_owned()),
    // of the union string length *before* the first revision.
        let first_rev = engine.get_head_rev_id().token();
        Some(self.cmp(other))
        let style = style_map.merge_with_default(style);
}
/// ```rust
        let head_rev = &self.revs.last().unwrap();


        ---#--
/// fn something_expensive() -> u32 {
                } else if click_count == Some(3) {
                        let end_line = start_line + seg.n;
                                         self, text, modify);
            tombstones: Rope::default(),
        assert_tokens(&rope, &[
                        let mut word_cursor = WordCursor::new(text, region.max());
                        }
    }
            Merge(2,0),
                                deletes_bitxor: new_deletes_bitxor,
                Contents::Edit {inserts, ..} => inserts,
    }
            false
//! A rope data structure with a line count metric and (soon) other useful
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
    let mut last_priority: Option<usize> = None;
        // since one of the two deletes was gc'd this should undo the one that wasn't
        expand_by = next_expand_by;
    pub fn set_scroll(&mut self, first: i64, last: i64) {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
            MetadataType::ProcessLabels {..} => (None, None)
        ]);
    }
/// Usage of static strings is encouraged for best performance to avoid copies.

            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    }
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
///


    //TODO: implement lines_raw using ranges and delete this
    pub fn get_caret_offset(&self) -> Option<usize> {
    /// `text`. The count of a character in `deletes_from_union` represents
    }
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
                        let _ = s.pop();
            }
        let cursor = Cursor::new(self, offset);
        }
        assert_eq!(1, expand_by.len());
                // This could be done by explicitly overriding, or by tweaking the

        let region = SelRegion::caret(offset);
    out
use internal::find::FindStatus;
                    }
            Assert(0, "acbd".to_owned()),
        let d = engine.delta_rev_head(first_rev);
    }
            }
/// let mut a = Rope::from("hello world");
            }),
        assert_eq!(rope.line_of_offset(1), 0);
        assert_eq!(snapshot[4].name, "y");
impl Metric<RopeInfo> for LinesMetric {
        engine.undo([1].iter().cloned().collect());
        if offset == 0 {
            next_boundary = c.next_boundary(&l, leaf_offset);
                    rev_id: rev.rev_id,
            }
/// Create an instantaneous sample without any payload.  This is the lowest
    trace: Option<&'a Trace>,
}
                peers.push(peer);
    pub fn new_disabled() -> Self {
        ");
    fn prev(s: &String, offset: usize) -> Option<usize> {
        ];
        for i in 0..self.len() {


        where S: Into<StrCow>, C: Into<CategoriesT>
        let script = vec![
    fn undo_2() {
        let text_a = Rope::from("zcbd");
                                                        &mut line_cursor,
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            // which we can do with another peer that inserts before a and merges.
                if s.ends_with('\n') {
        }
        }
    }

        println!("{:#?}", b_delta_ops);
        }
    /// Selects an entire word and supports multi selection.


        if !self.is_point_in_selection(offset) {
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
///
                              payload: Option<TracePayloadT>,
            let start = self.line_of_offset(last_text, iv.start());
        where D: Deserializer<'de>,
                            rendered_lines.push(line);
/// have to be considered in `rebase` substantially for normal editing
        assert_eq!(2, b.offset_of_line(1));
    fn prev(s: &String, offset: usize) -> Option<usize> {
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                        deletes: transformed_deletes,
        for &(sel_start, sel_end) in sel {
        assert_eq!(0, r.line_of_offset(a.len() - 1));
}
    /// If the cursor is at the end of the rope, returns the empty string.
))]
    #[test]
        }
        a.lines_all().collect::<Vec<_>>());
            's' => SampleEventType::FlowStart,
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    }
    pub name: StrCow,
    }
    fn compute_deltas_1() {
    }
        } else {
        where S: Into<StrCow>, C: Into<CategoriesT>
// limitations under the License.
        let b_revs = basic_insert_ops(inserts, 2);

    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

            match exe_name.clone().file_name() {
    pub(crate) fn unset_find(&mut self) {
///     something_else_expensive(result);
            let matches_only = self.find_changed == FindStatusChange::Matches;
    /// An iterator over the raw lines. The lines, except the last, include the
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
        Self::with_limit_count(size / size_of::<Sample>())
        engine.edit_rev(1, 2, new_head, d2);
            AssertMaxUndoSoFar(0,2),
impl RevId {
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        }
        out.push(Revision {
            rev_id: RevId { session1: 0, session2: 0, num: 0 },

        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        let region = SelRegion::caret(offset);
        all_samples.reset_limit(config.max_samples());
        let trace = Trace::enabled(Config::default());
/// Revision 0 is always an Undo of the empty set of groups
    /// Starts a drag operation.
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        rope.line_of_offset(20);
    pub fn join(&self, sep: &str) -> String {
    fn next_grapheme_offset() {
    #[serde(rename = "cat")]
            self.idx = 0;
                len += 1;
/// See `trace_payload` for a more complete discussion.
    // * Unicode width (so CJK counts as 2)



        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();

        len
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

}
    None,
        }
    }
// Low level functions
    pub fn collapse_selections(&mut self, text: &Rope) {
        assert_eq!(snapshot[3].name, "b");
            }
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new

        let mut gc_dels = self.empty_subset_before_first_rev();
            a.push('a');
    /// Generally racy since the underlying storage might be mutated in a separate thread.

        text = new_text;
        }
        }
        let thread = std::thread::current();
    {
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        };
    /// If the cursor is at the end of the rope, returns the empty string.
    breaks: Option<Breaks>,
    CompleteDuration,
    #[serde(rename = "ts")]
            Assert(2, "ab".to_owned()),

        assert_eq!(trace.is_enabled(), true);
        assert_eq!(snapshot[4].name, "y");
            }
            rendered_styles.push(sel_end as isize - sel_start as isize);
        }
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
            Assert(0, "acrpbdzj".to_owned()),
        }
    }
}
                    })
    }
    }
        assert_eq!(snapshot[6].name, "z");
}
        max
        let a = Rope::from("a\rb\rc");
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
    }
                Ok(CategoriesT::DynamicArray(categories))
    {
/// ```
        let head_rev = &self.revs.last().unwrap();


    utf16_count

    ///
            .map(|pos| pos + 1)
/// # Arguments
/// some way.
    /// storage allocated will be limit * size_of<Sample>
                        _ => break
        }
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
pub struct View {
            return self.revs.len();
        Merge(usize, usize),
                s.len()
    /// Selects an entire word and supports multi selection.

    edit: Contents,

}
}
                                                     "insert", node)
        assert!(a != b);
            }
                match elem {
            b.push('b');

    fn line_offsets() {
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
                    let mut selection = self.selection.clone();
        ");
    #[serde(default = "default_session", skip_serializing)]
    /// Exposed for unit tests.
    pub(crate) fn get_replace(&self) -> Option<Replace> {
        let r = Rope::from(&a[..MAX_LEAF]);
        }

        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    /// Tracks whether the replacement string or replace parameters changed.
                Rope::from(s1.clone()),
}
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        // TODO: simplify this through the use of scopeguard crate
            Sample::new_instant("local pid", &[], None),

            Some(offset - len)
impl Sample {

#[derive(Clone, Debug, PartialEq, Eq)]
impl<'a> Iterator for LinesRaw<'a> {
        // creation) is:
}
struct Revision {
impl PartialEq for CategoriesT {
            offset = text.len();
            }
        self.samples.lock().unwrap().limit()

    }
    /// If `line` is equal to one plus the current number of lines,
            None
            None => text.line_of_offset(offset)
        engine.edit_rev(1, 1, first_rev, d1);
                text.offset_of_line(line)
#[inline]
    fn find_base_1() {
        // if self.end is inside this chunk, verify that it is a codepoint boundary
        let b = a.slice(1, 10);

    TRACE.enable();
            trace.instant("c", &["test"]);
    #[test]
        // creation) is:
            AssertMaxUndoSoFar(0,3),
        // the smallest values with which it still fails:
///
    }
        let utf8_offset = 13;
        priority: usize,
    #[test]
// you may not use this file except in compliance with the License.
        let mut a = Rope::from("hello world");
            SampleEventType::CompleteDuration => 'X',
            } else {
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        (self.session1, self.session2)

        Ok(exe_name) => {
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            match memchr(b'\n', self.fragment.as_bytes()) {
        assert_eq!(Some(0), a.prev_grapheme_offset(3));

                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
    }
}
    for op in b_new {
        assert_eq!("a", String::from(&tombstones_2));
                self.add_selection_by_movement(text, Movement::Up),
        }
impl PartialOrd for Sample {
            undo_group: 0,
            if sel_end_ix > sel_start_ix {
                payload: None,

    }
        }
        
            'n' => SampleEventType::AsyncInstant,
    #[test]

        let ix = self.find_rev_token(base_rev).expect("base revision not found");
                           style: &Style) -> usize {
    }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    /// An iterator over the raw lines. The lines, except the last, include the
    }
    out
        self.set_selection_raw(text, sel.into());
        let mut style_map = style_map.borrow_mut();

                                         self, text, modify);
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        let first_sample_timestamp = all_samples.front()
    /// The name to associate with the pid/tid.  Whether it's associated with
//! under `Engine::edit_rev`, which is considerably simpler than the usual
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
                self.do_selection_for_find(text, case_sensitive),
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
            }),
    }
}
        self.do_set_replace(replacement, false);
        }
/// A size, in pixel units (not display pixels).

            Insert(String),


    }
        if s.len() <= MAX_LEAF {
            let mut len = 1;
        ]);
mod tests {
        }
                Contents::Undo { .. } => panic!(),
}
        if f.alternate() {
                        })
    fn invalidate_selection(&mut self, text: &Rope) {
            rev_id_counter: 1,
    }
        use self::ViewEvent::*;
    /// Splits current selections into lines.
        let trace = Trace::enabled(Config::with_limit_count(10));
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        self.samples.lock().unwrap().limit()

    #[test]
            FindNext { wrap_around, allow_same, modify_selection } =>
    }
    if a.is_empty() {
    bytecount::count(s.as_bytes(), b'\n')

    pub fn get_head_rev_id(&self) -> RevId {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        let empty = Rope::from("");
    }

    }
        /// Groups related edits together so that they are undone and re-done
    pub fn new_duration<S, C>(name: S,
pub struct Sample {
    #[test]
    #[serde(skip_serializing_if = "Option::is_none")]
            rendered_styles.push(1);
            Assert(2, "ab".to_owned()),
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
                   style_spans: &Spans<Style>, line_num: usize) -> Value
/// Returns the operations in `revs` that don't have their `rev_id` in
/// let c = b.slice(1, 7);
    selection: Selection,
        };
    }
    #[test]
        assert_eq!(Some(3), a.next_grapheme_offset(0));
        self.revs.iter().enumerate().rev()
/// ```

        // creation) is:
    // trace_block()/trace_closure
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
            while !s.is_char_boundary(offset - len) {
    /// the same even if it is rebased or merged between devices.
                        ops.push(self.build_update_op("copy", None, seg.n));
            MergeTestState { peers }
    type Item = u8;
        }
                         styles: &StyleMap, style_spans: &Spans<Style>,
            SampleEventType::DurationEnd => 'E',
        // likely be improved.
            Merge(0,2), Merge(1, 2), Merge(3, 2),

                        } else {
pub fn samples_cloned_sorted() -> Vec<Sample> {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));

    None,
    pub fn set_size(&mut self, size: Size) {
    #[serde(skip_serializing_if = "Option::is_none")]
// ======== Merge helpers
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
        self.samples.lock().unwrap().len()
    }
        let all_samples = self.samples.lock().unwrap();
    }
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        }
            }
            view_id: view_id,
extern crate serde_json;
    }
        }
        let mut d_builder = Builder::new(TEST_STR.len());
    /// The maximum number of entries the tracing data should allow.  Total
///
    }
        let mut ix = 0;
pub type TracePayloadT = StrCow;
    fn eq_med() {
        };
    }
    }
        
            retain_revs.insert(last.rev_id);
    /// revision, and so needs a way to get the deletion set before then.
use std::str;
/// # Examples
/// Tracing is disabled initially on program launch.
            AddSelectionAbove =>

        let correct = parse_subset_list("

        assert_eq!(2, a.offset_of_line(1));
        let mut cursor = Cursor::new(self, offset);
        let a = Rope::from("a");
    ///
                Contents::Edit {inserts, ..} => inserts,
        let new_deletes_from_union = {
    out.as_mut_slice().reverse();
    fn bench_get_pid(b: &mut Bencher) {
}
    use engine::*;
        for rev in old_revs.into_iter().rev() {
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    TRACE.enable_config(config);
        assert_eq!(2, a.line_of_offset(4));
                edit: contents.clone()
        assert_eq!(snapshot[4].name, "z");
        let mut hasher = DefaultHasher::new();
                return false;
    }
                    };
    #[serde(skip_serializing_if = "Option::is_none")]
    }
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),


        // send updated replace status if changed

                self.set(pos);
        self.iter_chunks(0, self.len())
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
use std::borrow::Cow;
            duration_us: None,
impl CategoriesT {

        let closest_occurrence = self.find.iter().flat_map(|x|
            sample_limit_count: limit
        assert_eq!(trace.get_samples_limit(), 20);
                first_sample_timestamp,
            Assert(0, "zcbd".to_owned()),
            trace.instant("test_samples_pulse", &["test"]);
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        engine.undo([1].iter().cloned().collect());
    /// unsaved changes.
        engine.undo([1].iter().cloned().collect());

impl PartialEq for CategoriesT {
                }



/// With `json_payload` feature:
        s.is_char_boundary(offset)
        ];
            if sel_end_ix > sel_start_ix {
    ///
            let first_rev = engine.get_head_rev_id().token();
use xi_rope::delta::Delta;
        use self::MergeTestOp::*;
    enabled: AtomicBool,
                },
            while !s.is_char_boundary(offset - len) {
    {
            if let GraphemeIncomplete::PreContext(_) = incomp {
            duration_us: Some(ns_to_us(duration_ns)),
                    .with_horiz(horiz)
        let mut rendered_styles = Vec::new();
        let mut cursor = Cursor::new(self, offset);
        let first_rev = engine.get_head_rev_id().token();

        let rev = Revision {
        });
    fn to_payload(value: &'static str) -> TracePayloadT {
        let text_with_inserts = text_ins_delta.apply(&self.text);

    selection: Selection,
                // This could be done by explicitly overriding, or by tweaking the

        assert_eq!(samples[0].name, "remote pid");
        use self::MergeTestOp::*;
    #[bench]
                    }


    /// concurrently it will have count `2` so that undoing one delete but not
        b.iter(|| black_box(sys_tid::current_tid()));
        let height = self.line_of_offset(text, text.len()) + 1;
    }
            self.idx += 1;
    /// from the rope.

                        let n_skip = seg.their_line_num - line_num;
                            edit: Undo {
        all_samples.reset_limit(0);
    /// The maximum number of bytes the tracing data should take up.  This limit

            Merge(1,0), Merge(2,0),
        let plan = RenderPlan::create(height, self.first_line, self.height);
/// # use xi_rope::Rope;
        match *self {

use std;
            SampleGuard::new(&self, name, categories, None)
//! pending edit in flight each.
#[inline]

    }
        match rev.edit {
extern crate serde;
        let head_rev = &self.revs.last().unwrap();
            Revision {
            GotoLine { line } => self.goto_line(text, line),
impl<'a> Drop for SampleGuard<'a> {
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
#[inline]
    }
        &leaf[offset..end]
    }
            std::thread::sleep(std::time::Duration::new(0, 1000));
        trace.instant("3", &["test"]);
    }

    revs: Vec<Revision>,
            }
                    selection.add_region(occ);
        while let Err(incomp) = next_boundary {
        count_utf16_code_units(&s[..in_base_units])
        for _i in 0..50 {
            rendered_styles.push(1);
    /// Note: unlike movement based selection, this does not scroll.
        max
        // TODO(vlovich): optimize this path to use the Complete event type
    max_undo_so_far: usize,
                        hls.push((sel_start_ix, sel_end_ix));
/// for single user cases, used by serde and ::empty
        let trace = Trace::enabled(Config::with_limit_count(10));
    //TODO: implement lines_raw using ranges and delete this
            engine.edit_rev(0, 0, first_rev, delta);
    }
    /// Note: `edit` and `edit_str` may be merged, using traits.
        selection.add_region(region);
        trace.record(guard.sample.as_ref().unwrap().clone());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },

        let text_b = Rope::from("zpbj");
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
        if self.is_enabled() {

            rendered_styles.push(sel_end as isize - sel_start as isize);
    #[test]
    fn can_fragment() -> bool {
impl Config {
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
                    result = cow_append(result, self.fragment);
pub type SessionId = (u64, u32);
        let text_with_inserts = text_inserts.apply(&text);
impl StringArrayEq<[&'static str]> for Vec<String> {
// Unless required by applicable law or agreed to in writing, software
        }, to_payload("test_get_samples_nested_trace"));
        b.build()
                        let mut word_cursor = WordCursor::new(text, region.max());
// limitations under the License.
        let mut style_map = style_map.borrow_mut();
        assert_eq!(utf16_units, 20);
            rendered_styles.push(sel_end as isize - sel_start as isize);
        if all_samples.is_empty() {
        // Any edit cancels a drag. This is good behavior for edits initiated through
        let text_with_inserts = text_ins_delta.apply(&self.text);
        struct RopeDelta_ {
                    RopeDeltaElement_::Copy(start, end) =>
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
    pub fn with_limit_bytes(size: usize) -> Self {
            }
pub enum SampleEventType {
/// overhead tracing routine available.
use tabs::{ViewId, BufferId};
                    text.slice_to_string(region.min(), region.max())
        engine.edit_rev(1, 3, new_head_2, d3);
    fn bench_trace_block_disabled(b: &mut Bencher) {
                Some(offset)
            Assert(1, "arpbzj".to_owned()),
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.replace.clone()
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
                        deletes_from_union
use tabs::{ViewId, BufferId};
        let r = r + Rope::from(&b[MIN_LEAF..]);
use movement::{Movement, region_movement, selection_movement};
    max: usize,
        }
    /// Replacement string.
    fn lines_med() {
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
            let _ = trace.block("test_samples_block", &["test"]);

            GestureType::ToggleSel => self.toggle_sel(text, offset),
        let head = engine.get_head_rev_id().token();

    #[test]
    /// The state for finding text for this view.
        }
                                     event_type: SampleEventType)
        if let Some(lines) = lines {
        let inserts = parse_subset_list("

            }
pub struct LinesMetric(usize);  // number of lines
    #[serde(rename = "ts")]
                sel
            trace.closure_payload("y", &["test"], || {
        let script = vec![
        for chunk in self.iter_chunks(start, end) {
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
                match elem {
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    view_id: ViewId,
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }

    }
impl Add<Rope> for Rope {
                leaf_offset = self.pos() - noffset;
                    if !inserts.is_empty() {
    }
                payload: None,
    fn merge_priorities() {
            }
    }
        Self {
}
        // todo: this will be changed once multiple queries are supported

}

categories_from_constant_array!(2);
        ];

                    if !inserts.is_empty() {

        as_vec.extend(all_samples.iter().cloned());
        // and it only needs to be consistent over one execution.
        // creation) is:
    pub fn get_samples_count(&self) -> usize {
/// the `base_revs`. This allows the rest of the merge to operate on only
        -##-
    /// The state for replacing matches for this view.
        cursor.prev::<BaseMetric>()
///
                self.do_selection_for_find(text, case_sensitive),
                                                        &mut line_cursor,

            Merge(0,1),
    }
                    } else {
///
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
            Assert(1, "abefg".to_owned()),
            }
        }
            }
    // possible to fix it so that's not necessary.
        /// should go before typed text.
            Assert(2, "ab".to_owned()),
        revs.append(&mut revs_2);
        let deletes_from_union_b = parse_subset("-#---");
            }

    }
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        let guard = Self {
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
/// # use xi_rope::Rope;
                offset = prev;
                },
            panic!("line number {} beyond last line {}", line, max_line);
                    if undone_groups.contains(undo_group) {
        for i in 1..(s1.len() * 3) {
        } else {
                    };
    }
    }
    {
        self.scroll_to = Some(end);
        assert_tokens(&rope, &[
            if let GraphemeIncomplete::PreContext(_) = incomp {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

        engine.edit_rev(1, 1, first_rev, build_delta_1());
        // NOTE 2: from_micros is currently in unstable so using new
    /// Does a drag gesture, setting the selection from a combination of the drag
/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(trace.get_samples_count(), 0);
        let mut engine = Engine::new(Rope::from(TEST_STR));
            if region.is_caret() {
    inserts: InsertDelta<RopeInfo>,
    end: usize,
    {
            SampleEventType::DurationEnd => 'E',
        let tombstones = Rope::from("27");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    pub fn enable(&self) {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
        };

            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    fn next(&mut self) -> Option<Cow<'a, str>> {
    #[bench]
        // +2 for exe & thread name
        memchr(b'\n', &s.as_bytes()[offset..])
        self.rev_id_counter += 1;

        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
            let head = engine.get_head_rev_id().token();
        assert_eq!(snapshot[5].name, "b");
            // d-expand by other
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
            MetadataType::ProcessName {name} => (Some(name), None),
    edit: Contents,
        let first_rev = engine.get_head_rev_id().token();
                    if !inserts.is_empty() {
        } else {
/// ```
    // TODO make this faster somehow?
        if self.current.is_none() {
        samples.sort();
                MergeTestOp::Assert(ei, ref correct) => {
        // TODO: may make this method take the iv directly
            end,
}
        }
            if let GraphemeIncomplete::PreContext(_) = incomp {

        // even though the actual sampling order (from timestamp of
    }
/// Create an instantaneous sample with a payload.  The type the payload
    }
    #[bench]
    /// Selects an entire line and supports multi selection.
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
                warn!("Usage of click is deprecated; use do_gesture");
                for &region in rest {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
use std::fmt;
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
        --#--
    }
///
    }
        assert_eq!(0, r.line_of_offset(a.len() - 1));
    fn measure(info: &RopeInfo, _: usize) -> usize {

    priority: usize,
mod tests {
            Assert(3, "ab".to_owned()),
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
    }
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
            }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
}
// You may obtain a copy of the License at

                edit: contents.clone()
    /// Only works well for ASCII, will probably not be maintained long-term.
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
                Contents::Edit {inserts, ..} => inserts,
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        self.text = new_text;
        let mut sel = self.selection.clone();
                    let head = e.get_head_rev_id().token();
        }
        let mut pos = self.pos();
            categories: Some(categories.into()),

        let rope = Rope::from("hi\ni'm\nfour\nlines");
                    } else {
    #[test]

        }
///


            "something", &["benchmark"],
        }
    #[test]

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
// ======== Generic helpers
        self.undone_groups = groups;
/// }
                //self.end - prev_pos
        r.slice_to_string(0, r.len())
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        a.push('\n');
        assert_eq!(snapshot.len(), 9);
        a.push('\n');
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
            Assert(1, "ab".to_owned()),
            black_box(trace.block_payload(
    let mut s = Subset::new(head_len);
            // I think it's a precondition that this will never be called
/// How tracing should be configured.
        let expand_by = compute_transforms(a_revs);
        }
        self.buffer_id
                MergeTestOp::AssertAll(ref correct) => {
    }
                let mut sel = Selection::new();
                    // we don't want new revisions before this to be transformed after us
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
    /// The selection state for this view. Invariant: non-empty.

                                gc_dels = gc_dels.transform_union(inserts);
        if self.highlight_find {
                }
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        engine.gc(&gc);
//! CRDT implementation techniques, because all operations are serialized in
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    #[test]
                    let transformed_deletes = deletes.transform_expand(&s);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
                    }
            Some((l, off)) => (l, off),
    inserts: InsertDelta<RopeInfo>,
use movement::{Movement, region_movement, selection_movement};
use unicode_segmentation::GraphemeCursor;
    /// Selects the next find match.
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        assert_eq!(snapshot[6].name, "z");
                    priority, inserts, deletes,
        }
        Self {
    }

        // position after 'f' in four

    }
    }
        _ => 4
    fn test_trace_disabled() {
/// # Arguments
            drag_state: None,
        assert_eq!(rope.offset_of_line(4), rope.len());
            selection: SelRegion::caret(0).into(),
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        }).collect();
    /// Time complexity: technically O(n log n), but the constant factor is so
        }
            find: Vec::new(),
        use self::MergeTestOp::*;
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
    }
        in_base_units

}

// You may obtain a copy of the License at
        let inserts = parse_subset_list("
    // transform representing the characters added by common revisions after a point.
        let mut ix = 0;
    }
impl Serialize for Rope {
    idx: usize,
            rendered_styles.push(0);
        self.len() >= MIN_LEAF
        }
        let cur_deletes_from_union = &self.deletes_from_union;
    /// assumed to be forward).
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
                    // of which undos were used to compute deletes_from_union in edits may be lost.

}
            rev_id: self.next_rev_id(),
                payload: payload,
        for &(trans_priority, ref trans_inserts) in &expand_by {
        let mut hasher = DefaultHasher::new();
//! This module actually implements a mini Conflict-free Replicated Data Type
        let b = a.slice(2, 4);
            Merge(0,2), Merge(1, 2),
    }
            // trans-expand other by expanded so they have the same context
                         hls: &[(usize, usize)],
    /// When was the sample started.
    #[test]
    priority: usize,
    /// method to be fast even when the selection is large.

        self.convert_metrics::<LinesMetric, BaseMetric>(line)
use std::collections::hash_map::DefaultHasher;
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        }
/// monotonically increasing single global integer (when tracing) per creation
        use self::MergeTestOp::*;
        ---#--
/// samples are ordered chronologically for several reasons:
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    }
    }
            engine.undo(undos);
            self.next::<BaseMetric>();
    }
        for r in &self.revs[ix + 1..] {

pub struct RevId {
    #[test]
        let start_pos = start_of_line.pos();
/// 3. You may not care about them always being sorted if you're merging samples
                                gc_dels = gc_dels.union(deletes);
type StyleMap = RefCell<ThemeStyleMap>;

        // since one of the two deletes was gc'd this should re-do the one that wasn't
            let c = region.end;

//! pending edit in flight each.
    #[bench]
    /// controlled by features (default string).
                self.find_changed = FindStatusChange::All;
                    let e = &mut self.peers[ei];
    fn bench_trace_closure(b: &mut Bencher) {
        let a = Rope::from("a\nb\nc");
/// A static string has the lowest overhead as no copies are necessary, roughly
    /// Get next codepoint after cursor position, and advance cursor.
        /// Used to order concurrent inserts, for example auto-indentation
        // original values this test was created/found with in the UI:
            }


            Merge(0,2), Merge(1, 2),
    #[test]
        }
        assert_eq!(snapshot[1].name, "thread_name");
                        ops.push(self.build_update_op("copy", None, seg.n));
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
impl<'de> serde::Deserialize<'de> for CategoriesT {
    pub timestamp_us: u64,
        if let Some(ref mut trace) = self.trace {
        if self.len() != other.len() {
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    fn test_disable_drops_all_samples() {
    use engine::*;
pub struct BaseMetric(());
            end -= 1;
    use super::*;


    /// Invalidates the styles of the given range (start and end are offsets within
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
        -> R
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
/// Measured unit is newline amount.
        /// The subset of the characters of the union string from after this
    #[serde(skip_serializing_if = "Option::is_none")]

                            (inserts, deletes)
        };
            deletes_from_union = match rev.edit {

    fn can_fragment() -> bool {
    pub fn get_caret_offset(&self) -> Option<usize> {
use std::ops::Add;

    TRACE.samples_cloned_sorted()
        }
        // since character was inserted after gc, editor gcs all undone things
/// monotonically increasing single global integer (when tracing) per creation
    use test::Bencher;
        /// Just the `symmetric_difference` (XOR) of the two sets.
    pub height: f64,
    /// This function will panic if `offset > self.len()`. Callers are expected to
            Merge(1,2),
        min
    }
use interval::Interval;
    // recompute the prefix up to where the history diverges, but it's not clear that's
    /// Get next codepoint after cursor position, and advance cursor.
    use engine::*;
                    };
    pub metadata_sort_index: Option<i32>,
            AddSelectionBelow =>
            }
        engine.undo([1,2].iter().cloned().collect());
            }
    ObjectSnapshot,
        // current recording mechanism should see:
    /// 96 bits which is more than sufficient for this to never happen.


    /// Returns the byte offset corresponding to the line `line`.
            // Snap to grapheme cluster boundary
/// The payload associated with any sample is by default a string but may be
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let mut pos = self.pos();

///
    // callers should be encouraged to use cursor instead
    /// finer grain invalidation.
/// Creates a duration sample that measures how long the closure took to execute.
            while !s.is_char_boundary(offset - len) {
        let height = self.line_of_offset(text, text.len()) + 1;
}
    pub fn next_grapheme(&mut self) -> Option<usize> {
    }
        } else {

/// ```
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        samples.sort();
    }
use internal::find::FindStatus;
    breaks: Option<Breaks>,
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        let is_base = base_revs.contains(&rev.rev_id);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]

        if self.is_enabled() {
}

            GestureType::MultiWordSelect =>
        samples[1].pid = 2;
    /// Width in px units, requiring measurement by the front-end.
            }
impl<T: AsRef<str>> From<T> for Rope {
/// * `categories` - A static array of static strings that tags the samples in
            Assert(5, "zacpb".to_owned()),
}
        let mut sel = self.selection.clone();
impl<'a> Iterator for ChunkIter<'a> {
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
            Insert(String),
    pub fn get_head_rev_id(&self) -> RevId {
            trace.instant("c", &["test"]);

        self.enabled.store(true, AtomicOrdering::Relaxed);
        // send updated find status only if there have been changes
    fn eq_med() {
extern crate serde_derive;
            Some(Cow::Borrowed(mut s)) => {

            edit: Undo { toggled_groups, deletes_bitxor }
    #[test]
    text: Rope,

                find_leaf_split_for_bulk(s)
            }
        }
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        assert_eq!(snapshot[4].name, "y");
        impl<'de> Visitor<'de> for CategoriesTVisitor {
    out.as_mut_slice().reverse();
                    self.fragment = "";
            trace.closure("something", &[], || ());
        let all_samples = self.samples.lock().unwrap();
            Assert(0, "ab".to_owned()),
                } else if click_count == Some(2) {
        while offset < l.len() && !l.is_char_boundary(offset) {
impl<T: AsRef<str>> From<T> for Rope {
    }
        loop {
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
            SampleEventType::Instant => 'i',
        // selection state, and for scrolling it into view if needed. This choice can
            min: offset,
        --#--
/// A flag used to indicate when legacy actions should modify selections
    }
                // This could be done by explicitly overriding, or by tweaking the
            Assert(1, "abc".to_owned()),
        if !gc_dels.is_empty() {
//! A rope data structure with a line count metric and (soon) other useful
            //let prev_pos = self.cursor.pos();

    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
            self.record(Sample::new_instant(name, categories, None));
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
// utility function to clamp a value within the given range
        where D: Deserializer<'de>,
{


                        }
///
                    .with_affinity(affinity)
        self.sample_limit_count
            match memchr(b'\n', &s.as_bytes()[offset..]) {
                let (pl, poffset) = self.prev_leaf()?;
        }
        ];
        Ok(b.build())
        where D: Deserializer<'de>,

                }
    pub tid: u64,
                metadata_sort_index: sort_index,
    }
        assert_eq!("a", String::from(&tombstones_2));
        let correct = parse_subset_list("
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
}

        d
// Unless required by applicable law or agreed to in writing, software
    {
        a.lines_all().collect::<Vec<_>>());
            args: Some(SampleArgs {
/// # Examples
    /// Start of the region selected when drag was started (region is
    find: Vec<Find>,
// ======== Merge helpers
    {
                }
                                deletes_bitxor: new_deletes_bitxor,
/// std::mem::drop(trace_guard); // finalize explicitly if

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
categories_from_constant_array!(1);
    pub timestamp_us: u64,

        self.send_update_for_plan(text, client, styles,
            }
        }
        let end = time::precise_time_ns();
            SampleEventType::FlowEnd => 'f',
    /// Highlights are only rendered when search dialog is open.
            if self[i] != other[i] {
        a.lines_all().collect::<Vec<_>>());

    /// The incrementing revision number counter for this session used for `RevId`s
            cursor: Cursor::new(self, start),

            engine.undo(to_undo.clone());
            "op": op,
    pub fn next_codepoint(&mut self) -> Option<char> {
///
                   style_spans: &Spans<Style>, line_num: usize) -> Value
        match *self {
//! which is sufficient for asynchronous plugins that can only have one
    let mut s = Subset::new(head_len);

#![cfg_attr(feature = "collections_range", feature(collections_range))]

        self.pending_render
        assert!(a.slice(0, 0) == empty);
                    text.slice_to_string(region.min(), region.max())
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
            self.shrink_to_fit();
        let text_b = Rope::from("zpbj");
/// See `trace_payload` for a more complete discussion.
// should make this generic, but most leaf types aren't going to be sliceable

        let inserts_1 = parse_subset_list("

            utf16_count += 1;
use memchr::{memrchr, memchr};

        assert_eq!(2, r.line_of_offset(r.len()));
        } else {
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(Some(10), a.next_codepoint_offset(6));
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
                self.add_selection_by_movement(text, Movement::Down),
    }

                self.select_line(text, offset, line, false),
                    result = cow_append(result, self.fragment);
    enabled: AtomicBool,
                    result = cow_append(result, &self.fragment[.. i + 1]);
        assert_eq!(utf16_units, 11);
            Merge(0,2),


        let deletes_from_union_b = parse_subset("-#---");
            'n' => SampleEventType::AsyncInstant,
    }

            None
                WrapWidth::Width(px) =>
        assert_eq!(1, a.line_of_offset(2));
        let correct = parse_subset_list("

                        sample.tid));
        assert_eq!(1, res);
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        let guard = Self {
/// associated performance hit across the board for turning it on).

use xi_rope::interval::Interval;
    #[test]

    }
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        plan.request_lines(first_line, last_line);
    /// Selects an entire line and supports multi selection.
#[derive(Copy, Clone)]
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        engine.edit_rev(1, 1, first_rev, d1.clone());
        match self.selection.len() {
            match c.edit {
/// first can make it ~1.7x slower than a regular trace.
    },
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// # Examples
    enum MergeTestOp {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        } else {
        let new_sel = selection_movement(movement, &self.selection,
        engine.gc(&to_undo);
    #[should_panic]
    #[test]
    Instant,
    rev_id: RevId,
            Assert(0, "adc".to_owned()),

        let first_sample_timestamp = all_samples.front()
    #[serde(deserialize_with = "deserialize_event_type")]
    }
        }
            if self.fragment.is_empty() {
}
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
        if let Some(ix) = style_map.lookup(style) {

}
        }).collect()
        let mut leaf_offset = pos - offset;
                        deletes_from_union = deletes_from_union.transform_union(inserts);
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
            }
pub type SessionId = (u64, u32);
        where S: Into<StrCow>, C: Into<CategoriesT>
        *self = b.build();
                    };
        assert_eq!(None, a.prev_grapheme_offset(0));
    fn basic_rev(i: usize) -> RevId {

}
}
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
{
        assert_eq!(Some(8), a.next_grapheme_offset(0));
        assert_eq!(1, res);

    }
            Revision {
            deletes_from_union,
/// same priority into one transform to decrease the number of transforms that
        x
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
                            plan: &RenderPlan, pristine: bool)
                                                        &mut line_cursor,
    #[bench]
            AddSelectionAbove =>
pub struct Config {
            let mut len = 1;
        struct CategoriesTVisitor;
                                deletes,
        self.send_update_for_plan(text, client, styles,
    session1: u64,

        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            }
            if self[i] != other[i] {

                    .with_affinity(affinity)
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
///
                // TODO: small nit, merged region should be backward if end < start.
    pub fn collapse_selections(&mut self, text: &Rope) {


#[inline]
                                deletes.transform_shrink(&gc_dels))
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
/// Create a `Rope` from a `String`:
            }
        where S: Into<StrCow>, C: Into<CategoriesT>
            Gesture { line, col, ty } =>
    #[cfg(feature = "benchmarks")]
/// an argument.
        }
        let invalid = if all_caret {
            AssertMaxUndoSoFar(1,3),
        assert_eq!("#---#--", &subset_str);
                max_undo_so_far: i,
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
///
    fn to_payload(value: &'static str) -> TracePayloadT {
        // +2 for exe & thread name.
            trace: None,
    fn compute_deltas_1() {
    fn utf16_code_units_metric() {
//
        }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                            let line = self.render_line(client, styles, text,
    fn deserialize<D>(deserializer: D)
                } else {
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        }
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
            GestureType::MultiLineSelect =>

        println!("{:#?}", b_delta_ops);
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
    fn from(c: Vec<String>) -> CategoriesT {
        }

    }
        let start = time::precise_time_ns();
//     http://www.apache.org/licenses/LICENSE-2.0
                    if s.ends_with('\r') {
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    /// the same even if it is rebased or merged between devices.
                                        &selections, &hls, style_spans);
        engine.edit_rev(1, 2, first_rev, d1.clone());
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        self.send_update_for_plan(text, client, styles,

            b.push('b');
    wrap_col: WrapWidth,

impl<T: AsRef<str>> From<T> for Rope {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
/// Atomicity is implicit, putting the offset
            Assert(2, "b".to_owned()),
    /// Move the selection by the given movement. Return value is the offset of
    }
use linewrap;
        self.revs.last().unwrap().rev_id
/// Returns all the samples collected so far ordered chronologically by
                }
    /// revision, and so needs a way to get the deletion set before then.

        AssertMaxUndoSoFar(usize, usize),
            }
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
                l = nl;
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {

        let end = self.sel_regions().last().unwrap().end;
        in_base_units

            edit: Contents::Edit {
        _ => 4
type StyleMap = RefCell<ThemeStyleMap>;
        match *self {
    /// Select entire buffer.
        a.lines_all().collect::<Vec<_>>());

        // if we have active find highlights, we don't collapse selections
            pending_render: false,
            Move(movement) => self.do_move(text, movement, false),
        self.len() >= MIN_LEAF
        }
        if let Some(occ) = closest_occurrence {
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    /// Returns the largest undo group ID used so far

            Move(movement) => self.do_move(text, movement, false),
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
/// discussion on payload.
        b.iter(|| black_box(trace.closure_payload(

        assert_eq!(trace.get_samples_count(), 0);

            Assert(0, "zacpbdj".to_owned()),
    out
use internal::find::FindStatus;
        }
                sel
mod fixed_lifo_deque;
        }
    }
    replace_changed: bool,
    fn scroll_to_cursor(&mut self, text: &Rope) {
        where S: Into<StrCow>, C: Into<CategoriesT>
        offset
    }
    fn can_fragment() -> bool { true }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
use bytecount;
        self.text = new_text;
    }
    }
                             client: &Client, style_spans: &Spans<Style>)

        };
        RopeInfo {
        // multiple queries; select closest occurrence
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    fn edit_rev_undo() {
    StaticArray(&'static[&'static str]),
        let all_caret = self.selection.iter().all(|region| region.is_caret());
    find_leaf_split(s, MIN_LEAF)
    pub fn session_id(&self) -> SessionId {
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    #[test]
        }).collect()
            }
//     http://www.apache.org/licenses/LICENSE-2.0
}
        }
    fn line_of_offset_small() {
            Merge(0,2), Merge(1, 2),
                        hls.push((sel_start_ix, sel_end_ix));
    /// update cycle. This should be a last resort, updates should generally cause
                pos = leaf_offset + pl.len();
            }
}
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
                                                                0, "copy", 2)?;
impl fmt::Debug for Rope {

/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
{
            // which we can do with another peer that inserts before a and merges.
    idx: usize,
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
    /// after an edit is applied, to allow batching with any plugin updates.

    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    priority: usize,
    #[inline]
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
            rev_id_counter: 1,
        use self::MergeTestOp::*;
        ");
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
            match rev.edit {
        } else {
                self.select_word(text, offset, false),
        if offset >= text.len() {
        let subset_str = format!("{:#?}", expand_by[1].1);
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
                }
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        self.height
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
        self.subseq(iv)
    /// from the rope.
        Lines {
/// For example, take a string that starts with a 0xC2 byte.
    }
            trace.instant("something", &[]);
    #[test]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
                Contents::Edit {inserts, ..} => inserts,
    ///
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
/// Find an index before which everything is the same
        self.lines += other.lines;
    }
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
/// than a string that needs to be copied (or ~4.5x slower than a static string)

}
        if let Some(sel) = new_sel {
    /// should be as unlikely to collide as two random u64s.

                             client: &Client, style_spans: &Spans<Style>)
        let mut hls = Vec::new();
    }


    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    #[serde(skip_serializing)]
        deserializer.deserialize_str(CategoriesTVisitor)
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);

    }

    /// Return the byte offset corresponding to the line number `line`.
        let initial_rev = engine.get_head_rev_id().token();
        use self::MergeTestOp::*;

use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
        self.lc_shadow = b.build();
    }
    }
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
    #[bench]
    /// concurrently it will have count `2` so that undoing one delete but not
    fn undo_5() {
    out.as_mut_slice().reverse();
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            }
}
// Licensed under the Apache License, Version 2.0 (the "License");
extern crate serde_json;
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                let line = line.min(text.measure::<LinesMetric>() + 1);
                            }
            edit: Contents::Edit {
    ///
/// ```rust
    /// the other doesn't make it re-appear.

            els: Vec<RopeDeltaElement_>,

            if let GraphemeIncomplete::PreContext(_) = incomp {
                    return None;
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                }
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));

        /// revision that were added by this revision.
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        if self.is_enabled() {
    }
    /// The line number is 0-based, thus this is equivalent to the count of newlines

    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        engine.undo([3].iter().cloned().collect());

/// # Arguments
        } else { // no toggled groups, return past end
                peer.set_session_id(((i*1000) as u64, 0));
    let mut out = Vec::with_capacity(b_new.len());
            SampleGuard::new(&self, name, categories, None)
        self.drag_state = Some(DragState {
        }
        let mut offset = 0;
    TRACE.disable();
            buffer_id: buffer_id,
    fn into_chrome_id(&self) -> char {
    /// When was the sample started.
        assert_eq!(trace.is_enabled(), true);
    }

}
        assert_eq!("#---#--", &subset_str);
            scroll_to: Some(0),

        let correct = parse_subset_list("
/// ```rust,ignore
///
    fn test_cross_process_samples() {
            max_undo_so_far: 0,
    /// This method is responsible for updating the cursors, and also for
                    els: delta.els.drain(..)
        let deletes_from_union = Subset::new(0);
                rev_id: basic_rev(i),
            Assert(5, "zacpb".to_owned()),
    }
            Assert(2, "adfc".to_owned()),

                continue;
    }
        self.set_selection(text, sel);
// You may obtain a copy of the License at
        let d = RopeDelta_::deserialize(deserializer)?;
        assert_eq!(rope.offset_of_line(0), 0);
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
            for &occurrence in find.occurrences().iter() {
/// * `name` - A string that provides some meaningful name to this sample.
        // multiple queries; select closest occurrence
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
    }
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
                         hls: &[(usize, usize)],
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        engine.edit_rev(1, 2, first_rev, d1.clone());
            }
    Edit {
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {

    {
    fn line_offsets() {
    }

pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
        (self.pid, self.timestamp_us).hash(state);
    }
    // this should have the same behavior, but worse performance
    }
    }
        // NOTE: we derive to an interim representation and then convert

        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
                    "something", &["benchmark"],
                self.do_selection_for_find(text, case_sensitive),
                    } else {
        // probably change as the recording internals change.

    // Delta that deletes the right bits from the text

    // * Unicode codepoints
                        word_cursor.select_word()
    fn eq(&self, other: &Sample) -> bool {
            trace: None,
use bytecount;
#[derive(Clone, Copy)]
    }
                        } else {
    1
    }
    fn bench_trace_closure_payload(b: &mut Bencher) {
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
            highlight_find: false,

        for i in ((edits-max_undos)..edits).rev() {
        let mut pos = self.pos();
    // TODO find the maximum base revision.
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
            } else if incomp == GraphemeIncomplete::PrevChunk {
        }
    #[test]
        }
    ObjectDestroyed,
/// revisions on top of the revisions represented by `expand_by`.
            if i >= max_undos {
    fn next(s: &String, offset: usize) -> Option<usize> {

                        } else {
    /// how many times it has been deleted, so if a character is deleted twice
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
            r = op.inserts.apply(&r);
        } else {

                _ => panic!("to_base_units called with arg too large")
    {
    /// borrowed from the rope.
        let mut b = String::new();
/// Computes a series of priorities and transforms for the deltas on the right
            client.scroll_to(self.view_id, line, col);
            return ix;
    }
        for r in &self.revs[ix + 1..] {

            utf16_size: count_utf16_code_units(s),
        let mut revs = basic_insert_ops(inserts_1, 1);
                let offset = self.selection[0].start;
        // creation) is:
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;

            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));

        b.iter(|| black_box(trace.closure_payload(

/// required). Mutations are generally copy-on-write, though in-place edits are
        // rebase insertions on text and apply
        }
/// A flag used to indicate when legacy actions should modify selections
    /// Offset of the point where the drag started.

/// Usage of static strings is encouraged for best performance to avoid copies.
    }
    fn render_line(&self, client: &Client, styles: &StyleMap,
        }
    }
            // The deletes are already after our inserts, but we need to include the other inserts
            height: 10,
/// Represents a transform from one rope to another.

    /// Note: unlike movement based selection, this does not scroll.
            a = a + Rope::from(&c);
        self.size = size;

#[inline]
                    }

                metadata_sort_index: None,
            match seg.tactic {
        let b = a.slice(2, 4);
            cur_len_utf8 += u.len_utf8();
    Matches
    }
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        // TODO: simplify this through the use of scopeguard crate
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
        if offset == 0 {
            None
    fn measure(info: &RopeInfo, _: usize) -> usize {
    /// Selects the given region and supports multi selection.
        }
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    }
        let d = engine.delta_rev_head(first_rev);
        Self::with_limit_count(size / size_of::<Sample>())
/// Revision 0 is always an Undo of the empty set of groups
                    a.merge(b);
            }, to_payload("test_get_samples_nested_trace"));
    TRACE.closure_payload(name, categories, closure, payload)


/// acquires a dependency on the `serde_json` crate.
}
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
/// Create an instantaneous sample with a payload.  The type the payload
                    return i + 1; // +1 since we know the one we just found doesn't have it

        ];
            //self.cursor.set(self.end);

        result
//! this central engine. It provides the ability to apply edits that depend on
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
            Merge(0,2), Merge(1, 2),
                              duration_ns: u64) -> Self
    }
#[inline]
/// Returns all the samples collected so far ordered chronologically by
                },
        -> Self

    fn merge_whiteboard() {
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

                SelectionModifier::Set => self.set_selection(text, occ),
    ///

            self.next()

            self.set_selection(text, sel);
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        }
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
        }
            edit: Contents::Edit {
            if i >= max_undos {
            },
/// Enable tracing with the default configuration.  See Config::default.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        // interior of first line should be first line
pub fn trace<S, C>(name: S, categories: C)
        let empty = Rope::from("");
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    }
//! This module actually implements a mini Conflict-free Replicated Data Type
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
pub struct Size {
pub enum CategoriesT {
/// version of Ropes, and if there are many copies of similar strings, the common parts

    /// in the slice up to `offset`.


            let common = find_common(a_to_merge, b_to_merge);
///
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
    Bytes(usize),
    /// Does a drag gesture, setting the selection from a combination of the drag
            self.set_dirty(text);
        assert!(end <= leaf.len());
        assert_eq!(Some(3), a.next_codepoint_offset(1));
extern crate serde_derive;
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
        }
}

                } else {
                None => {
    if x < min {
        self.size = size;
            match self.wrap_col {
        ");
            }
                        None if cursor.pos() == text.len() => cursor.pos(),
        Ok(b.build())
    }
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
fn find_leaf_split_for_bulk(s: &str) -> usize {

            Assert(1, "acb".to_owned()),
            _ => None
    /// should be as unlikely to collide as two random u64s.
                    // can only happen on empty input
    }

                self.set_dirty(text);

    /// the frontend.
    #[test]
                        _ => break
/// some way.
/// });
/// patterns. Any large runs of typing in the same place by the same user (e.g
            enabled: AtomicBool::new(true),


    ///
        for i in ((edits-max_undos)..edits).rev() {
                    text.slice_to_string(start, end)
            wrap_col: WrapWidth::None,
                    base_len: delta.base_len
    pub duration_us: Option<u64>,
    #[bench]
    }
    priority: usize,
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
            engine.undo(undos.clone());

        }

    (1, 0)
        MergeTestState::new(3).run_script(&script[..]);


                } else if click_count == Some(2) {
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);

        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
/// of Sample that determines order.
        b.add_span(height, 0, 0);
        let a_revs = basic_insert_ops(inserts.clone(), 1);
    }


        assert_eq!(None, a.prev_grapheme_offset(0));
/// fn something_else_expensive() {

        let b = Rope::from("b");


// You may obtain a copy of the License at
                } else {

        }
        use serde::de::Visitor;
        assert_eq!(snapshot[0].name, "process_name");
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    current: Option<&'a str>,
        engine
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
///
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
/// some way.

fn find_leaf_split_for_bulk(s: &str) -> usize {

            new_deletes = new_deletes.transform_expand(&new_inserts);
        let a2 = Rope::from("a");

        b.iter(|| black_box(trace.closure_payload(
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
    }
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
mod sys_tid;
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
///

    /// should be constructed via SampleGuard.
                                gc_dels = gc_dels.transform_union(inserts);
        if offset == 0 {
            Assert(0, "acbd".to_owned()),
    highlight_find: bool,
    }
                        gc_dels = new_gc_dels;
        for sample in all_samples.iter() {
        }
        let mut hasher = DefaultHasher::new();
    rev_id: RevId,
        let text = Rope::from("13456");
    #[serde(skip_serializing_if = "Option::is_none")]
        if !self.lc_shadow.needs_render(plan) { return; }
                                deletes.transform_shrink(&gc_dels))


    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
            args: Some(SampleArgs {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
/// overhead tracing routine available.
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        let trace = Trace::enabled(Config::default());
        self.find_changed = FindStatusChange::Matches;
            }
            Merge(0,1),
        // x, a, y, b, z, c
            if region.is_caret() {
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
        }
        let a_rope = Rope::from(&a);

            Click(MouseAction { line, column, flags, click_count }) => {
        String::from(&r)
                            deletes_bitxor
                        if n_skip > 0 {
                out.push((prio, inserts));
/// Given the inital byte of a UTF-8 codepoint, returns the number of
            'N' => SampleEventType::ObjectCreated,
            //} else {
            sel
        /// along with the newline that triggered it.
        for &(trans_priority, ref trans_inserts) in &expand_by {
        let chars_left = (edits-max_undos)+1;
        let sample_name = to_cow_str(meta.sample_name());
                    if !inserts.is_empty() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    }
    /// # Panics
            if let Some(replace) = self.get_replace() {

// line iterators
        }
        engine.undo([1].iter().cloned().collect());
        assert!(r == a_rope.clone() + b_rope.clone());
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
use interval::Interval;
    #[inline]
                name, categories, payload, SampleEventType::DurationBegin)),
        // invert the changes to deletes_from_union starting in the present and working backwards
            pid: sys_pid::current_pid(),
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
            }
            self.categories == other.categories &&
            engine.undo(undos);
    }
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        (Revision {
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
            duration_us: None,
                    return Some(result);
                inserts: inserted,
                let line = line.min(text.measure::<LinesMetric>() + 1);
                              duration_ns: u64) -> Self
///
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        let script = vec![
        AssertAll(String),
    }
        }
            pid: sys_pid::current_pid(),
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
    fn from(c: Vec<String>) -> CategoriesT {
        let a = Rope::from("a\nb\nc");
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let text_a = Rope::from("zcbd");
            };
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    #[test]

        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
            'e' => SampleEventType::AsyncEnd,
        trace.instant("3", &["test"]);
            end += 1;
        while offset < l.len() && !l.is_char_boundary(offset) {
    /// Selects all find matches.
type StyleMap = RefCell<ThemeStyleMap>;
///
            Merge(0,2), Merge(1, 2),
        for _i in 0..50 {
        assert_eq!(snapshot[2].name, "x");
                }
        for rev in self.revs[rev_index..].iter().rev() {
            rendered_styles.push(1);
            Merge(0,1), // the merge from the whiteboard scan
            MetadataType::ThreadName {name} => (Some(name), None),
        let mut selection = match multi_select {
        let mut rendered_styles = Vec::new();
        &leaf[offset..end]
            self.shrink_to_fit();
        for find in &mut self.find {
    /// Set the selection to a new value.
/// ```
                max_undo_so_far: i+1,
            Assert(1, "apb".to_owned()),
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
                    } else {
                let (pl, poffset) = self.prev_leaf()?;

            self.lc_shadow.edit(start, end, new_end - start);
        while let Err(incomp) = next_boundary {
        };

        as_vec
                    let e = &mut self.peers[ei];

        assert_eq!(2, r.line_of_offset(r.len()));
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
        assert_eq!(a.len(), r.offset_of_line(1));
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    }

                metadata_sort_index: sort_index,
            while !s.is_char_boundary(offset - len) {
    #[test]
        in_measured_units
            Assert(0, "ab".to_owned()),
    /// Returns the visible line number containing the given offset.
            Merge(3,1), Merge(5,3),
        if wrap_col > 0 {
//! `Engine::merge`, which is more powerful but considerably more complex.
mod tests {
    }
                                                        soft_breaks.as_mut(),
pub struct Size {
        let (iv, new_len) = delta.summary();
                    }
                         style_spans: &Spans<Style>) -> Vec<isize>

            engine.edit_rev(0, 0, first_rev, delta);
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            SampleGuard::new_disabled()
                payload: payload,
                    }
// distributed under the License is distributed on an "AS IS" BASIS,
        (self.session1, self.session2)

        if self.scroll_to.is_none() && wrap {
                text.offset_of_line(line)
    }
    where D: serde::Deserializer<'de> {
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
impl<'de> serde::Deserialize<'de> for CategoriesT {
            Merge(0,1),

        }
        let max_line = self.measure::<LinesMetric>() + 1;
        ];
        // ensure that when the samples are sorted by time they come out in a
                    }
            &rebased_deletes_from_union, &new_deletes_from_union);
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
            if let Some(replace) = self.get_replace() {
pub struct RopeInfo {
            Assert(2, "ab".to_owned()),
        // todo: for now only a single search query is supported however in the future
        assert_eq!(2, a.offset_of_line(1));
                    if !inserts.is_empty() {
    /// terminating newline.
    // of the union string length *before* the first revision.
    #[test]
        }
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
        let deletes_from_union = parse_subset("-#----#");
                Contents::Edit {inserts, ..} => inserts,
{
    fn to_payload(value: &'static str) -> &'static str {
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
}
            //}
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    rev_id: RevId,
            timestamp_us: ns_to_us(start_ns),
    {
        // rebase insertions on text and apply
                    let e = &mut self.peers[ei];
        trace.instant("1", &["test"]);
    }

    ///
    // ============== Merge script tests
        assert_eq!(trace.is_enabled(), true);
        /// Used to order concurrent inserts, for example auto-indentation
///
                }
    // transform representing the characters added by common revisions after a point.
        let mut engine = Engine::new(Rope::from(TEST_STR));
        b.iter(|| black_box(sys_tid::current_tid()));
        }
        where S: serde::Serializer
    /// Invalidate the current selection. Note that we could be even more
//! `Engine::merge`, which is more powerful but considerably more complex.

    }

                            if !inserts.is_empty() {

            }
fn find_leaf_split_for_merge(s: &str) -> usize {

                            let line = self.render_line(client, styles, text,
        // interior of first line should be first line
        engine.undo([1].iter().cloned().collect());
                         style_spans: &Spans<Style>) -> Vec<isize>
    #[test]
            }
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
                    to_payload(("some description of the closure")))));
    /// Garbage collection means undo can sometimes need to replay the very first

    /// a point that should be scrolled into view.
    }
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        let guard = Self {
    }
        d.insert(StrCow::from("test"), StrCow::from(value));
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
                edit: contents.clone()

        for region in self.selection.regions_in_range(start_pos, pos) {

                return None;
        for r in &self.revs[ix + 1..] {
                }
        let end = time::precise_time_ns();
    /// Returns an iterator over chunks of the rope.
    /// No wrapping in effect.
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
            inner: self.lines_raw(start, end)
#[derive(Serialize, Deserialize, Debug)]
    /// Each instance represents a separate search query.
        let height = self.line_of_offset(text, text.len()) + 1;
    TRACE.block(name, categories)
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
            Assert(0, "acbd".to_owned()),
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;


/// The visual width of the buffer for the purpose of word wrapping.
    }
        MergeTestState::new(2).run_script(&script[..]);

                              to_payload("test_get_samples"));
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
                        word_cursor.select_word()
    fn bench_two_timestamps(b: &mut Bencher) {
}
            pid: sys_pid::current_pid(),
                    selection.add_region(occ);
        let mut b = TreeBuilder::new();
    /// New offset to be scrolled into position after an edit.
/// See `trace_payload` for a more complete discussion.
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
        } else {
        assert_eq!(utf8_offset, 19);
    }
        let deletes_from_union = Subset::new(0);
    ///
/// let a = Rope::from("hello ");
        let res = find_base_index(&a, &b);
        all_samples.reset_limit(0);
                Contents::Undo { .. } => panic!(),
                where E: serde::de::Error
        // +2 for exe & thread name
        let expand_by = compute_transforms(revs);
}
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        let mut leaf_offset = pos - offset;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        MergeTestState::new(6).run_script(&script[..]);
            sample.event_type = SampleEventType::DurationEnd;

        };
/// stored as tracing could still be enabled but set with a limit of 0.

    }
                metadata_name: None,
        let d = engine.delta_rev_head(first_rev);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                        DeltaElement::Insert(Rope::from(s)),
                    s = &s[..s.len() - 1];
            }
        self.set_selection(text, SelRegion::caret(offset));
                return None;
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    fn arr_eq(&self, other: &Vec<String>) -> bool {
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    fn next_codepoint_offset_small() {
    // TODO: switch to a persistent Set representation to avoid O(n) copying
                l = pl;

enum MetadataType {
    wrap_col: WrapWidth,


            pid: sys_pid::current_pid(),
    #[test]
        d_builder.delete(Interval::new_closed_open(10, 36));
            if next_chunk.is_none() { return None; }

categories_from_constant_array!(1);
        rope.line_of_offset(20);

            }
        match self.selection.len() {
    trace: Option<&'a Trace>,
        assert_eq!(soln, String::from(engine.get_head()));
        let text_with_inserts = text_inserts.apply(&text);
            wrap_col: WrapWidth::None,

impl<'a> Drop for SampleGuard<'a> {
    }
        };
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    }
            pos
    #[test]

const MAX_LEAF: usize = 1024;
        } else {
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    fn empty_subset_before_first_rev(&self) -> Subset {
            args: Some(SampleArgs {
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
/// assert!("hello world" == String::from(a + b));
    #[test]
        -##-
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        if self.idx <= self.current.unwrap().len() {
                metadata_name: None,
    /// and currently in a debugging state.
    ///
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        assert_eq!(rope.line_of_offset(0), 0);
    }
                }


        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            }
    #[test]
                            styles: &StyleMap, style_spans: &Spans<Style>,
        let after_first_edit = engine.get_head_rev_id().token();
    new_without_default_derive,
        // same span exists in both sets (as when there is an active selection)

pub struct ChunkIter<'a> {
        trace.closure_payload("x", &["test"], || {
    inserts: InsertDelta<RopeInfo>,
    #[serde(rename = "name")]
impl StringArrayEq<[&'static str]> for Vec<String> {
        where D: Deserializer<'de>,
    pub duration_us: Option<u64>,
                                                                0, "copy", 2)?;
        assert_eq!(rope.line_of_offset(15), 3);
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
    }
            Scroll(range) => self.set_scroll(range.first, range.last),
use std::cmp;
                        },
                MergeTestOp::Merge(ai, bi) => {
        Self {
/// stored as tracing could still be enabled but set with a limit of 0.


pub type TracePayloadT = serde_json::Value;
        }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        assert_eq!(utf8_offset, 9);
        if all_samples.is_empty() {
/// with.  By default, the type is string-like just like name.  If compiled with
        assert_eq!(0, a.lines_all().count());
    }

        // that into our actual target.
impl From<Rope> for String {
    }
        #------

                metadata_name: None,
    pub fn set_size(&mut self, size: Size) {

            SampleEventType::DurationEnd => 'E',
    }
            if self[i] != other[i] {
    fn next(&mut self) -> Option<&'a str> {

            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        let (leaf, pos) = cursor.get_leaf().unwrap();

            return false;
/// ```
        -> SampleGuard
/// Boundary is atomic and determined by codepoint boundary.
            MetadataType::ThreadName {..} => "thread_name",
    }
        let mut cursor = Cursor::new(self, offset);
        self.wrap_col = WrapWidth::Width(self.size.width);
        }
    pub fn join(&self, sep: &str) -> String {
}
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
    #[test]
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    /// Time complexity: O(log n)
    height: usize,
        }
///
        } else {
        // TODO: want to let caller retain more rev_id's.
            None
            Assert(0, "adc".to_owned()),
    new_without_default_derive,
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        engine.edit_rev(1, 1, first_rev, d1);
        let head2 = engine.get_head_rev_id().token();
        let script = vec![
    identity_op,
                self.set_dirty(text);
        let trace = Trace::disabled();
            view_id: view_id,
                            plan: &RenderPlan, pristine: bool)
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!("#---#--", &subset_str);
            return None;
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    /// tiny it is effectively O(n). This iterator does not allocate.

            pid: sys_pid::current_pid(),
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        self.lines_raw(0, self.len())
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        assert_eq!(1, r.line_of_offset(r.len() - 1));
                find_leaf_split_for_bulk(s)
            black_box(time::precise_time_ns());
        };


                            Cursor::new(breaks, offset));
/// rather than just this processe's samples).

    //TODO: implement iter_chunks using ranges and delete this
        let first_rev = engine.get_head_rev_id().token();

    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    pub fn new(initial_contents: Rope) -> Engine {
    }
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
        self.set_selection(text, new_sel);
        assert_eq!(1, r.line_of_offset(a.len()));
        let mut leaf_offset = pos - offset;
        let revs = basic_insert_ops(inserts, 1);
                            warn!("Failed to get string representation: {:?}", e);
//
    lines: usize,
        }, to_payload("test_get_samples_nested_trace"));
        Some(self.cmp(other))
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            "pristine": pristine,
    }
    }
            replace_changed: false,
    fn test_get_samples_nested_trace() {
        let a = Rope::from("a\nb\nc");
    Undo {
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    }
    assert!(a[0].rev_id == b[0].rev_id);
                }
    /// Update front-end with any changes to view since the last time sent.
//
        let b = a.slice(2, 4);
    /// Returns the byte offset corresponding to the line `line`.
        use self::MergeTestOp::*;
            Some(offset + len_utf8_from_first_byte(b))

    // Note: this function would need some work to handle retaining arbitrary revisions,
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
pub struct Lines<'a> {
}
            self.find.push(Find::new());
                    priority, inserts, deletes,
        let script = vec![
}
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
                    ops.push(self.build_update_op("invalidate", None, seg.n));
        });
            Assert(1, "ab".to_owned()),
/// acquires a dependency on the `serde_json` crate.
            SampleEventType::AsyncStart => 'b',
    (out, text, tombstones, deletes_from_union)

            return None;
/// Base unit is utf8 code unit.
impl Rope {
#![cfg_attr(feature = "cargo-clippy", allow(
/// discussion on payload.
            Assert(0, "acbd".to_owned()),
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            },
    fn do_cancel(&mut self, text: &Rope) {
}
        match symbol {
        let text_a = Rope::from("zcbd");
                            edit: Undo {
        let expand_by = compute_transforms(revs);
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        -> SampleGuard
            result["cursor"] = json!(cursors);
    fn is_boundary(s: &String, offset: usize) -> bool {
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
        assert_eq!(snapshot[6].name, "z");
}
/// assert_eq!("herald", String::from(a));
        assert_eq!("-###-", &subset_str);
/// # Returns
        ------#
/// # Performance
            engine.edit_rev(1, i+1, head, d);
        let rope = Rope::from("hi\ni'm\nfour\nlines");
}
    pub width: f64,
            match seg.tactic {
        assert_eq!(2, a.offset_of_line(1));
            Merge(0,2), Merge(1, 2),
            }
        let params = json!({
        let start_pos = start_of_line.pos();
        // current recording mechanism should see:
        for (iv, style) in style_spans.iter() {
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
                                         self, text, modify);
    /// Return the offset of the codepoint after `offset`.
    ///
        assert_eq!(utf8_offset, 13);
            return false;
        let snapshot = trace.samples_cloned_unsorted();

        ChunkIter {
    /// The maximum amount of space the tracing data will take up.  This does
        engine.edit_rev(0, 2, first_rev, build_delta_2());
}
        assert_eq!(samples[1].name, "local pid");
    }
        let mut pos = self.pos();
        assert_eq!(1, r.line_of_offset(r.len() - 1));
extern crate lazy_static;
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },

            rendered_styles.push(0);

    }
                    RopeDeltaElement_::Insert(s) =>
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
}
    }
        }
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);

    #[test]
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                self.select_line(text, offset, line, false),

    ///
                                            closure: F, payload: P) -> R
    pub fn iter_chunks_all(&self) -> ChunkIter {
            cur_len_utf16 += u.len_utf16();
        // even though the actual sampling order (from timestamp of
        if line < self.first_line {
            trace: Some(&trace),
            Assert(0, "zacbd".to_owned()),

        }
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    // TODO find the maximum base revision.
    ///
    fn can_fragment() -> bool { true }
    ///
            utf16_count += 1;
    fn can_fragment() -> bool {
            } else {
    {
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
pub enum SampleEventType {
    #[should_panic]
            SampleGuard::new_disabled()
        b.iter(|| black_box(trace.closure_payload(
        let text_with_inserts = text_ins_delta.apply(&self.text);
            session: default_session(),
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
            as_vec.push(Sample::new_metadata(
                Contents::Undo { .. } => panic!(),
        } else {
        let mut a = String::new();
            // TODO: on double or triple click, quantize offset to requested granularity.

        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        // spam cmd+z until the available undo history is exhausted
// Additional APIs custom to strings
            max: offset,
                // Deprecated (kept for client compatibility):
        assert_eq!(Some(9), a.next_grapheme_offset(3));
/// Given the inital byte of a UTF-8 codepoint, returns the number of
        let revs = basic_insert_ops(inserts, 1);
    fn test_trace_disabled() {
            }
            type Value = CategoriesT;
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
pub fn enable_tracing_with_config(config: Config) {
            Drag(MouseAction { line, column, .. }) =>

    /// slices will be nonempty.
    pub fn with_limit_bytes(size: usize) -> Self {
    edit: Contents,
                metadata_sort_index: sort_index,
        let mut b = String::new();
                return false;
    }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
    //TODO: implement iter_chunks using ranges and delete this
                    if seg.validity == line_cache_shadow::ALL_VALID {
        b.iter(|| black_box(sys_tid::current_tid()));
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,

        {
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
    ///
        let snapshot = trace.samples_cloned_unsorted();

        self.deletes_from_union = new_deletes_from_union;
/// some way.
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        self.lines(0, self.len())

        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
                tid));
                        let offset = self.offset_of_line(text, start_line);
        }
        assert_eq!(snapshot[0].name, "process_name");
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        if !self.is_enabled() {
// easily delta-compressed later.

            Merge(2,3),

            duration_us: None,
    }
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        self.prev::<BaseMetric>();
}
    fn from(r: &Rope) -> String {
    fn eq(&self, other: &Sample) -> bool {
    }
    /// terminating newline.
        #------



            black_box(time::precise_time_ns());
        // probably change as the recording internals change.

    }

        let trace = Trace::enabled(Config::default());
        match *self {
    // There will probably never be a document with more than 4 billion edits
        // +2 for exe & thread name.
                    to_payload(("some description of the closure")))));


        }
        let mut delta = serializer.serialize_struct("Delta", 2)?;
        }
            let splitpoint = find_leaf_split_for_merge(self);
        let offset = self.line_col_to_offset(text, line as usize, 0);
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        engine.edit_rev(1, 2, first_rev, d1.clone());
///

        }
    #[test]
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        let replacement = match self.selection.last() {
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
                }
}
// should make this generic, but most leaf types aren't going to be sliceable
            let expand_by = compute_transforms(a_new);
///

        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
impl Engine {
///
        !self.selection.regions_in_range(offset, offset).is_empty()
    /// Get revision id of head revision.
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
        let mut all_samples = self.samples.lock().unwrap();
    }
            // which we can do with another peer that inserts before a and merges.
    }
                    let (start, end) = {
    // Send the requested lines even if they're outside the current scroll region.

        }
                self.highlight_find = visible;
}
                        }
        // additional tests for line indexing
//! this central engine. It provides the ability to apply edits that depend on
        }
                    let (start, end) = {
        self.drag_state = Some(DragState {
    }
                true => x.end,
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            }

    }

    #[allow(dead_code)]
                }
/// See `trace_closure` for how the closure works and `trace_payload` for a
    DurationBegin,
    breaks: Option<Breaks>,
            }, to_payload("test_get_samples_nested_trace"));
}
            trace.instant("test_samples_pulse", &["test"]);
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
pub struct SampleGuard<'a> {
        //for next line
    fn gc_scenario(edits: usize, max_undos: usize) {
                MergeTestOp::Merge(ai, bi) => {
            Rope::from(s1.clone()),
            if i >= max_undos {
    /// The maximum amount of space the tracing data will take up.  This does
use rope::{Rope, RopeInfo};

        let mut engine = Engine::new(Rope::from(TEST_STR));
        engine.undo([3].iter().cloned().collect());
        let first_sample_timestamp = all_samples.front()
    /// of individual region movements become carets.

    }
    fn test_trace_disabled() {
    /// The largest undo group number of any edit in the history up to this
                    sel.add_region(region);
    /// Return the line number corresponding to the byte index `offset`.
/// # Returns
/// an argument.
        assert!(leaf.is_char_boundary(end));
        b if b < 0xe0 => 2,
            }
    /// Imagine a "union string" that contained all the characters ever
                    let mut selection = self.selection.clone();

    fn undo_2() {


        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
// See the License for the specific language governing permissions and



        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
/// See `trace_payload` for a more complete discussion.
/// * `name` - A string that provides some meaningful name to this sample.

///
use multiset::{Subset, CountMatcher};
            }
            engine.undo(undos);
                            if !inserts.is_empty() {
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
                    text.slice_to_string(region.min(), region.max())
    if a.is_empty() {
        &leaf[offset..end]
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
/// patterns. Any large runs of typing in the same place by the same user (e.g

    ProcessSortIndex { sort_index: i32 },
        ];

    ///
        Self {
            match self.wrap_col {
                metadata_sort_index: None,
            }
    ///
        } else {
        /// along with the newline that triggered it.
use std::str;
                RenderTactic::Preserve => {
    AsyncEnd,
impl StringArrayEq<Vec<String>> for &'static [&'static str] {

// Licensed under the Apache License, Version 2.0 (the "License");
        let deletes_from_union_b = parse_subset("-#---");
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    fn bench_trace_closure_disabled(b: &mut Bencher) {
            s = &s[splitpoint..];
                    s = inserts.transform_union(&s);
//! It enables support for full asynchronous and even peer-to-peer editing.
    #[test]
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
                }
#[macro_use]



        }
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },

impl Add<Rope> for Rope {
///
        MergeTestState::new(3).run_script(&script[..]);
    pub(crate) fn get_view_id(&self) -> ViewId {

                                                     "insert", node)
        assert_eq!("herald", String::from(a));
            end -= 1;

        let (first_line, _) = self.offset_to_line_col(text, region.min());
//
    }
                    if undone_groups.contains(undo_group) {


/// let a = Rope::from("hello ");


        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
    /// Time complexity: O(log n)
            CategoriesT::DynamicArray(ref self_arr) => {
            text: Rope::default(),

            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),

#[macro_use]
                            edit: Edit {
extern crate serde;
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        assert_eq!(correct, rebased_inserts);
            Merge(2,1),
        }
    /// Returns a tuple of a new `Revision` representing the edit based on the
        } else {
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
                            }
/// something_expensive();
        engine.edit_rev(1, 1, first_rev, d1.clone());
    #[test]
    // TODO: don't construct transform if subsets are empty
pub fn is_enabled() -> bool {
        ChunkIter {
            if region.is_caret() {
    }
        (Revision {
            highlight_find: false,
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
}
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            Assert(0, "ab".to_owned()),
        }
}
        ).min_by_key(|x| {
        assert_tokens(&rope, &[
        for mut find in self.find.iter_mut() {
    fn prev_codepoint_offset_small() {

            'e' => SampleEventType::AsyncEnd,

            sel

    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
        let trace = Trace::disabled();
            rendered_styles.push((iv.start() as isize) - ix);

    buffer_id: BufferId,
        info.utf16_size
}
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
// you may not use this file except in compliance with the License.
}
    pub payload: Option<TracePayloadT>,
                    }
    }
// ======== Generic helpers
        // TODO(vlovich): optimize this path to use the Complete event type
    }
    sample: Option<Sample>,
                    let transformed_deletes = deletes.transform_expand(&s);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        let mut engine = Engine::new(Rope::from(""));
        }
    /// The name of the event to be shown.
        } else {
                serializer.serialize_newtype_variant("DeltaElement", 1,
        self.deletes_from_union_before_index(rev_index + 1, true)
    /// New offset to be scrolled into position after an edit.
        -##-
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        assert_eq!(snapshot[0].name, "process_name");
                    })
}

        self.set_selection_raw(text, sel.into());
/// A rope data structure.
        use self::MergeTestOp::*;
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    ProcessName { name: String },

            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
    }
            update["lines"] = json!(lines);
            for find in self.find.iter() {
        for i in ((edits-max_undos)..edits).rev() {
                self.do_gesture(text, line, col, ty),
                let mut sel = Selection::new();
use xi_rope::spans::Spans;
                Some(offset)
            self.mk_new_rev(priority, undo_group, base_rev, delta);
/// Internally, the implementation uses reference counting (not thread safe, though
        self.set_selection(text, SelRegion::caret(offset));
    #[test]
            if let GraphemeIncomplete::PreContext(_) = incomp {
            Assert(0, "acpbdj".to_owned()),
    use interval::Interval;

    }
        b.iter(|| {
        RopeInfo {
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            Assert(0, "acpbdj".to_owned()),
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
use std::cell::RefCell;
                    s = s.transform_shrink(&transformed_inserts);
            let c = i.to_string() + "\n";

                                inserts,
        }
        let invalid = if all_caret {
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
            self.wrap_col = WrapWidth::Bytes(wrap_col);

        }
        for mut find in self.find.iter_mut() {
    }
    #[allow(dead_code)]
        let line = self.line_of_offset(text, offset);
    /// not account for any overhead of storing the data itself (i.e. pointer to
            edit: Edit {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
/// Then offset=1 is invalid.
        Rope::from_str(s.as_ref()).unwrap()
    /// Selects a specific range (eg. when the user performs SHIFT + click).


                self.add_selection_by_movement(text, Movement::Up),
        let script = vec![
    use super::*;
                    } else if !inserts.is_empty() {

// limitations under the License.
            },
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    fn find_base_1() {
    // Note: this function would need some work to handle retaining arbitrary revisions,
            prev_boundary = c.prev_boundary(&l, leaf_offset);
                // TODO: small nit, merged region should be backward if end < start.
        /// should go before typed text.
            self.record(Sample::new_instant(name, categories, None));
        engine.undo([1].iter().cloned().collect());

        assert_eq!(2, expand_by[1].0.priority);
        }
            ix = sel_end as isize;
            line_cache_shadow::CURSOR_VALID
    /// return if a delete is un-done or an insert is re- done.
    #[bench]
    }
    }
    #[derive(Clone, Debug)]
                        self.revs.push(Revision {
                        DeltaElement::Insert(Rope::from(s)),
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
                        },
            rev_id: self.next_rev_id(),
                    if let Some(new_gc_dels) = new_gc_dels {
}
        }

/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
    ProcessName { name: String },
            line_cache_shadow::CURSOR_VALID
        assert_eq!(trace.get_samples_count(), 0);
            Merge(1,2),
        self.len()
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
        assert!(r != b_rope + a_rope);
    fn next_rev_id(&self) -> RevId {
                    }
        ----#
}
    {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
pub type RopeDelta = Delta<RopeInfo>;

{

            Merge(1,0),
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        }).collect();
            Merge(5,4),

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        /// The subset of the characters of the union string from after this
    for &b in s.as_bytes() {
        }
/// * `categories` - A static array of static strings that tags the samples in
        assert_eq!(0, a.lines_raw_all().count());
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    /// Tracks whether there has been changes in find results or find parameters.
                    let mut selection = self.selection.clone();
    }
        let (mut new_revs, text, tombstones, deletes_from_union) = {
        let cursor = Cursor::new(self, offset);
        Some(&leaf[start_pos .. end])
                self.drag_state = None;
        let a = Rope::from("a\nb\nc");
        self.invalidate_selection(text);
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        fn run_script(&mut self, script: &[MergeTestOp]) {
        delta.apply(&self.text)
    s.serialize_char(ph.into_chrome_id())
        let first_sample_timestamp = all_samples.front()
                        priority, undo_group,
                MergeTestOp::Merge(ai, bi) => {
    }
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        if offset == s.len() {
            }),
    Width(f64),
    fn bench_two_timestamps(b: &mut Bencher) {
//! There is also a full CRDT merge operation implemented under
                selection.add_region(occurrence);
                    s = &s[..s.len() - 1];
    fn merge_session_priorities() {
                    "something", &["benchmark"], || {},
#[inline]

            highlight_find: false,
///
        },

    }
/// Enable tracing with a specific configuration. Tracing is disabled initially
                    self.do_gesture(text, line, column, GestureType::WordSelect)
/// let c = b.slice(1, 7);
        assert_eq!(rope.line_of_offset(15), 3);
    /// the text).
        }
        ----
    }
                        for line_num in start_line..end_line {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        };
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
/// as opposed to thousands of revisions.
pub struct ChunkIter<'a> {
                let line = line.min(text.measure::<LinesMetric>() + 1);
    }
        self.tombstones = tombstones;
            Merge(0,1),

    use engine::*;
        let head = engine.get_head_rev_id().token();
    fn undo() {
            for (i,rev) in self.revs.iter().enumerate().rev() {
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
/// See `trace_block` for how the block works and `trace_payload` for a
}
                last_priority = Some(priority);
    pub fn iter_chunks_all(&self) -> ChunkIter {
/// an argument.
use selection::{Affinity, Selection, SelRegion};
        let script = vec![
        }
            FindPrevious { wrap_around, allow_same, modify_selection } =>

    /// The line number is 0-based.

            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
                match *other {

            SelectionForReplace => self.do_selection_for_replace(text),
        assert_eq!("herald", String::from(a));
    Matches

    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))



        let utf8_offset = 9;
            let pos = bc.next::<BreaksMetric>();
// you may not use this file except in compliance with the License.
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
        let mut b = line_cache_shadow::Builder::new();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(snapshot[6].name, "z");
    //TODO: implement iter_chunks using ranges and delete this
        true
/// implementation as efficient as a mutable version.
    ns / 1000
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        self.enabled.store(false, AtomicOrdering::Relaxed);
#[inline]
        }
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        -> Self
        Self {
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
                                gc_dels = gc_dels.transform_expand(inserts);

    fn sample_name(&self) -> &'static str {
        if self.find.is_empty() {
        result
        engine.gc(&gc);

    {
    lc_shadow: LineCacheShadow,
        if !self.is_enabled() {
            text: Rope::default(),
        // of the delta so we can set the cursor before or after the edit, as needed.
    fn arr_eq(&self, other: &[&'static str]) -> bool {
            trace.closure("test_samples_closure", &["test"], || {});
    StaticArray(&'static[&'static str]),

            let sel = {
                Undo { toggled_groups, deletes_bitxor } => {
                    }
    out.as_mut_slice().reverse();
                    s = inserts.transform_union(&s);
use rpc::{GestureType, MouseAction, SelectionModifier};
            cur_len_utf8 += u.len_utf8();
#[inline]
    }
        // clamp to end of line
    enum MergeTestOp {
            HighlightFind { visible } => {
                payload: payload,
                metadata_sort_index: None,
        let line = self.line_of_offset(text, end);
//! a previously committed version of the text rather than the current text,
        // Note: for committing plugin edits, we probably want to know the priority
            None => {
        let mut b = line_cache_shadow::Builder::new();
/// A size, in pixel units (not display pixels).
    /// Updates the view after the text has been modified by the given `delta`.


}
    }
        engine.edit_rev(1, 1, first_rev, d1.clone());
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());

        let l_str = text.slice_to_string(start_pos, pos);

        plan.request_lines(first_line, last_line);
        for chunk in self.iter_chunks(start, end) {
                }
        assert_eq!(snapshot[0].name, "process_name");
        let correct = parse_subset_list("
        }

                peers.push(peer);
                el.end()
    }
    base_sel: Selection,

    /// Returns the largest undo group ID used so far
            }
    }
        RevId { session1: 1, session2: 0, num: i as u32 }
// you may not use this file except in compliance with the License.
            SampleGuard::new_disabled()
/// assert!("hello world" == String::from(a + b));
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);

    #[should_panic]
        assert_eq!(snapshot[4].name, "y");
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
            // These two will be different without using session IDs
                name, categories, None, start, end - start));
        let first_rev = engine.get_head_rev_id().token();
            Merge(0,2), Merge(1, 2),
    trace: Option<&'a Trace>,
    #[test]
            // with offset == 0, but be defensive.
                false => x.start
        let a2 = Rope::from("a");
        }
        let a = Rope::from("a\nb\nc");
        self.height
    }
    fn sample_name(&self) -> &'static str {
            cursor: Cursor::new(self, start),
    pub(crate) fn has_pending_render(&self) -> bool {
        self.len()
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    // TODO: this should be a Cow
    fn next(&mut self) -> Option<&'a str> {
impl FromStr for Rope {

            'M' => SampleEventType::Metadata,
    // How should we count "column"? Valid choices include:
    }
            }
            Merge(1,0), Merge(2,0),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
    /// When was the sample started.
    #[bench]
        Ok(exe_name) => {
        assert_eq!(snapshot[3].name, "y");
    #[serde(serialize_with = "serialize_event_type")]
            }
            tid: sys_tid::current_tid().unwrap(),
        assert_eq!(trace.get_samples_limit(), 0);

                    }
                    s = &s[..s.len() - 1];
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let mut line_num = 0;  // tracks old line cache
    }
                    };
        for seg in self.lc_shadow.iter_with_plan(plan) {
            Assert(1, "ab".to_owned()),
    #[serde(skip_serializing_if = "Option::is_none")]
/// some way.
    }
    /// The revision history of the document
impl Engine {
        // A with ring, hangul, regional indicator "US"

    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        if self.find.is_empty() {
        ");
    #[serde(skip_serializing_if = "Option::is_none")]
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
    height: usize,
        } else {
    fn append_large() {
                        let n_skip = seg.their_line_num - line_num;
        result
        assert_eq!(trace.get_samples_limit(), 0);

        self.pending_render = pending
            _ => None
/// the `base_revs`. This allows the rest of the merge to operate on only
            Sample::new_instant("local pid", &[], None),
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
            cursor: Cursor::new(self, start),

            pos += 1;
                text.offset_of_line(line)
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

            name: sample_name,
    /// Determines whether the offset is in any selection (counting carets and

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

            "n": n,
                                gc_dels = gc_dels.union(deletes);
        samples[0].timestamp_us = 10;
        } else {
    // even worth the code complexity.
                        Err(e) => {
        let line = self.line_of_offset(text, offset);
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
        });

        let script = vec![
            Merge(0,1),
            drag_state: None,
                    if !deletes.is_empty() {
        r.slice_to_string(0, r.len())
            _ => return
        // the generated JSON.
        use serde::de::Visitor;
            Assert(1, "acb".to_owned()),
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
        LinesRaw {
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        // since one of the two deletes was gc'd this should re-do the one that wasn't
    }
    pub fn max_undo_group_id(&self) -> usize {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            view_id: view_id,
    pub fn set_session_id(&mut self, session: SessionId) {
        self.set_dirty(text);
            if self.fragment.is_empty() {
        -> Self
        let height = self.line_of_offset(text, text.len()) + 1;

        let trace = Trace::enabled(Config::default());
    max_undo_so_far: usize,
    /// Get next codepoint after cursor position, and advance cursor.
                    }
/// }
        self.replace = Some(Replace { chars, preserve_case });
}

    TRACE.enable_config(config);
                    } else {
            // Snap to grapheme cluster boundary
        // This might be an over-specified test as it will
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
                            rev_id: rev.rev_id,
/// * `categories` - A static array of static strings that tags the samples in
                rev_id: basic_rev(i+1),

    }
    fn bench_trace_closure_payload(b: &mut Bencher) {
        assert_eq!(rope.line_of_offset(3), 1);

}
// You may obtain a copy of the License at
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    // TODO: don't construct transform if subsets are empty
                        // no need to un-delete undone inserts since we'll just shrink them out
    }
}
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    #[bench]
        };
            }
            rendered_styles.push(style_id as isize);
    /// Constructs a Duration sample.  For use via xi_trace::closure.
use serde_json::Value;
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    // maybe explore grabbing leaf? would require api in tree
impl Add<Rope> for Rope {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },

            }
            SampleGuard::new_disabled()

    /// Replacement string.
        trace.instant("3", &["test"]);
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,


        assert_eq!(Some(3), a.prev_codepoint_offset(6));
    }
    }
            type Value = CategoriesT;
    {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },


        // stable order since the resolution of timestamps is 1us.
        } else if line == max_line {
        /// Used to order concurrent inserts, for example auto-indentation
        Cow::from(a.into_owned() + b)
        self.cursor.next_leaf();
/// xi_trace::trace("something happened", &["rpc", "response"]);
                }
/// # use xi_rope::Rope;
use word_boundaries::WordCursor;
    // this should have the same behavior, but worse performance
        assert_eq!(TEST_STR, String::from(engine.get_head()));
                           pristine: bool)
            }
impl View {
/// Returns the file name of the EXE if possible, otherwise the full path, or
        struct RopeDelta_ {
    }
            }
                    }
        // +2 for exe & thread name.
    /// not account for any overhead of storing the data itself (i.e. pointer to
        match *self {
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        engine.undo([3].iter().cloned().collect());
    #[test]
        let style = style_map.merge_with_default(style);
    }
    /// indicates a search for the next occurrence past the end of the file.
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        let mut all_samples = self.samples.lock().unwrap();
    Metadata
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        }
                    let e = &mut self.peers[ei];
        let mut b = line_cache_shadow::Builder::new();

            }
/// assert_eq!("llo wo", String::from(c));
    #[bench]
        let snapshot = trace.samples_cloned_sorted();
    }
        trace.closure_payload("x", &["test"], || {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// fn something_else_expensive(value: u32) {
    TRACE.is_enabled()
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    }
}
            }
        --#--
    #[derive(Clone, Debug)]
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    }
))]
}
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        assert_eq!(trace.get_samples_count(), 5);
}
            None
        Self {

        engine.gc(&to_undo);

        _ => 4

        last_line += if last_col > 0 { 1 } else { 0 };
extern crate serde;
    fn test_disable_drops_all_samples() {
                engine.gc(&to_gc)
        /// along with the newline that triggered it.
    #[bench]
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
        let mut result = json!({


        self.set_dirty(text);
        let mut engine = Engine::new(Rope::from(TEST_STR));
pub fn samples_cloned_sorted() -> Vec<Sample> {
            sel.add_region(new_region);
    pub(crate) fn get_replace(&self) -> Option<Replace> {
/// 1. Samples that span sections of code may be inserted on end instead of
            } else if incomp == GraphemeIncomplete::PrevChunk {
/// # use xi_rope::Rope;
    fn next(&mut self) -> Option<&'a str> {
    }
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        // likely be improved.
            SampleGuard::new(&self, name, categories, None)
                }
        b if b < 0x80 => 1,
        self.lines += other.lines;

                    self.do_gesture(text, line, column, GestureType::PointSelect)
use movement::{Movement, region_movement, selection_movement};
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let empty = Rope::from("");
    }
}
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        Self {
        let mut engine = Engine::new(Rope::from(TEST_STR));
impl<'a> Iterator for Lines<'a> {
        }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
            sample.event_type = SampleEventType::DurationEnd;
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        // is the new edit in an undo group that was already undone due to concurrency?
        assert_eq!(utf16_units, 17);
use std::fmt;
    pub fn set_size(&mut self, size: Size) {
        use self::ViewEvent::*;
        }
            match c.edit {
}
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
/// An element in a `RopeDelta`.
    #[derive(Debug)]
            timestamp_us: ns_to_us(timestamp_ns),
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
    fn from_chrome_id(symbol: char) -> Self {


        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            find.unset();
                    // We're super-aggressive about dropping these; after gc, the history
        let mut delta = serializer.serialize_struct("Delta", 2)?;
        where D: serde::Deserializer<'de>
        trace.closure_payload("x", &["test"], || {
    }
pub type Rope = Node<RopeInfo>;

                    let full_path = exe_name.into_os_string();
                self.set(pos);
    }
        #---




            // if using breaks update cursor
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        assert_eq!(snapshot[1].name, "thread_name");
    }
    TRACE.enable_config(config);
/// Base unit is utf8 code unit.
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
        }
        let r = r + Rope::from(&b[MIN_LEAF..]);
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    // This computes undo all the way from the beginning. An optimization would be to not

///
        where S: Into<StrCow>, C: Into<CategoriesT>
    fn delta_rev_head() {
        d_builder.build()


#[derive(Serialize, Deserialize, Debug, Clone)]
                Ok(CategoriesT::DynamicArray(categories))
                if s.ends_with('\n') {
        }, deletes_from_union)
        for find in &mut self.find {
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
                         style_spans: &Spans<Style>) -> Vec<isize>
        let res = find_common(&a, &b);
        for i in 0..edits {
        // interior of last line should be last line
impl Config {
    {
        self.samples.lock().unwrap().len()

/// However, anything that can be converted into a Cow string can be passed as
/// * `categories` - A static array of static strings that tags the samples in
use std::hash::{Hash, Hasher};
///
}
    }
            if next_chunk.is_none() { return None; }
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        /// revision that were deleted by this revision.
            self.wrap_col = WrapWidth::Bytes(wrap_col);
use multiset::{Subset, CountMatcher};

    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
    fn to_payload(value: &'static str) -> TracePayloadT {

    #[test]
    #[bench]
                let line = line.min(text.measure::<LinesMetric>() + 1);
        }
            Assert(5, "zacpb".to_owned()),
        }
//!
                              duration_ns: u64) -> Self
impl<'a> Iterator for Lines<'a> {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
        for &region in self.sel_regions() {
    pub fn with_limit_bytes(size: usize) -> Self {
    /// Only works well for ASCII, will probably not be maintained long-term.
    /// of individual region movements become carets.
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
    }
        engine
            let not_in_tombstones = self.deletes_from_union.complement();
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    inner: ChunkIter<'a>,
    idx: usize,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let initial_rev = engine.get_head_rev_id().token();
            }
                cur_all_inserts = older_all_inserts;
        }
//
                              categories: C,
}
        engine.gc(&gc);
    TRACE.block(name, categories)
            }
        while !leaf.is_char_boundary(end) {
//! which is sufficient for asynchronous plugins that can only have one
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
}
    }
        // todo: the correct Find instance needs to be updated with the new parameters
        let first = max(first, 0) as usize;
        self.invalidate_selection(text);
    }

#[cfg(feature = "dict_payload")]
/// }
}
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    impl MergeTestState {
            Assert(0, "ab".to_owned()),
        MergeTestState::new(3).run_script(&script[..]);
    }
            to_undo.insert(i+1);
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
// The advantage of using a session ID over random numbers is that it can be

    {
        self.prev::<BaseMetric>();
            Merge(1,0),
///
        // is the new edit in an undo group that was already undone due to concurrency?
// Unless required by applicable law or agreed to in writing, software
}
        use self::MergeTestOp::*;
    }

    #[serde(skip_serializing_if = "Option::is_none")]
        }
            _ => return
        // send updated replace status if changed
    }
    pub fn prev_codepoint(&mut self) -> Option<char> {
}
        let base_sel = Selection::new();
            "text": &l_str,
    fragment: &'a str
        // current recording mechanism should see:
    }
    ///
        let mut b = TreeBuilder::new();
/// ```

    fn compute_info(s: &String) -> Self {
            a.push('a');
        self.scroll_to_cursor(text);
    #[test]
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    /// ancestor in order to be mergeable.
        let first_line = self.line_of_offset(text, start);
/// See `trace_payload` for a more complete discussion.
                    if s.ends_with('\r') {
        assert!(leaf.is_char_boundary(end));
    }
    #[test]

    view_id: ViewId,
            Merge(0,2), Merge(1, 2),

    pub fn instant<S, C>(&self, name: S, categories: C)
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
enum WrapWidth {
        a.lines_all().collect::<Vec<_>>());
            l[offset..].chars().next()
            Merge(0,2), Merge(1, 2),
            DeltaElement::Copy(ref start, ref end) => {
            if self.line_of_offset(text, offset) <= line {
                }
    {
        // the front-end, but perhaps not for async edits.
    fn undo_3() {
        assert_eq!(rope.offset_of_line(1), 3);
        }
            },
        self.find.clear();

#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
                },
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
    fn prev_codepoint_offset_small() {
    /// Time complexity: O(log n)

                                     event_type: SampleEventType)
            'M' => SampleEventType::Metadata,
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    fn is_boundary(s: &String, offset: usize) -> bool {
                        };
        engine
    pub fn get_caret_offset(&self) -> Option<usize> {


            while !s.is_char_boundary(offset - len) {
use multiset::{Subset, CountMatcher};
    /// Return the offset of the codepoint after `offset`.
    }
        self.size = size;
    }
    #[cfg(feature = "benchmarks")]
            },
    /// Get the contents of the document at a given revision number
    /// validate their input.
        a.push('\n');

            self.set_dirty(text);
    }
                len += 1;

        assert_eq!(snapshot.len(), 9);

    out.as_mut_slice().reverse();
            }
        --#--

impl Ord for Sample {
                    let transformed_deletes = deletes.transform_expand(&s);
        let inserts = parse_subset_list("
}

}
            SampleEventType::DurationBegin => 'B',
        }
    view_id: ViewId,
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        }
            Assert(0, "adfc".to_owned()),
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        assert_eq!(snapshot[2].name, "a");

/// for strings, specialized for incremental editing operations. Most operations
    /// Determine whether `offset` lies on a codepoint boundary.
    }
            // with offset == 0, but be defensive.
            // which we can do with another peer that inserts before a and merges.
    // * grapheme clusters

        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        let script = vec![
                if !inserts.is_empty() {
use std::sync::Mutex;
        Err(ref e) => {
    // There will probably never be a document with more than 4 billion edits
            None
        ");
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
                cursors.push(c - start_pos);
            l[offset..].chars().next()
    // maybe explore grabbing leaf? would require api in tree
        let script = vec![
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                pos = leaf_offset + nl.len();
        b.push('\n');
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));

            duration_us: None,
use movement::{Movement, region_movement, selection_movement};

            let style_id = self.get_or_def_style_id(client, styles, &style);
            if self[i] != other[i] {
    /// Note: unlike movement based selection, this does not scroll.
        let mut cursor = Cursor::new(self, offset);

    inner: ChunkIter<'a>,
            CategoriesT::DynamicArray(ref self_arr) => {
                }
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
    fn merge_max_undo_so_far() {
                }
    #[cfg(feature = "benchmarks")]
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
                return;
                break;
        match self.breaks {
    }
// distributed under the License is distributed on an "AS IS" BASIS,
        if !self.lc_shadow.needs_render(plan) { return; }
use std::collections::BTreeSet;
        } else {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
/// Usage of static strings is encouraged for best performance to avoid copies.
/// }
use std::cell::RefCell;

    // this is the cost contributed by the timestamp to trace()
    #[test]
            }
            thread_name: None,
    }
/// # Arguments
///
#[inline]
                        s = &s[..s.len() - 1];
        if self.len() != other.len() {
        // NOTE: we derive to an interim representation and then convert
                self.run_op(op);
    find_leaf_split(s, MIN_LEAF)
}
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        let selection = SelRegion::new(0, text.len()).into();
}
        assert!(r != a_rope);
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        MergeTestState::new(6).run_script(&script[..]);
impl<'a> Iterator for LinesRaw<'a> {
    {
        samples[0].timestamp_us = 10;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        }
    /// Each instance represents a separate search query.
/// Computes a series of priorities and transforms for the deltas on the right
                metadata_sort_index: None,
}
    }
                            rev_id: rev.rev_id,
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
            } else {
            },

        assert!(r.clone().slice(0, a.len()) == a_rope);
    pub fn with_limit_bytes(size: usize) -> Self {
        samples[1].pid = 2;
        self.tombstones = new_tombstones;
impl CategoriesT {
//! under `Engine::edit_rev`, which is considerably simpler than the usual
    }

                RenderTactic::Preserve => {
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
        );
    /// in the slice up to `offset`.
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
            self.set_dirty(text);
impl NodeInfo for RopeInfo {
        let mut selection = match multi_select {
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
                                  style_spans, &plan, pristine);
/// A guard that when dropped will update the Sample with the timestamp & then
        let mut pos = self.pos();

            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
                MergeTestOp::Assert(ei, ref correct) => {
            SelectionForFind { case_sensitive } =>
/// Disable tracing.  This clears all trace data (& frees the memory).
/// xi_trace::trace("something happened", &["rpc", "response"]);
}
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            self.pid == other.pid &&
    }
        let text = Rope::from("13456");
        self.find_changed = FindStatusChange::Matches;

impl NodeInfo for RopeInfo {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    pub fn do_find_all(&mut self, text: &Rope) {
                // merge logic.
                    return Some(result);
    /// Garbage collection means undo can sometimes need to replay the very first

        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        // We add selection after find because we want it to be preferred if the

    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
    #[serde(rename = "ts")]
        let (revs, text_2, tombstones_2, deletes_from_union_2) =

            self.idx = 0;
            let after = full_priority >= trans_priority;  // should never be ==
    pub fn new_duration_marker<S, C>(name: S,
                }
        assert_eq!(snapshot[6].name, "z");

        self.replace.clone()

        #------



    #[inline]
        assert_eq!(rope.line_of_offset(3), 1);
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    // Send the requested lines even if they're outside the current scroll region.
        MergeTestState::new(2).run_script(&script[..]);
        while !s.is_empty() {
            if let Some(ref thread_name) = sample.thread_name {
    }
        assert_eq!(4, a.offset_of_line(2));
                        None
                            if !inserts.is_empty() {
        if offset == 0 {

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    }
                            rev_id: rev.rev_id,
            pos -= 1;
        match *self {
        });
    }
    #[test]

    ///

        self.replace = Some(Replace { chars, preserve_case });
        d_builder.build()
    #[bench]
        let start = time::precise_time_ns();
use std::ops::Range;
    scroll_to: Option<usize>,
    /// # Panics
/// version of Ropes, and if there are many copies of similar strings, the common parts
impl SampleEventType {
        // additional tests for line indexing
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
// You may obtain a copy of the License at
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
            }),

        let script = vec![
}
        };
    fn is_boundary(s: &String, offset: usize) -> bool {

    TRACE.block_payload(name, categories, payload)
        if !self.is_enabled() {
    /// Determine whether `offset` lies on a codepoint boundary.
        use self::MergeTestOp::*;
        });
        for i in 0..edits {
    for &b in s.as_bytes() {
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    fn measure(info: &RopeInfo, _: usize) -> usize {
        // TODO(vlovich): optimize this path to use the Complete event type
                },
}
        while offset < l.len() && !l.is_char_boundary(offset) {
/// ```rust
use std::borrow::Cow;
                        },
// you may not use this file except in compliance with the License.

        };
                self.select_line(text, offset, line, true),

        } else {
                sel
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
            let mut sample = self.sample.take().unwrap();
                let (ins, _) = delta.factor();
                let mut peer = Engine::new(Rope::from(""));
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        engine.edit_rev(1, 1, first_rev, d1.clone());
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        for _i in 0..50 {
                    undo_group: i+1,
    // There will probably never be a document with more than 4 billion edits
impl View {
    }
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        client.update_view(self.view_id, &params);
    }
    fn rearrange_1() {
        }
    /// This case is a regression test reproducing a panic I found while using the UI.
        assert_eq!(snapshot[7].name, "z");
            SampleGuard::new(&self, name, categories, Some(payload.into()))
    fn gc_4() {
            priority: 0,
pub struct View {
                if self.fragment.is_empty() {
        assert_eq!(rope.offset_of_line(1), 3);
/// for single user cases, used by serde and ::empty
        let first_rev = engine.get_head_rev_id().token();
/// However, anything that can be converted into a Cow string can be passed as
        if self.cursor.pos() >= self.end {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),

    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            Rope::concat(
    /// the heap, counters, etc); just the data itself.
        let first_rev = engine.get_head_rev_id().token();
// you may not use this file except in compliance with the License.

                }
/// * `name` - A string that provides some meaningful name to this sample.
                // should be removed in favor of do_gesture
/// A rope data structure.
        let iv = Interval::new_closed_open(start, end);
                    if let Some(last_selection) = self.selection.last() {
    /// should be constructed via SampleGuard.
    fn prev(s: &String, offset: usize) -> Option<usize> {
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
            if let Some(replace) = self.get_replace() {
    pub args: Option<SampleArgs>
            args: Some(SampleArgs {
impl Rope {
    type Err = ParseError;

/// rather than just this processe's samples).
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let mut all_samples = self.samples.lock().unwrap();
            AddSelectionAbove =>
#[derive(Clone, Debug)]
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {

        soln.push('f');
        for region in self.selection.regions_in_range(start_pos, pos) {
    /// Storage for all the characters that have been deleted  but could
    /// Tests that priorities are used to break ties correctly
    CompleteDuration,
    }
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
                    sel.add_region(region);
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();

    ///
                cursors.push(c - start_pos);
/// * `categories` - A static array of static strings that tags the samples in
    pub fn token(&self) -> RevToken {
    #[test]
}
        } else {
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
                Some(i) => {
        let mut cursor = Cursor::new(self, offset);

        assert!(end <= leaf.len());
    /// Tests that priorities are used to break ties correctly
        engine.edit_rev(0, 1, first_rev, build_delta_1());
    tombstones: Rope,
        assert_eq!(1, b.line_of_offset(2));
    }
        self.tombstones = new_tombstones;
))]
        ");
            }),

                }
        let (leaf, pos) = cursor.get_leaf().unwrap();
                                     event_type: SampleEventType)
    #[bench]
    }
    /// the pid or the tid depends on the name of the event
    }
        self.start_drag(offset, region.start, region.end);

            }),

                RenderTactic::Discard => {
/// });
        self.tombstones = new_tombstones;
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
            Assert(0, "ab".to_owned()),
    /// The thread the sample was captured on.  Omitted for Metadata events that
        }
                std::thread::sleep(std::time::Duration::new(0, 1000));
    pub fn offset_of_line(&self, line: usize) -> usize {
            }
///
            None
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
        while !s.is_empty() {
        // Any edit cancels a drag. This is good behavior for edits initiated through

/// Returns all the samples collected so far ordered chronologically by

            None
        });
///     0
            //let prev_pos = self.cursor.pos();

            utf16_count += 1;

            //leaf.len() - start_pos
    fn gc_4() {
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
                    if sel_end_ix > sel_start_ix {
    fn edit_rev_undo() {
        match self {
/// associated performance hit across the board for turning it on).
            },
                if !region.is_caret() {
            );
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        delta.apply(&self.text)
extern crate serde_json;
        // stable order since the resolution of timestamps is 1us.
    }
        }
        let end = time::precise_time_ns();
impl Leaf for String {
        let text_with_inserts = text_inserts.apply(&text);
            1 if self.selection[0].is_caret() => {
/// # Returns
    }
                } else {
        Rope::from_str(s.as_ref()).unwrap()
                        None
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            name: name.into(),
// limitations under the License.
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.

            // corner and I'm lazy -cmyr
}

            timestamp_us: ns_to_us(timestamp_ns),
pub struct View {
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
            find.set_hls_dirty(false)
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    None,
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
    use delta::{Builder, Delta};
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");

        let mut line_num = 0;  // tracks old line cache
        trace.instant("4", &["test"]);
            return ix;
            'M' => SampleEventType::Metadata,
    fn bench_trace_block_disabled(b: &mut Bencher) {

    }
    }
    }
    fn bench_two_timestamps(b: &mut Bencher) {
        let mut engine = Engine::empty();
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>

        let undone = self.undone_groups.contains(&undo_group);
        if offset >= text.len() {

}
    }
    }
    #[test]
    #[test]
        //} else {
            }
#![cfg_attr(feature = "cargo-clippy", allow(
                },
    buffer_id: BufferId,
        let mut ops = Vec::new();
    }
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
            }
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
        let a = Rope::from("a");
pub struct SampleArgs {


}
/// Get a slice of a `Rope`:
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
    #[test]
categories_from_constant_array!(7);
    }
    #[serde(skip_serializing_if = "Option::is_none")]
use std::cmp::{min,max};
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.

            }
    }
//
        trace.instant("2", &["test"]);
///
    /// Constructs an instantaneous sample.
            Assert(0, "acbd".to_owned()),
        assert_eq!(1, b.line_of_offset(2));
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();

    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        if self.cursor.pos() >= self.end {
    /// This is a `Subset` of the "union string" representing the characters
    use engine::*;
/// equivalent performance to a regular trace.  A string that needs to be copied
        in_base_units
    fn line_of_offset_small() {
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
            args: Some(SampleArgs {
    assert!(a[0].rev_id == b[0].rev_id);
        // we add the special find highlights (1) and selection (0) styles first.
        inserts.into_iter().enumerate().map(|(i, inserts)| {

    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
/// * `name` - A string that provides some meaningful name to this sample.
                            rev_id: rev.rev_id,
        ");
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            Merge(0,2), Merge(1, 2),
    breaks: Option<Breaks>,
            "something", &["benchmark"],

        }
            SelectionForReplace => self.do_selection_for_replace(text),

        let mut selection = Selection::new();
            let b_to_merge = &other.revs[base_index..];
            CategoriesT::DynamicArray(ref self_arr) => {
        a.lines_all().collect::<Vec<_>>());
    fn next(&mut self) -> Option<&'a str> {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
                            ops.push(self.build_update_op("skip", None, n_skip));
    }
        next_expand_by = Vec::with_capacity(expand_by.len());
                let categories = v.split(",").map(|s| s.to_string()).collect();
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        loop {

            let b_to_merge = &other.revs[base_index..];
        });
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
        });
/// same priority into one transform to decrease the number of transforms that
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    /// method to be fast even when the selection is large.
extern crate libc;
/// ```
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        let mut selection = Selection::new();

        --#-
}

    }
                return;
        assert_eq!(rope.line_of_offset(1), 0);
/// See `trace_block` for how the block works and `trace_payload` for a
        // set last selection or word under current cursor as search query
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    #[test]
mod sys_pid;
    ///
    /// description for the invariant.
                RenderTactic::Discard => {
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        }
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
    }
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);

    type L = String;
    // Delta that deletes the right bits from the text
// Low level functions
        let expand_by = compute_transforms(revs);
    deletes_from_union: Subset,
            Revision {

    #[test]
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
            }
        let _t = trace_block("View::wrap_width", &["core"]);
    /// The `pristine` argument indicates whether or not the buffer has
        let b = Rope::from("b");
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            // to replicate whiteboard, z must be before a tombstone
        let a = Rope::from("a\nb\nc");

            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
#[derive(Clone, Debug, PartialEq, Eq)]
{
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {

                            if !deletes.is_empty() {
    out.as_mut_slice().reverse();
            trace.record(sample);
pub fn enable_tracing() {
    /// Time complexity: O(log n)
/// revisions on top of the revisions represented by `expand_by`.
        let line = self.line_of_offset(text, end);
/// let a = Rope::from("hello world");
///
            None
                    }
        self.hash(&mut hasher);
                         hls: &[(usize, usize)],


        if self.is_enabled() {
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
            }, to_payload("test_get_sorted_samples"));
        trace.instant("5", &["test"]);

                let categories = v.split(",").map(|s| s.to_string()).collect();
        let result = closure();

    /// Sorting priority between processes/threads in the view.
        self.text = new_text;
        let first_line = self.line_of_offset(text, start);
    }
                        }
        for sample in all_samples.iter() {
            }
            SampleEventType::ObjectCreated => 'N',
                            }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            Some(offset - len)
            l[offset..].chars().next()
/// See `trace_payload` for a more complete discussion.
    }
    #[test]
    {
        assert_eq!(snapshot[5].name, "b");
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    fn to_payload(value: &'static str) -> &'static str {
{
        }
}
        assert_eq!(utf8_offset, 19);
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
//! a previously committed version of the text rather than the current text,
    pub fn max_size_in_bytes(&self) -> usize {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
                        line_num = seg.their_line_num + seg.n;

        assert_eq!(None, a.next_grapheme_offset(17));
        self.selection = sel;
        // since one of the two deletes was gc'd this should undo the one that wasn't
                let mut peer = Engine::new(Rope::from(""));
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
            sample: None,
        // TODO: may make this method take the iv directly
    fn lines_small() {
        let mut leaf_offset = pos - offset;
extern crate serde;
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        // multiple queries; select closest occurrence
    pub fn get_samples_limit(&self) -> usize {
    /// Start of the region selected when drag was started (region is
/// Atomicity is implicit, putting the offset
        sel.collapse();
        }
        a.edit_str(1, 9, "era");
    pub event_type: SampleEventType,
            sel.add_region(
            }

//
            Assert(1, "zapbj".to_owned()),
            utf16_count += 1;
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());


        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        let iv = Interval::new_closed_open(start, end);
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
        // +2 for exe & thread name.
/// an argument.
        self.revs.iter().enumerate().rev()
#[inline]
    fn find_common_1() {

        b.push_str(s);
    }
        assert_eq!(soln, String::from(engine.get_head()));
        let col = col as usize;
        assert_eq!(1, r.line_of_offset(a.len()));
    fn merge_associative() {
        let guard = Self {
///
/// * `name` - A string that provides some meaningful name to this sample.
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);


        let line = line as usize;
///
            let after = full_priority >= trans_priority;  // should never be ==
    }
    ThreadName { name: String },
        assert_eq!(1, a.line_of_offset(3));
        let (iv, new_len) = delta.summary();

        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
            FindPrevious { wrap_around, allow_same, modify_selection } =>
// ======== Generic helpers
            trace.closure_payload("y", &["test"], || {
        let mut delta = serializer.serialize_struct("Delta", 2)?;
                    let mut selection = self.selection.clone();
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    }
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
//
                metadata_sort_index: None,
                    return None;
                        gc_dels = gc_dels.transform_expand(inserts);
        text = new_text;
    fn bench_trace_closure(b: &mut Bencher) {
    fn eq_med() {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        ];
    /// The thread the sample was captured on.  Omitted for Metadata events that
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        b.push(rhs);

impl Eq for Sample {}
/// A guard that when dropped will update the Sample with the timestamp & then

    #[serde(skip_serializing_if = "Option::is_none")]
                }
        assert_eq!(2, a.offset_of_line(1));

        len
        if self.find.is_empty() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    let mut s = Subset::new(head_len);
///
            Merge(1,0), Merge(2,0),


        let cursor = Cursor::new(self, offset);
        // position after 'f' in four
        s.is_char_boundary(offset)
    }
categories_from_constant_array!(7);
    breaks: Option<Breaks>,
    pub fn set_session_id(&mut self, session: SessionId) {
    fn gc_3() {
    }
    #[test]



    fn next_codepoint_offset_small() {
    }
            Assert(1, "apb".to_owned()),
use rpc::{GestureType, MouseAction, SelectionModifier};
    /// If `line` is equal to one plus the current number of lines,
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let base_sel = Selection::new();
        } else {
    #[serde(rename = "ph")]
        trace.closure_payload("x", &["test"], || (),
        let b_rope = Rope::from(&b);
                    None
    let mut last_priority: Option<usize> = None;
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        let mut selection = Selection::new();
        }
            for rev in &self.revs {
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
                out.push(DeltaOp {

        if !self.is_enabled() {
    }
            self.first_line = line - (self.height - 1);
extern crate test;
}
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
        assert_eq!(trace.get_samples_count(), 1);
/// Indicates what changed in the find state.
    }
                SelectionModifier::Set => self.set_selection(text, occ),
}
        let mut line_num = 0;  // tracks old line cache

                    }
        prev_boundary.unwrap_or(None)
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;

    }
    #[test]
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
    }

                    .with_horiz(horiz)

                Contents::Undo { .. } => panic!(),
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
        if before {
            Merge(5,4),
    for rev in revs.iter().rev() {
    }
        }
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let contents = match rev.edit {
            FindPrevious { wrap_around, allow_same, modify_selection } =>
                        &mut start[bi]

        for find in &mut self.find {
    }

}
    /// The revision history of the document
// Try to split at newline boundary (leaning left), if not, then split at codepoint
impl fmt::Debug for Rope {
/// beginning.
                        if n_skip > 0 {
                    result = cow_append(result, &self.fragment[.. i + 1]);
//
                }
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
///     something_else_expensive(result);
        }
            for &occurrence in find.occurrences().iter() {
    pub(crate) fn record(&self, sample: Sample) {
    #[bench]
pub fn enable_tracing_with_config(config: Config) {
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        }
                   r.lines_all().collect::<Vec<_>>());
    fn deserialize<D>(deserializer: D)
                el.end()
        self.pending_render

use std::cmp::{min,max};
        let mut cursor = Cursor::new(self, offset);
            rendered_styles.push((iv.start() as isize) - ix);
        }


        Some(self.cmp(other))
        // +2 for exe & thread name.
    pending_render: bool,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                name, categories, Some(payload.into()), start, end - start));
            Assert(0, "acpbdj".to_owned()),
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());

            // copy the current state
        }
    pub chars: String,
    min: usize,
                        hls.push((sel_start_ix, sel_end_ix));
                                priority,
        self.set_selection(text, SelRegion::caret(offset));
            Merge(0,1),
    /// Sets the selection to a new value, without invalidating.
    pub fn enable(&self) {
        }
        // selection state, and for scrolling it into view if needed. This choice can
        offset
            .map(|(i, _)| i)
    pub fn get_samples_count(&self) -> usize {

    }
    #[inline]
        Assert(usize, String),
    /// should be constructed via SampleGuard.
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                selections.push((sel_start_ix, sel_end_ix));
/// acquires a dependency on the `serde_json` crate.
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
                      width_cache: &mut WidthCache, keep_selections: bool)
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
        let a = Rope::from("a");
impl CategoriesT {
    fn test_cross_process_samples() {
}
/// # Arguments
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
                // TODO create InsertDelta directly and more efficiently instead of factoring
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
///
    fn eq_med() {
        let offset = self.line_col_to_offset(text, line, col);
            let style_id = self.get_or_def_style_id(client, styles, &style);
//
                    text.slice_to_string(region.min(), region.max())

        fn run_op(&mut self, op: &MergeTestOp) {
        trace.instant("4", &["test"]);
        if let Some(edit) = contents {
        // set last selection or word under current cursor as search query
        // is the new edit in an undo group that was already undone due to concurrency?
    }
{
            inserts = inserts.transform_expand(trans_inserts, after);
/// * `categories` - A static array of static strings that tags the samples in

    }
        match self {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        for find in &mut self.find {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
            write!(f, "{}", String::from(self))
        let inserts = parse_subset_list("

            SampleEventType::Metadata => 'M'
    first_line: usize,
    }
            trace.instant("test_samples_pulse", &["test"]);
        assert_eq!(0, a.line_of_offset(0));
    }
#[derive(Clone, Copy)]
        // Any edit cancels a drag. This is good behavior for edits initiated through
        // if self.end is inside this chunk, verify that it is a codepoint boundary

            Merge(0,2),


}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    first_line: usize,
        for rev in old_revs.into_iter().rev() {
        let after_first_edit = engine.get_head_rev_id().token();
                let (pl, poffset) = self.prev_leaf()?;
                } else {
        b.push_str(new);
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        assert_eq!(trace.get_samples_count(), 0);
            let mut word_cursor = WordCursor::new(text, offset);
    type Output = Rope;
    #[inline]
                            max_undo_so_far: rev.max_undo_so_far,
            Merge(0,1),
        });
        // additional tests for line indexing
        /// Groups related edits together so that they are undone and re-done
    /// height of visible portion
use std::cmp::{min,max};
        let mut all_samples = self.samples.lock().unwrap();
        };
        // This might be an over-specified test as it will
/// See `trace_payload` for a more complete discussion.
                    };
{
        // likely be improved.
                selections.push((sel_start_ix, sel_end_ix));

    #[test]
    pub fn prev_grapheme(&mut self) -> Option<usize> {
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    #[test]
pub struct RevId {
    }
use std::fmt;
                    None
    fn bench_single_timestamp(b: &mut Bencher) {


    /// This is used to determined whether FindStatus should be sent to the frontend.
    fn find_base_1() {
fn shuffle(text: &Rope, tombstones: &Rope,
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
        assert_eq!(Some(8), a.next_grapheme_offset(0));
        assert_eq!(utf16_units, 20);
        for u in s.chars() {
    num: u32,
}
        revs.append(&mut revs_2);
    /// New offset to be scrolled into position after an edit.
pub struct RopeInfo {
    fn test_disable_drops_all_samples() {
    ///
    Width(f64),
    }
        let snapshot = trace.samples_cloned_unsorted();
        self.first_line = first;
        MergeTestState::new(4).run_script(&script[..]);
        assert_eq!(Some(2), b.next_codepoint_offset(0));

            GestureType::WordSelect =>
        let mut rendered_styles = Vec::new();

//! a previously committed version of the text rather than the current text,
            Some((l, off)) => (l, off),
            base_rev: RevToken, delta: Delta<RopeInfo>) {
        // current recording mechanism should see:
    }
        } else {
    #[inline]



        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    }

categories_from_constant_array!(8);
        assert_tokens(&rope, &[
        Self {

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        as_vec.extend(all_samples.iter().cloned());
use unicode_segmentation::GraphemeCursor;
                    self.set_selection(text, selection);
            .map(|(i, _)| i)
                    }
    /// Storage for all the characters that have been deleted  but could
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
/// # Arguments
/// ```rust,ignore
        self.replace.clone()
        let offset = self.line_col_to_offset(text, line as usize, 0);
}
        -##-
    pub tid: u64,
    bytecount::count(s.as_bytes(), b'\n')
    #[derive(Clone, Debug)]
        engine.gc(&to_undo);
        --#--
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        for rev in &self.revs[rev_index + 1..] {
    }
                    }
                self.highlight_find = visible;
                }

    fn undo_2() {
    /// Create a new Engine with a single edit that inserts `initial_contents`
            next_boundary = c.next_boundary(&l, leaf_offset);
    #[cfg(feature = "benchmarks")]
        }

        let first_rev = engine.get_head_rev_id().token();
            Merge(0,1),
    #[inline]
        }
        self.text = new_text;
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
    /// Note: unlike movement based selection, this does not scroll.
        }
        } else {
                Some(pos) => offset += pos + 1,
//     http://www.apache.org/licenses/LICENSE-2.0
                        let un_deleted = deletes_from_union.subtract(deletes);
    /// Width in px units, requiring measurement by the front-end.
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
        assert_eq!(a.len(), r.offset_of_line(1));
        let d = RopeDelta_::deserialize(deserializer)?;
        let inserts = parse_subset_list("
    }
    }
                    selection.add_region(occ);
            samples: Mutex::new(FixedLifoDeque::new())
          F: FnOnce() -> R
    #[test]

    TRACE.samples_cloned_sorted()
    ///
    ///
extern crate time;
            //self.cursor.set(self.end);
                                     payload: Option<TracePayloadT>,

        let new_sel = self.drag_state.as_ref().map(|drag_state| {
        struct CategoriesTVisitor;
        b.push(self);
    pub(crate) fn has_pending_render(&self) -> bool {
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {

    fn rebase_1() {
            Revision {

            lines: 0,
    }
    pub fn get_samples_count(&self) -> usize {
    fn consume(self) -> (Option<String>, Option<i32>) {
                            max_undo_so_far: rev.max_undo_so_far,
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        }
    #[test]
                    if invert_undos {


fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {


        assert_eq!(1, a.line_of_offset(2));

    use rope::{Rope, RopeInfo};

    priority: usize,
    pub fn enabled(config: Config) -> Self {
        }
    }
                return false;
                }
    ///
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
                first_sample_timestamp,
    }
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);

    }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
/// bytes required to represent the codepoint.
/// # Examples
    }
            if !s.is_empty() {
        info.lines

    fn utf16_code_units_metric() {
        let a = Rope::from("\n");
    ProcessName { name: String },
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
    /// 96 bits which is more than sufficient for this to never happen.
            SelectionForReplace => self.do_selection_for_replace(text),
                              start_ns: u64,
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
        for (iv, style) in style_spans.iter() {
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
//! a previously committed version of the text rather than the current text,
                                deletes.transform_shrink(&gc_dels))
            }
    fn next(&mut self) -> Option<Cow<'a, str>> {
    /// Return the offset of the codepoint before `offset`.
    sample_limit_count: usize
        let script = vec![
        let (metadata_name, sort_index) = meta.consume();
                Contents::Undo { .. } => panic!(),
                    let (start, end) = {
                    None
                            deletes_bitxor.transform_shrink(&gc_dels)
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        assert_eq!(snapshot[2].name, "x");
        assert_eq!(Some(0), b.prev_codepoint_offset(2));

                          payload: Option<TracePayloadT>) -> Self
                self.start_drag(offset, offset, offset);
    pub fn new_disabled() -> Self {
                Contents::Undo { .. } => panic!(),
    TRACE.instant_payload(name, categories, payload);
    #[inline]
    }
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
            },
    // this should have the same behavior, but worse performance
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        assert_eq!(trace.is_enabled(), true);
        assert_eq!(rope.offset_of_line(4), rope.len());
}
                SelRegion::new(start, end)
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
impl Serialize for Delta<RopeInfo> {
/// acquires a dependency on the `serde_json` crate.
}
//!
    inner: LinesRaw<'a>
                },
        let a = Rope::from("a\nb\nc");
    AsyncEnd,
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }

            Assert(0, "acrpbdzj".to_owned()),
            MetadataType::ProcessName {..} => "process_name",
            Assert(0, "adc".to_owned()),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    fn deserialize<D>(deserializer: D)
        self.enabled.load(AtomicOrdering::Relaxed)
    #[serde(default = "initial_revision_counter", skip_serializing)]
        assert_eq!(0, a.lines_raw_all().count());
    }
        }
}

extern crate lazy_static;
/// xi_trace::trace("something happened", &["rpc", "response"]);

        while offset < l.len() && !l.is_char_boundary(offset) {
        // send updated replace status if changed
                }
        }
    }
            // I think it's a precondition that this will never be called
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    fn find_base_1() {
        let style = style_map.merge_with_default(style);
    pub(crate) fn get_view_id(&self) -> ViewId {
            SampleEventType::ObjectSnapshot => 'O',
                find_leaf_split_for_bulk(s)
    /// This is a `Subset` of the "union string" representing the characters

        assert_eq!(output, String::from(engine.get_head()));
            Assert(1, "acb".to_owned()),
                if !region.is_caret() {
    }
    pub fn get_samples_count(&self) -> usize {
// Low level functions
    /// ancestor in order to be mergeable.
        self.push_str(&other[start..end]);
    }
use std::sync::Mutex;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        let trace = Trace::enabled(Config::default());
        Cow::from(b)
    #[test]
        }
pub fn is_enabled() -> bool {
        }
        let a = Rope::from("");
                }
    }
        let (leaf, pos) = cursor.get_leaf().unwrap();
            Some(Cow::Owned(mut s)) => {
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
            }
        if last_col == 0 && last_line > first_line {
        -> Self
            DeltaElement::Insert(ref node) =>
                self.do_selection_for_find(text, case_sensitive),
                inserts: inserted,
        engine.edit_rev(0, 1, first_rev, build_delta_1());
    }
        assert_eq!(snapshot.len(), 9);
        let (leaf, offset) = match self.get_leaf() {
    #[cfg(feature = "json_payload")]
        self.text = new_text;
    }


        let a = Rope::from("a\nb\nc");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    pub(crate) fn get_replace(&self) -> Option<Replace> {
        }
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

        let search_query = match self.selection.last() {
        let rearranged = rearrange(&revs, &base, 7);
#[derive(Clone, Copy)]
                metadata_name: None,

                            deletes_bitxor
        cursor.next::<BaseMetric>()
        // TODO: want to let caller retain more rev_id's.
        if let Some(lines) = lines {
    }
        assert_eq!(2, a.offset_of_line(1));

        }
                        .map(DeltaElement::from).collect(),

        // +2 for exe & thread name.
            let mut word_cursor = WordCursor::new(text, offset);
    #[cfg(feature = "benchmarks")]
const MIN_LEAF: usize = 511;
        }


                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
    }
                deletes: new_deletes,
        if let Some(breaks) = self.breaks.as_mut() {
            }
        if self.current.is_none() {

        // We could probably reduce the cloning of selections by being clever.
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
    #[test]
//! under `Engine::edit_rev`, which is considerably simpler than the usual
///

            AssertMaxUndoSoFar(1,3),
        s.is_char_boundary(offset)
        }
                (!region.is_upstream() && c == start_pos) ||
            max_undo_so_far,
    pub fn get_head_rev_id(&self) -> RevId {
        }
        assert_eq!(2, b.offset_of_line(1));
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },

        soln.push('f');
        // TODO: want to let caller retain more rev_id's.
            while !s.is_char_boundary(splitpoint) {
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        self.lc_shadow = b.build();
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    fn next(&mut self) -> Option<u8> {
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
            base_rev: RevToken, delta: Delta<RopeInfo>) {
                MergeTestOp::AssertAll(ref correct) => {
///
//! It enables support for full asynchronous and even peer-to-peer editing.
        }
            // d-expand by other
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
                match *other {
        b.push(self);
        debug_subsets(&rebased_inserts);

trait StringArrayEq<Rhs: ?Sized = Self> {
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },

/// Valid within a session. If there's a collision the most recent matching
            self.pid == other.pid &&
                    };
        fn new(count: usize) -> MergeTestState {
            }
    }
    }

        d_builder.build()
    }

                let (pl, poffset) = self.prev_leaf()?;

        assert_eq!(output, String::from(engine.get_head()));
use client::Client;
    #[bench]
    }
        }
    #[serde(rename = "xi_payload")]
        if f.alternate() {
mod sys_pid;

                            }
            let b_to_merge = &other.revs[base_index..];
        thread.name().map(|ref s| to_cow_str(s.to_string()))
            "op": op,

        match rev.edit {
mod tests {

            SampleEventType::AsyncStart => 'b',
            }
    fn drop(&mut self) {
        samples[1].pid = 2;
        let mut engine = Engine::new(Rope::from(TEST_STR));
///
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                    if s.ends_with('\r') {
    /// they would be if they hadn't been deleted.
            name: name.into(),
            Some(Cow::Owned(mut s)) => {
}
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        ids.iter().cloned().map(|i| {
#[cfg(test)]
            .map(|pos| offset + pos + 1)
            self.next()
    pub fn line_of_offset(&self, offset: usize) -> usize {
        match rev.edit {
        let region = SelRegion::caret(offset);
                sel.add_region(SelRegion::new(last.start, offset));
    }
    }
///
        assert_eq!(utf16_units, 17);
    }
    /// Each instance represents a separate search query.
pub struct Engine {
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// Set the selection to a new value.
            // TODO: finer grain invalidation for the line wrapping, needs info

    /// Imagine a "union string" that contained all the characters ever
    }
        deletes_from_union
    }
        }
        let b = Rope::from("b");
                                             &text, false);
        let a = Rope::from("");
/// as opposed to thousands of revisions.
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
    fn test_get_sorted_samples() {
    #[inline]
    pub name: StrCow,
    pub fn max_undo_group_id(&self) -> usize {
                    if undone_groups.contains(undo_group) {
    }

                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
        let iv = Interval::new_closed_open(start, end);
        use std::hash::{Hash, Hasher};
#[derive(Clone, Copy)]
impl MetadataType {
}
        plan.request_lines(first_line, last_line);
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {

        let mut b = String::new();
            offset -= 1;


                for &region in rest {
        assert!(a != empty);
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
        samples
    }
#[derive(Clone, Copy)]
    #[serde(default = "default_session", skip_serializing)]
        let trace = Trace::enabled(Config::with_limit_count(10));
        self.replace_changed = true;
            inserts: Subset::new(0),
macro_rules! categories_from_constant_array {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
        } else {
        assert_eq!(snapshot[2].name, "a");
            }
        let trace = Trace::enabled(Config::with_limit_count(10));
                return false;

        for _i in 0..50 {
    }
    // use own breaks if present, or text if not (no line wrapping)
    fn merge_whiteboard() {
                SelectionModifier::Add => {
    /// borrowed from the rope.
        let contents = match rev.edit {


                deletes: new_deletes,
    /// Sets the selection to a new value, without invalidating.
    }
pub enum SampleEventType {
use std::collections::HashMap;

            'f' => SampleEventType::FlowEnd,
            None
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    }
            }
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
            Merge(1,0),
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
            if cur_len_utf16 >= in_measured_units {
    /// An iterator over the raw lines. The lines, except the last, include the

                        .map(DeltaElement::from).collect(),
    }
        self.lines += other.lines;
    ///
            self.first_line = line;
            pid: sys_pid::current_pid(),
            sel.add_region(
        // even though the actual sampling order (from timestamp of

        }
    }
        let trace = Trace::enabled(Config::with_limit_count(20));
        }, new_text, new_tombstones, new_deletes_from_union)
            Assert(2, "ab".to_owned()),
    // callers should be encouraged to use cursor instead
            SampleEventType::Instant => 'i',
                self.highlight_find = visible;
            inserts: Subset::new(0),

    pending_render: bool,
use xi_rope::delta::Delta;
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    ///
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
                        let end_line = start_line + seg.n;
        Self {

            Assert(1, "arpbzj".to_owned()),
    TRACE.closure_payload(name, categories, closure, payload)
            MetadataType::ThreadName {..} => "thread_name",
            SampleGuard::new_disabled()
        if offset == 0 {
    }
    fn find_common_1() {
            SelectionIntoLines => self.do_split_selection_into_lines(text),
    }
{
    fn invalidate_selection(&mut self, text: &Rope) {
                Some(pos) => offset += pos + 1,
use fixed_lifo_deque::FixedLifoDeque;
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);

                }
}
                    let new_gc_dels = if inserts.is_empty() {
        MergeTestState::new(2).run_script(&script[..]);
                    if !deletes.is_empty() {

                        let _ = s.pop();
        if before {
            end,
// Copyright 2016 The xi-editor Authors.
                // TODO create InsertDelta directly and more efficiently instead of factoring

                            if !inserts.is_empty() {
        Self {
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
            selection.delete_range(offset, offset, true);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    {
        View {
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
impl Trace {
#[inline]
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    DurationBegin,
        }, new_text, new_tombstones, new_deletes_from_union)
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            }
        as_vec
    }
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        } else {
    }

            } else {
        // even though the actual sampling order (from timestamp of
    }
//! An engine for handling edits (possibly from async sources) and undo. It
        self.tombstones = new_tombstones;
        let trace = Trace::enabled(Config::with_limit_count(20));

            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    #[serde(skip_serializing_if = "Option::is_none")]

/// from the new revisions on the left.
        assert_eq!(trace.get_samples_count(), 0);
    /// Does a drag gesture, setting the selection from a combination of the drag
        ");
    fn measure(_: &RopeInfo, len: usize) -> usize {
    fn do_selection_for_replace(&mut self, text: &Rope) {
    /// This function does not perform any scrolling.
        let mut cursor = Cursor::new(self, offset);
    ///
        // set last selection or word under current cursor as replacement string
    }
        Lines {
    }
    All,
    /// Determine whether `offset` lies on a codepoint boundary.
    #[cfg(feature = "benchmarks")]
        trace.closure_payload("x", &["test"], || (),
    }
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn merge_session_priorities() {
    }
                    let (start, end) = self.peers.split_at_mut(ai);
            }
        if !self.is_enabled() {
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    where D: serde::Deserializer<'de> {
        let start = self.line_col_to_offset(text, line, 0);
            let start = self.line_of_offset(last_text, iv.start());
                                     categories: C,
// easily delta-compressed later.
        // insert a character at the beginning
                el.serialize_field(end)?;
            base_rev: RevToken, delta: Delta<RopeInfo>) {
    use super::*;
/// Disable tracing.  This clears all trace data (& frees the memory).
            Some(offset - len)
    }
        a.lines_all().collect::<Vec<_>>());
        // +2 for exe & thread name.
        Rope::from_str(s.as_ref()).unwrap()
            // TODO: finer grain invalidation for the line wrapping, needs info
                              categories: C,
        ---#-

    }
    }
                },
    TRACE.closure(name, categories, closure)

        let mut result = String::new();
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
            let max_undo = self.max_undo_group_id();
    highlight_find: bool,
/// assert!("hello world" == String::from(a + b));


    /// Update front-end with any changes to view since the last time sent.
#[derive(Serialize, Deserialize, Debug, Clone)]
/// typing a paragraph) will be combined into a single segment in a transform
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
/// Creates a duration sample that measures how long the closure took to execute.
                        }
                        if self.undone_groups.contains(undo_group) {
        let mut b = TreeBuilder::new();
        }
    fn deserialize<D>(deserializer: D)
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();

    ///
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
            offset,
            match exe_name.clone().file_name() {
}
    fn replace_small() {
        let mut soln = String::from("h");
        assert_eq!(Some(3), a.next_codepoint_offset(1));
/// Returns the operations in `revs` that don't have their `rev_id` in

                    if let Some(new_gc_dels) = new_gc_dels {
    }
        self.find_changed = FindStatusChange::Matches;
        if self.cursor.pos() >= self.end {
    }
        assert!(end <= leaf.len());
            Assert(0, "acbd".to_owned()),
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {

    fn can_fragment() -> bool {
    }

        // current recording mechanism should see:
        let first_rev = engine.get_head_rev_id().token();


    #[serde(skip_serializing_if = "Option::is_none")]
        deletes_from_union
        }
}
        --#--
        let d = RopeDelta_::deserialize(deserializer)?;
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            buffer_id: buffer_id,
                last_priority = Some(priority);
                    let (mut a, rest) = end.split_first_mut().unwrap();
        ];
/// that sorted would be prohibitively expensive.
        }
        self.tombstones = new_tombstones;

        for (iv, style) in style_spans.iter() {

            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        } else {
                None => {
    fn add(self, rhs: Rope) -> Rope {
                              to_payload("test_get_samples"));
                if is_base {
            } else {
    }
        }
            // corner and I'm lazy -cmyr
        let mut result = Cow::from("");
            replace: None,
                (region.is_upstream() && c == pos) ||
    pub fn iter_chunks_all(&self) -> ChunkIter {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
            HighlightFind { visible } => {
    // A colliding session will break merge invariants and the document will start crashing Xi.
                    e.edit_rev(p, u, head, delta.clone());
        engine.gc(&gc);
mod sys_pid;
            sel
    pub fn line_of_offset(&self, offset: usize) -> usize {

        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
                    result = cow_append(result, self.fragment);
        }
        if offset >= text.len() {
        let mut result = String::new();
    }
            Assert(0, "zcpbdj".to_owned()),
    // TODO: replace this with a version of `lines` that accepts a range
    fn bench_trace_instant(b: &mut Bencher) {
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
                      width_cache: &mut WidthCache, keep_selections: bool)
    }
/// stored as tracing could still be enabled but set with a limit of 0.
    /// the same even if it is rebased or merged between devices.
                Contents::Edit {inserts, ..} => inserts,
        d_builder.delete(Interval::new_closed_open(10, 36));
        self.wrap_col = WrapWidth::Width(self.size.width);

        engine.edit_rev(1, edits+1, head2, d2);
            SampleEventType::FlowInstant => 't',
        assert_eq!(trace.is_enabled(), true);
            }
            let b = self.current.unwrap().as_bytes()[self.idx];
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
               a.lines_all().collect::<Vec<_>>());
#[derive(PartialEq, Debug)]
                } else if click_count == Some(3) {
    }
                                                    style_spans, client,
            self.set_selection(text, sel);
#[cfg(feature = "dict_payload")]
/// How tracing should be configured.
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        if self.cursor.pos() >= self.end {
    DurationEnd,
        match *self {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    fn gc_4() {
        if line > max_line {
/// # Performance

    }
            undone_groups: BTreeSet::new(),
#[derive(Copy, Clone)]

                MergeTestOp::AssertAll(ref correct) => {
                match elem {
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
        assert_eq!(snapshot[8].name, "x");
//

        self.size = size;
            client.scroll_to(self.view_id, line, col);
        self.text = new_text;
        //};
impl From<Vec<String>> for CategoriesT {
    }
use linewrap;
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    }
//! There is also a full CRDT merge operation implemented under
    }
        if offset >= text.len() {
    }
            }
        assert_eq!(rope.line_of_offset(3), 1);
        }
                    RopeDeltaElement_::Copy(start, end) =>
/// However, anything that can be converted into a Cow string can be passed as

        let mut leaf_offset = pos - offset;
    }

#[cfg(feature = "dict_payload")]
        match self.inner.next() {
        assert_eq!(Some(17), a.next_grapheme_offset(9));
            match rev.edit {
use tabs::{ViewId, BufferId};
            self.start_drag(offset, offset, offset);
            "ops": ops,
    }
            AssertAll("ac".to_owned()),
        -> Result<CategoriesT, D::Error>
        -##-
        let inserts = parse_subset_list("
        --#--
            }
        if (b as i8) >= -0x40 {
                peer.set_session_id(((i*1000) as u64, 0));
        // insert character at end, when this test was added, it panic'd here
        assert_eq!(0, a.lines_raw_all().count());
        d_builder.delete(Interval::new_closed_open(10, 36));
                if rev.max_undo_so_far < lowest_group {
        let mut engine = Engine::new(Rope::from(""));
        Self {
        assert_eq!(b, String::from(a));
        MergeTestState::new(3).run_script(&script[..]);
        // we add the special find highlights (1) and selection (0) styles first.
        } else {
        delta.serialize_field("els", &self.els)?;
        assert_eq!(trace.get_samples_count(), 1);

    StaticArray(&'static[&'static str]),
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));

    ThreadSortIndex { sort_index: i32 },
        &self.selection
            };
            categories: Some(categories.into()),
/// the session ID component of a `RevId`
    // * Unicode width (so CJK counts as 2)
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    }
            a = a + Rope::from(&c);
        let expand_by = compute_transforms(revs);
    /// This case is a regression test reproducing a panic I found while using the UI.
    ///
        ]);


    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            text: Rope::default(),
    }
        trace.disable();

                    }
        ids.iter().cloned().map(|i| {


use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    /// Time complexity: O(log n)
                    }

        }
        // todo: the correct Find instance needs to be updated with the new parameters
categories_from_constant_array!(4);
    /// controlled by features (default string).
            a.push('a');
    pub tid: u64,
        /// revision that were deleted by this revision.
    ThreadName { name: String },
            None => text.line_of_offset(offset)
            Assert(1, "arpbzj".to_owned()),
            None
        trace.instant("2", &["test"]);
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
// You may obtain a copy of the License at
pub struct Size {
                        };
                        let un_deleted = deletes_from_union.subtract(deletes);
    fn to_payload(value: &'static str) -> &'static str {
            find: Vec::new(),
                    }

        }
            SampleEventType::AsyncInstant => 'n',
    }
                self.set(pos);
        };
        rope.offset_of_line(5);
                        Err(e) => {
    }
///
        rope.line_of_offset(20);
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            warn!("Failed to get path to current exe: {:?}", e);
use serde::de::{Deserialize, Deserializer};
    pub payload: Option<TracePayloadT>,
        assert_eq!(None, a.next_grapheme_offset(17));
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
pub struct Lines<'a> {
    fn compute_transforms_1() {

                        self.revs.push(Revision {
        }
            Merge(0,2), Merge(1, 2),
    if a.is_empty() {
            self.idx = 0;
    {
    {
    /// All the selection regions other than the one being dragged.
    }
            let right_str = self[splitpoint..].to_owned();
                }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    use std::collections::BTreeSet;
        if let Some(breaks) = self.breaks.as_mut() {
        let a2 = Rope::from("a");
    }
        self.enabled.store(true, AtomicOrdering::Relaxed);
        -##-
                           styles: &StyleMap, style_spans: &Spans<Style>,
        for r in &self.revs[ix + 1..] {
        assert_eq!(snapshot[1].name, "thread_name");
        self.tombstones = new_tombstones;
                    return i + 1; // +1 since we know the one we just found doesn't have it
    /// Returns the visible line number containing the given offset.
                if is_base {
use std::borrow::Cow;
        let new_pos = self.pos() + (end - offset);
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
            // with offset == 0, but be defensive.
        if let Some(breaks) = self.breaks.as_mut() {
        delta.end()
                if is_base {


        let mut revs_3 = basic_insert_ops(inserts_3, 2);
/// returned value is dropped.  `trace_closure` may be prettier to read.
    // possible to fix it so that's not necessary.
                                                     "insert", node)
        // since one of the two deletes was gc'd this should re-do the one that wasn't

/// revisions on top of the revisions represented by `expand_by`.
            trace.instant("something", &[]);
                inserts: new_inserts,
            1 if self.selection[0].is_caret() => {
/// Creates a duration sample that measures how long the closure took to execute.
            pid: sys_pid::current_pid(),
        assert_eq!(None, a.prev_grapheme_offset(0));
        assert_eq!(4, a.offset_of_line(2));

        assert_eq!(2, expand_by[1].0.priority);
            Merge(1,0),
        self.set_dirty(text);

        } else {
    #[serde(skip_serializing)]
        let subset_str = format!("{:#?}", expand_by[0].1);
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
                    }
}
    }
    where S: Into<StrCow>, C: Into<CategoriesT>
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        let (metadata_name, sort_index) = meta.consume();
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        }
    }
    /// Note: unlike movement based selection, this does not scroll.
}
            tid: sys_tid::current_tid().unwrap(),
/// Stores the relevant data about a sample for later serialization.
            Merge(1,0),
                    }
        } else {
        }).collect();
            .map(|(i, _)| i)
        as_vec.extend(all_samples.iter().cloned());
        where S: Into<StrCow>, C: Into<CategoriesT>
                undo_group,
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
    deletes: Subset,

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
            min: offset,
        let len = match first_rev.edit {
///
    /// This uniquely represents the identity of this revision and it stays
                                          closure: F, payload: P)
                    } else {

        assert_eq!(Some(9), a.next_grapheme_offset(3));
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        ];
            fragment: ""
    }
    fn can_fragment() -> bool {
    }
/// of Sample that determines order.
            return false;
            "text": &l_str,
    let mut out = Vec::with_capacity(b_new.len());
/// Revision will be used, which means only the (small) set of concurrent edits
    /// The current contents of the document as would be displayed on screen
        assert_eq!(None, b.next_codepoint_offset(9));

    DurationEnd,
        rendered_styles
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        self.find.clear();
                self.set_dirty(text);
                },
    /// Generate line breaks based on width measurement. Currently batch-mode,
        let contents = Contents::Edit {
// distributed under the License is distributed on an "AS IS" BASIS,
mod fixed_lifo_deque;
pub type RevToken = u64;
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        // creation) is:
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            tid: tid,
/// an argument.

        let script = vec![
///
        engine.undo([1].iter().cloned().collect());
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)

            AssertMaxUndoSoFar(0,2),
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        match *self {
            }
            },
        expand_by = next_expand_by;
    let mut out = Vec::new();
pub type StrCow = Cow<'static, str>;
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
categories_from_constant_array!(6);
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
    TRACE.block_payload(name, categories, payload)
        let expand_by = compute_transforms(revs);
use xi_rope::interval::Interval;
        }
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
            Assert(0, "zcbd".to_owned()),
    pub name: StrCow,
        let subset_str = format!("{:#?}", expand_by[0].1);
        }
///
    out.as_mut_slice().reverse();

use std::collections::hash_map::DefaultHasher;
        engine.undo([1].iter().cloned().collect());
/// required). Mutations are generally copy-on-write, though in-place edits are
        let mut engine = Engine::new(Rope::from(TEST_STR));

    }
    pub fn sel_regions(&self) -> &[SelRegion] {
        }
/// Represents the current state of a document and all of its history
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
        engine.undo([1].iter().cloned().collect());

            Some(b)

        /// Used to store a reversible difference between the old
    }

    // of the union string length *before* the first revision.

        // and it only needs to be consistent over one execution.
    /// This method is responsible for updating the cursors, and also for
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        let mut result = Cow::from("");
        b.push(self);
        revs.append(&mut revs_2);
{
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        }
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
            self.lc_shadow.edit(start, end, new_end - start);
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    }
            1 if self.selection[0].is_caret() => {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
}
        }
// Licensed under the Apache License, Version 2.0 (the "License");
        assert_eq!(None, b.prev_codepoint_offset(0));
    #[test]
            },
        engine.undo([3].iter().cloned().collect());
        let mut cur_len_utf8 = 0;

    }
                self.start_drag(offset, offset, offset);
            lines: count_newlines(s),
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
        assert_eq!(snapshot[8].name, "c");

        ------#
        self.prev::<BaseMetric>();
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    #[test]
            engine.edit_rev(1, i+1, head, d);
        assert_eq!(2, a.line_of_offset(4));
    }
            Assert(1, "cb".to_owned()),

            MetadataType::ProcessName {name} => (Some(name), None),
        RevId { session1: 1, session2: 0, num: i as u32 }
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
}
/// some way.
            self.categories == other.categories &&
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
    All,

                Delta {
                           pristine: bool)
        // set last selection or word under current cursor as replacement string
}
        let d = engine.delta_rev_head(first_rev);
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));


        for rev in &self.revs[first_candidate..] {
            // cursor

    #[test]
        let correct = parse_subset_list("
    // TODO make this faster somehow?

                    let mut selection = self.selection.clone();
        let mut engine = Engine::new(Rope::from(TEST_STR));

                (drag_state.min, max(offset, drag_state.max))
    }
            self.breaks = None
    fn deserialize<D>(deserializer: D)
                     modify_selection: &SelectionModifier) {
        MergeTestState::new(2).run_script(&script[..]);
        let revs = basic_insert_ops(inserts, 1);
        // +2 for exe & thread name.
            rendered_styles.push(sel_end as isize - sel_start as isize);
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    }
            } else {

                        // no need to un-delete undone inserts since we'll just shrink them out
                SelectionModifier::Set => self.set_selection(text, occ),
        while !s.is_empty() {
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
                    }
/// ```
    }
        -----#
    ///
                }
}
    #[bench]
        for find in &mut self.find {
    }

    /// Garbage collection means undo can sometimes need to replay the very first
    /// Only number of matches changed
/// {
    {
        // +2 for exe & thread name.
    deletes_from_union: Subset,
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    #[test]
        -##-
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    }
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
pub struct SampleArgs {
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
            "n": n,
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    #[serde(rename = "cat")]
    #[serde(default = "initial_revision_counter", skip_serializing)]
}
    out
    /// Toggles a caret at the given offset.
                    if !inserts.is_empty() {
            Merge(1,0),
            breaks: None,
        if self.len() <= MAX_LEAF {
            inserts = inserts.transform_expand(trans_inserts, after);
    pub fn is_enabled(&self) -> bool {
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
            return ix;
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        self.set_selection(text, sel);
            Assert(0, "acbd".to_owned()),
            return self.len();
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        --#-
        }
    fn eq_med() {

                    filename.to_str().map(|s| s.to_string())
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
// Unless required by applicable law or agreed to in writing, software
///
        );
    fn from(r: Rope) -> String {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
pub struct Sample {
        self.tombstones = new_tombstones;
        self.find.clear();
        if let Contents::Edit {priority, inserts, .. } = r.edit {
            Merge(1,0),
        // shouldn't do anything since it was double-deleted and one was GC'd

    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    /// Time complexity: O(log n)
        sel.collapse();
        }
    fn arr_eq(&self, other: &Rhs) -> bool;
    #[serde(rename = "name")]
                            if !inserts.is_empty() {
                max_undo_so_far: i,
        assert_eq!(snapshot[8].name, "c");

    }
}
                        inserts: transformed_inserts,
    // recompute the prefix up to where the history diverges, but it's not clear that's
    }
    /// part of the initial contents since any two `Engine`s need a common
use std::mem::size_of;
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        }
/// `base_revs`, but modified so that they are in the same order but based on
mod sys_pid;
        let script = vec![
    fn compute_transforms_1() {
        count_utf16_code_units(&s[..in_base_units])
            None
        MergeTestState::new(3).run_script(&script[..]);
            FindAll => self.do_find_all(text),
    }
    // TODO(vlovich): Replace all of this with serde flatten + rename once
                Contents::Undo { .. } => panic!(),
    pub fn next_grapheme(&mut self) -> Option<usize> {
fn find_leaf_split_for_merge(s: &str) -> usize {
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
        (self.session1, self.session2)
/// However, anything that can be converted into a Cow string can be passed as
        selection.add_region(region);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        let mut cursor = Cursor::new(self, offset);
                    Some(Contents::Edit {
                }
        ");
/// None if an irrecoverable error occured.
                              start_ns: u64,
/// an argument.
        self.set(new_pos);

    fn rebase_1() {
            }
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
/// acquires a dependency on the `serde_json` crate.

    fn to_payload(value: &'static str) -> &'static str {
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
        let mut engine = Engine::empty();
            let deletes = Subset::new(inserts.len());
        self.scroll_to_cursor(text);
))]
            Assert(0, "acrbdz".to_owned()),
        let mut r = Rope::from("27");
        assert_eq!(1, a.line_of_offset(2));
/// # use xi_rope::Rope;
                            rev_id: rev.rev_id,

        assert_eq!(trace.get_samples_count(), 5);

                    }
    #[cfg(feature = "benchmarks")]
        if !gc_dels.is_empty() {

    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        }

        self.push_str(&other[start..end]);
        -----#
            true => self.selection.clone(),
    }
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
/// on program launch.
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
    #[cfg(feature = "benchmarks")]
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    let mut out = Vec::with_capacity(revs.len());

    }
            }
                    selection.add_region(occ);
    s.serialize_char(ph.into_chrome_id())
    }
    out
            'E' => SampleEventType::DurationEnd,
    #[cfg(feature = "benchmarks")]
/// monotonically increasing single global integer (when tracing) per creation
    // * Code units in some encoding
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    ///
impl Metric<RopeInfo> for BaseMetric {
        let mut a = Rope::from("");
    // this is the cost contributed by the timestamp to trace()
    fn into_chrome_id(&self) -> char {
            if region.is_caret() {

            'n' => SampleEventType::AsyncInstant,
    samples: Mutex<FixedLifoDeque<Sample>>,
//
        let mut b = String::new();
        let styles = self.render_styles(client, styles, start_pos, pos,
///
        assert_eq!(TEST_STR, String::from(engine.get_head()));

        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>

struct DeltaOp {
        assert_eq!(snapshot[5].name, "b");
        let mut ix = 0;
        Self {
    #[bench]

//! An engine for handling edits (possibly from async sources) and undo. It

    // use own breaks if present, or text if not (no line wrapping)
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
        self.deletes_from_union_before_index(rev_index + 1, true)
}

        if let Some(sel) = new_sel {
// easily delta-compressed later.
    /// Returns an iterator over chunks of the rope.
    }

        assert_eq!(utf16_units, 17);
            Assert(1, "apb".to_owned()),
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        match *self {

            update["lines"] = json!(lines);
#[cfg(test)]
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
    }
    #[test]
        }
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
        }
        }
// ======== Merge helpers
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
        if let Some(ref mut trace) = self.trace {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    fn merge_simple_delete_1() {
}
/// conforms to is currently determined by the feature this library is compiled
    }

                find_leaf_split_for_bulk(s)
/// bytes required to represent the codepoint.
    pub fn get_head_rev_id(&self) -> RevId {
/// ```
/// Transform `revs`, which doesn't include information on the actual content of the operations,
        ];
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
            Merge(0,2), Merge(1, 2),
        }

        let new_head = engine.get_head_rev_id().token();
trait StringArrayEq<Rhs: ?Sized = Self> {
    /// Selects the given region and supports multi selection.
        let snapshot = trace.samples_cloned_unsorted();
                self.set(pos);


            panic!("line number {} beyond last line {}", line, max_line);
            inner: self.lines_raw(start, end)

    pub width: f64,
            SampleEventType::FlowStart => 's',


    //
    /// Create a new Engine with a single edit that inserts `initial_contents`
    #[test]
        assert_eq!(None, b.next_codepoint_offset(9));
        use self::MergeTestOp::*;
    text: Rope,
        if offset >= text.len() {
    /// Return the byte offset corresponding to the line number `line`.

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            soln.push('b');
            AssertMaxUndoSoFar(1,3),
            replace: None,

                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
// Copyright 2018 The xi-editor Authors.
    Instant,
    }
            write!(f, "{}", String::from(self))
        if let Some(new_scroll_pos) = self.scroll_to.take() {

        assert_eq!(snapshot[4].name, "y");
        assert_eq!(output, String::from(engine.get_head()));
    #[bench]
            if self.line_of_offset(text, offset) <= line {
                        let mut rendered_lines = Vec::new();
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
        } else {
        assert_eq!(0, a.lines_raw_all().count());
    }
    #[test]
    // encourage callers to use Cursor instead?

        ");
    fn compute_transforms_2() {

        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
///     something_else_expensive();

        /// The subset of the characters of the union string from after this
    where S: Into<StrCow>, C: Into<CategoriesT>
            let inserted = inserts.inserted_subset();
        assert_eq!(0, a.offset_of_line(0));
                    }
/// # Arguments
    }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            let expand_by = compute_transforms(a_new);
    base_sel: Selection,
    fn undo_2() {
            'i' => SampleEventType::Instant,

        self.set_selection(text, selection);

            Move(movement) => self.do_move(text, movement, false),
            } else if incomp == GraphemeIncomplete::PrevChunk {
            undone_groups: BTreeSet::new(),
                            if !deletes.is_empty() {
    }
        assert_eq!(Some(0), a.prev_codepoint_offset(1));

            Assert(1, "acpbdj".to_owned()),
#![cfg_attr(feature = "benchmarks", feature(test))]


    fn merge_idempotent() {
            Merge(0,1),

        assert_eq!(2, expand_by[1].0.priority);
        }
            result.push_str(chunk);
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        rope.line_of_offset(20);
    }
    }
                }

        }
    pub fn enable(&self) {
        use self::ViewEvent::*;
                                                    self.size.width));
            sel.add_region(
    // for simplicity.
                    }
            match seg.tactic {
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
                }
                return None;
                last_priority = Some(priority);
        let a = Rope::from("a\nb\nc");
    fn bench_trace_block_disabled(b: &mut Bencher) {
    // and partly because you need to retain more undo history, to supply input to the

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

    pub fn join(&self, sep: &str) -> String {
        let mut cur_len_utf8 = 0;

use std::borrow::Cow;
                        Ok(s) => Some(s),
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
            HighlightFind { visible } => {
            Merge(0,1),
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
        engine.edit_rev(1, 1, first_rev, d1.clone());
            let mut sample = self.sample.take().unwrap();
        }
    }
            }
    }
        self.height = last - first;
    }
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));

    ($num_args: expr) => {
                if !inserts.is_empty() {
                }
        let revs = basic_insert_ops(inserts, 1);
                    }
    find_changed: FindStatusChange,
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
            SampleGuard::new_disabled()
            Drag(MouseAction { line, column, .. }) =>
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            if Some(priority) == last_priority {
        for region in self.selection.iter() {

            // if using breaks update cursor
/// Enable tracing with the default configuration.  See Config::default.
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
}

    where S: Into<StrCow>, C: Into<CategoriesT>
        // rebase the deletion to be after the inserts instead of directly on the head union
        }
        assert_eq!(2, a.line_of_offset(4));
            's' => SampleEventType::FlowStart,
    #[serde(default = "initial_revision_counter", skip_serializing)]
        ");
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        assert_eq!(1, expand_by.len());
    /// Return the byte offset corresponding to the line number `line`.

    }
        let mut delta = serializer.serialize_struct("Delta", 2)?;
pub struct Config {
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
//See ../docs/MetricsAndBoundaries.md for more information.
        d_builder.build()

            Merge(0,2), Merge(1, 2), Merge(3, 2),
                    s = s.transform_shrink(&transformed_inserts);
        engine.edit_rev(1, 3, new_head_2, d3);
            pos -= 1;
#[inline]
///

                        }
        }
            "styles": styles,

                            plan: &RenderPlan, pristine: bool)
/// A size, in pixel units (not display pixels).
        in_base_units
categories_from_constant_array!(1);
    /// Note: unlike movement based selection, this does not scroll.
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
            }
    ProcessName { name: String },

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
/// ```rust
    }

    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
            r = op.inserts.apply(&r);
    (out, text, tombstones, deletes_from_union)
        let line = self.line_of_offset(text, end);
    }
        self.revs.last().unwrap().rev_id
use std;
use std;

    }
/// Usage of static strings is encouraged for best performance to avoid copies.
        }
    where S: Into<StrCow>, C: Into<CategoriesT>
        }
/// # Examples
        let mut revs = basic_insert_ops(inserts_1, 1);
    {
    // ============== Merge script tests
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            let _x = trace.block("something", &[]);
    out.as_mut_slice().reverse();
    /// validate their input.
    }
/// ```
}
                }
            trace.closure("something", &[], || ());
                              categories: C,
        let mut end = start_pos + len;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));


        priority: usize,
    /// should be constructed via SampleGuard.
                        gc_dels = new_gc_dels;
    {
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        let trace = Trace::enabled(Config::default());

/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(utf16_units, 17);
        // position after 'f' in four
    }
#[cfg(feature = "json_payload")]
            s.as_bytes()[offset - 1] == b'\n'
    }
        cursor.prev_grapheme()
        if let Some((l, offset)) = self.get_leaf() {

    pub fn set_scroll(&mut self, first: i64, last: i64) {
        }).collect()
                    s = &s[..s.len() - 1];
        assert_eq!(0, a.line_of_offset(0));
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
        }, to_payload("test_get_samples_nested_trace"));
    session1: u64,
        }
    }
        self.find.clear();
    out
        cursor.prev::<BaseMetric>()
impl TreeBuilder<RopeInfo> {

    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.

                edit: contents.clone()
// distributed under the License is distributed on an "AS IS" BASIS,
                deletes: new_deletes,
            return self.len();
    utf16_count
            }
/// ```

    fragment: &'a str
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
    fn delta_rev_head_2() {
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    // and partly because you need to retain more undo history, to supply input to the

    /// state and new offset.

        }
enum Contents {

    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
//! text.
            Some((l, off)) => (l, off),
            }
        self.timestamp_us == other.timestamp_us &&

            }
    ///
    /// the frontend.
}

        /// The subset of the characters of the union string from after this
            Assert(5, "zacpb".to_owned()),
            rendered_styles.push(style_id as isize);
        if !self.is_point_in_selection(offset) {

    s.serialize_char(ph.into_chrome_id())

        let mut ix = 0;
        // clamp to end of line
extern crate test;
    pub fn enabled(config: Config) -> Self {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                CategoriesT::StaticArray(c)

        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
                println!("running {:?} at index {}", op, i);
        enum RopeDeltaElement_ {
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
    /// For safety, this will panic if any revisions have already been added to the Engine.
///
        Self {
    #[cfg(feature = "benchmarks")]
    /// This method is responsible for updating the cursors, and also for
        let mut retain_revs = BTreeSet::new();
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

        RopeInfo {
/// See `trace_payload` for a more complete discussion.
    #[test]
            None
                        gc_dels = gc_dels.transform_expand(inserts);
/// ```rust
        len
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
categories_from_constant_array!(2);
    let new_text = del_delta.apply(text);
                metadata_sort_index: None,
/// typing a paragraph) will be combined into a single segment in a transform
    DurationEnd,
use std::ops::Add;
//     http://www.apache.org/licenses/LICENSE-2.0
                return offset;
                text.offset_of_line(line)
    /// `text`. The count of a character in `deletes_from_union` represents
            SampleEventType::ObjectDestroyed => 'D',
/// let b = a.slice(1, 9);

    /// If `modify` is `true`, the selections are modified, otherwise the results
}

                CategoriesT::StaticArray(c)

    assert!(a[0].rev_id == b[0].rev_id);
    }
            Find { chars, case_sensitive, regex, whole_words } =>
}

    ///
                }
    match b {
        for i in 0..self.len() {
            }
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        self.iter_chunks(0, self.len())
                    } else {

            find.update_highlights(text, delta);
        assert_eq!(4, a.offset_of_line(2));
        let trace = Trace::disabled();
/// an argument.
    fn from(r: &Rope) -> String {
    if a.is_empty() {
    let mut out = Vec::with_capacity(revs.len());

        self.send_update_for_plan(text, client, styles,
/// something_expensive();
/// Indicates what changed in the find state.
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past

    }
        // We could probably reduce the cloning of selections by being clever.
    /// Move the selection by the given movement. Return value is the offset of
    AsyncEnd,
        };
        let last = max(last, 0) as usize;

    pub fn scroll_height(&self) -> usize {
                                          closure: F, payload: P)
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
}

        } else {
            Merge(0,1),
    }
fn find_leaf_split_for_merge(s: &str) -> usize {
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
            // with offset == 0, but be defensive.
//! which is sufficient for asynchronous plugins that can only have one
        self.set_dirty(text);
                max_undo_so_far: i+1,

    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        /// The subset of the characters of the union string from after this
    #[test]
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
/// Also note: in addition to the `From` traits described below, this module
        // A with ring, hangul, regional indicator "US"
    }
        let mut cursor = Cursor::new(self, offset);
    /// Width in bytes (utf-8 code units).
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                edit: Contents::Edit {
    }
                    }
/// });
    pub fn get_samples_limit(&self) -> usize {
    pub fn get_head_rev_id(&self) -> RevId {
#[inline]
        // TODO: simplify this through the use of scopeguard crate
                        Cow::Owned(un_deleted.transform_shrink(inserts))

}
use std::cell::RefCell;
        text = new_text;

        let mut b = line_cache_shadow::Builder::new();
    }
    #[test]
/// fn something_expensive() {
    /// List of categories the event applies to.
            sample.event_type = SampleEventType::DurationEnd;
            Assert(2, "ab".to_owned()),
}
                    e.edit_rev(p, u, head, delta.clone());
            self.current = next_chunk;
        // find the lowest toggled undo group number
        }
            l[offset..].chars().next()

use std::hash::{Hash, Hasher};
        // interior of first line should be first line
                self.add_selection_by_movement(text, Movement::Up),
    trace: Option<&'a Trace>,
    }
        }

    fn bench_trace_block_disabled(b: &mut Bencher) {
pub type StrCow = Cow<'static, str>;
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    /// The name of the event to be shown.
    /// New offset to be scrolled into position after an edit.
    //
    }
    fn build_delta_2() -> Delta<RopeInfo> {
            Assert(0, "acbd".to_owned()),
    /// in the range of 511-1024 bytes.
            }
                Some(Cow::from(s))
    pub height: f64,
                Contents::Edit {inserts, ..} => inserts,
        guard
        }
        let mut hls = Vec::new();
        MergeTestState::new(3).run_script(&script[..]);
}
            if inserts.is_empty() {
                        } else {
        self.scroll_to_cursor(text);
        let trace = Trace::enabled(Config::default());

                        ops.push(self.build_update_op("invalidate", None, seg.n));
        // position after 'f' in four
    let mut out = Vec::with_capacity(b_new.len());
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
        // NOTE: we derive to an interim representation and then convert

    }
    /// if there is not at least one edit.

///

    ///
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    fn merge_session_priorities() {
            offset += 1;
                self.do_selection_for_find(text, case_sensitive),
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
    }

                }
        let revs = basic_insert_ops(inserts, 1);
    /// the text).
    // Send the requested lines even if they're outside the current scroll region.
        }
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);

            trace: None,
    }
                    // we don't want new revisions before this to be transformed after us
        }).collect::<Vec<FindStatus>>()
            } else {
    }
fn shuffle(text: &Rope, tombstones: &Rope,
    1

            return;
        }
            AssertMaxUndoSoFar(1,3),
                self.set(pos);
        revs.append(&mut revs_2);
mod tests {

        let trace = Trace::enabled(Config::with_limit_count(10));
                    let e = &mut self.peers[ei];
                        Err(e) => {
                    let mut selection = self.selection.clone();
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R

    }

            SampleEventType::FlowStart => 's',
            .find(|&(_, ref rev)| rev.rev_id == rev_id)

}
}
    ///
    edit: Contents,

        }
        },
        selection.add_region(region);
        // expand by each in expand_by
    }
            GotoLine { line } => self.goto_line(text, line),
    // since undo and gc replay history with transforms, we need an empty set

    find_leaf_split(s, MIN_LEAF)
                           styles: &StyleMap, style_spans: &Spans<Style>,
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                              to_payload("test_get_samples"));
// distributed under the License is distributed on an "AS IS" BASIS,
                    ops.push(self.build_update_op("invalidate", None, seg.n));
        a.lines_all().collect::<Vec<_>>());
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
}
                   style_spans: &Spans<Style>, line_num: usize) -> Value

    /// This function will panic if `offset > self.len()`. Callers are expected to
    }
    current: Option<&'a str>,
    #[test]
            // Go crazy
            'b' => SampleEventType::AsyncStart,
        // todo: for now only a single search query is supported however in the future
        // set last selection or word under current cursor as replacement string
        trace.instant("4", &["test"]);
            highlight_find: false,
    /// of individual region movements become carets.

    // https://github.com/serde-rs/serde/issues/1189 is fixed.
                let (pl, poffset) = self.prev_leaf()?;
        engine.edit_rev(1, 1, first_rev, d1.clone());
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        let mut cur_len_utf8 = 0;
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        self.undone_groups = groups;
                    }
                self.select_line(text, offset, line, false),

        for rev in self.revs[rev_index..].iter().rev() {

        if self.is_enabled() {

            // d-expand by other
        let mut d = TracePayloadT::with_capacity(1);
        self.hash(&mut hasher);
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
///
            Some(offset - len)

        let ix = style_map.add(style);
    // TODO: insert from keyboard or input method shouldn't break undo group,

        if let Some(edit) = contents {
        --#-
}
///
            }
    {
    }

    // TODO: a case can be made to hang this on Cursor instead
                              to_payload("test_get_samples"));
        assert_eq!(2, b.offset_of_line(1));
            if i >= max_undos {
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,

    pub fn prev_codepoint(&mut self) -> Option<char> {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    }
    max: usize,
                                                     "insert", node)

        let mut all_samples = self.samples.lock().unwrap();

    fn to_payload(value: &'static str) -> TracePayloadT {
                    }
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
                metadata_sort_index: None,
        MergeTestState::new(2).run_script(&script[..]);
    }
/// assert!("hello world" == String::from(a + b));

        engine.edit_rev(0, 2, first_rev, build_delta_2());
        }
        assert_eq!(trace.get_samples_limit(), 0);
            Merge(0,2), Merge(1, 2),
    /// An arbitrary payload to associate with the sample.  The type is
                }
    pub fn lines_raw_all(&self) -> LinesRaw {
    fn delta_rev_head_2() {
    num: u32,
    }
    pub fn set_dirty(&mut self, text: &Rope) {
    }
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
/// See `trace_payload` for a more complete discussion.
        let a = Rope::concat(
    /// What kind of sample this is.
    }
            }
/// ```
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    /// via process_name/thread_name respectively.
        // todo: this will be changed once multiple queries are supported
        self.enabled.load(AtomicOrdering::Relaxed)
/// Then offset=1 is invalid.

        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
            fragment: ""
            let c = region.end;
            Assert(1, "abc".to_owned()),
        if self.replace_changed {
        }
    #[derive(Debug)]
// Low level functions
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
use find::Find;
            Copy(usize, usize),
    pub fn push_str(&mut self, mut s: &str) {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    pub fn is_enabled(&self) -> bool {
            duration_us: None,
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
//
// Licensed under the Apache License, Version 2.0 (the "License");
    #[test]
        } else {
            Assert(2, "afc".to_owned()),
                metadata_name: None,
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    #[allow(dead_code)]
                        let mut rendered_lines = Vec::new();
impl PartialEq for CategoriesT {
    fn gc() {
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
                RenderTactic::Preserve => {
    /// Selects all find matches.
}
            retain_revs.insert(last.rev_id);
#[macro_use]
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    #[allow(dead_code)]
        assert_eq!(2, b.offset_of_line(1));
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
// easily delta-compressed later.

}
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
    }


impl<'de> Deserialize<'de> for Rope {

    idx: usize,
    }
    }
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    // Note: this function would need some work to handle retaining arbitrary revisions,
/// Find a set of revisions common to both lists
use interval::Interval;
    }

                last.1 = last.1.transform_union(&inserts);

    }
            // selection with interior
        assert_eq!(trace.is_enabled(), true);
        self.drag_state = Some(DragState {

        let trace = Trace::enabled(Config::default());
        self.replace = Some(Replace { chars, preserve_case });

        assert_eq!(None, a.prev_grapheme_offset(0));
        a.lines_all().collect::<Vec<_>>());
            self.idx = 0;
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
    }
    }
        let start = self.line_col_to_offset(text, line, 0);
    /// ancestor in order to be mergeable.
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
            Assert(5, "zacpb".to_owned()),
    }
}
    ProcessName { name: String },
        let trace = Trace::enabled(Config::with_limit_count(10));

            return Vec::with_capacity(0);
        ];
        revs.append(&mut revs_3);
#![cfg_attr(feature = "cargo-clippy", allow(
        let empty = Rope::from("");

        let closest_occurrence = self.find.iter().flat_map(|x|
        assert_eq!(1, res);
    undo_group: usize,
/// Get a slice of a `Rope`:
    }
    }
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
            Assert(0, "acpbdj".to_owned()),
        let mut b = line_cache_shadow::Builder::new();
        });
#[inline]
    /// the same even if it is rebased or merged between devices.


}
//!
            MetadataType::ThreadName {..} => "thread_name",
// Licensed under the Apache License, Version 2.0 (the "License");
    /// concurrently it will have count `2` so that undoing one delete but not
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        let utf8_offset = 9;
                    if seg.validity == line_cache_shadow::ALL_VALID {
                deletes: new_deletes,
}
    #[test]
        }
fn default_session() -> (u64,u32) {
        engine.edit_rev(1, 1, first_rev, d1.clone());
        // send updated replace status if changed
        }
    }
    }
}
    }
        assert_eq!(Some(9), b.next_codepoint_offset(5));
    #[serde(skip_serializing_if = "Option::is_none")]

        next_boundary.unwrap_or(None)


        let iv = Interval::new_closed_open(start, end);
    {
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
#[inline]
                                     payload: Option<TracePayloadT>,
    pub fn enable_config(&self, config: Config) {

    lc_shadow: LineCacheShadow,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
            pos
                    let sel_start = cursor.pos();
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
                        hls.push((sel_start_ix, sel_end_ix));
/// A static string has the lowest overhead as no copies are necessary, roughly
                    selection.add_region(occ);
    fn drop(&mut self) {
        for _i in 0..50 {
        // NOTE 2: from_micros is currently in unstable so using new
        --#--
        }
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R


/// }
        let (iv, new_len) = delta.summary();
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        self.selection = sel;
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
        for find in &mut self.find {
            trace.closure("something", &[], || ());
            b.push('b');

extern crate time;
            None
    }
    // * Unicode codepoints
use std::borrow::Cow;
    tombstones: Rope,
///
enum WrapWidth {
        serializer.serialize_str(&String::from(self))
    FlowStart,
/// assert_eq!("ello wor", String::from(&b));
    #[test]

    }
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
                    } else {

    }
// limitations under the License.
    TRACE.closure_payload(name, categories, closure, payload)
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    /// Selects the given region and supports multi selection.
        // +2 for exe & thread name.
            Assert(1, "arpb".to_owned()),
    /// Get next codepoint after cursor position, and advance cursor.
        assert_eq!(0, a.line_of_offset(1));
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        match symbol {
            self.pid == other.pid &&
        }
        (Revision {
        }
        self.replace_changed = true;
    fn merge_simple_delete_2() {
    fn hash<H: Hasher>(&self, state: &mut H) {
}
//! This module actually implements a mini Conflict-free Replicated Data Type
                        ops.push(self.build_update_op("copy", None, seg.n));
    fn next(s: &String, offset: usize) -> Option<usize> {
/// let a = Rope::from("hello ");
            let common = find_common(a_to_merge, b_to_merge);
            //leaf.len() - start_pos
#[inline]
        } else {
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
///
    /// You could construct the "union string" from `text`, `tombstones` and
                if s.ends_with('\n') {
            return;
                            deletes_bitxor.transform_shrink(&gc_dels)
        MergeTestState::new(2).run_script(&script[..]);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        /// along with the newline that triggered it.
            duration_us: None,
    }
//

    /// This is a regression test to ensure that session IDs are used to break

/// ```rust
/// # Performance
    pub fn empty() -> Engine {
            as_vec.push(Sample::new_metadata(
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;

        assert_eq!("a", String::from(&tombstones_2));
///
        self.set_selection_raw(text, selection);

        // likely be improved.
                        let mut word_cursor = WordCursor::new(text, region.max());
/// assert_eq!("llo wo", String::from(c));
/// However, anything that can be converted into a Cow string can be passed as
/// See `trace_payload` for a more complete discussion.
/// });
            find.find_status(matches_only)

#[inline]

}
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    #[serde(skip_serializing_if = "Option::is_none")]
            Assert(5, "zacpb".to_owned()),
    }
#[derive(Copy, Clone)]
        let mut engine = Engine::new(Rope::from(TEST_STR));
        in_base_units
    highlight_find: bool,
        }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    ///
        );
        if offset >= next_line_offset {
        let correct = parse_subset_list("
    /// If `line` is equal to one plus the current number of lines,

    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
mod sys_pid;
    AsyncStart,
                    self.do_gesture(text, line, column, GestureType::LineSelect)
            );
        let inserts_1 = parse_subset_list("
        ];
use std::cell::RefCell;
            }
    /// than this will panic.
                }
        assert_eq!(trace.is_enabled(), true);
    /// Callers are expected to validate their input.
        d_builder.build()

        // x, a, y, b, z, c
}
        max
    #[cfg(feature = "dict_payload")]
    }
            _ => return
            Assert(1, "cb".to_owned()),
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    // maybe explore grabbing leaf? would require api in tree
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    /// and currently in a debugging state.

            self.record(Sample::new_duration(
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    fn append_large() {
    /// Constructs an instantaneous sample.
        let b = a.slice(1, 10);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
                }
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        let next_line_offset = self.offset_of_line(text, line + 1);
    }
pub fn enable_tracing() {

    /// End of the region selected when drag was started.
                } else if click_count == Some(2) {
        let end = time::precise_time_ns();
// Copyright 2016 The xi-editor Authors.
    pub fn get_head_rev_id(&self) -> RevId {
        engine.gc(&gc);

            }
        ");
            Assert(0, "acbd".to_owned()),
        match self.inner.next() {

///     something_expensive()
pub fn disable_tracing() {
        self.send_update_for_plan(text, client, styles,
            'b' => SampleEventType::AsyncStart,
    #[test]
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
#[inline]
            Merge(3,1), Merge(5,3),
/// A size, in pixel units (not display pixels).
                             client: &Client, style_spans: &Spans<Style>)
    fn replace_small() {
                c.provide_context(&pl, self.pos() - poffset);
}
                            rev_id: rev.rev_id,
/// A size, in pixel units (not display pixels).
}
    #[cfg(feature = "benchmarks")]
        let all_samples = self.samples.lock().unwrap();
    // trace_block()/trace_closure
        let mut b = String::new();
/// Then offset=1 is invalid.
        assert_eq!(1, r.line_of_offset(a.len()));
    where S: Into<StrCow>, C: Into<CategoriesT>
    priority: usize,
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
            while !s.is_char_boundary(offset - len) {

        if all_samples.is_empty() {

                // should be removed in favor of do_gesture

        } else {
                        let mut word_cursor = WordCursor::new(text, region.max());

            DeltaElement::Copy(ref start, ref end) => {
use bytecount;
    }
        MergeTestState::new(2).run_script(&script[..]);
        where S: Serializer
        let inserts = parse_subset_list("
use memchr::{memrchr, memchr};
            SampleEventType::Metadata => 'M'
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
    fn bench_trace_closure(b: &mut Bencher) {
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
        ----
        if self.cursor.pos() >= self.end {
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
                None => {

/// from the new revisions on the left.
/// How tracing should be configured.
        self.set_selection(text, sel);
    AsyncStart,
    }
const FLAG_SELECT: u64 = 2;
    ///
                payload: payload,
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
/// ```rust
            }
    /// indicates a search for the next occurrence past the end of the file.
        -##-
#[must_use]
        engine.undo([1,3].iter().cloned().collect());
    }
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);

        let all_samples = self.samples.lock().unwrap();
        assert_eq!(utf16_units, 11);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        // probably change as the recording internals change.
/// Given the inital byte of a UTF-8 codepoint, returns the number of
///
        self.drag_state = Some(DragState {
    /// Sorting priority between processes/threads in the view.
        trace.record(guard.sample.as_ref().unwrap().clone());
        self.push_str(&other[start..end]);
        /// The subset of the characters of the union string from after this
//     http://www.apache.org/licenses/LICENSE-2.0
                name, categories, payload, SampleEventType::DurationBegin)),
        assert!(r.clone().slice(0, a.len()) == a_rope);

                let (last, rest) = self.sel_regions().split_last().unwrap();
        // todo: the correct Find instance needs to be updated with the new parameters
/// Stores the relevant data about a sample for later serialization.
            match memchr(b'\n', self.fragment.as_bytes()) {
        trace.instant("3", &["test"]);
            self.lc_shadow.edit(start, end, new_end - start);
        }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
/// overhead tracing routine available.
/// ```
        ");

        AssertMaxUndoSoFar(usize, usize),
    /// The largest undo group number of any edit in the history up to this
        self.set_selection(text, sel);
            match memchr(b'\n', self.fragment.as_bytes()) {
    #[test]
        // probably change as the recording internals change.
                _ => { }
            }
        trace.instant("4", &["test"]);
struct DeltaOp {
    }
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
                _ => panic!("to_base_units called with arg too large")
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        });
        if !selection.regions_in_range(offset, offset).is_empty() {
        assert_eq!(0, b.line_of_offset(1));
            match seg.tactic {
    fn compute_transforms_1() {
    fn next_grapheme_offset() {
        let first_sample_timestamp = all_samples.front()
            }
    }
        // original values this test was created/found with in the UI:
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
        cursor.prev::<BaseMetric>()
        b.push_str(s);
        ##
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    match b {
    fn offset_of_line_small() {
/// Base unit is utf8 code unit.
        View {
                sel

    min: usize,
        }
            Revision {
#[derive(Serialize, Deserialize, Clone, Debug)]
            Merge(1,0),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            self.breaks = None
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
                },
                println!("running {:?} at index {}", op, i);

    fn bench_trace_block_payload(b: &mut Bencher) {
    #[cfg(feature = "benchmarks")]
        }
            trace: None,
                    }
                metadata_sort_index: None,
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            }
            }


    pub fn enable_config(&self, config: Config) {
            Assert(1, "acpbdj".to_owned()),
            }

    fn test_cross_process_samples() {
        }
    /// For safety, this will panic if any revisions have already been added to the Engine.

    pub fn token(&self) -> RevToken {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fn new_duration<S, C>(name: S,
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
/// # Performance
    /// point. Used to optimize undo to not look further back.
        }
            trace.instant("something", &[]);


    max: usize,
    // possible to fix it so that's not necessary.
}
        if self.highlight_find {
            rev_id_counter: 1,
    type Output = Rope;

                        if n_skip > 0 {
        hasher.finish()
    /// An iterator over the raw lines. The lines, except the last, include the
        }
                },
        }
        println!("{:#?}", b_delta_ops);
impl From<Vec<String>> for CategoriesT {
    /// Note: `edit` and `edit_str` may be merged, using traits.
        }
    // TODO: insert from keyboard or input method shouldn't break undo group,
    fn measure(info: &RopeInfo, _: usize) -> usize {
pub struct LinesRaw<'a> {
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before

pub type RopeDeltaElement = DeltaElement<RopeInfo>;
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
    pub fn line_of_offset(&self, offset: usize) -> usize {
/// non-base revs, `N` being transformed non-base revs, and rearranges it:

    }
            trace.closure("something", &[], || ());

    }
            GestureType::RangeSelect => self.select_range(text, offset),
        let trace = Trace::enabled(Config::default());
            rendered_styles.push(0);
            FindPrevious { wrap_around, allow_same, modify_selection } =>
/// Represents a transform from one rope to another.
/// # Returns
}
    ///
        let (iv, new_len) = delta.summary();
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    }
    ///
        assert_eq!(correct, rebased_inserts);
}
use edit_types::ViewEvent;
        assert_eq!(samples[0].name, "remote pid");
        assert_eq!(1, expand_by[0].0.priority);
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    pub chars: String,
    let new_text = del_delta.apply(text);
    #[serde(rename = "ph")]

        assert_eq!(rope.line_of_offset(15), 3);

            }
    #[test]

    ///
fn count_utf16_code_units(s: &str) -> usize {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
impl Leaf for String {
                } else {

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        self.deletes_from_union_before_index(rev_index + 1, true)
#[cfg(test)]
                    priority, undo_group,
                        let start_line = seg.our_line_num;
            Merge(1,0),

/// overhead tracing routine available.
            timestamp_us: ns_to_us(time::precise_time_ns()),
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    ///


            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
trait StringArrayEq<Rhs: ?Sized = Self> {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
    /// Get text of head revision.
impl StringArrayEq<[&'static str]> for Vec<String> {
        let mut revs = basic_insert_ops(inserts_1, 1);
        let expand_by = compute_transforms(revs);
            self.pid == other.pid &&
            Assert(1, "abc".to_owned()),
    pub tid: u64,
        engine.edit_rev(1, 1, initial_rev, d1.clone());
/// A rope data structure.

    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
    }
}
    /// fine-grained in the case of multiple cursors, but we also want this
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
        let a = Rope::from("a\rb\rc");
        where S: Into<StrCow>, C: Into<CategoriesT>
    /// Returns a u64 that will be equal for equivalent revision IDs and

            event_type: SampleEventType::CompleteDuration,
        });
    /// that are currently deleted, and thus in `tombstones` rather than
        };
        undo_group: usize,
/// some way.
                    self.do_gesture(text, line, column, GestureType::WordSelect)
                            let line = self.render_line(client, styles, text,
                self.set(pos);

/// Also note: in addition to the `From` traits described below, this module
                    selection.add_region(occ);
        assert_eq!(correct, rearranged_inserts);
        assert_eq!(snapshot[7].name, "c");
                            if !deletes.is_empty() {
            }



                first_sample_timestamp,
                }
        let d = RopeDelta_::deserialize(deserializer)?;
        where S: Serializer
    }
        }
            offset,


                } else {
{
    }
        b.add_span(height, 0, 0);
                let (ins, _) = delta.factor();

    }
            self.tid == other.tid &&
        /// and new deletes_from_union
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                    new_deletes = new_deletes.transform_expand(inserts);
            match memchr(b'\n', self.fragment.as_bytes()) {
impl<'a> Cursor<'a, RopeInfo> {
        where D: serde::Deserializer<'de>
        self.start_drag(offset, region.start, region.end);
    fn test_ser_de() {
                    result = cow_append(result, &self.fragment[.. i + 1]);
            FindNext { wrap_around, allow_same, modify_selection } =>

            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
use std::sync::Mutex;
///
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
                // TODO create InsertDelta directly and more efficiently instead of factoring
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());

                None => {

// You may obtain a copy of the License at
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
    #[test]
}
impl Metric<RopeInfo> for BaseMetric {
        ");
    fn eq_small() {
                        line_num = seg.their_line_num + seg.n;
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
///

            return self.len();
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
pub fn trace<S, C>(name: S, categories: C)
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        self.iter_chunks(0, self.len())
                        }

    #[cfg(feature = "benchmarks")]

        });
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));

#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            base_len: usize
        // We add selection after find because we want it to be preferred if the
            // Do the merge one direction

        let script = vec![
        s.is_char_boundary(offset)
        let col = col as usize;
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
        }
    #[cfg(feature = "benchmarks")]
        // TODO: may make this method take the iv directly
                } else {
            edit: Edit {
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
    }
            SampleEventType::Instant => 'i',
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,

                rev_id: basic_rev(i),
    }
    /// Tracks whether this view has been scheduled to render.

            None
/// ```
        let a2 = Rope::from("a");
    }

        engine.edit_rev(1, 2, first_rev, d1.clone());
        let params = json!({
                        let mut word_cursor = WordCursor::new(text, region.max());
        expand_by = next_expand_by;
        if offset == s.len() {
            MetadataType::ProcessLabels {..} => (None, None)
                    let full_path_str = full_path.into_string();
    fn bench_get_pid(b: &mut Bencher) {
            Click(MouseAction { line, column, flags, click_count }) => {
    }
            Assert(1, "ab".to_owned()),
/// }
        assert_eq!(None, b.next_codepoint_offset(9));


    }
    #[test]
}
///
}

}
        }

    /// Get the contents of the document at a given revision number
        }
const MIN_LEAF: usize = 511;
    #[test]
        if let Some(sel) = new_sel {
    // A colliding session will break merge invariants and the document will start crashing Xi.
            if next_chunk.is_none() { return None; }
    pub fn push_str(&mut self, mut s: &str) {
        // find the lowest toggled undo group number
            first_line: 0,
        // todo: this will be changed once multiple queries are supported
            None => return "",
        MergeTestState::new(3).run_script(&script[..]);
            self.set_selection(text, selection);
        }).collect::<Vec<FindStatus>>()
            Merge(0,1),
            if !selection.is_empty() {
                    base_len: delta.base_len
        }
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        let height = self.line_of_offset(text, text.len()) + 1;
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        Merge(usize, usize),
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
    }
        }
        }
fn exe_name() -> Option<String> {
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
            }

                len += 1;

        assert_eq!(trace.get_samples_limit(), 0);

        }
    pub tid: u64,

            SampleEventType::FlowEnd => 'f',
#[inline]
                Edit { priority, undo_group, inserts, deletes } => {


        let (mut l, mut offset) = self.get_leaf()?;
            return;
    fn offset_of_line_small() {
                self.set_selection(text, SelRegion::caret(offset));
        if !before {
    /// indicates a search for the next occurrence past the end of the file.
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
    // TODO make this faster somehow?
        });
        let mut selection = Selection::new();
        }
        use self::MergeTestOp::*;
        assert_eq!(utf16_units, 20);
                    let mut selection = self.selection.clone();
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
    fn test_ser_de() {
        assert_eq!(None, a.prev_grapheme_offset(0));
        // rebase delta to be on the base_rev union instead of the text
    /// should be as unlikely to collide as two random u64s.
            "ops": ops,
        revs.append(&mut revs_2);
            false => Selection::new(),
        if !gc_dels.is_empty() {
        assert_eq!(r.len(), r.offset_of_line(2));
            self.event_type == other.event_type &&
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
// You may obtain a copy of the License at
        self.revs.reverse();
        let r = Rope::from(&a[..MAX_LEAF]);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },

    #[test]
    /// Returns the visible line number containing the given offset.
        Err(ref e) => {
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
/// ```
#[derive(Serialize, Deserialize, Debug)]
#[inline]
        let b = a.slice(1, 10);
))]
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
    }
/// feature makes the payload a `serde_json::Value` (additionally the library
        self.revs.iter().enumerate().rev()
                leaf_offset = self.pos() - noffset;
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        let mut ops = Vec::new();
                    text.slice_to_string(region.min(), region.max())
            b.push('b');
impl Eq for Sample {}
                if s.ends_with('\n') {
    #[serde(skip_serializing_if = "Option::is_none")]
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
            Merge(1,2),
    #[serde(default = "initial_revision_counter", skip_serializing)]
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
                splitpoint -= 1;

        -> Self
        for mut find in self.find.iter_mut() {
    }
            args: Some(SampleArgs {

            session: default_session(),
/// # Performance
                    // are empty, could send update removing the cursor.
            Some(region) => {
            duration_us: None,
        for &(sel_start, sel_end) in sel {
        }
    fn test_samples_block() {
    out.as_mut_slice().reverse();
        // set last selection or word under current cursor as replacement string
        self.find_changed = FindStatusChange::Matches;
    /// Determines the current number of find results and search parameters to send them to
        }
                    }
    }
    // TODO: insert from keyboard or input method shouldn't break undo group,
    fn render_line(&self, client: &Client, styles: &StyleMap,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        plan.request_lines(first_line, last_line);
}
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
        }
        assert_eq!("herald", String::from(a));
    /// in the range of 511-1024 bytes.
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
            max_undo_so_far: 0,

pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R

        Self::with_limit_bytes(1 * 1024 * 1024)
    // This computes undo all the way from the beginning. An optimization would be to not
    ObjectSnapshot,
        let (iv, new_len) = delta.summary();
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        self.set_selection_raw(text, selection);
        let mut engine = Engine::new(Rope::from(""));
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        }

/// # Arguments
    /// storage allocated will be limit * size_of<Sample>
    max_undo_so_far: usize,
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
// Low level functions
    }
        self.find.iter().map(|find| {
//!
                        if self.undone_groups.contains(undo_group) {


        let mut leaf_offset = pos - offset;
                            }
        }
    enabled: AtomicBool,
        let trace = Trace::enabled(Config::with_limit_count(10));
#[derive(Clone, Copy)]
///
                    let b = if bi < ai {
                    let transformed_inserts = inserts.transform_expand(&s);
    fn gc() {
        // Any edit cancels a drag. This is good behavior for edits initiated through
    fn undo() {
    a_ids.intersection(&b_ids).cloned().collect()
    }
        if initial_contents.len() > 0 {
///
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
/// Find a set of revisions common to both lists
        use self::MergeTestOp::*;
}
    {
    #[test]
    pub fn next_grapheme(&mut self) -> Option<usize> {
            next_boundary = c.next_boundary(&l, leaf_offset);
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
    inner: LinesRaw<'a>
            rendered_styles.push(style_id as isize);
    /// Starts a drag operation.
    /// Selects all find matches.
        self.rev_id_counter += 1;
        /// The subset of the characters of the union string from after this
    #[test]
            }),
    idx: usize,
            },
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
                    self.set_selection(text, selection);
                            if !inserts.is_empty() {
use std::str;
pub type RopeDelta = Delta<RopeInfo>;
    }
    }
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
    /// should be as unlikely to collide as two random u64s.
    // this is the cost contributed by the timestamp to trace()
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            GestureType::MultiWordSelect =>
        -#-
        #[serde(rename_all = "snake_case")]

            let b = s.as_bytes()[offset];
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
    }

                // Deprecated (kept for client compatibility):
                                            closure: F, payload: P) -> R
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;

            rendered_styles.push(0);


            self.first_line = line;

    pub tid: u64,
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        self.session = session;
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]

        use self::MergeTestOp::*;

                Ok(CategoriesT::DynamicArray(categories))
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
    fn measure(info: &RopeInfo, _: usize) -> usize {

        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
    }
        deletes_from_union = new_deletes_from_union;
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        let mut selections = Vec::new();
        assert_eq!(2, expand_by[1].0.priority);
        // insert a character at the beginning
            highlight_find: false,
    }
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        cursor.is_boundary::<BaseMetric>()
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
// See the License for the specific language governing permissions and
/// {
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
}
        assert_eq!(b, String::from(a));
        Self {
        assert_eq!(snapshot[4].name, "y");
impl<T: AsRef<str>> From<T> for Rope {
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
    /// ancestor in order to be mergeable.
    fn can_fragment() -> bool { false }
            find.update_highlights(text, delta);
extern crate serde;
            SampleEventType::FlowInstant => 't',
    AsyncInstant,
        }
        let r = Rope::from(&a[..MAX_LEAF]);

            pos += 1;
                    .with_horiz(horiz)
    /// method to be fast even when the selection is large.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        if line > max_line {
        }
    /// recomputing line wraps.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
}
    /// in the slice up to `offset`.
        inserts.into_iter().enumerate().map(|(i, inserts)| {
    /// want to set the process name (if provided then sets the thread name).
            }

    revs: Vec<Revision>,
                        let mut rendered_lines = Vec::new();
            }
/// ```

        fn run_script(&mut self, script: &[MergeTestOp]) {
    fn bench_trace_block(b: &mut Bencher) {
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
            if inserts.is_empty() {
                    to_payload(("some description of the closure")))));

                                            closure: F, payload: P) -> R
        while !leaf.is_char_boundary(end) {
            find.update_highlights(text, delta);
// distributed under the License is distributed on an "AS IS" BASIS,
        assert_eq!(Some(17), a.next_grapheme_offset(9));
}

        engine.edit_rev(0, 2, first_rev, build_delta_2());
    }

            rendered_styles.push(0);
use std::sync::Mutex;
        Self {
        }
        let line = line as usize;
impl NodeInfo for RopeInfo {
impl Serialize for Delta<RopeInfo> {
        Self {
}
            Some(ref breaks) => {
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
    ///


                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
                    self.set_selection(text, selection);
                    self.set_selection(text, selection);
            drag_state: None,
        } else {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    rev_id_counter: u32,
    identity_op,
    ///
        ---#--
                    }

                            max_undo_so_far: rev.max_undo_so_far,
        // even though the actual sampling order (from timestamp of
/// Internally, the implementation uses reference counting (not thread safe, though
    /// The revision history of the document
pub type TracePayloadT = serde_json::Value;
        let mut selection = Selection::new();
        match *self {
        ---#-
        }
        }
        if self.breaks.is_some() {
#[inline]
        let mut b = String::new();
        }
// Copyright 2016 The xi-editor Authors.
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            None
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
            while !s.is_char_boundary(offset - len) {
        ");
        });
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }

        let rope = Rope::from("hi\ni'm\nfour\nlines");
        assert_tokens(&rope, &[
impl<'de> Deserialize<'de> for Rope {
                    None => return if result.is_empty() { None } else { Some(result) }
    }
}
        let first_line = self.line_of_offset(text, start);
                                deletes.transform_shrink(&gc_dels))
                metadata_name: None,
/// for single user cases, used by serde and ::empty
    #[test]
pub type StrCow = Cow<'static, str>;
        rope.offset_of_line(5);
///
                         style_spans: &Spans<Style>) -> Vec<isize>
                rev_id: basic_rev(i+1),
        assert_eq!(Some(8), a.next_grapheme_offset(0));
            scroll_to: Some(0),
        self.replace.clone()

        Self {
        if let Contents::Edit {priority, inserts, .. } = r.edit {
    /// finer grain invalidation.
}
        for find in self.find.iter() {
            let matches_only = self.find_changed == FindStatusChange::Matches;
use std::hash::{Hash, Hasher};
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            breaks: None,
    //
                    let mut selection = self.selection.clone();
use std::borrow::Cow;
            for i in 0..count {
            Some(right_str)
extern crate serde_json;
            engine.edit_rev(0, 0, first_rev, delta);
        samples.sort_unstable();
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        self.buffer_id
            Assert(1, "ab".to_owned()),
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
            Assert(0, "abc".to_owned()),
            match modify_selection {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        assert_eq!(0, b.line_of_offset(1));
}
        let new_sel = selection_movement(movement, &self.selection,
        assert_eq!(trace.get_samples_count(), 0);
    }
    /// We attempt to reduce duplicate renders by setting a small timeout
    #[test]
///
/// The visual width of the buffer for the purpose of word wrapping.
    fn line_of_offset_panic() {
            ix = sel_end as isize;
                    }
            CategoriesT::DynamicArray(ref self_arr) => {
    new_without_default_derive,
        assert_eq!(1, a.line_of_offset(3));
            }
                },
        if offset == s.len() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());

                self.add_selection_by_movement(text, Movement::Up),
use fixed_lifo_deque::FixedLifoDeque;
    /// For safety, this will panic if any revisions have already been added to the Engine.
        let a = Rope::concat(
            Some(b)
        Rope::from_str(s.as_ref()).unwrap()
{
            's' => SampleEventType::FlowStart,

}
                    // TODO: update (rather than re-render) in cases of text valid
        assert_eq!(snapshot[3].name, "y");
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#[cfg(test)]
        assert_eq!(None, b.prev_codepoint_offset(0));
impl FromStr for Rope {
    rev_id: RevId,
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
    #[test]

                    } else {
//! It enables support for full asynchronous and even peer-to-peer editing.
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// storage allocated will be limit * size_of<Sample>
use xi_trace::trace_block;
    ProcessSortIndex { sort_index: i32 },

    }
        None => {
    #[cfg(feature = "benchmarks")]
        -##-
impl Hash for Sample {
                        self.revs.push(Revision {
    // for simplicity.
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        let trace = Trace::enabled(Config::with_limit_count(10));
                });
    }
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        if let Some((l, offset)) = self.get_leaf() {
            Assert(0, "ab".to_owned()),
    fn next(s: &String, offset: usize) -> Option<usize> {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
                // sanitize input
        --#--
            }
))]
                        priority, undo_group,
    fn consume(self) -> (Option<String>, Option<i32>) {


        #[serde(rename_all = "snake_case")]
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo

    }
            DeltaElement::Insert(ref node) =>
    }
        let cursor = Cursor::new(self, offset);
        assert_eq!(snapshot[2].name, "a");
    }
pub struct Config {
        let new_inserts = union_ins_delta.inserted_subset();
//! info.
        // todo: this will be changed once multiple queries are supported
    fn bench_trace_instant(b: &mut Bencher) {
    }
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        let height = self.line_of_offset(text, text.len()) + 1;
        assert_eq!(2, a.line_of_offset(5));
            Merge(1,2),
                self.set_dirty(text);
        assert_eq!(correct, res);
    /// controlled by features (default string).
        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
    }

            }

    /// Tests that priorities are used to break ties correctly
fn ns_to_us(ns: u64) -> u64 {
            SampleEventType::ObjectDestroyed => 'D',
        assert_eq!("-###-", &subset_str);
    }
}
///
        let expand_by = compute_transforms(a_revs);
            &self.deletes_from_union, &old_deletes_from_union);
    }
        ]);
                false => x.start
        if !gc_dels.is_empty() {
            "pristine": pristine,


    #[allow(dead_code)]
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }
                selection.add_region(SelRegion::caret(region.max()));
            }

        use std::hash::{Hash, Hasher};
        if self.breaks.is_some() {

                // should be removed in favor of do_gesture
                cur_all_inserts = older_all_inserts;
    }
    ///
        let r = Rope::from(&a[..MAX_LEAF]);
                return offset;
            Assert(2, "ab".to_owned()),
                    inserts: ins,

        // even though the actual sampling order (from timestamp of
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
                    }
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
    }
    }
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
            None
pub struct Engine {
    }
        -> R
            let splitpoint = if s.len() > MAX_LEAF {
    pub fn get_head_rev_id(&self) -> RevId {

        -##-

                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    } else {
        self.deletes_from_union = deletes_from_union;
    }
    }
    #[serde(rename = "dur")]

                Ok(CategoriesT::DynamicArray(categories))
    #[test]
                    as_vec.push(Sample::new_metadata(

                self.find_changed = FindStatusChange::All;
                    // TODO: update (rather than re-render) in cases of text valid
        if wrap_col > 0 {
        trace.closure_payload("x", &["test"], || {

use std::cmp::{min,max};
        self.start_drag(offset, region.start, region.end);
    pub(crate) fn record(&self, sample: Sample) {
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    // maybe explore grabbing leaf? would require api in tree
        for _i in 0..50 {
        a.lines_all().collect::<Vec<_>>());
        where S: Serializer
    /// Returns the visible line number containing the given offset.
    }

        // even though the actual sampling order (from timestamp of
    fn is_boundary(s: &String, offset: usize) -> bool {
        }
    ///
        // 1 for exe name & 1 for the thread name

/// conversions in both directions.
        assert_eq!(snapshot[5].name, "z");
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
    fn basic_rev(i: usize) -> RevId {
    /// This is a regression test to ensure that session IDs are used to break
    fn next(&mut self) -> Option<Cow<'a, str>> {
        if wrap_col > 0 {
    DurationEnd,

            }
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
/// an argument.
            'O' => SampleEventType::ObjectSnapshot,
        }

                    if let Some(new_gc_dels) = new_gc_dels {

/// Transform `revs`, which doesn't include information on the actual content of the operations,
        let all_samples = self.samples.lock().unwrap();

    fn test_get_samples_nested_trace() {

    }

        let inserts = parse_subset_list("
        a.lines_all().collect::<Vec<_>>());
        ----#
categories_from_constant_array!(5);
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);

impl Eq for Sample {}
    #[test]
                }
                        ops.push(self.build_update_op("invalidate", None, seg.n));
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        }
        undo_group: usize,
    }
        let mut cur_len_utf8 = 0;
        if self.highlight_find {


            thread_name: Sample::thread_name(),
        assert_eq!(snapshot[3].name, "a");


        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
/// Represents the current state of a document and all of its history
    #[test]
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
    }
    // callers should be encouraged to use cursor instead
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
        engine.gc(&gc);
                            }
                        Err(e) => {

        let self_iv = Interval::new_closed_closed(0, self.len());
            Assert(0, "b".to_owned()),
impl Leaf for String {
        let start = time::precise_time_ns();

            trace.closure("something", &[], || ());
    #[inline]
}
            inner: self.iter_chunks(start, end),
    }
/// a.edit_str(1, 9, "era");
        match self {
            Merge(1,0),
        let end = self.sel_regions().last().unwrap().end;
            // with offset == 0, but be defensive.
use std::ops::Add;
        assert_eq!(Some(1), a.next_codepoint_offset(0));
                        deletes_from_union
            &self.deletes_from_union, &old_deletes_from_union);
        assert_tokens(&rope, &[
        self.deletes_from_union = new_deletes_from_union;
        let r = Rope::from(&a[..MAX_LEAF]);
        });
    utf16_size: usize,
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
        });
/// revisions not shared by both sides.
    ///
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
    }
        ]);
        }
/// * `categories` - A static array of static strings that tags the samples in
    #[test]
            sample: Some(Sample::new_duration_marker(
            rev_id: self.next_rev_id(),
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    #[should_panic]
/// an argument.
        } else {
use std::collections::HashMap;
                        ops.push(self.build_update_op("copy", None, seg.n));
    }
        }
impl Metric<RopeInfo> for LinesMetric {
            Assert(0, "ab".to_owned()),
    }
            None
        trace.instant("4", &["test"]);
/// ```
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// an argument.
    fn gc_3() {
                    if seg.validity == line_cache_shadow::ALL_VALID {
    #[test]

// You may obtain a copy of the License at
            revs: vec![rev],
    use engine::*;
        if !self.lc_shadow.needs_render(plan) { return; }
                        let mut word_cursor = WordCursor::new(text, region.max());
/// supported as an optimization when only one reference exists, making the
    where S: Into<StrCow>, C: Into<CategoriesT>
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        let mut b = String::new();
impl SampleEventType {
                        } else {
    (1, 0)
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
            find.set_hls_dirty(false)
/// for strings, specialized for incremental editing operations. Most operations
            Revision {
    /// Time complexity: O(log n)
    fn next(&mut self) -> Option<u8> {
        self.find.iter().map(|find| {
use std::collections::hash_map::DefaultHasher;
            Merge(0,2), Merge(1, 2),
        let contents = match rev.edit {
}
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        assert_eq!(trace.get_samples_count(), 1);
            None
                }
        for i in 0..5_000 {
{
categories_from_constant_array!(8);
    // A colliding session will break merge invariants and the document will start crashing Xi.
use self::Contents::*;
            Assert(1, "zapbj".to_owned()),
              F: FnOnce() -> R
//!
extern crate time;
//
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
    }
            // shouldn't be called with this, but be defensive
        debug_subsets(&rearranged_inserts);

    identity_op,
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
    }
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
    }
                Some(Cow::from(s))

    /// Get next codepoint after cursor position, and advance cursor.
            // I think it's a precondition that this will never be called
            event_type: SampleEventType::Instant,
            }
            Some(b)
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
    }
    }
            drag_state: None,
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        assert_eq!(snapshot[2].name, "x");
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        soln.push('f');
    }
    base_sel: Selection,
///
    pub fn new_disabled() -> Self {
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
                        }
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    identity_op,
        };
    }
    // TODO: don't construct transform if subsets are empty
        });
        }
                    let (start, end) = {
            let after = full_priority >= trans_priority;  // should never be ==
    // since undo and gc replay history with transforms, we need an empty set
            }

    fn measure(info: &RopeInfo, _: usize) -> usize {
        let mut ix = 0;
    /// Time complexity: O(log n)
    }
        let trace = Trace::enabled(Config::default());
        delta.serialize_field("base_len", &self.base_len)?;
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
                let line = line.min(text.measure::<LinesMetric>() + 1);
        where S: Serializer
        // current recording mechanism should see:
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
// Licensed under the Apache License, Version 2.0 (the "License");
            .map(|(i, _)| i)
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        ---#--

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    #[test]
        let mut hls = Vec::new();
        }
        }
        }
        if self.cursor.pos() >= self.end {

        selection.add_region(region);
    #[test]
                            }
        }
}
        assert_eq!(0, a.line_of_offset(1));

            AssertAll("ac".to_owned()),
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    }
    /// Create a new Engine with a single edit that inserts `initial_contents`
                formatter.write_str("comma-separated strings")
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    }
        let subset_str = format!("{:#?}", expand_by[1].1);
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
            result["cursor"] = json!(cursors);
            Some(right_str)
    fn rearrange_1() {

    }
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
    priority: usize,
        in_measured_units
    }

#![cfg_attr(feature = "collections_range", feature(collections_range))]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
                            let line = self.render_line(client, styles, text,
            Merge(2,0),


            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        let b = a.slice(1, 10);
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    }
        assert_eq!(1, a.line_of_offset(2));
        b.push(rhs);

        if self.len() <= MAX_LEAF {
        let end = time::precise_time_ns();
    fn deserialize<D>(deserializer: D)
    samples: Mutex<FixedLifoDeque<Sample>>,
#[macro_use]
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
    }
        if self.is_enabled() {
            while !s.is_char_boundary(splitpoint) {
        }
                _ => panic!("to_base_units called with arg too large")
    /// return if a delete is un-done or an insert is re- done.
    fn render_line(&self, client: &Client, styles: &StyleMap,
/// that sorted would be prohibitively expensive.
            // about what wrapped.

                len += 1;
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            //let prev_pos = self.cursor.pos();
    #[test]
        b.build()
        assert_eq!(snapshot[0].name, "process_name");
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
mod sys_pid;
        //};
        let mut cursor = Cursor::new(self, offset);
    }
/// ```
                    let mut selection = self.selection.clone();
        }
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    }
/// However, anything that can be converted into a Cow string can be passed as
// limitations under the License.
        let mut a = Rope::from("hello world");
            Merge(0,1),
    /// Update front-end with any changes to view since the last time sent.
                let (pl, poffset) = self.prev_leaf()?;
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    }
            self.record(Sample::new_duration(
        ).min_by_key(|x| {
    pub fn select_all(&mut self, text: &Rope) {
            }

            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        let (ins_delta, deletes) = delta.factor();
                    let mut e = &mut self.peers[ei];
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        sel.collapse();
                    if invert_undos {
    pub fn disable(&self) {
    fn eq_med() {

        assert_eq!("#-####-", &subset_str);
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
    }
}
            l[offset..].chars().next()
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
    DynamicArray(Vec<String>),
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
                    None => return if result.is_empty() { None } else { Some(result) }
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
{
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                        DeltaElement::Insert(Rope::from(s)),
            Insert(String),
///
    /// the text).

            None
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
            if region.is_caret() {
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
        !self.selection.regions_in_range(offset, offset).is_empty()
        assert_eq!(Some(8), a.next_grapheme_offset(0));
}

            base_sel: selection.clone(),
/// A static string has the lowest overhead as no copies are necessary, roughly
                rev_id: basic_rev(i),
    /// recomputing line wraps.

        if line < self.first_line {
    fn test_disable_drops_all_samples() {
    fn bench_trace_block(b: &mut Bencher) {
}
                client.replace_status(self.view_id, &json!(replace))
        next_boundary.unwrap_or(None)
                    ops.push(self.build_update_op("invalidate", None, seg.n));
            None
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
                return false;

    }

        b.push_str(s);
            b.push('b');
            last_line -= 1;
            Merge(1,0),
//
        let snapshot = trace.samples_cloned_unsorted();
    /// Tracks whether the replacement string or replace parameters changed.
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
                                  style_spans, &plan, pristine);
            rev_id_counter: 1,


/// See `trace_payload` for a more complete discussion.
                    Some(Contents::Edit {
    fn next(&mut self) -> Option<Cow<'a, str>> {
    pub fn next_grapheme(&mut self) -> Option<usize> {
    #[bench]
                });
        #------
        in_measured_units

        } else if self.first_line + self.height <= line {
            let b = s.as_bytes()[offset];
        }
/// });
        // NOTE 2: from_micros is currently in unstable so using new

    } else if x < max {
                l = nl;

        assert_eq!(r.len(), r.offset_of_line(2));
                            edit: Undo {
    TRACE.closure_payload(name, categories, closure, payload)
                              to_payload("test_get_samples"));
    Metadata
mod fixed_lifo_deque;
use xi_rope::delta::Delta;
                    // We're super-aggressive about dropping these; after gc, the history
    #[test]
            return self.revs.len();
            }
    /// state and new offset.
///
                },
    #[inline]
        b if b < 0xe0 => 2,
        engine.edit_rev(1, 2, first_rev, d1.clone());
        }
// Licensed under the Apache License, Version 2.0 (the "License");
            'X' => SampleEventType::CompleteDuration,
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    fn replace_small() {
    // TODO make this faster somehow?
            Assert(0, "zacpb".to_owned()),


        assert_eq!(rope.offset_of_line(4), rope.len());
categories_from_constant_array!(0);
}
        });
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    where S: serde::Serializer {
/// fn something_expensive() {
                    None => return if result.is_empty() { None } else { Some(result) }
#[cfg(feature = "dict_payload")]

                self.select_line(text, offset, line, true),
    }

/// patterns. Any large runs of typing in the same place by the same user (e.g
    pending_render: bool,

        } else if line == max_line {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        self.iter_chunks(0, self.len())
    }

/// the `base_revs`. This allows the rest of the merge to operate on only
impl<'a> SampleGuard<'a> {


    ThreadSortIndex { sort_index: i32 },
pub struct Utf16CodeUnitsMetric(usize);
    }
    replace: Option<Replace>,
        Cow::from(a.into_owned() + b)
    }
            Merge(1,0),
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);


                last_priority = Some(priority);
use std::str::FromStr;
            self.mk_new_rev(priority, undo_group, base_rev, delta);
    min: usize,
        struct RopeDelta_ {
pub struct Size {

    #[test]
            Assert(1, "ab".to_owned()),

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,

impl<'a> Iterator for LinesRaw<'a> {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    rev_id: RevId,
use xi_rope::spans::Spans;
}
        // TODO: want to let caller retain more rev_id's.

/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
    }
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            Some(b)
            let deletes = Subset::new(inserts.len());
        let mut engine = Engine::new(Rope::from(TEST_STR));
            enabled: AtomicBool::new(true),

        /// and new deletes_from_union
        assert!(r != a_rope);
            false


            rendered_styles.push(sel_end as isize - sel_start as isize);
    /// Width in bytes (utf-8 code units).
        -> Result<CategoriesT, D::Error>
        self.hash(&mut hasher);
        assert_eq!(snapshot[7].name, "c");
//
            breaks: None,
    fn test_samples_closure() {
        for i in ((edits-max_undos)..edits).rev() {
    #[serde(rename = "name")]
        assert_eq!(snapshot[6].name, "z");
    #[test]
                    selection.add_region(occ);
        ];
            enabled: AtomicBool::new(true),
const MAX_LEAF: usize = 1024;
        // +2 for exe & thread name
        memchr(b'\n', &s.as_bytes()[offset..])
pub struct Sample {
                    let mut selection = self.selection.clone();
/// as opposed to thousands of revisions.
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    fn test_samples_block() {
#[inline]

    #[serde(rename = "sort_index")]
        ];
    bytecount::count(s.as_bytes(), b'\n')
        for &(sel_start, sel_end) in hls {
        let inserts = parse_subset_list("
                    if seg.validity == line_cache_shadow::ALL_VALID {

/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    priority: usize,
    utf16_count
        // todo: for now only a single search query is supported however in the future
                    }

            SampleEventType::ObjectDestroyed => 'D',
        assert_eq!(snapshot.len(), 5);
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);

    {
enum FindStatusChange {
                Some(Cow::from(s))
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
            timestamp_us: ns_to_us(start_ns),
pub struct Sample {
            MetadataType::ThreadName {..} => "thread_name",
pub enum SampleEventType {
// Unless required by applicable law or agreed to in writing, software
    /// terminating newline.
        match self.inner.next() {
            selection.delete_range(offset, offset, true);
        next_boundary.unwrap_or(None)
/// for single user cases, used by serde and ::empty
//     http://www.apache.org/licenses/LICENSE-2.0
        let trace = Trace::enabled(Config::default());
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        debug_subsets(&rearranged_inserts);

        self.tombstones = tombstones;
        if self.cursor.pos() >= self.end {

            if let GraphemeIncomplete::PreContext(_) = incomp {
    let mut last_priority: Option<usize> = None;
enum WrapWidth {
            }
        while !s.is_empty() {
        selection.add_region(region);
    }
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
        assert_eq!(snapshot[0].name, "process_name");
            ),
    }
        }
pub type StrCow = Cow<'static, str>;
            trace.closure_payload("y", &["test"], || {
            }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        engine.undo([1,2].iter().cloned().collect());

    fn goto_line(&mut self, text: &Rope, line: u64) {
                            warn!("Failed to get string representation: {:?}", e);
            Assert(1, "zpbj".to_owned()),
    fn arr_eq(&self, other: &Rhs) -> bool;
/// # use xi_rope::Rope;
        max
        self.timestamp_us.cmp(&other.timestamp_us)
                }

                if s.ends_with('\n') {
/// ```
            }
pub fn samples_cloned_unsorted() -> Vec<Sample> {
        None => {
            self.push_leaf(s[..splitpoint].to_owned());
        assert_eq!("#-####-", &subset_str);
                              duration_ns: u64) -> Self
                    self.do_gesture(text, line, column, GestureType::LineSelect)
    Metadata
    fn offset_of_line_small() {
        ");

use unicode_segmentation::GraphemeIncomplete;
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
///
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
    highlight_find: bool,
/// the session ID component of a `RevId`
            }

        self.lines_raw(0, self.len())
    }

    fn add(self, rhs: Rope) -> Rope {
        let l_str = text.slice_to_string(start_pos, pos);
        memchr(b'\n', &s.as_bytes()[offset..])
            'f' => SampleEventType::FlowEnd,

            if self[i] != other[i] {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

    }
            timestamp_us: ns_to_us(timestamp_ns),
}


        }
}
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
        assert_eq!(Some(8), a.next_grapheme_offset(0));
        ---#--
        let first_rev = engine.get_head_rev_id().token();
}
        let trace = Trace::enabled(Config::with_limit_count(10));
        let first_rev = engine.get_head_rev_id().token();
        let replacement = match self.selection.last() {
                                  style_spans, &plan, pristine);
        assert!(empty == empty);
    pub fn merge(&mut self, other: &Engine) {
    }
        /// should go before typed text.

    }
    fn build_delta_1() -> Delta<RopeInfo> {
                              duration_ns: u64) -> Self
    fn scroll_to_cursor(&mut self, text: &Rope) {
//! which is sufficient for asynchronous plugins that can only have one
                last_priority = Some(priority);
        let mut result = String::new();
        let text_with_inserts = text_inserts.apply(&text);
        self.view_id
    type Item = u8;
            sample_limit_count: limit
use std::cmp;
            // Do the merge one direction
        }
    {
    }
                    let b = if bi < ai {

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        for rev in &self.revs[rev_index + 1..] {
        for rev in old_revs.into_iter().rev() {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
// line iterators
            Merge(0,2), Merge(1, 2),
    where S: Into<StrCow>, C: Into<CategoriesT>
        ");
            rendered_styles.push((sel_start as isize) - ix);
        assert_eq!(rope.offset_of_line(1), 3);
    /// This function does not perform any scrolling.

pub fn is_enabled() -> bool {
            if let Edit { priority, ref inserts, .. } = r.edit {
    }
}
    pub chars: String,
use std::collections::BTreeSet;
    // * Code units in some encoding
                        MetadataType::ThreadName { name: thread_name.to_string() },
    /// return if a delete is un-done or an insert is re- done.
    #[cfg(feature = "benchmarks")]

    fn line_of_offset_small() {
            min: offset,
            Merge(0,1),
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

    #[cfg(feature = "benchmarks")]
// Additional APIs custom to strings

    (1, 0)
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            Sample::new_instant("local pid", &[], None),

        }
        // creation) is:
            let horiz = None;
        self.enabled.store(true, AtomicOrdering::Relaxed);
    #[test]
        self.lines(0, self.len())
        assert_eq!(snapshot[4].name, "y");
    /// Returns the largest undo group ID used so far
                first_sample_timestamp,
            SampleEventType::DurationEnd => 'E',
            for (i, op) in script.iter().enumerate() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));

            offset -= 1;
}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let a = Rope::from("a\nb\nc");
        let tid = all_samples.front()
        }
/// Revision 0 is always an Undo of the empty set of groups
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
    /// height of visible portion
                    e.edit_rev(p, u, head, delta.clone());
    }
        ---#--
        let head = engine.get_head_rev_id().token();

///
                        Ok(s) => Some(s),
    let mut out = Vec::with_capacity(b_new.len());
    #[test]
            },
///
}
        let tombstones_b = Rope::from("a");
        let snapshot = trace.samples_cloned_sorted();
    pub fn default() -> Self {

    enum MergeTestOp {
    }
            // Do it the other way on the copy
        // move deleted or undone-inserted things from text to tombstones
        // shouldn't do anything since it was double-deleted and one was GC'd
            },
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
                            ops.push(self.build_update_op("skip", None, n_skip));
        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        //} else {

    fn offset_of_line_small() {
        RopeInfo {
    }
        self.iter_chunks(0, self.len())
        if let Some(last) = self.revs.last() {
    pub fn with_limit_bytes(size: usize) -> Self {
#[cfg(test)]
    #[test]

            Some(Cow::Borrowed(mut s)) => {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                Edit { priority, undo_group, inserts, deletes } => {
        };

        let r = Rope::from(&a[..MAX_LEAF]);
///
    }
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    /// update cycle. This should be a last resort, updates should generally cause
                    filename.to_str().map(|s| s.to_string())
        cursor.is_boundary::<BaseMetric>()
            }
    // this should have the same behavior, but worse performance
/// are shared.
                Some(pos) => offset += pos + 1,
        }
            if let Edit { ref inserts, .. } = rev.edit {
/// * `name` - A string that provides some meaningful name to this sample.
            let base_index = find_base_index(&self.revs, &other.revs);
        let base_sel = Selection::new();

        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    ///

    #[test]
// Copyright 2016 The xi-editor Authors.
                                         self, text, modify);
            Assert(5, "zacpb".to_owned()),
}
    // Render a single line, and advance cursors to next line.
        self.set_dirty(text);
        };
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    /// Get text of head revision.
                Contents::Edit {inserts, ..} => inserts,
                                     categories: C,
        Cow::from(b)
pub type Rope = Node<RopeInfo>;
    /// concurrently it will have count `2` so that undoing one delete but not
            // with offset == s.len(), but be defensive.

                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
    assert!(!a.is_empty() && !b.is_empty());
        self.set_selection_raw(text, selection);
    #[test]
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
                             client: &Client, style_spans: &Spans<Style>)
        assert_eq!(0, a.lines_raw_all().count());
}
        Self {
            type Value = CategoriesT;
                         styles: &StyleMap, style_spans: &Spans<Style>,
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        assert_eq!("#---#--", &subset_str);
        let script = vec![
    #[bench]
                        let mut rendered_lines = Vec::new();
        //} else {
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        if let Some(lines) = lines {
            for rev in &self.revs {
#[derive(PartialEq, Debug)]
    }
}

    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {

/// Enable tracing with a specific configuration. Tracing is disabled initially
    }
        if let Some(breaks) = self.breaks.as_mut() {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
pub struct Utf16CodeUnitsMetric(usize);
        assert_eq!(1, expand_by[0].0.priority);
            Assert(2, "ab".to_owned()),
    fn find_common_1() {
        let a = Rope::from("\n");
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
#[inline]

    /// You could construct the "union string" from `text`, `tombstones` and
    }
    pub fn set_session_id(&mut self, session: SessionId) {
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
            Click(MouseAction { line, column, flags, click_count }) => {

    fn cmp(&self, other: &Sample) -> cmp::Ordering {
    }
            'B' => SampleEventType::DurationBegin,
#![cfg_attr(feature = "benchmarks", feature(test))]
    }
        let snapshot = trace.samples_cloned_sorted();
    }

    /// If `line` is equal to one plus the current number of lines,


        trace.record(guard.sample.as_ref().unwrap().clone());
    for &b in s.as_bytes() {
// you may not use this file except in compliance with the License.


//!
            .map(|(i, _)| i)
            self.record(Sample::new_duration(
                                undo_group,
/// * `name` - A string that provides some meaningful name to this sample.
                    let after = new_full_priority >= full_priority;  // should never be ==
            find.unset();
            args: Some(SampleArgs {
    fn can_fragment() -> bool {
    }
            Merge(1,0),
        assert_eq!(1, r.line_of_offset(r.len() - 1));
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
}
                    }
    }
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        let trace = Trace::enabled(Config::default());
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        };
    #[test]

        let new_inserts = union_ins_delta.inserted_subset();
            event_type: event_type,

    /// Tests that priorities are used to break ties correctly
    /// assumed to be forward).

        let thread = std::thread::current();
    fn gc_3() {
                    selection.add_region(occ);
        let cur_deletes_from_union = &self.deletes_from_union;

// Try to split at newline boundary (leaning left), if not, then split at codepoint
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
            cur_len_utf8 += u.len_utf8();
                      width_cache: &mut WidthCache, keep_selections: bool)
    ///
///
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos

        let snapshot = trace.samples_cloned_sorted();
        // multiple queries; select closest occurrence
    }
    /// finer grain invalidation.
        self.wrap_col = WrapWidth::Width(self.size.width);
    {
        }
        }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
            SampleEventType::FlowEnd => 'f',

        let invalid = if all_caret {
            AssertMaxUndoSoFar(1,3),


            SampleGuard::new(&self, name, categories, None)
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            ix = sel_end as isize;
    fn empty_subset_before_first_rev(&self) -> Subset {
        assert_eq!(2, a.line_of_offset(5));
        assert_eq!(Some(1), a.prev_codepoint_offset(3));

    #[cfg(feature = "benchmarks")]
        let line = self.line_of_offset(text, offset);
    pub fn next_codepoint(&mut self) -> Option<char> {

    num: u32,
        assert_eq!(Some(10), a.next_codepoint_offset(6));
    #[serde(rename = "ts")]

}
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
                                            closure: F, payload: P) -> R
use word_boundaries::WordCursor;

// Copyright 2016 The xi-editor Authors.
                payload: payload,
            if self[i] != other[i] {
    }
    // ============== Merge script tests
    fn prev_grapheme_offset() {
}
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
/// Computes a series of priorities and transforms for the deltas on the right
        #------
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
/// between two utf8 code units that form a code point is considered invalid.
                break;
    }
        };
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
    pub fn lines_all(&self) -> Lines {
            Merge(1,0),
            Drag(MouseAction { line, column, .. }) =>
    fn merge_associative() {
        ];
    }
                    if retain_revs.contains(&rev.rev_id) {
        let rearranged = rearrange(&revs, &base, 7);
///
        let max_line = self.measure::<LinesMetric>() + 1;

        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
    /// The state for finding text for this view.
        let mut cur_len_utf16 = 0;
        let b = a.slice(2, 4);
///
        let mut end = start_pos + len;

        // insert a character at the beginning
use std::fmt;
        let initial_rev = engine.get_head_rev_id().token();
    fn prev(s: &String, offset: usize) -> Option<usize> {
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    ///

        for _i in 0..50 {
        gc_scenario(35,20);
                }
}
                let (last, rest) = self.sel_regions().split_last().unwrap();
            inner: self.iter_chunks(start, end),
        engine.undo([2].iter().cloned().collect());
    }


        }

    find: Vec<Find>,
/// Enable tracing with a specific configuration. Tracing is disabled initially

        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
        }

    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        }
                    }
///     something_expensive()
        for _i in 0..50 {
#[derive(Clone, Debug)]
        // of the delta so we can set the cursor before or after the edit, as needed.
/// Boundary is trailing and determined by a newline char.
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
// limitations under the License.
        }
    /// Selects an entire word and supports multi selection.
    }
        assert_eq!(None, b.prev_codepoint_offset(0));
        self.sample_limit_count
        while !s.is_empty() {
        assert_eq!(snapshot.len(), 9);
        a.lines_all().collect::<Vec<_>>());
        // probably change as the recording internals change.
            //self.cursor.set(self.end);
#[derive(Clone, Copy)]
        let rev = Revision {
        Ok(exe_name) => {
            Merge(2,1),
    rev_id: RevId,
            Merge(0,2), Merge(1, 2),
    fn merge_simple_delete_1() {
        let script = vec![
        engine.edit_rev(1, 2, first_rev, d1.clone());
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
                        });

        let text_inserts = inserts.transform_shrink(&deletes_from_union);
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        // multiple queries; select closest occurrence
    #[test]
            SampleEventType::FlowEnd => 'f',
            },
            // These two will be different without using session IDs

            "styles": styles,
    fn next(s: &String, offset: usize) -> Option<usize> {
            Assert(0, "zcpbdj".to_owned()),
    ///
        loop {
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
use serde_json::Value;
        // TODO: want to let caller retain more rev_id's.
        }
        ];
            Assert(5, "zacpb".to_owned()),
    #[serde(rename = "dur")]

        samples[1].timestamp_us = 5;
                last.1 = last.1.transform_union(&inserts);
/// acquires a dependency on the `serde_json` crate.
    #[test]
///     0
        {
/// let a = Rope::from("hello world");
    }
    fn test_get_sorted_samples() {
            match exe_name.clone().file_name() {
    }
        self.enabled.store(false, AtomicOrdering::Relaxed);


        d

                        }

    }
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
}
        (self.pid, self.timestamp_us).hash(state);
use interval::Interval;
    }
/// The visual width of the buffer for the purpose of word wrapping.

    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
                println!("running {:?} at index {}", op, i);
        assert_eq!(0, b.offset_of_line(0));
impl PartialEq for Sample {
//! This module actually implements a mini Conflict-free Replicated Data Type

        // insert a character at the beginning

        ");
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();


        cur_len_utf8
                    if invert_undos {
                              to_payload("test_get_samples"));
                        }
        let replacement = match self.selection.last() {
    // TODO: maybe refactor this API to take a toggle set
        self.undone_groups = groups;
        self.revs.push(new_rev);
use std::cmp::{min,max};
        engine.edit_rev(1, 2, initial_rev, d1.clone());
    /// if there is not at least one edit.
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
            return self.len();
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        ];
            s.as_bytes()[offset - 1] == b'\n'
        // x, a, y, b, z, c
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);

                        self.revs.push(Revision {
    }
        self.text = new_text;
    /// description for the invariant.
    pub fn get_head(&self) -> &Rope {
        let inserts = parse_subset_list("
    }
                    } else {
            None
                }
    pub fn enable_config(&self, config: Config) {
            Replace { chars, preserve_case } =>
            } else if incomp == GraphemeIncomplete::PrevChunk {
            utf16_count += 1;
            "text": &l_str,

    pub fn max_size_in_bytes(&self) -> usize {
        // selection state, and for scrolling it into view if needed. This choice can
            CategoriesT::StaticArray(ref self_arr) => {
// limitations under the License.
    /// Width in px units, requiring measurement by the front-end.
            AssertMaxUndoSoFar(0,3),
    }
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                                                        soft_breaks.as_mut(),
        let b_rope = Rope::from(&b);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// What kind of sample this is.
    assert!(!a.is_empty() && !b.is_empty());
                    }
        MergeTestState::new(6).run_script(&script[..]);
        self.revs.append(&mut new_revs);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,

            return false;
    #[test]
        self.set_selection(text, new_sel);
        result

    fn compute_deltas_1() {
#[inline]
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
    pub fn new(initial_contents: Rope) -> Engine {

        }
        let new_sel = selection_movement(movement, &self.selection,
    #[test]
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
    }
    }
        assert_eq!(1, r.line_of_offset(r.len() - 1));
            thread_name: Sample::thread_name(),


        assert!(a != empty);
/// See `trace_payload` for a more complete discussion.
            AssertMaxUndoSoFar(0,2),
// ======== Generic helpers
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
/// * `categories` - A static array of static strings that tags the samples in
    }
                RenderTactic::Render => {
            }

            "text": &l_str,
        let a = Rope::from("a\nb\n");
/// the `base_revs`. This allows the rest of the merge to operate on only
    /// Sets the selection to a new value, without invalidating.
///
        //};
        for (iv, style) in style_spans.iter() {

    fn prev(s: &String, offset: usize) -> Option<usize> {
        }
    }
            if next_chunk.is_none() { return None; }
            return 0;

        }
//See ../docs/MetricsAndBoundaries.md for more information.
pub fn enable_tracing() {
/// ```

        let mut sel = self.selection.clone();

            rendered_styles.push((sel_start as isize) - ix);
        }
    /// should be constructed via SampleGuard.
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    pub fn prev_grapheme(&mut self) -> Option<usize> {

        let first = max(first, 0) as usize;

        engine.edit_rev(1, 1, first_rev, d1.clone());
        let mut pos = self.pos();

        ");
            trace: Some(&trace),
                    "something", &["benchmark"],
}
                    let full_path_str = full_path.into_string();
                    // fast-forward this revision over all common ones after it
                        let end_line = start_line + seg.n;
            self.categories == other.categories &&
    #[test]

    pub fn max_size_in_bytes(&self) -> usize {
    // callers should be encouraged to use cursor instead
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
        }
    }

            trace.closure_payload("y", &["test"], || {
/// an argument.
        self.timestamp_us == other.timestamp_us &&
        let b = Rope::from("b");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        }
        as_vec
        loop {
    fn scroll_to_cursor(&mut self, text: &Rope) {
use memchr::{memrchr, memchr};
        }
        // Note: for committing plugin edits, we probably want to know the priority
                RenderTactic::Discard => {
/// an argument.
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        assert_eq!(utf8_offset, 9);
            }
// Copyright 2016 The xi-editor Authors.
            b.push_str(&c);
        self.set_selection_raw(text, selection);
    fn rebase_1() {
    }
        let text_with_inserts = text_ins_delta.apply(&self.text);
        let mut b = String::new();
            Assert(1, "cb".to_owned()),
/// Create an instantaneous sample with a payload.  The type the payload
/// fn something_expensive() -> u32 {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
            self.set_selection(text, selection);
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        engine.undo([1].iter().cloned().collect());
        for region in self.selection.iter() {
            Assert(1, "ab".to_owned()),
    }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    if x < min {
}
            pid: sys_pid::current_pid(),
                self.push_leaf(s.to_owned());
            pos
    #[serde(serialize_with = "serialize_event_type")]
#[macro_use]
/// associated performance hit across the board for turning it on).

/// # Examples
        let result = closure();
        let text_with_inserts = text_inserts.apply(&text);
                } else {
            // selection with interior
        // This might be an over-specified test as it will
        struct RopeDelta_ {
#[derive(Clone, Copy)]
            drag_state: None,
/// Internally, the implementation uses reference counting (not thread safe, though
            let mut peers = Vec::with_capacity(count);
    Matches
            }
    1

    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        self.send_update_for_plan(text, client, styles,
                    selection.add_region(occ);
    /// Note: unlike movement based selection, this does not scroll.
        }
    pub fn lines_all(&self) -> Lines {
extern crate log;
    pub event_type: SampleEventType,
        assert_eq!(2, a.offset_of_line(1));

        let utf8_offset = 9;
        let end = time::precise_time_ns();
/// However, anything that can be converted into a Cow string can be passed as
                if !inserts.is_empty() {
        }
        }

        let trace = Trace::enabled(Config::default());
    }
            first_line: 0,
                        ops.push(self.build_update_op("invalidate", None, seg.n));
        while let Err(incomp) = next_boundary {
        tombstones = new_tombstones;

                        Some(gc_dels.transform_shrink(&inserts))
                            (inserts, deletes)

        self.buffer_id
}
                        }
        }

#[inline]
}
        assert_eq!(b, String::from(a));
            ),
    fn thread_name() -> Option<StrCow> {
                //self.end - prev_pos
#[derive(PartialEq, Debug)]
    }
        RopeInfo {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            let _x = trace.block("something", &[]);

    fn do_cancel(&mut self, text: &Rope) {
    pub chars: String,

        // since one of the two deletes was gc'd this should re-do the one that wasn't
                self.do_gesture(text, line, col, ty),
                if is_base {
                        line_num = seg.their_line_num + seg.n;
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
                        let _ = s.pop();
    fn merge_session_priorities() {
            Assert(1, "zpbj".to_owned()),


    inner: ChunkIter<'a>,

                    for (ei, e) in self.peers.iter().enumerate() {
                MetadataType::ProcessName {name: exe_name},
        RevId { session1: 1, session2: 0, num: i as u32 }
            if let Edit { ref inserts, .. } = rev.edit {
    utf16_size: usize,
use std::mem::size_of;
        Self::with_limit_count(size / size_of::<Sample>())
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        if offset == s.len() {
            update["lines"] = json!(lines);
        Self {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    }
    pub fn next_grapheme(&mut self) -> Option<usize> {
    fn arr_eq(&self, other: &Vec<String>) -> bool {

    }
        } else if line == max_line {
/// 3. You may not care about them always being sorted if you're merging samples
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));


        for seg in self.lc_shadow.iter_with_plan(plan) {
        assert_tokens(&rope, &[
    #[cfg(feature = "benchmarks")]
/// Represents the current state of a document and all of its history
            HighlightFind { visible } => {
        /// along with the newline that triggered it.
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
// limitations under the License.
    #[cfg(feature = "benchmarks")]
                    return Some(result);
        match self {
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        if initial_contents.len() > 0 {
    ProcessLabels { labels: String },
    StaticArray(&'static[&'static str]),
    /// description for the invariant.
}

/// Measured unit is utf8 code unit.
                                     categories: C,
        for _i in 0..50 {
            pid: sys_pid::current_pid(),

            utf16_size: count_utf16_code_units(s),


    #[inline]
        let (leaf, pos) = cursor.get_leaf().unwrap();
        // if self.end is inside this chunk, verify that it is a codepoint boundary
        assert!(r.clone().slice(0, a.len()) == a_rope);

}

        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
                    let e = &mut self.peers[ei];
    a_ids.intersection(&b_ids).cloned().collect()
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
                }
        };
        }

        // TODO: may make this method take the iv directly
            // Go crazy
    }
//!
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        (line, offset - self.offset_of_line(text, line))
        if let Some(exe_name) = exe_name() {
/// An element in a `RopeDelta`.

        use self::MergeTestOp::*;
    }
    /// 96 bits which is more than sufficient for this to never happen.
                find_leaf_split_for_bulk(s)
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
                            (inserts, deletes)
            SampleEventType::Metadata => 'M'
            Rope::from(s1.clone()),
            false => Selection::new(),
        assert_eq!(snapshot[1].name, "thread_name");
impl Serialize for DeltaElement<RopeInfo> {
        let a_rope = Rope::from(&a);

    }
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        -> Self
//
        });
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
/// See `trace_closure` for how the closure works and `trace_payload` for a
    /// Tracks whether this view has been scheduled to render.
        while !s.is_empty() {
                    }
    fn eq_small() {
    // partly because the reachability calculation would become more complicated (a
    ns / 1000
    }



}
        }
            }
                },
    /// Get the Subset to delete from the current union string in order to obtain a revision's content

use delta::{Delta, InsertDelta};
                where E: serde::de::Error

            Assert(0, "zacbd".to_owned()),


    pub fn new_instant<S, C>(name: S, categories: C,
            },
        samples[1].timestamp_us = 5;
        // todo: this will be changed once multiple queries are supported

pub struct LinesMetric(usize);  // number of lines

        if let Some((l, offset)) = self.get_leaf() {
}
    /// Returns an iterator over chunks of the rope.


        let mut r = Rope::from("27");
    }
            lines: 0,
        }
    #[test]
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    pub fn scroll_height(&self) -> usize {
        self.invalidate_selection(text);
        let mut cursor = Cursor::new(self, offset);
//
        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
}
            edit: Undo { toggled_groups, deletes_bitxor }
                }


        }
    fn merge_simple_delete_2() {
                                                    self.size.width));
            },
            s = &s[splitpoint..];
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
))]
    /// set with this function, which will make the revisions they create not have colliding IDs.
    bytecount::count(s.as_bytes(), b'\n')
    {
        assert_eq!(1, res);
{

        };
                text.offset_of_line(line)
}
        for i in ((edits-max_undos)..edits).rev() {
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        for chunk in self.iter_chunks(start, end) {

        assert_eq!(snapshot[7].name, "c");
    }
#[derive(Serialize, Deserialize, Debug)]

    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
                    RopeDeltaElement_::Copy(start, end) =>
    pub fn set_scroll(&mut self, first: i64, last: i64) {
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
    ///
            CategoriesT::DynamicArray(ref self_arr) => {
}
    #[test]
}
/// the session ID component of a `RevId`
}
}
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
            SampleEventType::ObjectCreated => 'N',

        where D: Deserializer<'de>,
        let mut result = json!({
                    self.set_selection(text, selection);
        // we add the special find highlights (1) and selection (0) styles first.
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    }
        assert_eq!(r.len(), r.offset_of_line(2));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
/// an argument.
    pub fn sel_regions(&self) -> &[SelRegion] {
            None
        --#--
pub enum CategoriesT {
        deletes_bitxor: Subset,
            trace.closure_payload("y", &["test"], || {
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        engine.edit_rev(1, edits+1, head, d1);
    text: Rope,
        if self.len() != other.len() {
    cursor: Cursor<'a, RopeInfo>,
        self.selection = sel;


/// let a = Rope::from("hello world");
    /// want to set the process name (if provided then sets the thread name).
        self.find_changed = FindStatusChange::Matches;
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        assert_eq!(snapshot[3].name, "a");
        value
        }
        self.cursor.next_leaf();
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        if all_samples.is_empty() {
/// # Examples
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    #[test]
            let mut len = 1;
/// # Performance
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            SampleEventType::ObjectSnapshot => 'O',
    pub fn byte_at(&self, offset: usize) -> u8 {
            Assert(1, "ab".to_owned()),
    let mut last_priority: Option<usize> = None;

            let mut peers = Vec::with_capacity(count);
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
                        let n_skip = seg.their_line_num - line_num;

        self.set_selection(text, selection);
            base_sel: selection.clone(),
        assert_tokens(&rope, &[
#[derive(Clone, Debug, PartialEq, Eq)]
    }
    }
// The advantage of using a session ID over random numbers is that it can be
        // todo: this will be changed once multiple queries are supported
                        undone_groups = Cow::Owned(new_undone);
            match c.edit {
pub struct Engine {
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
        }
        for rev in self.revs[rev_index..].iter().rev() {
        debug_subsets(&rebased_inserts);
            GestureType::LineSelect =>
    #[test]
            Assert(0, "b".to_owned()),
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)

        engine.edit_rev(1, 2, initial_rev, d1.clone());
        assert_eq!(snapshot[1].name, "thread_name");
        // TODO(vlovich): optimize this path to use the Complete event type
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());

            Merge(0,2), Merge(1, 2),
            name: name.into(),

}
        d_builder.build()
        use self::ViewEvent::*;
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        let mut engine = Engine::new(Rope::from(TEST_STR));
            // I think it's a precondition that this will never be called
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.

    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    }
pub struct RevId {
        let new_head = engine.get_head_rev_id().token();
        self.rev_id_counter += 1;
    /// Tracks whether there has been changes in find results or find parameters.
                    text.slice_to_string(region.min(), region.max())
    #[test]
        }
    fn consume(self) -> (Option<String>, Option<i32>) {
    type Output = Rope;
                metadata_sort_index: None,
        let contents = Contents::Edit {
            SelectionForFind { case_sensitive } =>
    fn next_grapheme_offset() {
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        use self::MergeTestOp::*;
        let mut sel = Selection::new();
    fn next(&mut self) -> Option<Cow<'a, str>> {
    /// ties in edit priorities. Otherwise the results may be inconsistent.

                    };
    Matches
                engine.gc(&to_gc)
    /// Time complexity: O(log n)

        let trace = Trace::enabled(Config::default());
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
    }
    /// Garbage collection means undo can sometimes need to replay the very first
    }
    // recompute the prefix up to where the history diverges, but it's not clear that's
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    pub fn scroll_height(&self) -> usize {
        ");
/// Computes a series of priorities and transforms for the deltas on the right

/// Enable tracing with a specific configuration. Tracing is disabled initially
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let mut a = String::new();
        let new_head_2 = engine.get_head_rev_id().token();
            deletes_from_union,
    pub fn next_codepoint(&mut self) -> Option<char> {

    // There will probably never be a document with more than 4 billion edits
///

                            ops.push(self.build_update_op("skip", None, n_skip));
    #[should_panic]
}
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    }
    }
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    }
        fn new(count: usize) -> MergeTestState {

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

    }
            inserts = inserts.transform_expand(trans_inserts, after);
        Self {
        // rebase delta to be on the base_rev union instead of the text
    let new_text = del_delta.apply(text);
        let edit_iv = Interval::new_closed_open(start, end);
        use self::MergeTestOp::*;
        let col = col as usize;
            rendered_styles.push((iv.start() as isize) - ix);
        let mut selection = Selection::new();
        assert_eq!(output, String::from(engine.get_head()));
        let mut b = TreeBuilder::new();
    fn drop(&mut self) {
{
                    if sel_end_ix > sel_start_ix {
/// record it.
        true
        ---#--
    // TODO make this faster somehow?
    // transform representing the characters added by common revisions after a point.
        let all_samples = self.samples.lock().unwrap();
    }
}
        use std::hash::{Hash, Hasher};
        self.lines(0, self.len())
                    // can only happen on empty input
        }
            let mut peers = Vec::with_capacity(count);
use xi_rope::spans::Spans;
        None => {
    fn do_cancel(&mut self, text: &Rope) {
    }
                                                          new_len, col),
    }
        }
        engine.edit_rev(1, 2, initial_rev, d1.clone());
// easily delta-compressed later.


    /// The `pristine` argument indicates whether or not the buffer has
/// With `json_payload` feature:
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[test]
        samples
            match reverse {
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    // even worth the code complexity.

        } else {

            let matches_only = self.find_changed == FindStatusChange::Matches;
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },

                        DeltaElement::Copy(start, end),
pub type RopeDelta = Delta<RopeInfo>;
        let trace = Trace::disabled();
        let mut selection = Selection::new();
    fn eq_med() {
        use self::MergeTestOp::*;
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_eq!(utf8_offset, 13);
            retain_revs.insert(last.rev_id);
    /// revision, and so needs a way to get the deletion set before then.
            let style_id = self.get_or_def_style_id(client, styles, &style);
            highlight_find: false,
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
            } else {
        let mut hasher = DefaultHasher::new();
        let inserts_1 = parse_subset_list("
    #[test]
            buffer_id: buffer_id,
            AddSelectionBelow =>
}

/// have to be considered in `rebase` substantially for normal editing
        let rearranged = rearrange(&revs, &base, 7);
    let new_text = del_delta.apply(text);
    ObjectCreated,
        b.iter(|| black_box(sys_tid::current_tid()));

        let new_head_2 = engine.get_head_rev_id().token();
        assert_eq!(0, b.line_of_offset(0));
        }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    #[serde(skip_serializing_if = "Option::is_none")]
            },
            Merge(1,0),
                self.select_word(text, offset, false),
    pub pid: u64,
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            SampleEventType::FlowInstant => 't',
    /// Returns an iterator over chunks of the rope.
            }
    height: usize,
    pub fn instant<S, C>(&self, name: S, categories: C)
        d.insert(StrCow::from("test"), StrCow::from(value));
    // and partly because you need to retain more undo history, to supply input to the
        let mut engine = Engine::new(Rope::from(TEST_STR));
        if !new_inserts.is_empty() {
            // On the next step we want things in expand_by to have op in the context


    fn is_boundary(s: &String, offset: usize) -> bool {


                        word_cursor.select_word()
        }
        all_samples.reset_limit(0);
                name, categories, Some(payload.into()), start, end - start));
            let not_in_tombstones = self.deletes_from_union.complement();
        self.first_line = first;
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        // shouldn't do anything since it was double-deleted and one was GC'd
                    self.set_selection(text, selection);
    }
        for (iv, style) in style_spans.iter() {
#[inline]
            Merge(1,0), Merge(2,0),

            if !selection.is_empty() {
            Assert(1, "afc".to_owned()),

    #[test]
                out.push((prio, inserts));
    /// Splits current selections into lines.
        let a = Rope::concat(
        assert_eq!(TEST_STR, String::from(engine.get_head()));
#[cfg(feature = "dict_payload")]

    }
    #[bench]


/// Atomicity is implicit, putting the offset
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);

                if !region.is_caret() {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        (Revision {
            if self.fragment.is_empty() {
use rpc::{GestureType, MouseAction, SelectionModifier};
                            (inserts, deletes)
        assert_eq!(rope.offset_of_line(0), 0);
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
            priority: 0,
                                deletes.transform_shrink(&gc_dels))
//

        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
const FLAG_SELECT: u64 = 2;
}
        let head_rev = &self.revs.last().unwrap();
        if let Some(new_scroll_pos) = self.scroll_to.take() {
                        }
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        assert_eq!(snapshot[2].name, "x");
        // insert character at end, when this test was added, it panic'd here
    /// this returns the offset of the end of the rope. Arguments higher
            return self.revs.len();
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        assert_eq!("zcpbdj", String::from(&text_2));
    fn line_offsets() {
    TRACE.instant_payload(name, categories, payload);

    fn from_base_units(s: &String, in_base_units: usize) -> usize {

        MergeTestState::new(4).run_script(&script[..]);
            Merge(2,3),
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        self.replace_changed = true;
    // this should have the same behavior, but worse performance
            None => text.line_of_offset(offset)
    type Item = u8;
        });
            self.current = next_chunk;
            Merge(2,0),
            } else {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
                    if seg.validity == line_cache_shadow::ALL_VALID {
        Some(self.cmp(other))
mod fixed_lifo_deque;

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    }

        Self {
                _ => panic!("to_base_units called with arg too large")
            soln.push('b');
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
            },
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    fn from(r: Rope) -> String {
    }
            }),
            for find in self.find.iter() {
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
    // Note: this function would need some work to handle retaining arbitrary revisions,
    pub duration_us: Option<u64>,
    }
            self.shrink_to_fit();
            highlight_find: false,
        // current recording mechanism should see:
    /// Tests that priorities are used to break ties correctly
    /// Get text of head revision.
                }
    /// Determine whether `offset` lies on a codepoint boundary.

            } else {
        for _ in 0..in_measured_units {
        engine.edit_rev(1, 2, first_rev, d1.clone());
        }
    }
            }
            }
        self.tombstones = new_tombstones;

/// non-base revs, `N` being transformed non-base revs, and rearranges it:
            Assert(1, "cb".to_owned()),
    fn from(c: Vec<String>) -> CategoriesT {
        memchr(b'\n', &s.as_bytes()[offset..])

        }
    }
    }
        // same span exists in both sets (as when there is an active selection)
                let (nl, noffset) = self.next_leaf()?;
        engine.undo([2].iter().cloned().collect());
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    /// Returns a slice of the string from the byte range [`start`..`end`).
    fn invalidate_selection(&mut self, text: &Rope) {
        if !gc_dels.is_empty() {
    //TODO: implement iter_chunks using ranges and delete this
            Drag(MouseAction { line, column, .. }) =>
    }
                    }

            pid: sys_pid::current_pid(),
}
        let mut pos = self.pos();
        assert_eq!(snapshot[3].name, "b");
            Assert(0, "ab".to_owned()),
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,

            // with offset == s.len(), but be defensive.
        assert_eq!(1, r.line_of_offset(r.len() - 1));
        let trace = Trace::enabled(Config::default());
    pub categories: Option<CategoriesT>,
            return ix;
        self.find.clear();
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    #[test]
        for chunk in self.iter_chunks(start, end) {
    /// Returns the byte offset corresponding to the line `line`.
                if s.ends_with('\n') {
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
                    let e = &mut self.peers[ei];
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
                out.push((prio, inserts));
                    RopeDeltaElement_::Copy(start, end) =>
/// A flag used to indicate when legacy actions should modify selections
    // in a single session.
))]
/// Create a `Rope` from a `String`:
        let mut offset = 0;
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
                              categories: C,
        assert_eq!(Some(2), b.next_codepoint_offset(0));
/// ```
    /// The session ID used to create new `RevId`s for edits made on this device
    }
    }


#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
        let a2 = Rope::from("a");
                    // of which undos were used to compute deletes_from_union in edits may be lost.

/// }
    }
            // with offset == 0, but be defensive.

///
                    text.slice_to_string(start, end)
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
            deletes_from_union,
        assert_eq!(snapshot[1].name, "thread_name");
    pub fn default() -> Self {
        assert_eq!(1, r.line_of_offset(a.len()));
        assert_eq!(rope.offset_of_line(0), 0);
                    if invert_undos {
        }
    }
                return false;

/// implementation as efficient as a mutable version.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
/// Valid within a session. If there's a collision the most recent matching
                } else {
        engine.undo([].iter().cloned().collect());
    /// The semantics are intended to match `str::lines()`.
        trace.instant("4", &["test"]);
        assert_eq!("-###-", &subset_str);
                            if !inserts.is_empty() {
        }
        // only one of the deletes was gc'd, the other should still be in effect
    /// Invalidates the styles of the given range (start and end are offsets within
        for i in 0..self.len() {
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        b.iter(|| black_box(trace.instant_payload(
        cursor.prev::<BaseMetric>()
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
        }
        -----#

    #[test]

    pub fn get_caret_offset(&self) -> Option<usize> {
}
            FindAll => self.do_find_all(text),
    let inverse_tombstones_map = old_deletes_from_union.complement();

        let correct = parse_subset_list("
        let a = Rope::from("");
    /// return if a delete is un-done or an insert is re- done.
    } else {
///
    #[test]
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
extern crate serde_json;
        if let Some(ref mut trace) = self.trace {
    /// Constructs a Duration sample.  For use via xi_trace::closure.
                            max_undo_so_far: rev.max_undo_so_far,
            retain_revs.insert(last.rev_id);
}
        let (mut l, mut offset) = self.get_leaf()?;
    }
        b.set_dirty(true);
        let a = Rope::from("\n");
    // Delta that deletes the right bits from the text
        deletes_from_union
    TRACE.samples_cloned_sorted()
                Contents::Edit {inserts, ..} => inserts,
    /// An arbitrary payload to associate with the sample.  The type is
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))

        self.do_set_replace(replacement, false);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
    #[cfg(feature = "dict_payload")]

    cursor: Cursor<'a, RopeInfo>,
                        }
        delta.apply(&self.text)
    for op in b_new {

                        });

/// let a = Rope::from("hello world");
/// * `categories` - A static array of static strings that tags the samples in
    {
            utf16_size: 0,
                         hls: &[(usize, usize)],
        });
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
/// Usage of static strings is encouraged for best performance to avoid copies.
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
// utility function to clamp a value within the given range
            return self.revs.len();
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        }
extern crate libc;
        let r = r + Rope::from(&b[MIN_LEAF..]);
        for _ in 0..in_measured_units {
        if let Some((l, offset)) = self.get_leaf() {
        let mut d = TracePayloadT::with_capacity(1);
    /// Get revision id of head revision.
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        use self::MergeTestOp::*;
        for &(sel_start, sel_end) in hls {
                where E: serde::de::Error
            Insert(String),
    }
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
use interval::Interval;
///
                CategoriesT::StaticArray(c)


        if let Contents::Edit {priority, inserts, .. } = r.edit {
    }
    fn undo_4() {
                }
#[derive(Clone, Debug, PartialEq, Eq)]
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
use std::string::ParseError;
                self.do_gesture(text, line, col, ty),
        }
impl Sample {
struct DragState {

        let delta = Delta::synthesize(&self.tombstones,
        b.push('\n');
        if line < self.first_line {
    /// in the range of 511-1024 bytes.
                }
            Assert(1, "arpbj".to_owned()),
                        DeltaElement::Insert(Rope::from(s)),
impl PartialOrd for Sample {
            trace.instant("something", &[]);
    /// All the selection regions other than the one being dragged.
    }
                len += 1;
        } else {
/// the `base_revs`. This allows the rest of the merge to operate on only
//     http://www.apache.org/licenses/LICENSE-2.0
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    fn empty_subset_before_first_rev(&self) -> Subset {
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
        trace.closure_payload("y", &["test"], || {},
        cur_len_utf8
    } else {

        // todo: for now only a single search query is supported however in the future
    {
                SelectionModifier::Set => self.set_selection(text, occ),
    #[serde(skip_serializing_if = "Option::is_none")]

        trace.instant("5", &["test"]);
use std::collections::BTreeSet;

            MetadataType::ThreadName {..} => "thread_name",
    fn is_ok_child(&self) -> bool {
    }

        }
        };
    pub fn do_find_all(&mut self, text: &Rope) {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
            Assert(1, "acpbdj".to_owned()),
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
}

        let text_b = Rope::from("zpbj");

pub fn is_enabled() -> bool {

            Assert(0, "acpbdj".to_owned()),
            self.current = next_chunk;

    }
    /// The incrementing revision number counter for this session used for `RevId`s
            retain_revs.insert(last.rev_id);
}
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    }
    }
    /// if there is not at least one edit.
        self.revs.reverse();
    fn arr_eq(&self, other: &[&'static str]) -> bool {
            Assert(0, "zcpbdj".to_owned()),
    #[serde(default = "initial_revision_counter", skip_serializing)]
        }
                        ops.push(self.build_update_op("copy", None, seg.n));
            duration_us: Some(ns_to_us(duration_ns)),
            rev_id_counter: 1,
    /// how many times it has been deleted, so if a character is deleted twice
    for rev in revs.iter().rev() {
                return false;

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        ---#--
                    return i + 1; // +1 since we know the one we just found doesn't have it
            if let Some(ref thread_name) = sample.thread_name {
    for op in b_new {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        assert_eq!(snapshot[2].name, "a");
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
                        Cow::Owned(un_deleted.transform_shrink(inserts))
            Merge(0,1),
        engine.edit_rev(1, edits+1, head2, d2);
}
                SelRegion::new(start, end)

impl StringArrayEq<[&'static str]> for Vec<String> {
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        }
            sample.event_type = SampleEventType::DurationEnd;
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
    /// The current contents of the document as would be displayed on screen
        let mut revs = basic_insert_ops(inserts_1, 1);
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
        }
    }
        assert!(r != b_rope + a_rope);
    /// When was the sample started.
        }
enum MetadataType {
        }


            rendered_styles.push(0);
            let b = self.current.unwrap().as_bytes()[self.idx];
            result["cursor"] = json!(cursors);
        // if we have active find highlights, we don't collapse selections
            trace.instant("something", &[]);
                                undo_group,
        let (ins_delta, deletes) = delta.factor();
                         styles: &StyleMap, style_spans: &Spans<Style>,
        Engine {
// distributed under the License is distributed on an "AS IS" BASIS,
        engine.edit_rev(1, 1, first_rev, d1);
                name, categories, Some(payload.into()), start, end - start));
///
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
        let mut cursor = Cursor::new(self, offset);
    num: u32,
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
            MetadataType::ThreadName {name} => (Some(name), None),
                }
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        in_measured_units
/// Applies an optimization where it combines sequential revisions with the
                if rev.max_undo_so_far < lowest_group {
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();

    #[test]
    match std::env::current_exe() {
                    return i + 1; // +1 since we know the one we just found doesn't have it
        };
        self.do_set_replace(replacement, false);


            'E' => SampleEventType::DurationEnd,
            }
        if self.find.is_empty() {
        assert_eq!(a.len(), r.offset_of_line(1));
    Edit {
    #[test]
    /// recomputing line wraps.
impl Trace {
        // spam cmd+z until the available undo history is exhausted
    }
type StyleMap = RefCell<ThemeStyleMap>;
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
        }
        assert_eq!(snapshot[3].name, "y");
                deletes: new_deletes,
#[inline]
            Assert(0, "acpbdj".to_owned()),
///     something_else_expensive(result);
        trace.instant("5", &["test"]);
/// fn something_expensive() {
    }
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
use self::Contents::*;
                    None
            Assert(1, "abc".to_owned()),
            self.find.push(Find::new());
    }
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
}
    /// The revision history of the document
        // set last selection or word under current cursor as search query
categories_from_constant_array!(3);
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
                    b.add_span(seg.n, 0, 0);
                cur_all_inserts = older_all_inserts;
        debug_subsets(&rebased_inserts);
///
use std::collections::BTreeSet;


    }
    fn utf16_code_units_metric() {
            "text": &l_str,
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {

        // todo: the correct Find instance needs to be updated with the new parameters
}
            thread_name: Sample::thread_name(),
                    let new_gc_dels = if inserts.is_empty() {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
        }
        }
        let (new_text, new_tombstones) =
/// let c = b.slice(1, 7);

        let text_inserts = inserts.transform_shrink(&deletes_from_union);
        for region in self.selection.regions_in_range(start_pos, pos) {
                        if !last_selection.is_caret() {
        // NOTE 2: from_micros is currently in unstable so using new
        let mut cursor = Cursor::new(self, offset);
///     something_expensive()
    /// via process_name/thread_name respectively.
            return Vec::with_capacity(0);
            Assert(0, "b".to_owned()),
            trace.record(sample);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
///
    /// Get text of a given revision, if it can be found.
                MergeTestOp::Assert(ei, ref correct) => {

    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
        self.revs.append(&mut new_revs);
/// stored as tracing could still be enabled but set with a limit of 0.
            sample: None,
            Assert(0, "adfc".to_owned()),
                }
// You may obtain a copy of the License at
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
        }
        next_expand_by = Vec::with_capacity(expand_by.len());
        ");
        assert_eq!(Some(3), a.prev_codepoint_offset(6));

        }
    #[cfg(feature = "benchmarks")]
            }),
        } else {
        });
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },



    }
        self.join(",").serialize(serializer)
    }
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
        inserts: Subset,
/// * `name` - A string that provides some meaningful name to this sample.
///
        self.size = size;
/// * `categories` - A static array of static strings that tags the samples in
                max_undo_so_far: i+1,
    // This computes undo all the way from the beginning. An optimization would be to not
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
            DeltaElement::Insert(ref node) =>
        } else {
            Sample::new_instant("local pid", &[], None),
    let inverse_tombstones_map = old_deletes_from_union.complement();
    }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
        let a_revs = basic_insert_ops(inserts.clone(), 1);
            Drag(MouseAction { line, column, .. }) =>
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
                if !inserts.is_empty() {
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
impl Metric<RopeInfo> for BaseMetric {
    /// this returns the offset of the end of the rope. Arguments higher
        let mut cursor = Cursor::new(self, offset);

        (Revision {
/// How tracing should be configured.
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        self.find.iter().map(|find| {
fn shuffle(text: &Rope, tombstones: &Rope,
        self.sample_limit_count * size_of::<Sample>()

        let mut hls = Vec::new();

            Merge(1,0),
    /// Constructs an instantaneous sample.
    }
                selection.add_region(SelRegion::caret(region.max()));

    /// Get previous codepoint before cursor position, and advance cursor backwards.
    }
    match b {

    let mut out = Vec::new();
    }
                deletes: new_deletes,

/// Atomicity is implicit, putting the offset
            };

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        };
///     0



    /// Returns an iterator over chunks of the rope.
                                                    self.size.width));
                },
    pub fn join(&self, sep: &str) -> String {
    /// Get the line range of a selected region.
        }
    // This computes undo all the way from the beginning. An optimization would be to not
            SampleGuard::new_disabled()
        let mut b = String::new();
    {

}
        self.subseq(iv)
    }
            }
        for sample in all_samples.iter() {
#[macro_use]
        let mut a = String::new();
impl Eq for CategoriesT {}
    }
            for i in 0..count {
/// same priority into one transform to decrease the number of transforms that
            //let prev_pos = self.cursor.pos();
                           pristine: bool)
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    cursor: Cursor<'a, RopeInfo>,
            false
        engine
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        result
        self.tombstones = new_tombstones;
        RopeInfo {
    lines: usize,
            Assert(0, "ab".to_owned()),

    }
    //
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
        inserts.into_iter().enumerate().map(|(i, inserts)| {
        let mut leaf_offset = pos - offset;
    }
    }
            Revision {

}
}
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
    use std::collections::BTreeSet;
        let deletes_from_union_a = parse_subset("-#---");
        for i in 0..self.len() {
        assert_eq!(2, a.offset_of_line(1));
    {

                    if seg.validity == line_cache_shadow::ALL_VALID {

            None => return "",
        }

                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos


                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    {
                                deletes.transform_shrink(&gc_dels))
        let deletes_from_union_a = parse_subset("-#---");
categories_from_constant_array!(5);
        a.edit_str(1, 9, "era");

        match *self {
            // Snap to grapheme cluster boundary
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    /// Only number of matches changed
        // rebase insertions on text and apply

        }

/// A static string has the lowest overhead as no copies are necessary, roughly
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
            Merge(0,1),
        }
                        let mut rendered_lines = Vec::new();
    }

        let revs = basic_insert_ops(inserts, 1);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
/// Usage of static strings is encouraged for best performance to avoid copies.

        LinesRaw {
            let mut len = 1;
    All,
        let script = vec![
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
    /// Merge the new content from another Engine into this one with a CRDT merge
                    // of which undos were used to compute deletes_from_union in edits may be lost.

        View {
            engine.undo(to_undo.clone());
                         start: usize, end: usize, sel: &[(usize, usize)],
    pub fn lines_all(&self) -> Lines {
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        samples
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
            // corner and I'm lazy -cmyr
    fn is_ok_child(&self) -> bool {
        // invert the changes to deletes_from_union starting in the present and working backwards
        }
                        gc_dels = new_gc_dels;
    fn measure(info: &RopeInfo, _: usize) -> usize {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        if initial_contents.len() > 0 {
            }
/// ```
}
    /// Return the byte offset corresponding to the line number `line`.
    }
                self.set_selection_raw(text, selection);
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
}
    }
}
        let mut soln = String::from("h");
    // for simplicity.
        let res = find_common(&a, &b);
    #[allow(dead_code)]
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    }
                            }
            engine.undo(to_undo.clone());
impl Metric<RopeInfo> for BaseMetric {

        engine.edit_rev(1, 1, first_rev, d1.clone());
        base_subset.is_some() && base_subset == other_subset

    /// The maximum number of samples that should be stored.
    /// If `modify` is `true`, the selections are modified, otherwise the results
            Assert(0, "ab".to_owned()),
}
impl CategoriesT {

        };
        }
            Assert(2, "ab".to_owned()),
        // insert character at end, when this test was added, it panic'd here

/// equivalent performance to a regular trace.  A string that needs to be copied
            // On the next step we want things in expand_by to have op in the context
        assert_eq!(samples[0].name, "remote pid");
        Engine {
    out
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
        serializer.serialize_str(&String::from(self))
                }
        }
        // x, a, y, b, z, c
            self.next()
                } else if click_count == Some(2) {
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            AssertAll("zacpb".to_owned()),
    /// New offset to be scrolled into position after an edit.
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        b.push_str(new);
    }
                // sanitize input
    #[test]
impl Serialize for DeltaElement<RopeInfo> {
    }
    }
}

                    priority, undo_group,
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    }
    fn goto_line(&mut self, text: &Rope, line: u64) {
    DurationBegin,
        engine.gc(&to_undo);
/// Tracing is disabled initially on program launch.
            event_type: SampleEventType::CompleteDuration,
    use test::black_box;

                }
            cur_len_utf16 += u.len_utf16();
        /// revision that were added by this revision.
        Self::with_limit_bytes(1 * 1024 * 1024)
impl NodeInfo for RopeInfo {
            None

//! It enables support for full asynchronous and even peer-to-peer editing.

        let new_head = engine.get_head_rev_id().token();
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
    /// This function will panic if `offset > self.len()`. Callers are expected to
        let last = max(last, 0) as usize;
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                payload: payload,
                        }
        #------
            },
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            self.find.push(Find::new());
            let mut word_cursor = WordCursor::new(text, offset);
        engine.edit_rev(1, 1, first_rev, d1.clone());
//!
}
                let (pl, poffset) = self.prev_leaf()?;
///
            },
    }
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            } else {
                Rope::from(s1.clone()),
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        samples[1].pid = 2;
}
        }
    /// vertical scroll position
    fn is_boundary(s: &String, offset: usize) -> bool {
            black_box(time::precise_time_ns());

        for _ in 0..in_measured_units {
            //self.cursor.set(self.end);
    }
        for &(trans_priority, ref trans_inserts) in &expand_by {
                MetadataType::ProcessName {name: exe_name},
        rope.offset_of_line(5);
extern crate serde_json;
        if offset == 0 {
    ///
}
    }
                None => {
    }
                    selection.add_region(occ);
        #------

    fn test_samples_closure() {
        let mut line_num = 0;  // tracks old line cache
    #[bench]
        let first_rev = engine.get_head_rev_id().token();
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            Merge(0,2), Merge(1, 2),
                    Some(Contents::Edit {
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);

    }
    }

                        Err(e) => {
            self.record(Sample::new_duration(
use std::fmt;
    struct MergeTestState {
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
        ];

        assert_eq!(TEST_STR, String::from(engine.get_head()));
            thread_name: None,
    pub name: StrCow,
impl<'a> Drop for SampleGuard<'a> {

        match self.breaks {
        assert_eq!(snapshot[1].name, "thread_name");
                if rev.max_undo_so_far < lowest_group {
            Assert(0, "acpbdj".to_owned()),
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
                              payload: Option<TracePayloadT>,
        Cow::from(a.into_owned() + b)

            Assert(1, "abc".to_owned()),
        if offset == s.len() {
        let mut engine = Engine::new(Rope::from(""));
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        let first_rev = engine.get_head_rev_id().token();
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
#[derive(Serialize, Deserialize, Clone, Debug)]
            let _ = trace.block("test_samples_block", &["test"]);
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());

            find.find_status(matches_only)
        // TODO: simplify this through the use of scopeguard crate
    }
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
                _ => panic!("to_base_units called with arg too large")


#[derive(Clone, Debug, PartialEq, Eq)]
        engine.gc(&gc);
                (region.is_upstream() && c == pos) ||
        b.iter(|| sys_pid::current_pid());
    #[bench]
        self.cursor.next_leaf();
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
use styles::{Style, ThemeStyleMap};
        b if b < 0x80 => 1,
    }
    }
    }
            // copy the current state
    pub fn push_str(&mut self, mut s: &str) {
        }
            Copy(usize, usize),
        }
    #[bench]
        let (mut l, mut offset) = self.get_leaf()?;

        self.invalidate_selection(text);
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
            // which we can do with another peer that inserts before a and merges.
///
        #------
    /// Get revision id of head revision.
// should make this generic, but most leaf types aren't going to be sliceable
/// with.  By default, the type is string-like just like name.  If compiled with
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        engine.edit_rev(1, 2, initial_rev, d1.clone());
            return self.revs.len();
    /// List of categories the event applies to.
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
        self.invalidate_selection(text);
                    RopeDeltaElement_::Insert(s) =>
impl From<Vec<String>> for CategoriesT {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            max_undo_so_far,
        let new_pos = self.pos() + (end - offset);
            Some(offset + len_utf8_from_first_byte(b))
        }
        // send updated find status only if there have been changes
///
    }
        // selection state, and for scrolling it into view if needed. This choice can
        self.len()
    #[inline]
        assert_eq!("#---#--", &subset_str);
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo

    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

        // TODO: refine for upstream (caret appears on prev line)

            Some(region) => {
            Gesture { line, col, ty } =>
use fixed_lifo_deque::FixedLifoDeque;
        assert_eq!(Some(10), a.next_codepoint_offset(6));
            self.truncate(splitpoint);
    }
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    }
        let expand_by = compute_transforms(revs);
        while offset < l.len() && !l.is_char_boundary(offset) {
    }
    }
                name, categories, None, start, end - start));
    /// in the range of 511-1024 bytes.
    }
        let utf8_offset = 19;
            let not_in_tombstones = self.deletes_from_union.complement();
        } else {
        assert_eq!(correct, rearranged_inserts);

    }
    }

                           style: &Style) -> usize {
                } else {
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))

                SelRegion::new(start, end)
                }
/// 1. Samples that span sections of code may be inserted on end instead of
                              to_payload("test_get_samples"));
        prev_boundary.unwrap_or(None)
        engine.undo([1].iter().cloned().collect());
/// that sorted would be prohibitively expensive.
        self.push_str(&other[start..end]);
    find_leaf_split(s, MIN_LEAF)
                        Some(gc_dels.transform_shrink(&inserts))
    }

            type Value = CategoriesT;
            engine.undo(undos.clone());
                },

                } else {
        assert_eq!(2, a.line_of_offset(5));
        };
    /// The semantics are intended to match `str::lines()`.
    pub fn enabled(config: Config) -> Self {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);



            }

        if s.len() <= MAX_LEAF {
            };
            rev_id, max_undo_so_far,
/// between two utf8 code units that form a code point is considered invalid.
        delta.serialize_field("els", &self.els)?;
        match self.inner.next() {
    fn basic_rev(i: usize) -> RevId {
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
            tid: sys_tid::current_tid().unwrap(),
    #[test]
    }
        assert_eq!(rope.line_of_offset(1), 0);
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");

            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
        ids.iter().cloned().map(|i| {
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
        match ty {
// distributed under the License is distributed on an "AS IS" BASIS,

fn find_leaf_split_for_merge(s: &str) -> usize {
///
    utf16_count
        ");
                }
        result
 //additional cursor features
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    }
                    let b = if bi < ai {
                    rev_id: rev.rev_id,
    fn gc_2() {

        let first_rev = engine.get_head_rev_id().token();
        let trace = Trace::enabled(Config::with_limit_count(10));
    fn test_get_samples() {
                return None;
                self.set(pos);

            revs: vec![rev],
    }
                match *other {
//
            }
                }
            }
        deserializer.deserialize_str(CategoriesTVisitor)
            if !selection.is_empty() {

        }

            Some(region) => {
        {
    },
                println!("running {:?} at index {}", op, i);
//
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        } else if self.first_line + self.height <= line {
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    /// unsaved changes.
    pub fn enable_config(&self, config: Config) {
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
                        b.add_span(seg.n, 0, 0);
        use self::MergeTestOp::*;
    /// the heap, counters, etc); just the data itself.
// Unless required by applicable law or agreed to in writing, software
///
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
            if let Some(replace) = self.get_replace() {
            if sel_end_ix > sel_start_ix {
            },
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(2, expand_by.len());
{
/// With `json_payload` feature:
        assert_eq!(snapshot[5].name, "b");
    TRACE.is_enabled()
#[inline]
                        word_cursor.select_word()
        engine.undo([1,2].iter().cloned().collect());
//!
            timestamp_us: ns_to_us(time::precise_time_ns()),
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
/// ```
    type Err = ParseError;
    fn line_of_offset_panic() {
        self.revs.push(new_rev);
    ///
            sample: None,
        }
        let mut d = TracePayloadT::with_capacity(1);
        self.sample_limit_count * size_of::<Sample>()
                let mut cursor = Cursor::new(&text, region.min());
                let (nl, noffset) = self.next_leaf()?;

}
        let a = Rope::from("a\r\nb\r\nc");
        let utf8_offset = 13;

            deletes = deletes.transform_expand(&new_trans_inserts);
use linewrap;
        impl From<RopeDelta_> for Delta<RopeInfo> {
    }
/// for single user cases, used by serde and ::empty

impl<'de> Deserialize<'de> for Delta<RopeInfo> {

        if self.find_changed != FindStatusChange::None {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
use width_cache::WidthCache;
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        count_utf16_code_units(&s[..in_base_units])

        let b = a.slice(1, 10);

                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        }
                metadata_sort_index: None,
                                        &selections, &hls, style_spans);
    /// ties in edit priorities. Otherwise the results may be inconsistent.
    /// Generally racy since the underlying storage might be mutated in a separate thread.
                    to_payload(("some payload for the block"))));
    }
        (line, offset - self.offset_of_line(text, line))
    // possible to fix it so that's not necessary.
            utf16_size: 0,
        let r = r + Rope::from(&b[MIN_LEAF..]);
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);

//See ../docs/MetricsAndBoundaries.md for more information.
    /// than this will panic.
                           pristine: bool)
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
    fn merge_simple_delete_1() {
        if let Some((l, offset)) = self.get_leaf() {
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
            // with offset == s.len(), but be defensive.
/// non-base revs, `N` being transformed non-base revs, and rearranges it:

    #[test]
        Self {
///


            Rope::from(s1.clone()),
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        if self.is_enabled() {
            Assert(1, "acb".to_owned()),
 //additional cursor features
        Some(pos) => minsplit + pos,
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
        /// Used to store a reversible difference between the old
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        assert_eq!(a.len(), r.offset_of_line(1));
        ---#--
        }
/// Applies an optimization where it combines sequential revisions with the
        // TODO: refine for upstream (caret appears on prev line)
    /// revision, and so needs a way to get the deletion set before then.
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]

#[derive(Serialize, Deserialize, Debug, Clone)]
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    AsyncInstant,
    #[test]
            view_id: view_id,
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
            self.pid == other.pid &&
        #------
use xi_rope::tree::Cursor;

        if !before {
                },
                    Some(Contents::Edit {
    ///
        let undone = self.undone_groups.contains(&undo_group);
    TRACE.instant(name, categories);
                                                          new_len, col),
        // if we have active find highlights, we don't collapse selections

        a.lines_all().collect::<Vec<_>>());
            tid: sys_tid::current_tid().unwrap(),
        let thread = std::thread::current();
    pub fn max_undo_group_id(&self) -> usize {
// you may not use this file except in compliance with the License.
    #[test]
fn exe_name() -> Option<String> {
    }
    /// revision, and so needs a way to get the deletion set before then.
    enum MergeTestOp {

        result
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));

                el.end()
                // TODO could probably be more efficient by avoiding shuffling from head every time
}
/// could trigger incorrect behavior if they collide, so u64 is safe.
        if offset == s.len() {
                match *other {
    #[inline]
                // should be removed in favor of do_gesture

    pub fn scroll_height(&self) -> usize {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                    }
        inserts.into_iter().enumerate().map(|(i, inserts)| {
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        }

        s.is_char_boundary(offset)
        let undone = self.undone_groups.contains(&undo_group);
    }
        }
        let mut cursor = Cursor::new(self, offset);
    /// in the slice up to `offset`.
        ");

                self.set(pos);
                    }
    }
        let a = Rope::from("\n");
        selection.add_region(region);
                                          closure: F, payload: P)
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    fn next(&mut self) -> Option<&'a str> {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    // TODO: insert from keyboard or input method shouldn't break undo group,
        in_base_units
fn clamp(x: usize, min: usize, max: usize) -> usize {
    }
#![cfg_attr(feature = "cargo-clippy", allow(
            pid: sys_pid::current_pid(),
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
                last_priority = Some(priority);
    }
        }
        //} else {
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
        self.invalidate_selection(text);
    fn can_fragment() -> bool { false }
        }
        // multiple queries; select closest occurrence
//! this central engine. It provides the ability to apply edits that depend on
        let mut soln = String::from("h");
/// # Performance
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    #[test]
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);

                        DeltaElement::Copy(start, end),
        Ok(b.build())
    }
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        Lines {
///
    out.as_mut_slice().reverse();
    fn gc_6() {
            self.event_type == other.event_type &&
        // of the delta so we can set the cursor before or after the edit, as needed.
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)

        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    fn undo() {
        assert_eq!(snapshot[1].name, "thread_name");
        Assert(usize, String),
            match *op {
    fn test_cross_process_samples() {
            Assert(0, "bdc".to_owned()),

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        where S: Into<StrCow>, C: Into<CategoriesT>
        let text_a = Rope::from("zcbd");
            Assert(1, "acpbdj".to_owned()),



                // merge logic.
        deletes_from_union
        let a = Rope::from("a");
}
    use rope::{Rope, RopeInfo};
        offset


        //} else {
    // reachability calculation.
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
                        ops.push(self.build_update_op("copy", None, seg.n));
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
        MergeTestState::new(4).run_script(&script[..]);
//! An engine for handling edits (possibly from async sources) and undo. It
        let a = Rope::from("\n");
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
                warn!("Usage of click is deprecated; use do_gesture");
const FLAG_SELECT: u64 = 2;
        samples[1].timestamp_us = 5;
    }
    /// this returns the offset of the end of the rope. Arguments higher

        },
    breaks: Option<Breaks>,
        self.set_dirty(text);
///
            for i in 0..count {
                selection.add_region(occurrence);
    /// Tests that merging again when there are no new revisions does nothing
    1
    }
    }
/// some way.
        let mut pos = self.pos();
        }).collect();
/// Internally, the implementation uses reference counting (not thread safe, though

    }
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
    /// The state for finding text for this view.
    }

        let mut cursor = Cursor::new(self, offset);
/// A size, in pixel units (not display pixels).
    // TODO: don't construct transform if subsets are empty
            Merge(0,1),
    {
                    Some(Contents::Edit {
    /// All the selection regions other than the one being dragged.
        // x, a, y, b, z, c
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
        };
    fn offset_of_line_panic() {
        assert_eq!(output, String::from(engine.get_head()));
    #[bench]
pub fn count_newlines(s: &str) -> usize {
        }
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
                      delta: &Delta<RopeInfo>, client: &Client,
            undo_group: 0,
        self.revs.push(new_rev);
    pub fn new(initial_contents: Rope) -> Engine {
                        let mut rendered_lines = Vec::new();
                }

    fn arr_eq(&self, other: &Vec<String>) -> bool {

    #[test]
    /// Return the byte offset corresponding to the line number `line`.
                self.push_leaf(s.to_owned());
            let mut len = 1;
                        MetadataType::ThreadName { name: thread_name.to_string() },
            trace.instant("something", &[]);
        (self.session1, self.session2)
            b.push('b');
        assert!(a == a2);
#[derive(Clone, Copy)]
    #[cfg(feature = "benchmarks")]
            to_undo.insert(i+1);
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        where S: Into<StrCow>, C: Into<CategoriesT>
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
            Assert(0, "bdc".to_owned()),
    /// None of the find parameters or number of matches changed.
        samples.sort_unstable();

                    self.do_gesture(text, line, column, GestureType::PointSelect)
        a.push('\n');
        let mut b = TreeBuilder::new();
        self.tombstones = tombstones;
/// }
        };
    }
        let trace = Trace::enabled(Config::default());
            // selection with interior
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
            Merge(1,0),
    ///
            Find { chars, case_sensitive, regex, whole_words } =>
            // trans-expand other by expanded so they have the same context
        // shouldn't do anything since it was double-deleted and one was GC'd
    },
                        let (inserts, deletes) = if gc_dels.is_empty() {
/// overhead tracing routine available.


        }

    #[test]
        self.find_changed = FindStatusChange::None;
    let mut out = Vec::new();
        Merge(usize, usize),
        }

/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    }

    #[allow(dead_code)]
            GestureType::MultiLineSelect =>
        impl From<RopeDelta_> for Delta<RopeInfo> {
            event_type: SampleEventType::CompleteDuration,
                    } else {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    fn edit_rev_concurrent() {
    /// Only number of matches changed
pub type RevToken = u64;
        let mut d = TracePayloadT::with_capacity(1);

        let mut cursor = Cursor::new(self, offset);
            for &occurrence in find.occurrences().iter() {
        ---#--

            rev_id, max_undo_so_far,
        }).collect::<Vec<FindStatus>>()
    /// Returns the regions of the current selection.
        self.lc_shadow = b.build();

        self.set_selection(text, new_sel);
                }
                    None => return if result.is_empty() { None } else { Some(result) }
    ///
    // possible to fix it so that's not necessary.
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
                            rev_id: rev.rev_id,
/// # Returns
    /// this returns the offset of the end of the rope. Arguments higher
            }
    #[test]
        ");
            Merge(1,0),

                self.do_gesture(text, line, col, ty),
/// # Examples
    /// Starts a drag operation.

            l[offset..].chars().next()
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
#[cfg(test)]
const MAX_LEAF: usize = 1024;
/// Stores the tracing data.
            }
pub struct Size {
/// A size, in pixel units (not display pixels).
        self.find_changed = FindStatusChange::None;
    }

                     modify_selection: &SelectionModifier) {
/// A size, in pixel units (not display pixels).
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,


                    }
    }
/// ```rust
        // This might be an over-specified test as it will
    //TODO: implement iter_chunks using ranges and delete this
        for rev in &self.revs[rev_index + 1..] {
        assert!(a == a2);
        assert_eq!(snapshot[2].name, "x");
    /// Get the contents of the document at a given revision number
    #[bench]
    TRACE.block_payload(name, categories, payload)

mod fixed_lifo_deque;
    }
    }

        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                edit: Contents::Edit {
    #[bench]

        }
            Assert(0, "zacpbdj".to_owned()),
        }
    TRACE.samples_cloned_sorted()
    // reachability calculation.
    pub fn lines(&self, start: usize, end: usize) -> Lines {
            Revision {
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        }
        assert_eq!(2, a.line_of_offset(5));
            Assert(0, "ab".to_owned()),
//! This module actually implements a mini Conflict-free Replicated Data Type
        }
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);


        self.view_id
        cursor.prev::<BaseMetric>()
/// same priority into one transform to decrease the number of transforms that

        self.invalidate_selection(text);
            }
    }
#[derive(Clone, Copy)]
{
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
                        let end_line = start_line + seg.n;
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        --#--

        }
fn find_leaf_split_for_bulk(s: &str) -> usize {
        let after_first_edit = engine.get_head_rev_id().token();
        let subset_str = format!("{:#?}", expand_by[0].1);
    #[test]
/// samples are ordered chronologically for several reasons:
            sel.add_region(
            let splitpoint = if s.len() > MAX_LEAF {
        // 1 for exe name & 1 for the thread name
        enum RopeDeltaElement_ {
        assert_eq!("a", String::from(&tombstones_2));
        self.find_changed = FindStatusChange::Matches;
        d_builder.delete(Interval::new_closed_open(58, 61));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        // a, b, y, z, c, x
        }
                         style_spans: &Spans<Style>) -> Vec<isize>
        b.iter(|| black_box(trace.closure_payload(
    }
// you may not use this file except in compliance with the License.
pub struct SampleGuard<'a> {
extern crate serde_json;
        }
/// Transform `revs`, which doesn't include information on the actual content of the operations,
        engine.edit_rev(1, edits+1, head, d1);
/// # Arguments
        } else {
            Some(offset - len)
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
        }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    }
                } else if click_count == Some(2) {
    }
    }
        let subset_str = format!("{:#?}", expand_by[1].1);

pub type StrCow = Cow<'static, str>;

impl Serialize for DeltaElement<RopeInfo> {
/// # Returns
        let mut result = json!({
    }
                    }
        fn new(count: usize) -> MergeTestState {
    enum MergeTestOp {
            .map(|pos| offset + pos + 1)
            let style_id = self.get_or_def_style_id(client, styles, &style);
/// record it.
    }
            return self.revs.len();
    deletes_from_union: Subset,
}
            }
///
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
    }
    ///
        let a = Rope::from("\n");
            if sel_end_ix > sel_start_ix {
            deletes_from_union = match rev.edit {
        if f.alternate() {
/// some way.
/// Revision 0 is always an Undo of the empty set of groups
            Assert(1, "ab".to_owned()),
        (line, offset - self.offset_of_line(text, line))

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    fn undo_4() {
use xi_rope::spans::Spans;
    pub fn get_samples_limit(&self) -> usize {
    /// the frontend.
        let script = vec![

                }
}
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
pub struct RevId {
                payload: payload,
                self.set_dirty(text);
        }).unwrap_or(text.len());
        -> Self
            offset -= 1;
            return false;
                }
        let tombstones_a = Rope::from("a");

    }
        assert_eq!(utf16_units, 20);
        selection.add_region(region);
            let first_rev = engine.get_head_rev_id().token();
    pub fn lines_raw_all(&self) -> LinesRaw {
struct FullPriority {
        if !self.is_enabled() {
            Some(offset - len)
        // todo: for now only a single search query is supported however in the future
        // ensure that when the samples are sorted by time they come out in a
            'M' => SampleEventType::Metadata,
    pub event_type: SampleEventType,
                    s = s.transform_shrink(&transformed_inserts);
                inserts: inserted,
                              to_payload("test_get_samples"));
                    // are empty, could send update removing the cursor.
        // TODO: want to let caller retain more rev_id's.
}

/// None if an irrecoverable error occured.
//
                if s.ends_with('\n') {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        });

        hasher.finish()
// you may not use this file except in compliance with the License.

    }
        let invalid = if all_caret {
                peers.push(peer);

#[cfg(test)]
    where D: serde::Deserializer<'de> {
/// # Arguments
        for _ in 0..line_len {
/// configured via the `dict_payload` or `json_payload` features (there is an
    },
        for rev in &self.revs[first_candidate..] {
/// ```rust

    /// Determine whether `offset` lies on a codepoint boundary.
                (region.is_upstream() && c == pos) ||
                    None => return if result.is_empty() { None } else { Some(result) }
                self.set(pos);
    // TODO: switch to a persistent Set representation to avoid O(n) copying
            args: Some(SampleArgs {
    session1: u64,
        self.find.clear();
        // even though the actual sampling order (from timestamp of
    pub fn push_str(&mut self, mut s: &str) {
use rope::{Rope, RopeInfo};
                SelRegion::new(start, end)
    // revision might hold content from an undo group that would otherwise be gc'ed),
        let utf8_offset = 9;
    fn next_rev_id(&self) -> RevId {
                        s = &s[..s.len() - 1];
        ---#--
        if wrap_col > 0 {
    /// The session ID used to create new `RevId`s for edits made on this device
                    .with_horiz(horiz)
        assert_eq!(4, a.offset_of_line(2));
        for _ in 0..(edits-max_undos) {
// you may not use this file except in compliance with the License.
    /// Get text of head revision.
    /// This is a `Subset` of the "union string" representing the characters
        offset



            find: Vec::new(),
/// * `categories` - A static array of static strings that tags the samples in
            self.collapse_selections(text);
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
        samples[0].pid = 1;
            rendered_styles.push(sel_end as isize - sel_start as isize);
///

}

#[cfg(feature = "json_payload")]
    fn next(&mut self) -> Option<u8> {
                }
            SelectionForFind { case_sensitive } =>
            _ => None
    let new_text = del_delta.apply(text);
        for i in 0..self.len() {
            view_id: view_id,
    offset: usize,
    #[test]
    #[test]
    for r in revs {
                              to_payload("test_get_samples"));
        use self::MergeTestOp::*;
            Assert(0, "acbd".to_owned()),
            Assert(1, "ab".to_owned()),
                              to_payload("test_get_samples"));
extern crate serde;
        let mut selection = Selection::new();
    }
        }
            Assert(0, "ab".to_owned()),
    }
        }
        ");
        assert_eq!(snapshot[2].name, "a");

    }
        let mut sel = self.selection.clone();
                }
        self.find_changed = FindStatusChange::None;
    pub fn disabled() -> Self {
            } else if incomp == GraphemeIncomplete::PrevChunk {
            black_box(time::precise_time_ns());
        self.rev_id_counter += 1;
                                  style_spans, &plan, pristine);
        // We somewhat arbitrarily choose the last region for setting the old-style

        let mut engine = Engine::new(Rope::from(TEST_STR));
pub fn enable_tracing_with_config(config: Config) {
    /// Time complexity: O(log n)
    type Item = &'a str;
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
// easily delta-compressed later.
        let initial_rev = engine.get_head_rev_id().token();
    }
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    }
}
        ]);
        assert_eq!(0, r.line_of_offset(a.len() - 1));

    inner: LinesRaw<'a>
                peer.set_session_id(((i*1000) as u64, 0));
    ///
            offset -= 1;
        }
        let first_rev = engine.get_head_rev_id().token();
    }

            name: name.into(),
                }
    fn compute_transforms_2() {
    for op in b_new {
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());

}
        Ok(b.build())
            Merge(1,2),
            timestamp_us: ns_to_us(time::precise_time_ns()),
                }
/// Represents the current state of a document and all of its history
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
        #------
        use self::ViewEvent::*;
        }
        }
                self.do_set_replace(chars, preserve_case),
///     something_else_expensive();

        where D: Deserializer<'de>,
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
        let result = closure();

        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            return Vec::with_capacity(0);
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
    fn bench_trace_instant_disabled(b: &mut Bencher) {
///
        engine.undo([1,2].iter().cloned().collect());
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
            return self.revs.len();

        });
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        self.iter_chunks(0, self.len())
    sample_limit_count: usize

    size: Size,
        } else {
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
                                deletes,
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        let mut engine = Engine::new(Rope::from(TEST_STR));
                max_undo_so_far: i+1,
/// std::mem::drop(trace_guard); // finalize explicitly if
        let mut samples = self.samples_cloned_unsorted();
                Contents::Undo { .. } => panic!(),
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        b.iter(|| {
use find::Find;
                        .map(DeltaElement::from).collect(),

pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        let iv = Interval::new_closed_open(start, end);
        let snapshot = trace.samples_cloned_unsorted();
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
            rendered_styles.push((iv.start() as isize) - ix);
    s.serialize_char(ph.into_chrome_id())
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    pub preserve_case: bool
    // for simplicity.
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());

}
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        if self.highlight_find {
                        sample.tid));
                    }
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
            utf16_count += 1;
        }
        let end = self.sel_regions().last().unwrap().end;
    }
            SampleEventType::Metadata => 'M'

/// Given the inital byte of a UTF-8 codepoint, returns the number of


    } else {
    }
        b.push(rhs);
            Merge(1,0),
            Assert(1, "arpb".to_owned()),
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
        self.invalidate_selection(text);
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            AssertAll("zacpb".to_owned()),
        let inserts = parse_subset_list("
    }
        let line = self.line_of_offset(text, end);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// finer grain invalidation.
        samples.sort();
        assert!(r != b_rope + a_rope);
            let pos = bc.next::<BreaksMetric>();
        for chunk in self.iter_chunks(start, end) {
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    offset: usize,
        let empty = Rope::from("");
        if offset == 0 {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]

            }
    #[bench]
mod tests {
/// For example, take a string that starts with a 0xC2 byte.
//! info.
        let text_with_inserts = text_ins_delta.apply(&self.text);
    #[test]
        // find the lowest toggled undo group number
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                    deletes: deletes.clone(),
        for seg in self.lc_shadow.iter_with_plan(plan) {
        let trace = Trace::disabled();
    ///

        if self.idx <= self.current.unwrap().len() {
            Merge(0,2), Merge(1, 2),

    fn from(r: Rope) -> String {
    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
                        Ok(s) => Some(s),
    }
#[derive(Serialize, Deserialize, Clone, Debug)]
    }

        match *self {
                _ => panic!("to_base_units called with arg too large")
///
    }

    }

        next_expand_by = Vec::with_capacity(expand_by.len());
            utf16_count += 1;
        } else {

/// });
                    // are empty, could send update removing the cursor.
                }
            let new_region = region_movement(movement, region, self,
            // Snap to grapheme cluster boundary
            wrap_col: WrapWidth::None,
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
        assert_eq!(snapshot.len(), 9);
///
    /// part of the initial contents since any two `Engine`s need a common
/// Returns the file name of the EXE if possible, otherwise the full path, or

        trace.closure_payload("z", &["test"], || {},

        // that into our actual target.
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        let line_len = MAX_LEAF + MIN_LEAF - 1;

        engine.edit_rev(0, 2, first_rev, build_delta_2());
    }
//! An engine for handling edits (possibly from async sources) and undo. It
                selections.push((sel_start_ix, sel_end_ix));
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        self.start_drag(offset, region.start, region.end);
                formatter.write_str("comma-separated strings")
    TRACE.disable();
    /// The state for replacing matches for this view.

            new_deletes = new_deletes.transform_expand(&new_inserts);
    }
    }
                let (pl, poffset) = self.prev_leaf()?;
            //if self.cursor.is_boundary::<BaseMetric>() {
    }
            Assert(0, "acrbdz".to_owned()),
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        self.text = new_text;
}
    ///
            AddSelectionAbove =>
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        for &(trans_priority, ref trans_inserts) in &expand_by {
        if self.find.is_empty() {
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
    }
        RevId { session1: 1, session2: 0, num: i as u32 }
            Assert(1, "pb".to_owned()),
            Some((l, off)) => (l, off),
    #[test]
    pub fn with_limit_count(limit: usize) -> Self {
        (self.session1, self.session2)
        }
        count_utf16_code_units(&s[..in_base_units])
        if f.alternate() {
        assert_eq!(Some(2), b.next_codepoint_offset(0));
        let mut to_undo = BTreeSet::new();
    // TODO: don't construct transform if subsets are empty

    /// Start of the region selected when drag was started (region is
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
            SelectAll => self.select_all(text),
                    if retain_revs.contains(&rev.rev_id) {
        match self.inner.next() {
                        },
    /// vertical scroll position

        // NOTE: we derive to an interim representation and then convert
            SampleGuard::new_disabled()
    /// Imagine a "union string" that contained all the characters ever
    fn add(self, rhs: Rope) -> Rope {
        if self.replace_changed {
    }
/// # Arguments
            //}

    }
            }),
    pub fn disabled() -> Self {
                    // are empty, could send update removing the cursor.
            args: Some(SampleArgs {
                    }
    /// For safety, this will panic if any revisions have already been added to the Engine.
    #[inline]
    match std::env::current_exe() {
        let snapshot = trace.samples_cloned_unsorted();
use interval::Interval;
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
        let (metadata_name, sort_index) = meta.consume();
    ///
    use delta::{Builder, Delta};
impl<'a> Cursor<'a, RopeInfo> {

            AssertMaxUndoSoFar(1,3),
            if sel_end_ix > sel_start_ix {
use delta::{Delta, InsertDelta};
    pub fn get_samples_limit(&self) -> usize {
        // probably change as the recording internals change.
            pid: sys_pid::current_pid(),
        };
        assert_eq!(0, a.offset_of_line(0));
                deletes: new_deletes,
    /// tiny it is effectively O(n). This iterator does not allocate.
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        let mut cursors = Vec::new();
        self.deletes_from_union = deletes_from_union;
            CategoriesT::DynamicArray(ref self_arr) => {
/// ```rust

                        let un_deleted = deletes_from_union.subtract(deletes);
    /// The line number is 0-based.
    }
    ///
        }

/// ```
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        if self.breaks.is_some() {
        ");
// Low level functions
        let all_samples = self.samples.lock().unwrap();
                    }
    }
                        let un_deleted = deletes_from_union.subtract(deletes);
}
        let mut b = TreeBuilder::new();


    pub fn lines(&self, start: usize, end: usize) -> Lines {
        let mut b = TreeBuilder::new();

                    };
            Sample::new_instant("remote pid", &[], None)];
    #[cfg(feature = "dict_payload")]
    ns / 1000

            if self[i] != other[i] {


        for &(sel_start, sel_end) in hls {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    }
        assert_eq!(utf16_units, 11);
        Self {
}
/// let mut a = Rope::from("hello world");
{

    #[cfg(feature = "benchmarks")]
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {

                }
    #[serde(skip_serializing_if = "Option::is_none")]
                            Cursor::new(breaks, offset));
    /// This method is responsible for updating the cursors, and also for
        let first_rev = engine.get_head_rev_id().token();
            trace.instant("c", &["test"]);
    fn scroll_to_cursor(&mut self, text: &Rope) {
            base_len: usize
            GestureType::PointSelect => {
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
/// Disable tracing.  This clears all trace data (& frees the memory).
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        }, deletes_from_union)
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
        self.enabled.load(AtomicOrdering::Relaxed)
        assert!(r == a_rope.clone() + b_rope.clone());
    }
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
        deletes_from_union
        self.set_selection_raw(text, selection);
                }
                    text.slice_to_string(region.min(), region.max())
            panic!("line number {} beyond last line {}", line, max_line);
        x

        // x, a, y, b, z, c

        for sample in all_samples.iter() {
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
        plan.request_lines(first_line, last_line);
                        .map(DeltaElement::from).collect(),
        }
        }
//! It enables support for full asynchronous and even peer-to-peer editing.

        self.timestamp_us.cmp(&other.timestamp_us)
                    s = s.transform_shrink(&transformed_inserts);
    }
        let all_caret = self.selection.iter().all(|region| region.is_caret());
    /// the text).

    #[inline]
    ///
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
                Some(Cow::from(s))
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// Only number of matches changed
}
        // since one of the two deletes was gc'd this should undo the one that wasn't
use styles::{Style, ThemeStyleMap};
use std::cmp::{min,max};
            }
mod tests {
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
    #[bench]
        selection.add_region(region);
    pub width: f64,
        engine.undo([2].iter().cloned().collect());
        let mut samples = self.samples_cloned_unsorted();
// Unless required by applicable law or agreed to in writing, software
    assert!(a[0].rev_id == b[0].rev_id);
/// Usage of static strings is encouraged for best performance to avoid copies.
use std::sync::Mutex;
impl CategoriesT {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
        d_builder.delete(Interval::new_closed_open(58, 61));

    highlight_find: bool,
        trace.instant("1", &["test"]);
use std::borrow::Cow;
        }).collect();
            SampleEventType::AsyncEnd => 'e',
        let mut engine = Engine::new(Rope::from(TEST_STR));
#[cfg(test)]
    where S: serde::Serializer {
///
                    undo_group: i+1,
        let mut soln = String::from("h");
        let script = vec![
            SampleEventType::AsyncInstant => 'n',

    #[should_panic]
        if (b as i8) >= -0x40 {
        }
    #[test]

        engine.edit_rev(1, 1, first_rev, d1.clone());
        let b = a.slice(1, 10);
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,

impl Config {

                    els: delta.els.drain(..)
//! There is also a full CRDT merge operation implemented under
        }

    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    /// borrowed from the rope.

        let len = match first_rev.edit {
        let mut d = TracePayloadT::with_capacity(1);
    None,
/// ```
/// an argument.
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
    1
        s.is_char_boundary(offset)
        update
    FlowInstant,
            'O' => SampleEventType::ObjectSnapshot,
        // spam cmd+z until the available undo history is exhausted
            //leaf.len() - start_pos
        let new_deletes_from_union = {
    ThreadName { name: String },
    fn test_samples_closure() {

    {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },

        // a, b, y, z, c, x
    pub(crate) fn has_pending_render(&self) -> bool {
    }
            if self.line_of_offset(text, offset) <= line {
    /// is optional.
impl<'de> serde::Deserialize<'de> for CategoriesT {
        let trace = Trace::enabled(Config::default());
    #[test]
                    deletes: deletes.clone(),
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
            }
        // stable order since the resolution of timestamps is 1us.
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
                        Cow::Owned(un_deleted.transform_shrink(inserts))
                    let _ = s.pop();
        _ => 4
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
    ///
        let new_sel = selection_movement(movement, &self.selection,

use std::str;
    }
    /// This case is a regression test reproducing a panic I found while using the UI.
        min
                            }
    // There will probably never be a document with more than 4 billion edits
    }
            if let Edit { ref inserts, .. } = rev.edit {
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
}
    /// storage allocated will be limit * size_of<Sample>
        // of the delta so we can set the cursor before or after the edit, as needed.
            self.tid == other.tid &&

            rendered_styles.push(style_id as isize);
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        }
#[derive(Clone, Copy)]
                }


        self.undone_groups = groups;
        }
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    find_changed: FindStatusChange,
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                    base_len: delta.base_len
        ");
                offset = prev;
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
        if self.is_enabled() {
        engine.edit_rev(1, 1, first_rev, d1.clone());
            }
            Insert(String),
            // recurse at most once; this doesn't feel great but I wrote myself into a

            GestureType::RangeSelect => self.select_range(text, offset),
                    } else {
            self.breaks = None
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        serializer.serialize_str(&String::from(self))
            Merge(1,0),
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    }

        let after_first_edit = engine.get_head_rev_id().token();
// Unless required by applicable law or agreed to in writing, software
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {

    /// inserted, including the ones that were later deleted, in the locations
/// # Examples
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        impl From<RopeDelta_> for Delta<RopeInfo> {
    #[bench]
        let a = Rope::from("a\nb\nc");
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
        /// The set of groups toggled between undone and done.
    /// The incrementing revision number counter for this session used for `RevId`s
            priority: 0,
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
            GestureType::LineSelect =>
    /// via process_name/thread_name respectively.
        --#--
        Ok(Delta::from(d))
        // spam cmd+z until the available undo history is exhausted

/// Indicates what changed in the find state.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    #[test]
/// A flag used to indicate when legacy actions should modify selections
                        &mut start[bi]
        });
    fn next_rev_id(&self) -> RevId {
                Some(offset)
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard

        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
    FlowEnd,
        engine.gc(&gc);

    /// This uniquely represents the identity of this revision and it stays
        let trace = Trace::enabled(Config::default());
            SampleEventType::DurationBegin => 'B',
        },
        match *self {
categories_from_constant_array!(2);
            MetadataType::ThreadName {name} => (Some(name), None),
                MergeTestOp::Merge(ai, bi) => {
        let trace = Trace::enabled(Config::default());

            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        assert_eq!(Some(3), a.next_grapheme_offset(0));
        self.set(new_pos);
/// ```
        for _ in 0..line_len {
    #[serde(rename = "dur")]
    fn is_boundary(s: &String, offset: usize) -> bool {

    #[serde(rename = "ts")]
// Unless required by applicable law or agreed to in writing, software
    /// storage allocated will be limit * size_of<Sample>
        assert!(empty == empty);
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
                    return Some(result);
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
    }
    }
                    let end_of_line = match cursor.next::<LinesMetric>() {
/// configured via the `dict_payload` or `json_payload` features (there is an
                    priority, undo_group,
                WrapWidth::None => (),
            thread_name: None,
    // How should we count "column"? Valid choices include:
            inserts: Subset::new(0),
    // * grapheme clusters
    /// Time complexity: O(log n)
    {




            }
        }
                              categories: C,
    }
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
    /// The process the sample was captured in.
    ObjectCreated,
        where S: Serializer
        *self = b.build();
        trace.instant("1", &["test"]);
        MergeTestState::new(3).run_script(&script[..]);

                },
// See the License for the specific language governing permissions and
                    result = cow_append(result, &self.fragment[.. i + 1]);
}

    breaks: Option<Breaks>,

        impl<'de> Visitor<'de> for CategoriesTVisitor {
    pub fn disable(&self) {
        trace.closure_payload("y", &["test"], || {},
// See the License for the specific language governing permissions and

            rebased_deletes_from_union.union(to_delete)
    #[serde(default = "default_session", skip_serializing)]
    {
            let splitpoint = if s.len() > MAX_LEAF {
        } else {
                    let sel_start = cursor.pos();
                None => {
            // to replicate whiteboard, z must be before a tombstone
                    self.do_gesture(text, line, column, GestureType::WordSelect)
    end: usize,
    pub args: Option<SampleArgs>
    #[test]
    pub(crate) fn record(&self, sample: Sample) {
    let mut utf16_count = 0;
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
    fn measure(info: &RopeInfo, _: usize) -> usize {
use std::collections::HashMap;
        }
        // interior of first line should be first line
        assert_eq!(1, expand_by.len());

pub fn enable_tracing_with_config(config: Config) {
                deletes: new_deletes,
        b.iter(|| black_box(trace.instant_payload(
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        let (first_line, _) = self.offset_to_line_col(text, region.min());
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    }
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
                priority, undo_group, deletes,
    fn drop(&mut self) {
}
    /// Get text of a given revision, if it can be found.
    #[test]
        self.revs.push(new_rev);
//! conceptually represents the current text and all edit history for that
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        let sample_name = to_cow_str(meta.sample_name());
                    s = inserts.transform_union(&s);
        let r = r + Rope::from(&b[MIN_LEAF..]);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },

            self.set_selection(text, sel);

                match self.inner.next() {
        if !cursors.is_empty() {

            lc_shadow: LineCacheShadow::default(),
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        assert_eq!(rope.line_of_offset(1), 0);
    /// Get the contents of the document at a given revision number
            Merge(0,2), Merge(1, 2),
    fn build_delta_2() -> Delta<RopeInfo> {
        let first_rev = engine.get_head_rev_id().token();
    /// No wrapping in effect.
        }
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
            }
    }
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
        }
                        }

        deletes_from_union
    #[test]
            return None;
        };
    #[test]
        assert_eq!(1, expand_by[0].0.priority);
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        max
            max_undo_so_far,
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        assert_eq!(snapshot[3].name, "b");
                metadata_sort_index: sort_index,
                // Deprecated (kept for client compatibility):
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            }
    TRACE.get_samples_count()
    }
    highlight_find: bool,
    }
            Merge(2,3),
        assert_eq!(snapshot[5].name, "b");
/// # Arguments

    // TODO(vlovich): Replace all of this with serde flatten + rename once
                    self.do_gesture(text, line, column, GestureType::PointSelect)

        assert_eq!(Some(0), a.prev_codepoint_offset(1));
    // This computes undo all the way from the beginning. An optimization would be to not
    /// The line ending is stripped from the resulting string. The final line ending
            let to_delete = if undone { &new_inserts } else { &new_deletes };
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

    }
        let d = engine.delta_rev_head(after_first_edit);
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

        let subset_str = format!("{:#?}", expand_by[1].1);
    ///
/// assert!("hello world" == String::from(a + b));
        CategoriesT::DynamicArray(c)
    #[test]
        #------
    ProcessLabels { labels: String },
            return false;
            b.push_str(&c);
    fn next(&mut self) -> Option<Cow<'a, str>> {

        engine.edit_rev(1, 2, new_head, d2);

    }
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)

        self.height
impl FromStr for Rope {


                } else {
                    text.slice_to_string(region.min(), region.max())
}
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    /// The session ID used to create new `RevId`s for edits made on this device
            self.record(Sample::new_duration(
        assert_eq!(rope.line_of_offset(0), 0);
        assert_eq!(0, a.line_of_offset(0));
        if offset == s.len() {
    fn scroll_to_cursor(&mut self, text: &Rope) {
                    self.do_gesture(text, line, column, GestureType::WordSelect)
        assert_eq!(r.len(), r.offset_of_line(2));
    /// of the chunks is indeterminate but for large strings will generally be
    }
            ix = iv.end() as isize;
    TRACE.block_payload(name, categories, payload)
        assert_eq!("-###-", &subset_str);
        let text_with_inserts = text_inserts.apply(&text);
    }
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
    pub tid: u64,
            // if using breaks update cursor
        assert_eq!(Some(9), b.next_codepoint_offset(5));
    }
            Some(ref breaks) => {
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)

                continue;
        samples[0].timestamp_us = 10;
                Contents::Edit {inserts, ..} => inserts,
            rendered_styles.push(style_id as isize);
                        let start_line = seg.our_line_num;
        let sample_name = to_cow_str(meta.sample_name());
        let script = vec![
                          payload: Option<TracePayloadT>) -> Self
                        .map(DeltaElement::from).collect(),
            Merge(0,2), Merge(1, 2),
            a = a + Rope::from(&c);
    pub width: f64,
                    // fast-forward this revision over all common ones after it
    }
    #[test]
                    text.slice_to_string(start, end)
            }, to_payload("test_get_samples_nested_trace"));
    }
    pub fn max_undo_group_id(&self) -> usize {
            while !s.is_char_boundary(offset - len) {
        }

            {
{
    }
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
pub type TracePayloadT = serde_json::Value;
/// Replace part of a `Rope`:
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        self.push_str(&other[start..end]);
    }
        let mut cursor = Cursor::new(self, offset);
    /// Set the selection to a new value.
        View {
    /// point. Used to optimize undo to not look further back.
            _ => return
    /// # Panics
    }
    /// Splits current selections into lines.
                metadata_name: None,
        self.sample_limit_count
        let a = Rope::from("");
///
        // interior of first line should be first line

        b.iter(|| black_box(trace.closure_payload(
    fn bench_trace_block(b: &mut Bencher) {
                self.do_gesture(text, line, col, ty),

                        gc_dels = new_gc_dels;
    /// recomputing line wraps.
/// beginning.
        engine.gc(&gc);
    }
                (drag_state.max, min(offset, drag_state.min))
                if s.ends_with('\n') {
        hasher.finish()
impl serde::Serialize for CategoriesT {
        assert_eq!(snapshot[0].name, "process_name");
        if let Some(occ) = closest_occurrence {
impl Trace {
        }
/// have to be considered in `rebase` substantially for normal editing
        assert_eq!(1, a.line_of_offset(2));
impl PartialOrd for Sample {
                                toggled_groups: &toggled_groups - gc_groups,
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    /// Only number of matches changed
    }
/// conforms to is currently determined by the feature this library is compiled
            match memchr(b'\n', self.fragment.as_bytes()) {
        let result = closure();
///
    {
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
            trace: None,
            1 if self.selection[0].is_caret() => {
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
/// Stores the relevant data about a sample for later serialization.
        } else if line == max_line {
    }
            GotoLine { line } => self.goto_line(text, line),
    }
                    } else {
                        let n_skip = seg.their_line_num - line_num;
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
            let b_to_merge = &other.revs[base_index..];

            match memchr(b'\n', &s.as_bytes()[offset..]) {
                    s = &s[..s.len() - 1];
    assert!(a[0].rev_id == b[0].rev_id);
                    }
                }
    /// When was the sample started.
    }
                    result = cow_append(result, &self.fragment[.. i + 1]);
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        LinesRaw {
        engine.undo([].iter().cloned().collect());

    fn undo_4() {
}
        let first_rev = engine.get_head_rev_id().token();
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        assert_eq!(utf8_offset, 9);
        assert_eq!(trace.get_samples_count(), 0);
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    fn merge_associative() {
        // original values this test was created/found with in the UI:
                                                                0, "copy", 2)?;
                                                        &mut line_cursor,
    pub timestamp_us: u64,
    /// want to set the process name (if provided then sets the thread name).
#![cfg_attr(feature = "benchmarks", feature(test))]
    }

/// # Examples
    lines: usize,
            args: Some(SampleArgs {
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
#![cfg_attr(feature = "benchmarks", feature(test))]
                    a.merge(b);
use std::collections::HashMap;
                    let mut e = &mut self.peers[ei];
    fn lines_small() {
            Merge(1,2),
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        result
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
    fn offset_of_line_small() {
                if rev.max_undo_so_far < lowest_group {

categories_from_constant_array!(3);
    #[test]
}
            }
    #[test]
        let new_sel = selection_movement(movement, &self.selection,

            if region.is_caret() {
    fn line_of_offset_small() {
        let height = self.line_of_offset(text, text.len()) + 1;
    }
        expand_by = next_expand_by;
            Some(offset + len_utf8_from_first_byte(b))
        where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(snapshot.len(), 5);
                el.serialize_field(end)?;

    /// If the cursor is at the end of the leaf, advances to the next leaf.
        --#--
    fn test_samples_block() {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    pub tid: u64,
        for i in 0..self.len() {
        next_expand_by = Vec::with_capacity(expand_by.len());
            event_type: SampleEventType::Instant,
        let subset_str = format!("{:#?}", expand_by[0].1);
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    replace: Option<Replace>,

                self.add_selection_by_movement(text, Movement::Up),
impl Serialize for Rope {
    }
                    };
            offset += 1;
                Some(pos) => offset += pos + 1,
    Width(f64),
            let splitpoint = find_leaf_split_for_merge(self);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    #[bench]
/// # use xi_rope::Rope;
    pub fn line_of_offset(&self, offset: usize) -> usize {
            "text": &l_str,
    TRACE.block(name, categories)
    //
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
pub fn trace<S, C>(name: S, categories: C)
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
                            }
//! under `Engine::edit_rev`, which is considerably simpler than the usual
                last.1 = last.1.transform_union(&inserts);

categories_from_constant_array!(7);
        let head = engine.get_head_rev_id().token();
                Some(offset)
        let new_pos = self.pos() + (end - offset);
/// # Performance
            engine.edit_rev(1, i+1, head, d);

    #[test]
    /// Garbage collection means undo can sometimes need to replay the very first
//     http://www.apache.org/licenses/LICENSE-2.0
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        let col = col as usize;
                    let full_path = exe_name.into_os_string();
    }
        let mut leaf_offset = pos - offset;
        let deletes_from_union_b = parse_subset("-#---");

    /// Exposed for unit tests only.
            sel.add_region(new_region);
macro_rules! categories_from_constant_array {
            Assert(0, "ab".to_owned()),
        }

        }
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
// distributed under the License is distributed on an "AS IS" BASIS,
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        // stable order since the resolution of timestamps is 1us.
            enabled: AtomicBool::new(true),
}
            if Some(priority) == last_priority {

        let text_a = Rope::from("zcbd");
        engine.edit_rev(1, 1, first_rev, d1.clone());
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
            duration_us: Some(ns_to_us(duration_ns)),
            {
/// that sorted would be prohibitively expensive.
    }

    /// validate their input.
    }
    }
                    }
                first_sample_timestamp,
    }
/// # use xi_rope::Rope;
    }

        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
            self.record(Sample::new_duration(
        }

                let (last, rest) = self.sel_regions().split_last().unwrap();
            }, to_payload("test_get_samples_nested_trace"));
#[derive(Serialize, Deserialize, Debug)]
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                            ops.push(self.build_update_op("skip", None, n_skip));
        Self {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn bench_get_tid(b: &mut Bencher) {
                        Err(e) => {
        assert_eq!(samples[0].name, "remote pid");
        ];
    fn eq_small() {
                name, categories, Some(payload.into()), start, end - start));
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
            Merge(3,1), Merge(5,3),
                    }
    }
                selections.push((sel_start_ix, sel_end_ix));
                self.push_leaf(s.to_owned());
        // TODO: may make this method take the iv directly
            let sel = {
            }
/// returned value is dropped.  `trace_closure` may be prettier to read.
pub fn count_newlines(s: &str) -> usize {
    #[test]
                            }
    Matches
        self.scroll_to_cursor(text);

    /// Note: `edit` and `edit_str` may be merged, using traits.
/// some way.

    /// Get next codepoint after cursor position, and advance cursor.
        assert_eq!(Some(17), a.next_grapheme_offset(9));

        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before

        let mut d = TracePayloadT::with_capacity(1);
    pub chars: String,
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    #[bench]
        use serde::de::Visitor;


    #[serde(default = "initial_revision_counter", skip_serializing)]

            if (c > start_pos && c < pos) ||
        d_builder.build()
/// Measured unit is utf8 code unit.
            AssertAll("zacpb".to_owned()),
        if self.find.is_empty() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    fn lines_med() {
/// However, anything that can be converted into a Cow string can be passed as
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        let mut engine = Engine::new(Rope::from(TEST_STR));
                //// if we aren't on a boundary we can't be at the end of the chunk
            inner: self.iter_chunks(start, end),
    pub args: Option<SampleArgs>
    use rope::{Rope, RopeInfo};
        in_measured_units
use std::str::FromStr;
    trace: Option<&'a Trace>,

                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
use bytecount;
#[derive(Serialize, Deserialize, Clone, Debug)]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },


        MergeTestState::new(3).run_script(&script[..]);
                            deletes_bitxor.transform_shrink(&gc_dels)
        --#--
        // TODO: simplify this through the use of scopeguard crate
            }
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
    /// ancestor in order to be mergeable.
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
            ix = sel_end as isize;
        b.push('\n');
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
    #[test]

/// the session ID component of a `RevId`
}
        if line > max_line {
            AssertMaxUndoSoFar(1,1),
        let a_rope = Rope::from(&a);
    }
        engine.undo([1,2].iter().cloned().collect());
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
            FindAll => self.do_find_all(text),
    }
        assert_eq!(1, r.line_of_offset(r.len() - 1));
    utf16_count
///
        let style = style_map.merge_with_default(style);
            GestureType::LineSelect =>
    match b {
    fn thread_name() -> Option<StrCow> {

        }
/// overhead tracing routine available.


                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
                (drag_state.min, max(offset, drag_state.max))
            }
                }

                rev_id: basic_rev(i),
            Assert(0, "ab".to_owned()),
    min: usize,
                        Some(end) => max(0, end - 1),
    fn undo_5() {
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        self.lines(0, self.len())
            {
    pub fn get_caret_offset(&self) -> Option<usize> {

        *self = b.build();
                    let b = if bi < ai {
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    // TODO(vlovich): Replace all of this with serde flatten + rename once

                    self.set_selection(text, selection);
///
    pub fn sel_regions(&self) -> &[SelRegion] {
    fn gc() {
        /// and new deletes_from_union
        self.enabled.load(AtomicOrdering::Relaxed)
    fn build_delta_2() -> Delta<RopeInfo> {
}
                    let mut selection = self.selection.clone();
    #[test]
        }
        let end = self.line_col_to_offset(text, line + 1, 0);
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
pub fn samples_len() -> usize {
                        }
            Contents::Undo { .. } => panic!("can't merge undo yet"),

    fn from(c: Vec<String>) -> CategoriesT {
            timestamp_us: ns_to_us(timestamp_ns),
        assert_eq!("herald", String::from(a));
        let chars_left = (edits-max_undos)+1;
                let categories = v.split(",").map(|s| s.to_string()).collect();
    fn merge_whiteboard() {
        deletes_from_union
            }
///
        self.rev_id_counter += 1;
    Width(f64),
        }
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    /// The state for finding text for this view.

            Find { chars, case_sensitive, regex, whole_words } =>
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        }

                } else {

    ///
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);

        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert!(a == a2);
            AssertMaxUndoSoFar(0,3),
                    if sel_end_ix > sel_start_ix {
            lc_shadow: LineCacheShadow::default(),
/// The visual width of the buffer for the purpose of word wrapping.
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        } else if line == max_line {
use std::cmp::{min,max};
/// Returns all the samples collected so far ordered chronologically by
        if wrap_col > 0 {
        assert_eq!(2, r.line_of_offset(r.len()));

// limitations under the License.
        });
        assert_eq!(snapshot[0].name, "process_name");
        self.send_update_for_plan(text, client, styles,
            }
        let mut gc_dels = self.empty_subset_before_first_rev();

            Assert(0, "acrbdz".to_owned()),

        }
        selection.add_region(region);
    fn undo_3() {
                Some(Cow::from(s))
        let first = max(first, 0) as usize;
                    undo_group: i+1,
        // creation) is:
                if s.ends_with('\n') {
        // move deleted or undone-inserted things from text to tombstones
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    fn next_rev_id(&self) -> RevId {
        let res = find_base_index(&a, &b);
    /// An iterator over the raw lines. The lines, except the last, include the
        if let Some(ref mut trace) = self.trace {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);

    /// revision, and so needs a way to get the deletion set before then.
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
        for find in self.find.iter() {

/// fn something_else_expensive() {
    /// The name of the event to be shown.
            last_line -= 1;
    }
            Assert(0, "acbd".to_owned()),
                }

    Matches
    pub(crate) fn unset_find(&mut self) {
        assert!(a != b);
    fn line_offsets() {
    /// return if a delete is un-done or an insert is re- done.
    }
    pub fn max_size_in_bytes(&self) -> usize {
/// A guard that when dropped will update the Sample with the timestamp & then
    {
        let new_deletes_from_union = {
            DeltaElement::Insert(ref node) =>
    /// New offset to be scrolled into position after an edit.
                    if let Some(last_selection) = self.selection.last() {
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        let mut selection = match multi_select {
            }

        let res = find_common(&a, &b);
impl<'a> SampleGuard<'a> {
        /// together. For example, an auto-indent insertion would be un-done
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
#[derive(Copy, Clone)]

    }
            None
        // rather than emitting an explicit start/stop to reduce the size of
            Assert(0, "zacpbdj".to_owned()),
    /// Sets the selection to a new value, without invalidating.
    breaks: Option<Breaks>,
        Ok(exe_name) => {
    }
}
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
                },
            if sel_end_ix > sel_start_ix {

        b.iter(|| sys_pid::current_pid());
    utf16_count
        self.revs.last().unwrap().max_undo_so_far
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
// You may obtain a copy of the License at
        if f.alternate() {
/// some way.
}
            }
                Some(filename) => {
    fn into_chrome_id(&self) -> char {
        deserializer.deserialize_str(CategoriesTVisitor)

            let style_id = self.get_or_def_style_id(client, styles, &style);
    #[test]
///
        b.iter(|| {
    /// controlled by features (default string).
                            None

            find.unset();
    fn scroll_to_cursor(&mut self, text: &Rope) {
            wrap_col: WrapWidth::None,
                MergeTestOp::Merge(ai, bi) => {
            // copy the current state
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);

        let line = line as usize;
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
impl SampleEventType {
            Rope::from(s1.clone()),
    /// Return the offset of the codepoint after `offset`.
    }
///
    #[serde(skip_serializing_if = "Option::is_none")]
}
            MetadataType::ThreadName {..} => "thread_name",
/// Creates a duration sample that measures how long the closure took to execute.
    #[allow(dead_code)]

            warn!("Failed to get path to current exe: {:?}", e);
    fn next(s: &String, offset: usize) -> Option<usize> {


            let base_index = find_base_index(&self.revs, &other.revs);
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        assert_eq!(1, a.line_of_offset(3));
            while !s.is_char_boundary(splitpoint) {
    /// Returns the largest undo group ID used so far
impl<'a> Cursor<'a, RopeInfo> {
                    let new_gc_dels = if inserts.is_empty() {
        AssertAll(String),
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        if self.replace_changed {
}
    pub categories: Option<CategoriesT>,
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let tid = all_samples.front()
    }
    fn offset_of_line_small() {
            lc_shadow: LineCacheShadow::default(),
        let tombstones_a = Rope::from("a");

            let matches_only = self.find_changed == FindStatusChange::Matches;
pub type RopeDelta = Delta<RopeInfo>;
        self.revs.reverse();
    }
        assert_eq!(utf16_units, 9);
                    rev_id: rev.rev_id,
    pub payload: Option<TracePayloadT>,
            SampleGuard::new_disabled()
        // since one of the two deletes was gc'd this should undo the one that wasn't
                }


            Contents::Undo { .. } => panic!("can't merge undo yet"),
            deletes: Subset::new(0),
            Assert(1, "zapbj".to_owned()),
                            Cursor::new(breaks, offset));
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        soln.push('f');
/// Revision 0 is always an Undo of the empty set of groups
        let (new_text, new_tombstones) =

            rendered_styles.push((iv.start() as isize) - ix);
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
        assert_eq!(snapshot[3].name, "y");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        let first_sample_timestamp = all_samples.front()
        // creation) is:
                    } else {
    #[test]
    let mut utf16_count = 0;
    #[test]
    pub fn lines(&self, start: usize, end: usize) -> Lines {
                        line_num = seg.their_line_num + seg.n;
            // shouldn't be called with this, but be defensive
            SampleEventType::ObjectDestroyed => 'D',

                }
#![cfg_attr(feature = "collections_range", feature(collections_range))]
use std::collections::hash_map::DefaultHasher;
    pub fn byte_at(&self, offset: usize) -> u8 {
    /// Sets the selection to a new value, without invalidating.
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        let offset = self.line_col_to_offset(text, line, col);
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
    a_ids.intersection(&b_ids).cloned().collect()
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
    }
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        };
        let text_with_inserts = text_ins_delta.apply(&self.text);
        self.drag_state = Some(DragState {
                    selection.add_region(SelRegion::new(sel_start, end_of_line));

                        line_num = seg.their_line_num + seg.n;
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        ];

    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            breaks: None,
    }
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    /// Callers are expected to validate their input.

            trace.closure("test_samples_closure", &["test"], || {});
use std::ops::Add;
        self.set_dirty(text);
            if self[i] != other[i] {
use std::collections::hash_map::DefaultHasher;
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
        }
        use self::MergeTestOp::*;
    /// the heap, counters, etc); just the data itself.
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
}
/// Base unit is utf8 code unit.
}
        assert!(r.clone().slice(0, a.len()) == a_rope);
    where S: Into<StrCow>, C: Into<CategoriesT>

    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
                s.len()
    }
            let mut sel = drag_state.base_sel.clone();
    }
                MergeTestOp::Assert(ei, ref correct) => {
    pub fn max_undo_group_id(&self) -> usize {
            trace.closure_payload("y", &["test"], || {

            Merge(1,2),
    ProcessName { name: String },
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

#[derive(Clone, Debug)]
                                          closure: F, payload: P)
}
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                    // can only happen on empty input
    for r in revs {
impl PartialEq for CategoriesT {
        base_subset.is_some() && base_subset == other_subset
/// ```
        // additional tests for line indexing
/// # use xi_rope::Rope;
        assert_eq!(snapshot[2].name, "a");
}
            max_undo_so_far: 0,
    #[allow(dead_code)]
        String::from(&r)

                    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
            Assert(0, "ab".to_owned()),
                    let sel_start = cursor.pos();

                Some(Cow::from(s))
    }
    let mut out = Vec::new();
        let a = Rope::from("\n");
        samples
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
    TRACE.is_enabled()
    #[bench]
    }
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
/// An element in a `RopeDelta`.
        for &(sel_start, sel_end) in hls {
    }
        }
                    };
            pid: sys_pid::current_pid(),
    // TODO: this should be a Cow
        if let Some(sel) = new_sel {
            Drag(MouseAction { line, column, .. }) =>
/// However, anything that can be converted into a Cow string can be passed as
                }


    #[test]
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
                        } else {
        assert_eq!(Some(10), a.next_codepoint_offset(6));
    pub fn set_session_id(&mut self, session: SessionId) {
        len

        let text_with_inserts = text_inserts.apply(&text);
        let trace = Trace::enabled(Config::default());
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
    pub fn sel_regions(&self) -> &[SelRegion] {
const MIN_LEAF: usize = 511;
    /// The revision history of the document
        let line = self.line_of_offset(text, end);
        AssertAll(String),
                Undo { ref toggled_groups, ref deletes_bitxor } => {
            rebased_deletes_from_union.union(to_delete)
            Merge(2,3),
                text.offset_of_line(line)


    {
        }
        assert_eq!(snapshot[2].name, "x");
        assert_eq!(2, r.line_of_offset(r.len()));
    pub fn do_find_all(&mut self, text: &Rope) {
                   whole_words: bool) {
    pub fn set_size(&mut self, size: Size) {
            return 0;
        let mut offset = 0;
        let trace = Trace::enabled(Config::default());
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
    fn invalidate_selection(&mut self, text: &Rope) {
        None => {
    }
    // possible to fix it so that's not necessary.
        ];
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
use xi_trace::trace_block;
        match cmd {
        ];
}
impl<'a> Iterator for ByteIter<'a> {
        self.join(",").serialize(serializer)
        let subset_str = format!("{:#?}", expand_by[0].1);
        } else {
        ");
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        if let Some(ref mut trace) = self.trace {
/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(1, expand_by.len());
    pub event_type: SampleEventType,
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                el.serialize_field(end)?;
pub struct LinesMetric(usize);  // number of lines
fn exe_name() -> Option<String> {
 //additional cursor features
    size: Size,
                           pristine: bool)
        engine.gc(&to_undo);
    /// state and new offset.
        }
categories_from_constant_array!(1);
        assert_eq!(0, b.offset_of_line(0));
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    #[serde(skip_serializing_if = "Option::is_none")]
        } else {
        assert_eq!("#-####-", &subset_str);
                self.add_selection_by_movement(text, Movement::Up),
    ///
                self.select_word(text, offset, true)
        _ => 4

//! a previously committed version of the text rather than the current text,
        for i in 0..edits {
        Self {
    #[test]
        self.first_line = first;
type StyleMap = RefCell<ThemeStyleMap>;
            Some(offset - len)
                let offset = self.selection[0].start;
                    base_len: delta.base_len
            to_undo.insert(i+1);
impl StringArrayEq<[&'static str]> for Vec<String> {

            enabled: AtomicBool::new(false),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        /// The subset of the characters of the union string from after this
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
#[inline]
    undo_group: usize,
            pos += 1;


    }
            // The deletes are already after our inserts, but we need to include the other inserts
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }

// You may obtain a copy of the License at
            Assert(0, "acbd".to_owned()),
            match self.wrap_col {


                                                        &mut line_cursor,
    /// Get previous codepoint before cursor position, and advance cursor backwards.
                              to_payload("test_get_samples"));
    }
    {
        let result = closure();
    #[test]
        }
///
    }
        self.selection = sel;
        #[derive(Serialize, Deserialize)]

        assert_eq!("#-####-", &subset_str);
    #[test]
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
/// # Arguments

    /// `text`. The count of a character in `deletes_from_union` represents
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        engine.edit_rev(1, 2, new_head, d2);
    #[allow(dead_code)]
        } else {

        --#--

        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    rev_id_counter: u32,

                                priority,
///
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,


        let head = engine.get_head_rev_id().token();
        where S: Serializer
    /// Return the offset of the codepoint after `offset`.

                                                    style_spans, client,
    }
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
        }
                        undone_groups = Cow::Owned(new_undone);
    }
        // is the new edit in an undo group that was already undone due to concurrency?
            let mut sel = drag_state.base_sel.clone();
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
    let mut out = Vec::new();
        Cow::from(b)
        let a_rope = Rope::from(&a);
        *self = b.build();
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>

    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
    }


        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
          F: FnOnce() -> R
        let trace = Trace::enabled(Config::default());
        // clamp to end of line
                                     event_type: SampleEventType)

    move_delta.apply(tombstones)

use std::borrow::Cow;
            self.truncate(splitpoint);
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            enabled: AtomicBool::new(true),
        assert_eq!(Some(9), a.next_grapheme_offset(3));
            Assert(0, "adc".to_owned()),
    }
impl Trace {
use find::Find;
    /// This is a `Subset` of the "union string" representing the characters
pub fn enable_tracing_with_config(config: Config) {
/// version of Ropes, and if there are many copies of similar strings, the common parts
        if self.find.is_empty() {
                                  style_spans, &plan, pristine);
                    els: delta.els.drain(..)
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    fn test_trace_disabled() {
        match ty {
    }

use internal::find::FindStatus;
/// However, anything that can be converted into a Cow string can be passed as
                inserts: new_inserts,

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

use std::borrow::Cow;
        offset
    lines: usize,

                payload: None,
            // corner and I'm lazy -cmyr
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
    /// An arbitrary payload to associate with the sample.  The type is


    ProcessLabels { labels: String },
/// ```
            self.collapse_selections(text);
    pub fn lines_raw_all(&self) -> LinesRaw {
        for region in self.selection.iter() {

        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));

    /// they would be if they hadn't been deleted.

        ---#--
        if offset == 0 {
/// Atomicity is implicit, putting the offset
            AssertMaxUndoSoFar(1,3),
    }
        assert!(a == a2);
    fn from_chrome_id(symbol: char) -> Self {
        }
        let mut retain_revs = BTreeSet::new();
        }
///
    /// and currently in a debugging state.
        }
        let script = vec![
use std::collections::hash_map::DefaultHasher;
    } else if x < max {

        let new_sel = self.drag_state.as_ref().map(|drag_state| {

        let mut rendered_styles = Vec::new();
        assert_eq!(TEST_STR, String::from(engine.get_head()));
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
            end += 1;
            offset += 1;

const FLAG_SELECT: u64 = 2;
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
                }
/// # Examples
        }
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
                // TODO: small nit, merged region should be backward if end < start.
                priority, undo_group, deletes,
                                                    style_spans, client,
        let mut end = start_pos + len;
    }
        }
    #[serde(skip_serializing_if = "Option::is_none")]
        let initial_rev = engine.get_head_rev_id().token();

        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
            Assert(1, "ab".to_owned()),
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
        self.set_selection_raw(text, selection);

    StaticArray(&'static[&'static str]),
        }
    /// New offset to be scrolled into position after an edit.
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
            }
        for rev in &self.revs[rev_index + 1..] {

        let mut update = json!({

        all_samples.push_back(sample);


    #[test]
        assert_eq!(1, r.line_of_offset(a.len()));
    /// The line ending is stripped from the resulting string. The final line ending
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
    rev_id: RevId,
    /// Invalidates the styles of the given range (start and end are offsets within

// Unless required by applicable law or agreed to in writing, software
        use self::MergeTestOp::*;
                SelectionModifier::AddRemovingCurrent => {
    fn compute_transforms_1() {
        if last_col == 0 && last_line > first_line {
use std::ops::Range;
        }

                                                    style_spans, client,

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        } else if self.first_line + self.height <= line {
    #[test]
        struct CategoriesTVisitor;
    }
use std::cmp::{min,max};


            // if using breaks update cursor
        self.wrap_col = WrapWidth::Width(self.size.width);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            // with offset == 0, but be defensive.
        let mut engine = Engine::empty();
        if self.find_changed != FindStatusChange::None {
                    if let Some(new_gc_dels) = new_gc_dels {

/// from the new revisions on the left.
    #[test]
                edit: Contents::Edit {
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
///
            rev_id: self.next_rev_id(),
    #[cfg(feature = "benchmarks")]
    #[cfg(feature = "benchmarks")]
    #[allow(dead_code)]
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
type StyleMap = RefCell<ThemeStyleMap>;
            Revision {
            Merge(0,2), Merge(1, 2),
//! which is sufficient for asynchronous plugins that can only have one


        samples[0].timestamp_us = 10;
        assert_eq!(1, expand_by[0].0.priority);

    /// The incrementing revision number counter for this session used for `RevId`s
        }
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
// distributed under the License is distributed on an "AS IS" BASIS,
    /// Get text of a given revision, if it can be found.
    pub fn iter_chunks_all(&self) -> ChunkIter {

                continue;
impl Serialize for Rope {
                });
        if initial_contents.len() > 0 {
        b if b < 0xe0 => 2,
            undo_group: 0,
    pub fn offset_of_line(&self, line: usize) -> usize {
        assert_tokens(&rope, &[
/// some way.
    pub metadata_name: Option<StrCow>,
                                         self, text, modify);
        for mut find in self.find.iter_mut() {
    #[test]
}
                let mut cursor = Cursor::new(&text, region.min());
                metadata_sort_index: None,
use std::cmp::{min,max};
        ix
        ];

        });

    #[serde(rename = "dur")]
    /// The maximum number of entries the tracing data should allow.  Total
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    (1, 0)

            rendered_styles.push((sel_start as isize) - ix);
fn count_utf16_code_units(s: &str) -> usize {
pub enum SampleEventType {
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
pub struct RevId {
{
//

        --#-
            let deletes = Subset::new(inserts.len());
    }
}

    fn can_fragment() -> bool { false }
        }
        if let Some(occ) = closest_occurrence {
/// # Arguments
        self.sample_limit_count * size_of::<Sample>()
                pos = leaf_offset + pl.len();
          F: FnOnce() -> R
            pid: sys_pid::current_pid(),
                MetadataType::ProcessName {name: exe_name},
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
    }
            edit: Edit {
        }
    {
    }
    },
            //leaf.len() - start_pos
                self.do_drag(text, line, column, Affinity::default()),
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
    }
        engine.undo([1].iter().cloned().collect());
        let mut cursor = Cursor::new(self, offset);
    fn build_delta_1() -> Delta<RopeInfo> {
    FlowEnd,
/// * `name` - A string that provides some meaningful name to this sample.

impl View {
    }
    All,
        ");
        self.rev_id_counter += 1;
    }
}
        let end = time::precise_time_ns();
            result["cursor"] = json!(cursors);
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
}

    /// than this will panic.
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
//! This module actually implements a mini Conflict-free Replicated Data Type
        AssertMaxUndoSoFar(usize, usize),
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// ```
    pub fn instant<S, C>(&self, name: S, categories: C)
        self.revs.push(new_rev);
    #[bench]
            }
                        let mut word_cursor = WordCursor::new(text, region.max());

    fn is_ok_child(&self) -> bool {
            offset += 1;
    // trace_block()/trace_closure
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    fn prev(s: &String, offset: usize) -> Option<usize> {

/// Boundary is trailing and determined by a newline char.
}
#[inline]
        }
    /// If `modify` is `true`, the selections are modified, otherwise the results
pub struct Engine {
        b.push('\n');
        }
}
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
    fn is_boundary(s: &String, offset: usize) -> bool {

            inner: self.lines_raw(start, end)
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    /// The name to associate with the pid/tid.  Whether it's associated with
    TRACE.samples_cloned_sorted()
    /// Front end's line cache state for this view. See the `LineCacheShadow`
            cur_len_utf16 += u.len_utf16();

                (drag_state.max, min(offset, drag_state.min))
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    }
        if let Some(exe_name) = exe_name() {
        let last = max(last, 0) as usize;
        assert_eq!(a.len(), r.offset_of_line(1));
                            }
use delta::{Delta, InsertDelta};
use client::Client;
use selection::{Affinity, Selection, SelRegion};
        },


            deletes = deletes.transform_expand(&new_trans_inserts);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
        b.push(self);

    fn merge_simple_delete_2() {
                        let mut word_cursor = WordCursor::new(text, region.max());
            result.push_str(chunk);
    }
        assert_eq!(utf16_units, 17);
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
    ///
impl RevId {
        out.push(Revision {
            if !selection.is_empty() {
    Instant,
                                                     "insert", node)
        b.push(rhs);

        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
                        let (inserts, deletes) = if gc_dels.is_empty() {

            Cancel => self.do_cancel(text),
                l = pl;
    ///

    AsyncEnd,
        if self.find.is_empty() {
    tombstones: Rope,
                    let head = e.get_head_rev_id().token();
        let trace = Trace::enabled(Config::with_limit_count(10));
            find_changed: FindStatusChange::None,

            self.next()
use word_boundaries::WordCursor;
    fn rebase_1() {
                    };
    //
#[cfg(test)]
                if !region.is_caret() {
            name: name.into(),
    /// Move the selection by the given movement. Return value is the offset of
use std::cmp::{min,max};
                    None => return if result.is_empty() { None } else { Some(result) }
///
    /// Note: `edit` and `edit_str` may be merged, using traits.
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
        }
        if let Some(exe_name) = exe_name() {

//! `Engine::merge`, which is more powerful but considerably more complex.
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");

            None
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        }
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
        }

                Contents::Edit {inserts, ..} => inserts,
        {
                out.push((prio, inserts));
    fn from(r: &Rope) -> String {

            std::thread::sleep(std::time::Duration::new(0, 1000));
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
use std::sync::Mutex;
    /// in the slice up to `offset`.
                        } else {
        }
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
            Assert(0, "acbd".to_owned()),
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));

    /// state and new offset.
        ----#
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        Ok(b.build())
            Some((l, off)) => (l, off),
            None
            None
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        let b = a.slice(2, 4);

/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
            None => {

// See the License for the specific language governing permissions and
    let mut last_priority: Option<usize> = None;
    #[test]
            next_boundary = c.next_boundary(&l, leaf_offset);
/// Stores the tracing data.
    tombstones: Rope,
    // ============== Merge script tests
    #[inline]
                    return i + 1; // +1 since we know the one we just found doesn't have it
    use delta::{Builder, Delta};
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        let mut b = TreeBuilder::new();
    }
        assert_eq!(trace.get_samples_count(), 0);
            lc_shadow: LineCacheShadow::default(),
    pub fn default() -> Self {
    fn bench_trace_block_payload(b: &mut Bencher) {
    fn undo_5() {
    // use own breaks if present, or text if not (no line wrapping)

    }
        self.find_changed = FindStatusChange::Matches;
    fn next(&mut self) -> Option<Cow<'a, str>> {
    s.serialize_char(ph.into_chrome_id())
            }, to_payload("test_get_sorted_samples"));
    fn bench_trace_closure_payload(b: &mut Bencher) {
        let first_rev = engine.get_head_rev_id().token();
            Assert(1, "zapbj".to_owned()),
    #[test]
}
use std::string::ParseError;
// Copyright 2016 The xi-editor Authors.

            Assert(0, "zcpbdj".to_owned()),
}
    // ============== Merge script tests

                            max_undo_so_far: rev.max_undo_so_far,
}
    /// Tracks whether find highlights should be rendered.

                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
            thread_name: Sample::thread_name(),
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
        let mut engine = Engine::new(Rope::from(TEST_STR));
                            None
    use test::Bencher;
/// an argument.
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    #[test]
            'n' => SampleEventType::AsyncInstant,
            // which we can do with another peer that inserts before a and merges.
#[inline]
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    use multiset::Subset;
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
            ),
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        let mut result = String::new();
use unicode_segmentation::GraphemeIncomplete;
            MetadataType::ProcessLabels {..} => "process_labels",
    StaticArray(&'static[&'static str]),
}

    #[test]

        trace.record(guard.sample.as_ref().unwrap().clone());
    use test::black_box;
        if !self.is_point_in_selection(offset) {
/// version of Ropes, and if there are many copies of similar strings, the common parts
        for _ in 0..(edits-max_undos) {
                    let _ = s.pop();
#[cfg(test)]
                }
                metadata_sort_index: None,
            Merge(1,0),
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
    pub fn disable(&self) {
    fn next_codepoint_offset_small() {
        ]);
    }

            ),
        let mut end = start_pos + len;

            self.push_leaf(s[..splitpoint].to_owned());
        let trace = Trace::disabled();
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            sample: Some(Sample::new_duration_marker(
use word_boundaries::WordCursor;
        true

        let line = self.line_of_offset(text, offset);
                    // are empty, could send update removing the cursor.
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
            Merge(1,0),
                last.1 = last.1.transform_union(&inserts);

        let trace = Trace::enabled(Config::with_limit_count(11));

        RopeInfo {
    }
                }
        trace.instant("1", &["test"]);
        let a = Rope::from("a\nb\nc");
            std::thread::sleep(std::time::Duration::new(0, 1000));
                payload: None,
}
        all_samples.reset_limit(config.max_samples());
    }
}
    /// Return the byte offset corresponding to the line number `line`.
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            pid: sys_pid::current_pid(),
            }
        assert_eq!(trace.get_samples_limit(), 20);
    #[cfg(feature = "json_payload")]
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),

    /// The `pristine` argument indicates whether or not the buffer has
                                     payload: Option<TracePayloadT>,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
impl Eq for CategoriesT {}
///     0
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
    }
            if let Edit { priority, ref inserts, .. } = r.edit {
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
                selections.push((sel_start_ix, sel_end_ix));
/// associated performance hit across the board for turning it on).
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
        let undone = self.undone_groups.contains(&undo_group);
/// required). Mutations are generally copy-on-write, though in-place edits are
                    let b = if bi < ai {
 //additional cursor features
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,

// See the License for the specific language governing permissions and
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            // Go crazy
    deletes: Subset,
                            deletes_bitxor.transform_shrink(&gc_dels)
///
                                     payload: Option<TracePayloadT>,
    }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));


            SampleEventType::DurationEnd => 'E',
    /// in the slice up to `offset`.
        MergeTestState::new(2).run_script(&script[..]);
            }
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        Some(self.cmp(other))
                    new_deletes = new_deletes.transform_expand(inserts);
            match self.wrap_col {
    /// The state for finding text for this view.
                        inserts: transformed_inserts,
        assert_eq!(None, b.next_codepoint_offset(9));

        b.push('\n');
            // selection with interior
                                gc_dels = gc_dels.transform_expand(inserts);
    fn gc_6() {

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        }


    ObjectDestroyed,
            SampleEventType::CompleteDuration => 'X',
// utility function to clamp a value within the given range
    fn build_delta_1() -> Delta<RopeInfo> {
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
        self.find_changed = FindStatusChange::Matches;
/// Boundary is atomic and determined by codepoint boundary.
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
            args: Some(SampleArgs {
                l = nl;
            self.collapse_selections(text);
        true
    }
        assert!(leaf.is_char_boundary(end));
//
        trace.closure_payload("x", &["test"], || {
    }
                        };
/// discussion on payload.
        let mut selection = Selection::new();
        trace.record(guard.sample.as_ref().unwrap().clone());
    /// set with this function, which will make the revisions they create not have colliding IDs.
            let _x = trace.block("something", &[]);
                    let b = if bi < ai {
                            }
    Undo {
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
                }
        // insert character at end, when this test was added, it panic'd here
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            SampleEventType::FlowEnd => 'f',
        for &region in self.sel_regions() {
    pub preserve_case: bool
    let mut last_priority: Option<usize> = None;
        true
                return false;
pub fn len_utf8_from_first_byte(b: u8) -> usize {
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
//
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                    // We're super-aggressive about dropping these; after gc, the history
    /// in the slice up to `offset`.
/// with.  By default, the type is string-like just like name.  If compiled with
            timestamp_us: ns_to_us(start_ns),
    }
        let plan = RenderPlan::create(height, self.first_line, self.height);
        engine.edit_rev(1, 1, first_rev, d1.clone());
            FindAll => self.do_find_all(text),

        // rather than emitting an explicit start/stop to reduce the size of
            let head = engine.get_head_rev_id().token();
            max_undo_so_far: 0,
        let mut engine = Engine::new(Rope::from(TEST_STR));
                } else {
            } else {
            Assert(0, "ab".to_owned()),
        engine.undo([].iter().cloned().collect());
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
        #------
    }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
use std::cmp::{min,max};
    /// state and new offset.
                    linewrap::rewrap_width(breaks, text, width_cache,
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
    fn thread_name() -> Option<StrCow> {
    ///
impl SampleEventType {
impl Eq for Sample {}
        };
                    rev_id: rev.rev_id,
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
            SelectionIntoLines => self.do_split_selection_into_lines(text),
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            text: Rope::default(),
            self.set_selection(text, sel);

            rendered_styles.push(sel_end as isize - sel_start as isize);
            let splitpoint = find_leaf_split_for_merge(self);
        let trace = Trace::enabled(Config::default());
        self.set_selection(text, new_sel);
            Move(movement) => self.do_move(text, movement, false),
        }
            let b = s.as_bytes()[offset];
    #[test]
        }
        b.iter(|| sys_pid::current_pid());
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        MergeTestState::new(4).run_script(&script[..]);
                    }
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    out
    fn edit_rev_undo_2() {
            lc_shadow: LineCacheShadow::default(),
        assert_eq!(utf8_offset, 19);
        }
                        word_cursor.select_word()

                inserts: inserted,
            sel
            Assert(2, "adfc".to_owned()),
            pos -= 1;

    /// A delta that, when applied to `base_rev`, results in the current head. Panics
                        self.revs.push(Revision {
        let l_str = text.slice_to_string(start_pos, pos);

        plan.request_lines(first_line, last_line);
        #[derive(Serialize, Deserialize)]
        deletes_bitxor: Subset,
impl From<Rope> for String {
        match self {
            't' => SampleEventType::FlowInstant,
    pub pid: u64,
            "pristine": pristine,
        let mut engine = Engine::new(Rope::from(TEST_STR));
    pub fn get_head(&self) -> &Rope {
    {
        let (start, end) = iv.start_end();

        AssertAll(String),
    }


        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    fn scroll_to_cursor(&mut self, text: &Rope) {

        engine.edit_rev(1, 2, first_rev, d1.clone());
            Assert(0, "acrpbdzj".to_owned()),
//
            if let Some(pos) = pos { start_of_line.set(pos) }
    /// Set the selection to a new value.

        engine.edit_rev(1, 2, new_head, d2);
        let mut selection = self.selection.clone();
            Find { chars, case_sensitive, regex, whole_words } =>
            type Value = CategoriesT;
                } else {
categories_from_constant_array!(6);
categories_from_constant_array!(0);
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
            Some(region) => {
}
        result
            name: name.into(),
            }
    pub fn enabled(config: Config) -> Self {

        for i in 0..self.len() {

            self.set_dirty(text);

            match self.wrap_col {
        for mut find in self.find.iter_mut() {
        Self {
            let mut word_cursor = WordCursor::new(text, offset);
use xi_rope::spans::Spans;
        engine.edit_rev(1, 1, first_rev, build_delta_1());
///
        let b = a.slice(2, 4);
            Assert(1, "abefg".to_owned()),
impl Serialize for DeltaElement<RopeInfo> {
                    .with_affinity(affinity)
            // On the next step we want things in expand_by to have op in the context
        // todo: for now only a single search query is supported however in the future
pub struct SampleGuard<'a> {
    fn undo_5() {
    #[test]
        }
}
        let region = SelRegion::caret(offset);

        self.timestamp_us.cmp(&other.timestamp_us)
    pub fn merge(&mut self, other: &Engine) {
        let search_query = match self.selection.last() {
                    inserts: ins,
            };
        }
            'X' => SampleEventType::CompleteDuration,
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
        let mut ix = 0;
    /// from the rope.
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    }
        let offset = self.line_col_to_offset(text, line as usize, 0);

    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
    #[inline]
impl<'a> Iterator for LinesRaw<'a> {
        self.view_id
    }
            std::thread::sleep(std::time::Duration::new(0, 1000));
/// How tracing should be configured.
        let res = find_base_index(&a, &b);
    #[test]
        assert_eq!(snapshot[1].name, "thread_name");
/// Usage of static strings is encouraged for best performance to avoid copies.

                    } else {
    }
    fn edit_rev_undo() {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    fn undo_3() {
/// acquires a dependency on the `serde_json` crate.
            std::thread::sleep(std::time::Duration::new(0, 1000));
    }
/// ```
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        impl<'de> Visitor<'de> for CategoriesTVisitor {
        a.push('\n');
    }
    }
    /// The empty string will yield a single empty slice. In all other cases, the
impl PartialEq for Sample {
        assert_eq!(trace.get_samples_limit(), 11);
#[derive(Serialize, Deserialize, Debug)]
        MergeTestState::new(3).run_script(&script[..]);
    let inverse_tombstones_map = old_deletes_from_union.complement();
        for i in 1..(s1.len() * 3) {
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                sel.add_region(SelRegion::new(last.start, offset));
        }).unwrap_or(text.len());
            self.lc_shadow.edit(start, end, new_end - start);
        } else {
        assert_eq!(1, expand_by.len());
    /// they would be if they hadn't been deleted.
    }
        },

            Merge(0,2), Merge(1, 2),
    pub(crate) fn unset_find(&mut self) {
    use rope::{Rope, RopeInfo};
    }
                    b.add_span(seg.n, 0, 0);
    }
                        self.revs.push(Revision {
            None => text.line_of_offset(offset)
        trace.record(guard.sample.as_ref().unwrap().clone());
/// the session ID component of a `RevId`
        (line, offset - self.offset_of_line(text, line))
            if let Some(ref thread_name) = sample.thread_name {
            None => None
            let mut word_cursor = WordCursor::new(text, offset);
            SampleEventType::FlowStart => 's',
        engine.edit_rev(1, edits+1, head2, d2);
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        let mut engine = Engine::empty();
    /// # Panics
        let (new_text, new_tombstones) =
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        // probably change as the recording internals change.
    }
        match self.selection.len() {
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
        MergeTestState::new(3).run_script(&script[..]);
            &self.deletes_from_union, &old_deletes_from_union);
///
///
        assert_eq!(rope.line_of_offset(3), 1);
    #[bench]
    fn lines_raw_small() {

    }
    /// The empty string will yield a single empty slice. In all other cases, the
    fn is_boundary(s: &String, offset: usize) -> bool {
}
        if self.highlight_find {
        assert_eq!(1, a.line_of_offset(3));
    fn line_of_offset_panic() {

    }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    {
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    fn bench_single_timestamp(b: &mut Bencher) {
        let mut d_builder = Builder::new(TEST_STR.len());
        }

        for i in 0..self.len() {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
///
    fn prev_codepoint_offset_small() {
            AssertAll("ac".to_owned()),
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
    // TODO: replace this with a version of `lines` that accepts a range
    /// Garbage collection means undo can sometimes need to replay the very first
/// Returns the file name of the EXE if possible, otherwise the full path, or
    type Item = Cow<'a, str>;
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
                SelectionModifier::Set => self.set_selection(text, occ),
                pos = leaf_offset + pl.len();
            trace.closure("something", &[], || ());
            deletes: Subset::new(0),
        self.set_selection(text, sel);
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
    {
        let inserts_3 = parse_subset_list("
                            edit: Edit {
    fn can_fragment() -> bool { true }
        assert_eq!(snapshot[7].name, "z");
    /// Tracks whether the replacement string or replace parameters changed.

        assert_eq!(Some(8), a.next_grapheme_offset(0));
    }
    /// from the rope.
        let mut cursors = Vec::new();
        in_measured_units

                    Some(Contents::Edit {
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    out
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
impl From<Rope> for String {
        }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

        (self.pid, self.timestamp_us).hash(state);
            sample: Some(Sample::new_duration_marker(
    }
// See the License for the specific language governing permissions and
}
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        assert_eq!(snapshot[7].name, "z");

#[macro_use]
    /// Offset of the point where the drag started.

///
    use std::collections::BTreeSet;
    /// Time complexity: O(log n)
    // trace_block()/trace_closure
        let mut leaf_offset = pos - offset;
                    text.slice_to_string(region.min(), region.max())
    fn accumulate(&mut self, other: &Self) {
        samples[0].pid = 1;
            for rev in &self.revs {

pub struct RopeInfo {
    }
    fn do_selection_for_replace(&mut self, text: &Rope) {
#[inline]
    fn measure(info: &RopeInfo, _: usize) -> usize {
    }
        }
    sample: Option<Sample>,
            cur_len_utf16 += u.len_utf16();
        assert_eq!(correct, rearranged_inserts);
                        let mut word_cursor = WordCursor::new(text, region.max());
    DynamicArray(Vec<String>),
        ];
/// are shared.
            if let GraphemeIncomplete::PreContext(_) = incomp {
fn initial_revision_counter() -> u32 {
            Assert(0, "acbd".to_owned()),
    /// The empty string will yield a single empty slice. In all other cases, the
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        assert_eq!(utf16_units, 17);

    fn next(&mut self) -> Option<Cow<'a, str>> {
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    fn next(s: &String, offset: usize) -> Option<usize> {
        let base_sel = Selection::new();
/// # use xi_rope::Rope;
/// fn something_expensive() -> u32 {
        // todo: the correct Find instance needs to be updated with the new parameters
        MergeTestState::new(3).run_script(&script[..]);
        let height = self.line_of_offset(text, text.len()) + 1;
/// something_expensive();
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
}
    out

pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
                } else {
        /// should go before typed text.

            Assert(0, "zacbd".to_owned()),
        let first_rev = engine.get_head_rev_id().token();
        if self.breaks.is_some() {
        enum RopeDeltaElement_ {
        #------
    pub preserve_case: bool
///
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let deletes_from_union_b = parse_subset("-#---");
    fn compute_deltas_1() {
        assert_eq!(soln, String::from(engine.get_head()));

            max: offset,
    }
        for rev in old_revs.into_iter().rev() {
            rendered_styles.push(style_id as isize);
{
                self.drag_state = None;
/// * `categories` - A static array of static strings that tags the samples in
        assert!(end <= leaf.len());
        for rev in old_revs.into_iter().rev() {
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    fn from_chrome_id(symbol: char) -> Self {
            match rev.edit {
        prev_boundary.unwrap_or(None)
    for rev in revs.iter().rev() {
            let b = s.as_bytes()[offset];
/// ```rust
        ids.iter().cloned().map(|i| {
                metadata_sort_index: None,
            Assert(1, "ab".to_owned()),
        d_builder.delete(Interval::new_closed_open(58, 61));
    fn test_cross_process_samples() {
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
    }
    }
        base_subset.is_some() && base_subset == other_subset
    fn measure(info: &RopeInfo, _: usize) -> usize {
    /// of the chunks is indeterminate but for large strings will generally be
    }
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
        let first_sample_timestamp = all_samples.front()

    }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    {
        }
        let d = engine.delta_rev_head(first_rev);
        }

        let inserts = parse_subset_list("
    out
            sel
        let script = vec![
///
    /// Set the selection to a new value.
        }
#[inline]
        assert_eq!(snapshot[2].name, "x");
        struct RopeDelta_ {
                            edit: Edit {
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        }
    }
        }
            thread_name: None,
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
/// ```
        let closest_occurrence = self.find.iter().flat_map(|x|
    pub(crate) fn has_pending_render(&self) -> bool {
        for _i in 0..50 {
                payload: payload,
    fn gc_3() {
    pub fn enable(&self) {
        let guard = Self {
    }
        b.iter(|| black_box(time::precise_time_ns()));

    fn next(&mut self) -> Option<Cow<'a, str>> {

    }

                pos = leaf_offset + pl.len();
//
        let (metadata_name, sort_index) = meta.consume();
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
                                  style_spans, &plan, pristine);
    #[serde(rename = "name")]
    rev_id: RevId,
    pub fn lines(&self, start: usize, end: usize) -> Lines {

    #[cfg(feature = "benchmarks")]
        }

    pub(crate) fn unset_find(&mut self) {
                self.select_word(text, offset, false),
        info.utf16_size
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
    /// Set the selection to a new value.
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
                                           client, iv, new_len, px),
    /// Returns a tuple of a new `Revision` representing the edit based on the
                leaf_offset = self.pos() - poffset;
    /// update cycle. This should be a last resort, updates should generally cause
        }
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
                        })
        Ok(exe_name) => {
    /// `text`. The count of a character in `deletes_from_union` represents
    fn merge_priorities() {
            let common = find_common(a_to_merge, b_to_merge);

    type Item = Cow<'a, str>;

                    filename.to_str().map(|s| s.to_string())
        last_line += if last_col > 0 { 1 } else { 0 };
            Gesture { line, col, ty } =>
    }
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
    /// Width in px units, requiring measurement by the front-end.
/// std::mem::drop(trace_guard); // finalize explicitly if
    fn test_ser_de() {
    // * Unicode codepoints
    session2: u32,
        delta.end()

    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
        let a = Rope::from("a\nb\n");
            MetadataType::ThreadName {..} => "thread_name",
    }
    }
        let selection = SelRegion::new(0, text.len()).into();

        self.enabled.load(AtomicOrdering::Relaxed)
            Revision {
/// are shared.



            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            self.push_leaf(s[..splitpoint].to_owned());
    /// If `line` is equal to one plus the current number of lines,
            event_type: SampleEventType::Metadata,
        Lines {
        let utf8_offset = 13;
        let invalid = if all_caret {
            // with offset == s.len(), but be defensive.

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let (ins_delta, deletes) = delta.factor();
/// ```
            'f' => SampleEventType::FlowEnd,
// utility function to clamp a value within the given range
    fn undo_2() {
            find.unset();
    #[serde(rename = "xi_payload")]
                    }
        CategoriesT::DynamicArray(c)
///
    fn can_fragment() -> bool { true }

            black_box(time::precise_time_ns());
        if let Some((l, offset)) = self.get_leaf() {
use unicode_segmentation::GraphemeCursor;
        soln.push('f');
use std::collections::HashMap;
            find.update_highlights(text, delta);
            soln.push('b');

        MergeTestState::new(3).run_script(&script[..]);
        b.iter(|| black_box(trace.instant_payload(
        deletes_bitxor: Subset,
        delta.end()

                }
impl<'a> Drop for SampleGuard<'a> {
        trace.instant("4", &["test"]);
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
                engine.gc(&to_gc)
        assert_eq!(2, a.offset_of_line(1));
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    /// controlled by features (default string).
    type L = String;
                                          closure: F, payload: P)
            duration_us: None,
pub type TracePayloadT = serde_json::Value;
        cursor.prev::<BaseMetric>()
        self.drag_state = None;
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[inline]
///
    {
            DeltaElement::Copy(ref start, ref end) => {
    }
        a.push('\n');
                self.set_selection(text, SelRegion::caret(offset));
        /// should go before typed text.

    #[test]
    fn next(s: &String, offset: usize) -> Option<usize> {
        }
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    }

}
                return false;
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
                    if undone_groups.contains(undo_group) {
        trace.closure_payload("x", &["test"], || (),
                            if !deletes.is_empty() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },


            } else {

        Self {

        assert_eq!(0, b.offset_of_line(0));
        assert_eq!(0, a.offset_of_line(0));
            //if self.cursor.is_boundary::<BaseMetric>() {
    FlowInstant,

        self.pending_render = pending
    }
            AssertMaxUndoSoFar(1,3),

            // recurse at most once; this doesn't feel great but I wrote myself into a
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
                    ops.push(self.build_update_op("invalidate", None, seg.n));
        }
        let mut result = json!({
        }

    /// point. Used to optimize undo to not look further back.
        let a = Rope::from("a\r\nb\r\nc");
        --#-
    /// the other doesn't make it re-appear.
pub fn disable_tracing() {
        assert!(self.current.is_some());
    fn from(r: Rope) -> String {
        self.tombstones = new_tombstones;
        let mut engine = Engine::new(Rope::from(TEST_STR));
            }
            undo_group: 0,
    #[test]
}
                Some(offset)
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.

            self.tid == other.tid &&
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`

                    if retain_revs.contains(&rev.rev_id) {



pub type SessionId = (u64, u32);
    {
        // insert character at end, when this test was added, it panic'd here
            }
        use self::MergeTestOp::*;

///
        rope.offset_of_line(5);
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        if let Some(sel) = new_sel {
    /// this returns the offset of the end of the rope. Arguments higher
use unicode_segmentation::GraphemeIncomplete;
}
            SampleEventType::AsyncEnd => 'e',
        let head = engine.get_head_rev_id().token();

    fn rearrange_1() {
        if offset == s.len() {
    type Item = &'a str;

        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);

    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
            Merge(1,0),
impl Rope {
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
    pub height: f64,
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
#[derive(Copy, Clone)]
        } else {
            'B' => SampleEventType::DurationBegin,
        gc_scenario(4,3);
    #[cfg(feature = "benchmarks")]
        assert_eq!(TEST_STR, String::from(engine.get_head()));
extern crate test;
/// # Arguments
    rev_id: RevId,
        if self.is_enabled() {


            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        let utf8_offset = 9;

        });
    }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    #[should_panic]
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    }
    /// that are currently deleted, and thus in `tombstones` rather than
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
        ");
    fn gc() {
    end: usize,
    }
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        result
            match c.edit {
        let trace = Trace::disabled();
    #[bench]
        /// together. For example, an auto-indent insertion would be un-done
        }, new_text, new_tombstones, new_deletes_from_union)
    fn next(s: &String, offset: usize) -> Option<usize> {
    /// The semantics are intended to match `str::lines()`.
        None => {
            SampleEventType::ObjectDestroyed => 'D',
                    // are empty, could send update removing the cursor.
                undo_group,
            if let Edit { ref inserts, .. } = rev.edit {

    assert!(a[0].rev_id == b[0].rev_id);
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
#[inline]
///
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,


            }),
                let (ins, _) = delta.factor();
    /// Sets the selection to a new value, invalidating the line cache as needed.
impl Hash for Sample {
        // todo: the correct Find instance needs to be updated with the new parameters

}
    /// Time complexity: O(log n)
    fn replace_small() {
        cursor.next::<BaseMetric>()
            samples: Mutex::new(FixedLifoDeque::new())
}
    /// vertical scroll position
    /// Exposed for unit tests.


            }
                    };

            find: Vec::new(),
                l = nl;
    }
    } else {
            sel
    /// Collapse all selections in this view into a single caret
            Merge(0,1),
            revs: vec![rev],
                            None
            Sample::new_instant("remote pid", &[], None)];
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
//     http://www.apache.org/licenses/LICENSE-2.0
                self.select_line(text, offset, line, true),
    {
        let line = self.line_of_offset(text, offset);

    pub fn max_size_in_bytes(&self) -> usize {
    }
            Assert(2, "afc".to_owned()),
                }
                        ops.push(self.build_update_op("copy", None, seg.n));
                pos = leaf_offset + nl.len();
        assert_eq!(samples[0].name, "remote pid");
///
    fn can_fragment() -> bool { false }
            }
    // use own breaks if present, or text if not (no line wrapping)
            };

    }
    /// borrowed from the rope.
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        }
        let d = engine.delta_rev_head(first_rev);
        self.samples.lock().unwrap().len()
        if self.scroll_to.is_none() && wrap {
    fn rearrange_1() {
    fn line_of_offset_small() {
    {
                }
                    let (start, end) = self.peers.split_at_mut(ai);
    // reachability calculation.
    pub fn sel_regions(&self) -> &[SelRegion] {
        ---#--
                    // TODO: update (rather than re-render) in cases of text valid
    fn gc_6() {
    pub duration_us: Option<u64>,
    #[test]
            }

        ];
                    let mut e = &mut self.peers[ei];
    fn next(&mut self) -> Option<Cow<'a, str>> {
    pub fn new_instant<S, C>(name: S, categories: C,
    /// The session ID used to create new `RevId`s for edits made on this device
        }
    }
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
            return self.revs.len();
    end: usize,
//! An engine for handling edits (possibly from async sources) and undo. It
        where S: Serializer
            SampleEventType::ObjectSnapshot => 'O',
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
    if x < min {
                    // are empty, could send update removing the cursor.
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
            if let GraphemeIncomplete::PreContext(_) = incomp {
            name: name.into(),
        }).collect()
    pub categories: Option<CategoriesT>,
        let trace = Trace::enabled(Config::default());
mod tests {
        let mut b = TreeBuilder::new();
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        text = new_text;
    #[test]

        -> Self
        delta.serialize_field("base_len", &self.base_len)?;
        assert_eq!(utf8_offset, 13);

    fn build_delta_1() -> Delta<RopeInfo> {
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
            base_sel: selection.clone(),
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        for _i in 0..50 {
        // todo: for now only a single search query is supported however in the future
        if line > max_line {
                            }
        in_base_units
pub struct SampleArgs {
                peers.push(peer);
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
                              categories: C,
    fn from(c: Vec<String>) -> CategoriesT {
}
    /// Note: `edit` and `edit_str` may be merged, using traits.
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    }
/// However, anything that can be converted into a Cow string can be passed as

        match symbol {
enum MetadataType {
    fn is_boundary(s: &String, offset: usize) -> bool {
        self.pending_render
            Click(MouseAction { line, column, flags, click_count }) => {
        let deletes_from_union_b = parse_subset("-#---");
///
            trace.closure("test_samples_closure", &["test"], || {});
        if let Some((l, offset)) = self.get_leaf() {

    }
    }
            Merge(1,2),
    }
            // selection with interior
                }
    }
            Merge(1,0),
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        len
    pub preserve_case: bool
    #[serde(skip_serializing_if = "Option::is_none")]
        };
                rev_id: basic_rev(i+1),

    identity_op,
    }
            {
            }
        if let Contents::Edit {priority, inserts, .. } = r.edit {
    /// Tests that merging again when there are no new revisions does nothing
}
        let inserts = parse_subset_list("
impl TreeBuilder<RopeInfo> {
        assert_eq!(Some(2), b.prev_codepoint_offset(5));

            _ => return
    /// Starts a drag operation.
            deletes_from_union = match rev.edit {
    /// slices will be nonempty.
            }
        assert_tokens(&rope, &[

/// an argument.
            enabled: AtomicBool::new(false),
        fn new(count: usize) -> MergeTestState {
            SampleGuard::new_disabled()
    fn thread_name() -> Option<StrCow> {
        self.set_dirty(text);
///
/// version of Ropes, and if there are many copies of similar strings, the common parts
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
}
                    self.do_gesture(text, line, column, GestureType::LineSelect)

            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        b.push('\n');
    }
    #[test]
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
// distributed under the License is distributed on an "AS IS" BASIS,
            SampleEventType::FlowEnd => 'f',
    rev_id_counter: u32,
        let deletes_from_union = Subset::new(0);
    ///
        for i in 0..edits {
use bytecount;
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        });
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let first_rev = engine.get_head_rev_id().token();
                metadata_name: None,
    /// Returns a u64 that will be equal for equivalent revision IDs and
        let params = json!({
    fn merge_whiteboard() {
        let new_head_2 = engine.get_head_rev_id().token();
impl<'a> Iterator for ChunkIter<'a> {
            cursor: Cursor::new(self, start),
            self.record(Sample::new_duration(
        let height = self.line_of_offset(text, text.len()) + 1;
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
categories_from_constant_array!(2);
    /// The revision history of the document
    /// Callers are expected to validate their input.
                    if retain_revs.contains(&rev.rev_id) {
                            warn!("Failed to get string representation: {:?}", e);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
        MergeTestState::new(3).run_script(&script[..]);

/// with.  By default, the type is string-like just like name.  If compiled with
use std::hash::{Hash, Hasher};
    sample_limit_count: usize
    }
                                toggled_groups: &toggled_groups - gc_groups,

///
                        };
/// The visual width of the buffer for the purpose of word wrapping.
                if rev.max_undo_so_far < lowest_group {
            } else {
// You may obtain a copy of the License at
/// Contains replacement string and replace options.
                payload: payload,
/// fn something_else_expensive() {
    pub fn collapse_selections(&mut self, text: &Rope) {
    #[cfg(feature = "benchmarks")]
        let script = vec![
        ---#--
                _ => panic!("to_base_units called with arg too large")
    }
        self.scroll_to_cursor(text);
    /// Find what the `deletes_from_union` field in Engine would have been at the time
// Copyright 2016 The xi-editor Authors.
    #[test]
///
    #[test]
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
}
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    }
        delta.end()
/// Measured unit is utf8 code unit.
    // TODO: insert from keyboard or input method shouldn't break undo group,
        assert!(a != empty);
                for &region in rest {
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
/// assert_eq!("ello wor", String::from(&b));
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        if self.replace_changed {
                    let head = e.get_head_rev_id().token();
        assert_eq!(1, r.line_of_offset(a.len()));
    #[cfg(feature = "benchmarks")]
            // to replicate whiteboard, z must be before a tombstone
        RevId { session1: 1, session2: 0, num: i as u32 }
///
        MergeTestState::new(2).run_script(&script[..]);
                            None
        assert_eq!(Some(6), a.prev_codepoint_offset(10));

pub fn samples_len() -> usize {
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
            self.start_drag(offset, offset, offset);
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    {
                            }
            },
// limitations under the License.
    }
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);

        engine.undo([1].iter().cloned().collect());
        }
        x
    }
use std::cmp::{min,max};
        println!("{:#?}", delta_ops);
                let (pl, poffset) = self.prev_leaf()?;
}
    }
            pending_render: false,
    fn render_line(&self, client: &Client, styles: &StyleMap,
            },
            tid: tid,
        // same span exists in both sets (as when there is an active selection)
        // TODO: simplify this through the use of scopeguard crate
        a.lines_all().collect::<Vec<_>>());
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let new_inserts = union_ins_delta.inserted_subset();
extern crate serde;
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        }

    All,
        for _ in 0..(edits-max_undos) {
}
        }
            sel.add_region(new_region);
    #[test]
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
    {
        for i in 0..self.len() {
/// A guard that when dropped will update the Sample with the timestamp & then
        let res = find_base_index(&a, &b);
    {
        let a2 = Rope::from("a");
        }
            event_type: SampleEventType::Metadata,
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    fn compute_info(s: &String) -> Self {
        thread.name().map(|ref s| to_cow_str(s.to_string()))
    /// Returns a slice of the string from the byte range [`start`..`end`).
    pub fn byte_at(&self, offset: usize) -> u8 {
/// fn something_else_expensive(value: u32) {
            rendered_styles.push((sel_start as isize) - ix);
    #[inline]
    fn test_get_sorted_samples() {
    }
            Sample::new_instant("remote pid", &[], None)];
        Self {

    FlowEnd,
        // Any edit cancels a drag. This is good behavior for edits initiated through
    }
    #[bench]
use std::hash::{Hash, Hasher};

        // Any edit cancels a drag. This is good behavior for edits initiated through
                    let head = e.get_head_rev_id().token();
        let a = Rope::from("a");
        min
// You may obtain a copy of the License at
type StyleMap = RefCell<ThemeStyleMap>;
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
            // which we can do with another peer that inserts before a and merges.
        while let Err(incomp) = prev_boundary {
        len
                Some(i) => {
        let a_revs = basic_insert_ops(inserts.clone(), 1);
}
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    DynamicArray(Vec<String>),
    // possible to fix it so that's not necessary.
    pub fn max_samples(&self) -> usize {
        debug_subsets(&rebased_inserts);
            categories: Some(categories.into()),

    /// This is used to determined whether FindStatus should be sent to the frontend.

    /// # Panics
    /// The semantics are intended to match `str::lines()`.
        let mut update = json!({
    /// Callers are expected to validate their input.
    ns / 1000
}
use std::cmp::{min,max};
    find_changed: FindStatusChange,
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
    #[test]
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        engine.edit_rev(0, 1, first_rev, build_delta_1());

                            }
}
    }
        let search_query = match self.selection.last() {
                    } else {

                    self.set_selection(text, selection);
pub type SessionId = (u64, u32);
        let mut samples = vec![
        self.find.iter().map(|find| {
mod tests {
    }
        }
        let text_with_inserts = text_ins_delta.apply(&self.text);
        if let Some(edit) = contents {
    // TODO find the maximum base revision.
#[cfg(feature = "json_payload")]
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        let chars_left = (edits-max_undos)+1;
    ///
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",

    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
        let mut update = json!({
                            plan: &RenderPlan, pristine: bool)
    }
    pub(crate) fn record(&self, sample: Sample) {
    first_line: usize,
                if !region.is_caret() {
                    if seg.validity == line_cache_shadow::ALL_VALID {
        use self::MergeTestOp::*;
            write!(f, "Rope({:?})", String::from(self))
            Sample::new_instant("remote pid", &[], None)];
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {


    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

    #[test]
        let mut style_map = style_map.borrow_mut();
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        let trace = Trace::enabled(Config::with_limit_count(10));
        ];
        next_boundary.unwrap_or(None)
    pub timestamp_us: u64,
                           pristine: bool)

/// Create a `Rope` from a `String`:

            SampleEventType::AsyncInstant => 'n',
            Assert(0, "ab".to_owned()),
        engine.edit_rev(1, edits+1, head2, d2);
        assert_eq!(5, a.offset_of_line(3));
        }
    // TODO: a case can be made to hang this on Cursor instead
///
        if self.len() <= MAX_LEAF {
    }
        ");
        if before {
        self.set_selection(text, new_sel);
                                             &text, false);
/// * `name` - A string that provides some meaningful name to this sample.
        let trace = Trace::enabled(Config::with_limit_count(10));
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        }
        let mut ops = Vec::new();
    }
    // reachability calculation.
            Merge(0,2), Merge(1, 2),


    // TODO: replace this with a version of `lines` that accepts a range
        #[serde(rename_all = "snake_case")]
                // should be removed in favor of do_gesture
    ProcessName { name: String },
            Merge(0,1),
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
#[derive(Serialize, Deserialize, Debug)]
        where D: Deserializer<'de>,
        if let Some(ref mut trace) = self.trace {
                            if !inserts.is_empty() {
            base_len: usize

        self.text = text;
            }
const FLAG_SELECT: u64 = 2;
                    if s.ends_with('\r') {
            for (i,rev) in self.revs.iter().enumerate().rev() {
        }
    }

    #[test]
            let to_delete = if undone { &new_inserts } else { &new_deletes };
    }
        if let Some(occ) = closest_occurrence {
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    #[cfg(feature = "benchmarks")]
            timestamp_us: ns_to_us(time::precise_time_ns()),
    /// The selection state for this view. Invariant: non-empty.
            let right_str = self[splitpoint..].to_owned();

    #[test]
            }
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    }
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
fn find_leaf_split_for_bulk(s: &str) -> usize {
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
    fn sample_name(&self) -> &'static str {
                        word_cursor.select_word()

    num: u32,
                        None
/// * `name` - A string that provides some meaningful name to this sample.
        }
                    to_payload(("some payload for the block"))));
                    }
                    let full_path_str = full_path.into_string();
        debug_subsets(&rearranged_inserts);
}
        }

            'f' => SampleEventType::FlowEnd,


pub struct LinesRaw<'a> {
        for chunk in self.iter_chunks(start, end) {
    }
            scroll_to: Some(0),

    },
        self.set_selection(text, new_sel);
        let first = max(first, 0) as usize;
    // * grapheme clusters
    use super::*;
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
            'f' => SampleEventType::FlowEnd,
    }
    /// This is used to determined whether FindStatus should be sent to the frontend.
            Merge(0,2), Merge(1, 2),
        self.tombstones = new_tombstones;
                }
        // probably change as the recording internals change.
    /// storage allocated will be limit * size_of<Sample>

            Assert(0, "adfc".to_owned()),
            match memchr(b'\n', self.fragment.as_bytes()) {
            let mut peers = Vec::with_capacity(count);
    fn gc() {
            SampleEventType::CompleteDuration => 'X',
        let revs = basic_insert_ops(inserts, 1);
            }),
                selection.add_region(SelRegion::caret(region.max()));
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
                    // can only happen on empty input
    fn is_ok_child(&self) -> bool {
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {

        for _ in 0..(edits-max_undos) {
    fn next(&mut self) -> Option<Cow<'a, str>> {
            Merge(1,0),
        b.iter(|| black_box(trace.closure_payload(

            // I think it's a precondition that this will never be called
        let a = Rope::from("a\nb\n");

    }
        }
            self.set_dirty(text);

        } else {
        let end = self.sel_regions().last().unwrap().end;
        !self.selection.regions_in_range(offset, offset).is_empty()
                        };
        let tombstones = Rope::from("27");
        self.lines += other.lines;
        x
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        as_vec
                        })
        let height = self.line_of_offset(text, text.len()) + 1;
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    }

    #[cfg(feature = "benchmarks")]
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    /// Collapse all selections in this view into a single caret
    }
            if let Some(pos) = pos { start_of_line.set(pos) }
        base_subset.is_some() && base_subset == other_subset
            rendered_styles.push((sel_start as isize) - ix);
}
            for rev in &self.revs {
}
            None
        self.send_update_for_plan(text, client, styles,
    pub fn join(&self, sep: &str) -> String {

            .map(|pos| offset + pos + 1)
    fn undo_4() {
            Assert(0, "ab".to_owned()),
                    text.slice_to_string(region.min(), region.max())
            let right_str = self[splitpoint..].to_owned();
    out

#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    TRACE.closure(name, categories, closure)
        engine.edit_rev(1, 1, initial_rev, d1.clone());
            Assert(2, "adfc".to_owned()),
        }
                    text.slice_to_string(start, end)
        use self::MergeTestOp::*;
    cursor: Cursor<'a, RopeInfo>,
                if !region.is_caret() {

                    }

        Some(self.cmp(other))
        };
    fn from(s: T) -> Rope {
//
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));

        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {

    }
    fn merge_insert_only_whiteboard() {

        let (iv, new_len) = delta.summary();

    }

    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
/// Boundary is trailing and determined by a newline char.

    pub event_type: SampleEventType,

            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        assert_eq!(1, a.line_of_offset(2));
            let mut sel = drag_state.base_sel.clone();
    #[cfg(feature = "benchmarks")]
/// The result of the closure.
    }
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        where D: Deserializer<'de>,
        let tombstones = Rope::from("27");
                self.select_line(text, offset, line, true),
    }
        }
        let mut a = String::new();
        (Revision {

        self.replace.clone()
        if !self.is_enabled() {

    }
                splitpoint -= 1;
                self.start_drag(offset, offset, offset);
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
    }
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
            None => None
            last_line -= 1;
                self.select_word(text, offset, false),
/// ```

            edit: Edit {
///
            Assert(0, "adfc".to_owned()),
            let deletes = Subset::new(inserts.len());
                return None;
    }
        assert_eq!(1, r.line_of_offset(r.len() - 1));
            match exe_name.clone().file_name() {
                              duration_ns: u64) -> Self
            return;

    #[bench]
            self.find.push(Find::new());
/// Represents a transform from one rope to another.
    }
    #[test]
        };
    } else {
        }
    Width(f64),
        selection.add_region(region);

        prev_boundary.unwrap_or(None)

        // x, a, y, b, z, c
    }
        self.revs.reverse();

        }
            buffer_id: buffer_id,
        Self {
                    let mut selection = self.selection.clone();
}

        );
    // Note: this function would need some work to handle retaining arbitrary revisions,
                        hls.push((sel_start_ix, sel_end_ix));
            Replace { chars, preserve_case } =>
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

    }
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        self.deletes_from_union = new_deletes_from_union;
        sel.collapse();
            // d-expand by other
    #[serde(rename = "sort_index")]

            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
            word_cursor.select_word()
    {
        trace.closure_payload("x", &["test"], || {
        assert_eq!(None, b.prev_codepoint_offset(0));
/// an argument.
// you may not use this file except in compliance with the License.
        revs.append(&mut revs_3);


        }
                let (pl, poffset) = self.prev_leaf()?;
            trace.record(sample);
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let trace = Trace::enabled(Config::with_limit_count(20));
///
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        }
    /// The state for replacing matches for this view.

        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
    {

    sample: Option<Sample>,

    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
impl serde::Serialize for CategoriesT {
        let mut sel = Selection::new();

impl Engine {
// Licensed under the Apache License, Version 2.0 (the "License");
            SampleEventType::ObjectCreated => 'N',

    }
                         first_line: usize, last_line: usize, pristine: bool) {
        let mut samples = vec![
                    text.slice_to_string(start, end)
        println!("{:#?}", b_delta_ops);
}
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
                    let transformed_deletes = deletes.transform_expand(&s);
    fn hash<H: Hasher>(&self, state: &mut H) {
            Merge(1,0),
        }
        self.find.clear();
    pub fn do_find_all(&mut self, text: &Rope) {
        // stable order since the resolution of timestamps is 1us.
            utf16_size: 0,
        let new_pos = self.pos() + (end - offset);
/// Enable tracing with the default configuration.  See Config::default.
        -> R
//! It enables support for full asynchronous and even peer-to-peer editing.

/// # Examples
/// ```
        where S: Into<StrCow>, C: Into<CategoriesT>
        (Revision {
/// let mut a = Rope::from("hello world");
    /// Time complexity: O(log n)
        assert_tokens(&rope, &[
        where S: Serializer
        };
                                                        &mut line_cursor,
    pub fn enable(&self) {
/// Contains replacement string and replace options.




    /// We attempt to reduce duplicate renders by setting a small timeout
    fn rebase_1() {
        engine.edit_rev(1, edits+1, head2, d2);

        assert_eq!(snapshot.len(), 5);

///
}
            for (i,rev) in self.revs.iter().enumerate().rev() {
        let mut hls = Vec::new();
    }
            };
        let a = Rope::from("a\rb\rc");
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
impl NodeInfo for RopeInfo {
#[inline]
        if offset >= next_line_offset {
        let after_first_edit = engine.get_head_rev_id().token();
                let (pl, poffset) = self.prev_leaf()?;
    }
                    rev_id: rev.rev_id,
    cursor: Cursor<'a, RopeInfo>,
    }
        samples[1].timestamp_us = 5;
        ");
use find::Find;
        // rebase the deletion to be after the inserts instead of directly on the head union
                payload: payload,
    #[test]
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
                    to_payload(("some payload for the block"))));
/// ```
        // set last selection or word under current cursor as search query
    /// This method is responsible for updating the cursors, and also for
}
    /// description for the invariant.
    #[serde(rename = "ph")]
                    let b = if bi < ai {
    }
// Unless required by applicable law or agreed to in writing, software
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        engine.edit_rev(1, 1, first_rev, d1);
        let tombstones_a = Rope::from("a");
            Assert(1, "ab".to_owned()),
    fn consume(self) -> (Option<String>, Option<i32>) {
}
        let first = max(first, 0) as usize;
                        }

                        sample.tid));
        assert_eq!(rope.offset_of_line(1), 3);
        if initial_contents.len() > 0 {



                    }
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        if !cursors.is_empty() {
        String::from(&r)
///
        struct CategoriesTVisitor;
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
            let end = self.line_of_offset(last_text, iv.end()) + 1;
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
    pub fn get_head(&self) -> &Rope {
                   style_spans: &Spans<Style>, line_num: usize) -> Value
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        if self.is_enabled() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
            Merge(2,0),
    #[serde(skip_serializing)]

        where S: Serializer
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());

                c.provide_context(&pl, self.pos() - poffset);
            Some(Cow::Owned(mut s)) => {
            FindAll => self.do_find_all(text),
    }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
//! a previously committed version of the text rather than the current text,

    }
impl Serialize for DeltaElement<RopeInfo> {
            Some(b)
}
    fn goto_line(&mut self, text: &Rope, line: u64) {
    max_undo_so_far: usize,
        assert_eq!(utf16_units, 20);
    /// Returns a slice of the string from the byte range [`start`..`end`).
    /// the frontend.
    #[test]
        }
    fn arr_eq(&self, other: &Vec<String>) -> bool {
    // revision might hold content from an undo group that would otherwise be gc'ed),
            }
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        }
            self.set_selection(text, sel);
                        undone_groups = Cow::Owned(new_undone);
/// * `categories` - A static array of static strings that tags the samples in
            SampleEventType::CompleteDuration => 'X',
    pub fn merge(&mut self, other: &Engine) {
        fn new(count: usize) -> MergeTestState {
            'M' => SampleEventType::Metadata,
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
            SampleGuard::new_disabled()
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
impl NodeInfo for RopeInfo {
    }
            if let Edit { priority, ref inserts, .. } = r.edit {
                WrapWidth::Width(px) =>
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                            deletes_bitxor.transform_shrink(&gc_dels)
            Assert(1, "pbj".to_owned()),
                        b.add_span(seg.n, 0, 0);
    #[test]
            Assert(0, "ab".to_owned()),
        Self {
        rendered_styles
    /// Exposed for unit tests only.
            Merge(2,1),
            let c = i.to_string() + "\n";
        assert_eq!(trace.get_samples_count(), 5);
        assert_eq!(None, a.prev_codepoint_offset(0));
            "styles": styles,
        where S: serde::Serializer
    }
            SampleGuard::new(&self, name, categories, Some(payload.into()))
                let (pl, poffset) = self.prev_leaf()?;


            Some(b)
    fn can_fragment() -> bool {
/// # Performance
}
        assert_tokens(&rope, &[
            find.update_highlights(text, delta);
        if let Some(last) = self.revs.last() {
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    offset: usize,
    /// validate their input.
        } else {
        engine.edit_rev(1, 2, new_head, d2);

pub fn samples_cloned_unsorted() -> Vec<Sample> {

    #[bench]
    // TODO(vlovich): Replace all of this with serde flatten + rename once


        where S: Into<StrCow>, C: Into<CategoriesT>
    }
    /// Returns the byte offset corresponding to the line `line`.
        sel.collapse();
///

use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
                    let mut selection = self.selection.clone();
        }
        assert!(self.current.is_some());
        /// should go before typed text.
        let script = vec![
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
}
use unicode_segmentation::GraphemeCursor;
                Rope::from(s1.clone()),

}
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    // A colliding session will break merge invariants and the document will start crashing Xi.
    }

        }
    #[test]
fn count_utf16_code_units(s: &str) -> usize {
///     something_else_expensive();
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        in_base_units
        Self::with_limit_count(size / size_of::<Sample>())
}
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        assert_eq!(snapshot.len(), 5);
// Licensed under the Apache License, Version 2.0 (the "License");
pub type RevToken = u64;
                if self.fragment.is_empty() {
    }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        let b = a.slice(1, 10);
                    let (start, end) = self.peers.split_at_mut(ai);
    /// This is a regression test to ensure that session IDs are used to break
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
            SampleEventType::DurationEnd => 'E',

impl Eq for CategoriesT {}
        assert_eq!(snapshot[4].name, "y");

use memchr::{memrchr, memchr};
    }
    pub fn disabled() -> Self {
    /// Highlights are only rendered when search dialog is open.
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    /// Returns the regions of the current selection.

        where S: serde::Serializer
    fn bench_trace_closure(b: &mut Bencher) {
        hasher.finish()
/// version of Ropes, and if there are many copies of similar strings, the common parts
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
        let script = vec![
    pub fn merge(&mut self, other: &Engine) {
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };

}
    /// Sets the selection to a new value, without invalidating.
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        self.scroll_to = Some(end);
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

    fn can_fragment() -> bool {
        trace.closure_payload("z", &["test"], || {},
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        let mut soln = String::from("h");
    }
                }
            event_type: SampleEventType::CompleteDuration,
        in_measured_units
        }
}
        // todo: this will be changed once multiple queries are supported
/// ```rust
    revs: Vec<Revision>,

    /// Sets the selection to a new value, invalidating the line cache as needed.
    pub payload: Option<TracePayloadT>,
        self.lines(0, self.len())

            let first_rev = engine.get_head_rev_id().token();
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        }
extern crate lazy_static;
            pos
        ChunkIter {
        for i in 0..self.len() {
}
    let mut utf16_count = 0;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        }).collect()
    fn empty_subset_before_first_rev(&self) -> Subset {
            Some(ref breaks) => {
    }

    pub fn collapse_selections(&mut self, text: &Rope) {
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
            end -= 1;
    }
    fn merge_session_priorities() {
            args: Some(SampleArgs {
    }
        -> Self
                        } else {

        }
            }
        // we add the special find highlights (1) and selection (0) styles first.

        let trace = Trace::enabled(Config::default());
                        }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        self.invalidate_selection(text);
    ///
            return self.revs.len();
        plan.request_lines(first_line, last_line);
    }
}
}
            }
    }
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {

use std;
    /// The maximum amount of space the tracing data will take up.  This does
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
/// 1. Samples that span sections of code may be inserted on end instead of
use edit_types::ViewEvent;
            event_type: SampleEventType::Metadata,
        let s = String::deserialize(deserializer)?;
    type Output = Rope;
        self.replace.clone()
            let pos = bc.next::<BreaksMetric>();
    /// Generate line breaks based on width measurement. Currently batch-mode,
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        // since character was inserted after gc, editor gcs all undone things
        let mut engine = Engine::new(Rope::from(TEST_STR));
        last_line += if last_col > 0 { 1 } else { 0 };
            rev_id_counter: 1,
    // TODO: maybe refactor this API to take a toggle set
        hasher.finish()

        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
                    } else {

enum FindStatusChange {
                            }
        // since one of the two deletes was gc'd this should re-do the one that wasn't
        }
    }
}
        let first_rev = engine.get_head_rev_id().token();
    }
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {

            // d-expand by other
    /// height of visible portion
        ");

            Merge(0,1),
//
    for rev in revs.iter().rev() {
        } else {
/// Computes a series of priorities and transforms for the deltas on the right
        !self.selection.regions_in_range(offset, offset).is_empty()
    fn sample_name(&self) -> &'static str {
        struct CategoriesTVisitor;
/// }
                },
        }
    fn bench_get_pid(b: &mut Bencher) {
    /// Note: unlike movement based selection, this does not scroll.
    }
/// The result of the closure.
}

use multiset::{Subset, CountMatcher};
            Merge(2,3),
            } else {
                let mut cursor = Cursor::new(&text, region.min());
use std::str::FromStr;
            Assert(0, "zacpbdj".to_owned()),
        self.revs.last().unwrap().max_undo_so_far
    // This computes undo all the way from the beginning. An optimization would be to not

                return false;

    /// inserted, including the ones that were later deleted, in the locations
    fn merge_session_priorities() {
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
}
///
#![cfg_attr(feature = "benchmarks", feature(test))]
        selection.add_region(region);
                splitpoint -= 1;
        let (metadata_name, sort_index) = meta.consume();
        self.set_selection(text, SelRegion::caret(offset));
            Assert(2, "ab".to_owned()),
    /// Does a drag gesture, setting the selection from a combination of the drag
        let col = col as usize;
categories_from_constant_array!(0);
        } else {
            event_type: SampleEventType::Instant,
    FlowStart,
    if x < min {
categories_from_constant_array!(7);
            let max_undo = self.max_undo_group_id();
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
/// are shared.
                    base_len: delta.base_len

        }
    #[serde(rename = "dur")]
    /// # Panics
impl View {

        use self::MergeTestOp::*;
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            //self.cursor.set(self.end);
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            let mut peers = Vec::with_capacity(count);
{
                            let line = self.render_line(client, styles, text,
impl<'a> Iterator for LinesRaw<'a> {
        a.edit_str(1, 9, "era");
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        -##-
///
                                           client, iv, new_len, px),

            let _x = trace.block("something", &[]);
    }
    }

                let offset = self.selection[0].start;
    /// Updates the view after the text has been modified by the given `delta`.

/// See `trace_payload` for a more complete discussion.
    /// Return the offset of the codepoint after `offset`.
/// let a = Rope::from("hello ");
    fn undo_5() {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
    let mut out = Vec::with_capacity(revs.len());
            match memchr(b'\n', self.fragment.as_bytes()) {
        let a = Rope::from("a\r\nb\r\nc");
        self.deletes_from_union = new_deletes_from_union;
    /// You could construct the "union string" from `text`, `tombstones` and
    pub fn byte_at(&self, offset: usize) -> u8 {
        ];
        engine.edit_rev(1, 1, first_rev, d1.clone());
                while cursor.pos() < region.max() {
/// version of Ropes, and if there are many copies of similar strings, the common parts

    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
            _ => return

/// # Examples
        RopeInfo {
                rev_id: basic_rev(i+1),
                    })
            SampleEventType::AsyncInstant => 'n',
        let b_rope = Rope::from(&b);
    replace_changed: bool,
    TRACE.disable();
        memrchr(b'\n', &s.as_bytes()[..offset])
/// Returns all the samples collected so far.  There is no guarantee that the

    {
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        if b >= 0xf0 {
            trace.closure("something", &[], || ());
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
        for i in 0..self.len() {
                            plan: &RenderPlan, pristine: bool)

                Undo { toggled_groups, deletes_bitxor } => {
    fn to_payload(value: &'static str) -> TracePayloadT {
    ///
        } else {
/// ```
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        samples[0].pid = 1;
    /// Invalidates front-end's entire line cache, forcing a full render at the next
}
    }
        Subset::new(len)
    // Send the requested lines even if they're outside the current scroll region.
                // TODO could probably be more efficient by avoiding shuffling from head every time
        let iv = Interval::new_closed_open(start, end);
    pub(crate) fn get_view_id(&self) -> ViewId {
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    fn prev(s: &String, offset: usize) -> Option<usize> {
            self.name == other.name &&
    #[test]
    }


#[cfg(test)]
}
        let a = Rope::from("");
        assert!(r != b_rope + a_rope);
    /// Note: `edit` and `edit_str` may be merged, using traits.
    /// from the rope.
            Merge(1,2),
        enum RopeDeltaElement_ {
    /// The semantics are intended to match `str::lines()`.
        trace.instant("3", &["test"]);

                    };
            black_box(time::precise_time_ns());
            Assert(1, "zapbj".to_owned()),

    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    Undo {
    }
        ids.iter().cloned().map(|i| {

        let (mut l, mut offset) = self.get_leaf()?;
///
            .map(|(i, _)| i)
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
use std::collections::BTreeSet;
    fn merge_session_priorities() {
use std::fmt;
            _ => return
//! It enables support for full asynchronous and even peer-to-peer editing.
            Some(Cow::Borrowed(mut s)) => {
            if next_chunk.is_none() { return None; }
            sel.add_region(new_region);
        let mut engine = Engine::new(Rope::from(TEST_STR));
                }
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
        assert_eq!(utf16_units, 11);
                    to_payload(("some payload for the block"))));
        let all_samples = self.samples.lock().unwrap();

    fn next(&mut self) -> Option<u8> {

/// See `trace_payload` for a more complete discussion.
        for rev in old_revs.into_iter().rev() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
#[derive(Clone, Debug)]

        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
            a = a + Rope::from(&c);
    #[test]
        let first_rev = engine.get_head_rev_id().token();
                        });
            MetadataType::ThreadName {..} => "thread_name",
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    #[test]
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    /// The state for replacing matches for this view.
        let mut b = String::new();


                metadata_name: None,
    fn do_cancel(&mut self, text: &Rope) {
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
                    }
            return 0;

        delta.serialize_field("base_len", &self.base_len)?;
                    let (start, end) = {
    }
    1
            if !s.is_empty() {
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,

            } else {
    }
    use serde_test::{Token, assert_tokens};
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);

        let _t = trace_block("View::wrap_width", &["core"]);
/// with.  By default, the type is string-like just like name.  If compiled with
pub struct Lines<'a> {
use movement::{Movement, region_movement, selection_movement};
        last_line += if last_col > 0 { 1 } else { 0 };
            Assert(2, "ab".to_owned()),
    // ============== Merge script tests
    /// Get text of head revision.
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
        }
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.

        }
        for r in &self.revs[ix + 1..] {
}
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {

//! a previously committed version of the text rather than the current text,

            word_cursor.select_word()
    ///
            SampleEventType::AsyncStart => 'b',
            pos
                let (pl, poffset) = self.prev_leaf()?;
        where S: Serializer
                SelectionModifier::AddRemovingCurrent => {
        // only one of the deletes was gc'd, the other should still be in effect
        if f.alternate() {
            self.event_type == other.event_type &&

        assert_eq!(trace.get_samples_count(), 5);





    #[test]
        if self.replace_changed {
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {

            }
        let revs = basic_insert_ops(inserts, 1);
    TRACE.disable();
#[cfg(feature = "json_payload")]
    ///
    #[test]
    }
    }
    }
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
                        Cow::Owned(un_deleted.transform_shrink(inserts))
        engine.gc(&gc);
            DeltaElement::Insert(ref node) =>

        assert_eq!(5, a.offset_of_line(3));

        let mut b = line_cache_shadow::Builder::new();
    /// Tracks whether this view has been scheduled to render.
        samples[1].pid = 2;
            Assert(1, "abc".to_owned()),
        self.wrap_col = WrapWidth::Width(self.size.width);
        let trace = Trace::enabled(Config::default());
    }
    fn rearrange_1() {

}
use styles::{Style, ThemeStyleMap};
        MergeTestState::new(2).run_script(&script[..]);
#[derive(Serialize, Deserialize, Debug, Clone)]
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
                l = pl;
        serializer.serialize_str(&String::from(self))
                for region in find.occurrences().regions_in_range(start_pos, pos) {
                    selection.add_region(occ);
    }
                }
    }
/// same priority into one transform to decrease the number of transforms that
        // todo: for now only a single search query is supported however in the future

    /// Get revision id of head revision.
    #[test]
            FindAll => self.do_find_all(text),
    }
        } else {
            trace.record(sample);
/// # Examples
        );

                CategoriesT::StaticArray(c)

        if let Some(lines) = lines {
    /// Merge the new content from another Engine into this one with a CRDT merge
        ");
            Assert(1, "bdefg".to_owned()),
//! `Engine::merge`, which is more powerful but considerably more complex.
    ///
    #[serde(skip_serializing_if = "Option::is_none")]
            rebased_deletes_from_union.union(to_delete)
    #[cfg(feature = "benchmarks")]
    }
    #[test]
        match self.breaks {

    #[inline]
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
            let a_to_merge = &self.revs[base_index..];
    max: usize,
        engine.edit_rev(1, 1, first_rev, d1.clone());
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);

/// required). Mutations are generally copy-on-write, though in-place edits are
    fn gc() {
    }
        let (start, end) = iv.start_end();

}
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
// You may obtain a copy of the License at
    }
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
                        } else {
        d_builder.delete(Interval::new_closed_open(10, 36));
    fn replace_small() {
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            to_undo.insert(i+1);
    ProcessLabels { labels: String },

    pub height: f64,
        self.selection = sel;
    /// This is a regression test to ensure that session IDs are used to break
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    pub fn max_samples(&self) -> usize {
        // current recording mechanism should see:
        // A with ring, hangul, regional indicator "US"
mod tests {
            self.first_line = line - (self.height - 1);
#[derive(Clone, Debug)]
        }
    fn arr_eq(&self, other: &[&'static str]) -> bool {
            'B' => SampleEventType::DurationBegin,
        self.height
/// ```rust,ignore
        let contents = match rev.edit {
    }
        let s = String::deserialize(deserializer)?;
            }
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
            Assert(1, "cb".to_owned()),
                        deletes_from_union = deletes_from_union.union(deletes);

    /// Constructs an instantaneous sample.
        b.set_dirty(true);
                let categories = v.split(",").map(|s| s.to_string()).collect();
/// on program launch.
                    sel.add_region(region);
}
        };

use interval::Interval;
impl Engine {
            Merge(0,2), Merge(1, 2),
          F: FnOnce() -> R
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
                    let b = if bi < ai {
        Self::with_limit_bytes(1 * 1024 * 1024)
        assert_eq!(b, String::from(a));
    }
            }
        assert_eq!(correct, res);
{

#[inline]

            self.find.push(Find::new());
    fn edit_rev_undo_2() {
            MetadataType::ThreadName {..} => "thread_name",

            }
        }
            tid: sys_tid::current_tid().unwrap(),
        assert_eq!(snapshot[0].name, "process_name");

        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
}
                true => x.end,
    #[inline]
    /// Select entire buffer.

        _ => 4
    /// An iterator over the lines of a rope.

    /// An arbitrary payload to associate with the sample.  The type is
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        b if b < 0xf0 => 3,
//
            Rope::from(s1.clone()),
    /// Move the selection by the given movement. Return value is the offset of
                                priority,

                        ops.push(self.build_update_op("copy", None, seg.n));
            scroll_to: Some(0),
    /// Time complexity: O(log n)
        let (leaf, pos) = cursor.get_leaf().unwrap();
}
                            rendered_lines.push(line);
    }
                self.run_op(op);
        assert_eq!(1, expand_by[0].0.priority);
    #[test]
            duration_us: Some(ns_to_us(duration_ns)),
    }

    }
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            Assert(0, "cbd".to_owned()),

    // this is the cost contributed by the timestamp to
    }
                            }
                    };
                sel
        }
impl<'a> Iterator for ByteIter<'a> {
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
            },
/// # Performance
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    pub fn next_codepoint(&mut self) -> Option<char> {
    type Item = Cow<'a, str>;
    /// The `pristine` argument indicates whether or not the buffer has
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
                            rev_id: rev.rev_id,
        Subset::new(len)
    #[cfg(feature = "benchmarks")]
            return 0;
            Assert(0, "ab".to_owned()),
              F: FnOnce() -> R
/// # Returns
        *self = b.build();
    /// storage allocated will be limit * size_of<Sample>
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

/// # Returns
use memchr::{memrchr, memchr};
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
{
    fn lines_raw_small() {
    #[test]
/// See `trace_payload` for a more complete discussion.
    }
#[inline]

            if let GraphemeIncomplete::PreContext(_) = incomp {
        b.iter(|| {
#[inline]

                    let transformed_inserts = inserts.transform_expand(&s);

    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
        enum RopeDeltaElement_ {
            "text": &l_str,
        let search_query = match self.selection.last() {
                    if s.ends_with('\r') {

        }
        delta.serialize_field("els", &self.els)?;
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
        use self::MergeTestOp::*;
            // Go crazy
    #[test]
                },
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
                    "something", &["benchmark"],
                // sanitize input
                return None;

            }
    /// Returns the largest undo group ID used so far
            self.push_leaf(s[..splitpoint].to_owned());
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        let inserts = parse_subset_list("
            cur_len_utf16 += u.len_utf16();
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        if !selection.regions_in_range(offset, offset).is_empty() {
            as_vec.push(Sample::new_metadata(
/// A static string has the lowest overhead as no copies are necessary, roughly
        
    }
                        let mut word_cursor = WordCursor::new(text, region.max());
    /// revision, and so needs a way to get the deletion set before then.
    pub fn line_of_offset(&self, offset: usize) -> usize {
mod tests {
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
        let mut selection = self.selection.clone();

        }

                            }
        assert_eq!(snapshot[4].name, "y");
#[cfg(test)]


        let mut undone_groups = Cow::Borrowed(&self.undone_groups);

    fn bench_trace_block(b: &mut Bencher) {

fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
                pos = leaf_offset + nl.len();
    pub(crate) fn get_view_id(&self) -> ViewId {

    ///
        // insert `edits` letter "b"s in separate undo groups
        self.set_dirty(text);
    #[should_panic]
    }
    pub fn session_id(&self) -> SessionId {
///
        ];
        let new_pos = self.pos() + (end - offset);
///
        let b_revs = basic_insert_ops(inserts, 2);
                    e.edit_rev(p, u, head, delta.clone());
}
            result.push_str(chunk);
        if !self.is_enabled() {
    /// Highlights are only rendered when search dialog is open.

    }
            thread_name: Sample::thread_name(),
        (Revision {
/// between two utf8 code units that form a code point is considered invalid.

        let script = vec![
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
    }
        prev_boundary.unwrap_or(None)
            Merge(0,2), Merge(1, 2),
        let inserts = parse_subset_list("
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
    /// finer grain invalidation.
            thread_name: None,
        // since one of the two deletes was gc'd this should re-do the one that wasn't
    }
                continue;
        }
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        where S: Serializer
    {

    }
            find.unset();
        ");

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                RenderTactic::Discard => {
// distributed under the License is distributed on an "AS IS" BASIS,
    }
}
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
            "n": n,
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        let res = find_base_index(&a, &b);
    /// and currently in a debugging state.
                              start_ns: u64,
        }).unwrap_or(text.len());
    }

    #[serde(rename = "xi_payload")]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
categories_from_constant_array!(4);

    fn eq_med() {
        a.lines_all().collect::<Vec<_>>());

        use self::MergeTestOp::*;
            trace.closure_payload("y", &["test"], || {
                }
    fn rearrange_1() {
        CategoriesT::DynamicArray(c)
        let (mut new_revs, text, tombstones, deletes_from_union) = {
        let inserted = inserts.inserted_subset();
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        if self.current.is_none() {
        for _i in 0..50 {
}
            'b' => SampleEventType::AsyncStart,
        b.push('\n');
            find.set_hls_dirty(false)
            match c.edit {
        /// Just the `symmetric_difference` (XOR) of the two sets.
        let line = line as usize;
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);

        }
        let new_deletes_from_union = {
    fn line_of_offset_small() {
    pending_render: bool,
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
            Assert(2, "afc".to_owned()),
                SelectionModifier::Set => self.set_selection(text, occ),
        out.push(Revision {
    /// Highlights are only rendered when search dialog is open.
/// # Examples
//
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
/// samples are ordered chronologically for several reasons:
//! This module actually implements a mini Conflict-free Replicated Data Type
        }
    }

}


            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        /// should go before typed text.
                splitpoint -= 1;
        Self {
/// * `categories` - A static array of static strings that tags the samples in
        let trace = Trace::disabled();
        /// together. For example, an auto-indent insertion would be un-done
    fn bench_single_timestamp(b: &mut Bencher) {
    }
            // cursor
        // We somewhat arbitrarily choose the last region for setting the old-style


                                undo_group,
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
        where S: Serializer

    ///
impl CategoriesT {
        // send updated find status only if there have been changes
    fn lines_small() {
    }
        // x, a, y, b, z, c
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
        engine.edit_rev(1, 3, new_head_2, d3);
        let mut cur_len_utf8 = 0;
        Self {
    //

    fn undo_3() {
    /// Tracks whether the replacement string or replace parameters changed.
    pub fn join(&self, sep: &str) -> String {

/// ```rust
            Contents::Undo { .. } => panic!("can't merge undo yet"),
                    b.add_span(seg.n, 0, 0);
}
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
        soln.push('f');
    }
                            warn!("Failed to get string representation: {:?}", e);

    Matches
                        let un_deleted = deletes_from_union.subtract(deletes);
                el.serialize_field(end)?;

    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
/// std::mem::drop(trace_guard); // finalize explicitly if
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        // rebase the deletion to be after the inserts instead of directly on the head union

                    self.set_selection(text, selection);
use xi_trace::trace_block;
        engine.edit_rev(1, 1, first_rev, d1.clone());
        let trace = Trace::enabled(Config::default());
        // set last selection or word under current cursor as replacement string
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
        sel.collapse();
        let mut sel = self.selection.clone();
                    "something", &["benchmark"], || {},
                self.select_word(text, offset, true)
        struct RopeDelta_ {

            pid: sys_pid::current_pid(),
            None
        let text_a = Rope::from("zcbd");
                    "something", &["benchmark"], || {},
}

        let new_head = engine.get_head_rev_id().token();

            for (i, op) in script.iter().enumerate() {
            Merge(3,1), Merge(5,3),
    /// End of the region selected when drag was started.
mod tests {
    /// Get the contents of the document at a given revision number
        ).min_by_key(|x| {
        }

              F: FnOnce() -> R
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
    #[bench]
        let contents = Contents::Edit {
            self.breaks = None
        assert_eq!(snapshot[7].name, "c");
        let script = vec![
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            self.set_dirty(text);

        assert_eq!(output, String::from(engine.get_head()));
}
                s.len()
        engine.gc(&gc);
    }
/// However, anything that can be converted into a Cow string can be passed as
    #[cfg(feature = "json_payload")]
        let mut engine = Engine::new(Rope::from(TEST_STR));
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        b.set_dirty(true);

        AssertAll(String),
    }
/// * `categories` - A static array of static strings that tags the samples in
    }
// Licensed under the Apache License, Version 2.0 (the "License");
        (line, offset - self.offset_of_line(text, line))
        }
/// # Performance
                },
            client.scroll_to(self.view_id, line, col);

    current: Option<&'a str>,
    /// is optional.
                    e.edit_rev(p, u, head, delta.clone());
        self.enabled.store(true, AtomicOrdering::Relaxed);
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
            Assert(1, "bdefg".to_owned()),
    a_ids.intersection(&b_ids).cloned().collect()
        // even though the actual sampling order (from timestamp of


            }
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
            }),
pub struct SampleArgs {
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
///
    }

    fn bench_trace_instant(b: &mut Bencher) {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
#[derive(Clone, Debug, PartialEq, Eq)]
        }
        assert_eq!(a.len(), r.offset_of_line(1));
            sel.add_region(new_region);
                        } else {
        assert_eq!(TEST_STR, String::from(engine.get_head()));

                // This could be done by explicitly overriding, or by tweaking the
                out.push(DeltaOp {


        engine.edit_rev(1, 1, first_rev, build_delta_1());
            Assert(2, "b".to_owned()),
        #------
    fn next(s: &String, offset: usize) -> Option<usize> {

        if let Some(breaks) = self.breaks.as_mut() {
        a.lines_all().collect::<Vec<_>>());
        samples.sort_unstable();
        let head = engine.get_head_rev_id().token();
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    fn edit_rev_undo_3() {
            for &occurrence in find.occurrences().iter() {

/// beginning.
        }
    }
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        offset
    use test::black_box;
    }
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        self.scroll_to = Some(end);
        // stable order since the resolution of timestamps is 1us.
    #[test]

            }


            rev_id: self.next_rev_id(),
pub struct Lines<'a> {
                        },
                warn!("Usage of click is deprecated; use do_gesture");
            // I think it's a precondition that this will never be called
        } else {

        // todo: the correct Find instance needs to be updated with the new parameters
            if inserts.is_empty() {
    Matches
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {

                        }
        let mut result = json!({
        let mut a = String::new();
    replace_changed: bool,
// Copyright 2016 The xi-editor Authors.
    #[test]
    fn offset_of_line_panic() {
}
        let trace = Trace::enabled(Config::default());
    }
    }
        engine.undo([1].iter().cloned().collect());
    }
        }
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {

pub struct BaseMetric(());
                }
            let style_id = self.get_or_def_style_id(client, styles, &style);
    }
                selection.add_region(occurrence);
                } else if click_count == Some(2) {
/// ```
        assert_eq!("-###-", &subset_str);
#[derive(Clone, Copy)]
    // even worth the code complexity.
/// Find a set of revisions common to both lists
    }
            } else {
            deletes = deletes.transform_expand(&new_trans_inserts);
                    Some(chunk) => self.fragment = chunk,


        let trace = Trace::disabled();
        assert_eq!("1234567", String::from(r));
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.


            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
        &self.text
// See the License for the specific language governing permissions and
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            _ => return
use internal::find::FindStatus;
            Assert(0, "acbd".to_owned()),
            trace.instant("test_samples_pulse", &["test"]);

struct DragState {
            Assert(0, "zcbd".to_owned()),
            offset = text.len();
    }
    /// the heap, counters, etc); just the data itself.
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
    }
}
            Merge(5,4),
        where S: Serializer
            Merge(0,1),
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// # Performance
        assert_eq!(2, expand_by[1].0.priority);
        assert!(r != a_rope);
                              categories: C,
    #[bench]
///
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
impl Metric<RopeInfo> for BaseMetric {

                            if !inserts.is_empty() {
        where S: Into<StrCow>, C: Into<CategoriesT>
        // send updated find status only if there have been changes
        while offset < l.len() && !l.is_char_boundary(offset) {
        result
}

        assert_eq!(utf8_offset, 19);
    #[bench]
            Merge(3,1), Merge(5,3),
        assert!(empty == empty);
    }
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),

        (self.session1, self.session2)
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(snapshot[4].name, "z");
            //} else {
    #[inline]
        assert_eq!(snapshot[2].name, "a");
                }
    num: u32,
                                                        soft_breaks.as_mut(),
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        let new_head = engine.get_head_rev_id().token();
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let script = vec![
pub fn len_utf8_from_first_byte(b: u8) -> usize {

        let rope = Rope::from("hi\ni'm\nfour\nlines");
#[inline]
    /// Returns a tuple of a new `Revision` representing the edit based on the
                serializer.serialize_newtype_variant("DeltaElement", 1,
                         first_line: usize, last_line: usize, pristine: bool) {
                RenderTactic::Preserve => {
        engine.edit_rev(1, 1, first_rev, d1.clone());
            l[offset..].chars().next()

                    match full_path_str {
        let mut samples = self.samples_cloned_unsorted();
        } else {
        // since character was inserted after gc, editor gcs all undone things
        assert!(a != empty);
        let start = self.line_col_to_offset(text, line, 0);


        let styles = self.render_styles(client, styles, start_pos, pos,
    /// The maximum number of entries the tracing data should allow.  Total
///     something_else_expensive(result);
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
        let mut result = json!({
            // I think it's a precondition that this will never be called

        b.push('\n');
        for region in self.selection.regions_in_range(start_pos, pos) {
            AssertAll("zacpb".to_owned()),
/// Stores the tracing data.

/// `base_revs`, but modified so that they are in the same order but based on
        let mut b = String::new();
pub struct ChunkIter<'a> {
    /// terminating newline.
    }
///
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        fn new(count: usize) -> MergeTestState {
}


            if (c > start_pos && c < pos) ||
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
                           styles: &StyleMap, style_spans: &Spans<Style>,
    fn from_base_units(_: &String, in_base_units: usize) -> usize {

/// Find a set of revisions common to both lists
            Rope::from(s1.clone()),

            rendered_styles.push(1);

        // probably change as the recording internals change.
    #[serde(skip_serializing_if = "Option::is_none")]
        let line_len = MAX_LEAF + MIN_LEAF - 1;
/// # Performance
        self.set_selection(text, selection);
    AsyncStart,
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }

    TRACE.block(name, categories)
    /// Returns the byte offset corresponding to the line `line`.
        // probably change as the recording internals change.
        assert_eq!("1234567", String::from(r));
            let deletes = Subset::new(inserts.len());
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        let trace = Trace::enabled(Config::with_limit_count(11));
pub type Rope = Node<RopeInfo>;
}
            .map_or(0, |ref s| s.timestamp_us);

pub fn enable_tracing() {
                                                     "insert", node)
            Assert(1, "bdefg".to_owned()),
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
            Merge(0,1), // the merge from the whiteboard scan
            for i in 0..count {

    }
            let first_rev = engine.get_head_rev_id().token();
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
        {
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
        let revs = basic_insert_ops(inserts, 1);
        }
}
//! It enables support for full asynchronous and even peer-to-peer editing.
        let expand_by = compute_transforms(a_revs);
        ids.iter().cloned().map(|i| {
            );
/// # Performance
    #[test]
            categories: Some(categories.into()),
        }
    Instant,
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
        self.deletes_from_union = deletes_from_union;
    }

use memchr::{memrchr, memchr};
                            max_undo_so_far: rev.max_undo_so_far,
        for find in &mut self.find {
    #[cfg(feature = "benchmarks")]
                if s.ends_with('\n') {
    pub fn lines_raw_all(&self) -> LinesRaw {
            edit: Edit {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        let after_first_edit = engine.get_head_rev_id().token();
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        self.len()
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                }

                    }
            .map(|(i, _)| i)

        self.find.iter().map(|find| {
/// # Arguments
        let self_iv = Interval::new_closed_closed(0, self.len());
    /// state and new offset.
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        let line = self.line_of_offset(text, offset);
    }
            b.push('b');
        }
    /// The name of the event to be shown.
    }
                }
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
    pub fn slice(&self, start: usize, end: usize) -> Rope {
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]

            lines: 0,
        let height = self.line_of_offset(text, text.len()) + 1;
    {
            Assert(1, "ab".to_owned()),
        !self.selection.regions_in_range(offset, offset).is_empty()
    pub metadata_sort_index: Option<i32>,
fn shuffle(text: &Rope, tombstones: &Rope,
                        deletes: transformed_deletes,
        assert_eq!(snapshot[3].name, "y");

    pub fn new(initial_contents: Rope) -> Engine {
    }
    // TODO find the maximum base revision.
    }
                        gc_dels = gc_dels.transform_expand(inserts);
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
                            plan: &RenderPlan, pristine: bool)
        if self.is_enabled() {
        assert!(r != a_rope);
            undo_group: 0,
        } else {

        } else {
        let utf8_offset = 19;
            'D' => SampleEventType::ObjectDestroyed,
type StyleMap = RefCell<ThemeStyleMap>;
        let mut style_map = style_map.borrow_mut();
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        let res = find_base_index(&a, &b);
use selection::{Affinity, Selection, SelRegion};
    }

        }, to_payload("test_get_samples_nested_trace"));
        hasher.finish()
        let a = Rope::from("a\nb\n");
        --#-
            self.push_leaf(s[..splitpoint].to_owned());
                cur_all_inserts = older_all_inserts;
    /// inserted, including the ones that were later deleted, in the locations
                Edit { priority, undo_group, inserts, deletes } => {
/// stored as tracing could still be enabled but set with a limit of 0.
    fn edit_rev_simple() {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
    /// after an edit is applied, to allow batching with any plugin updates.
        if !before {
/// ```rust,ignore
        where S: serde::Serializer
                metadata_name: None,
        }
            rev_id: self.next_rev_id(),
        }
                        }
}
    }
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
            trace.closure_payload("y", &["test"], || {
pub enum SampleEventType {
    // trace_block()/trace_closure
            self.lc_shadow.edit(start, end, new_end - start);
            rev_id: self.next_rev_id(),
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    #[bench]
    }
                return false;
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    sample_limit_count: usize
    pub(crate) fn has_pending_render(&self) -> bool {
/// # Examples

    /// return if a delete is un-done or an insert is re- done.


    // partly because the reachability calculation would become more complicated (a
        }
        assert_eq!(None, a.prev_codepoint_offset(0));
#[inline]
        let line = self.line_of_offset(text, offset);
        }
            if sel_end_ix > sel_start_ix {
/// {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
    AsyncEnd,
            if let Some(pos) = pos { start_of_line.set(pos) }
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
pub struct Replace {
        tombstones = new_tombstones;
    }
        b.iter(|| {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    #[serde(default = "initial_revision_counter", skip_serializing)]
                    let (start, end) = {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
    #[test]
                    for (ei, e) in self.peers.iter().enumerate() {
impl RevId {
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        let (new_text, new_tombstones) =
    #[serde(skip_serializing)]
    Undo {
            } else if incomp == GraphemeIncomplete::PrevChunk {
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
                             client: &Client, style_spans: &Spans<Style>)
    }
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
            }
            write!(f, "Rope({:?})", String::from(self))
                self.select_line(text, offset, line, false),
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
        #------
        // a, b, y, z, c, x
    /// Determine whether `offset` lies on a codepoint boundary.
/// ```
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
            }
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
            // Snap to grapheme cluster boundary
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
categories_from_constant_array!(6);
type StyleMap = RefCell<ThemeStyleMap>;
        update
                        let new_deletes_bitxor = if gc_dels.is_empty() {
            Assert(2, "ab".to_owned()),
    #[cfg(feature = "benchmarks")]
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    /// We attempt to reduce duplicate renders by setting a small timeout
//
    priority: usize,
                    deletes: deletes.clone(),
        let inserts = parse_subset_list("
        -##-
        }
        match self.inner.next() {

// limitations under the License.

            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        },
        }
    }
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        }
                    let after = new_full_priority >= full_priority;  // should never be ==
                self.select_line(text, offset, line, true),
    /// Selects the given region and supports multi selection.
        self.selection = sel;

        cursor.next::<BaseMetric>()

        for i in ((edits-max_undos)..edits).rev() {
        }
    }
        /// Just the `symmetric_difference` (XOR) of the two sets.
    #[test]
    }
            Assert(1, "ab".to_owned()),
    }
    tombstones: Rope,
// Unless required by applicable law or agreed to in writing, software
        engine
        assert!(r == a_rope.clone() + b_rope.clone());
        Subset::new(len)
            Assert(1, "arpbzj".to_owned()),
                let (ins, _) = delta.factor();
            rebased_deletes_from_union.union(to_delete)
impl Eq for CategoriesT {}
/// rather than just this processe's samples).
            Find { chars, case_sensitive, regex, whole_words } =>
            }, to_payload("test_get_sorted_samples"));
            let splitpoint = find_leaf_split_for_merge(self);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },

        };
    }
    /// should be as unlikely to collide as two random u64s.

        assert_eq!(None, b.prev_codepoint_offset(0));
                }
                   style_spans: &Spans<Style>, line_num: usize) -> Value
    }
    pub fn enable(&self) {
        let mut hls = Vec::new();

    /// Return the line number corresponding to the byte index `offset`.
        ---#--
                        }
        let start = time::precise_time_ns();
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
                                                                0, "copy", 2)?;
impl<'a> Iterator for ByteIter<'a> {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
                break;

        // rebase the delta to be on the head union instead of the base_rev union
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
        let mut a = String::new();

        let inserted = inserts.inserted_subset();
pub fn samples_len() -> usize {
                              to_payload("test_get_samples"));
    TRACE.enable_config(config);
                        let new_deletes_bitxor = if gc_dels.is_empty() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
//! CRDT implementation techniques, because all operations are serialized in
        RopeInfo {

                    let end_of_line = match cursor.next::<LinesMetric>() {
            }
                    // fast-forward this revision over all common ones after it
        if all_samples.is_empty() {
                    }
            args: Some(SampleArgs {
    }
                metadata_name: None,

        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
                        let un_deleted = deletes_from_union.subtract(deletes);
        let b_revs = basic_insert_ops(inserts, 2);
        false
        let mut result = Cow::from("");

/// than a string that needs to be copied (or ~4.5x slower than a static string)
        self.find_changed = FindStatusChange::All;
        Engine {
            Assert(0, "acbd".to_owned()),
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    }
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
            rendered_styles.push((sel_start as isize) - ix);
#[macro_use]

    }
        }
        use self::MergeTestOp::*;
    fn next(s: &String, offset: usize) -> Option<usize> {
struct FullPriority {
}
            let inserted = inserts.inserted_subset();
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    find_changed: FindStatusChange,
        let trace = Trace::enabled(Config::default());
    }
    #[test]
        use self::MergeTestOp::*;
        engine.edit_rev(1, edits+1, head2, d2);
                    if !inserts.is_empty() {
            if region.is_caret() {
                        let (inserts, deletes) = if gc_dels.is_empty() {
            Assert(1, "acpbdj".to_owned()),
                self.drag_state = None;
            "op": op,
        self.revs.append(&mut new_revs);
                    return None;
        assert_eq!(rope.line_of_offset(15), 3);
                    base_len: delta.base_len
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
        for &(trans_priority, ref trans_inserts) in &expand_by {
    fn bench_trace_instant_disabled(b: &mut Bencher) {
    }
        a.lines_all().collect::<Vec<_>>());
    fn empty_subset_before_first_rev(&self) -> Subset {
impl MetadataType {
        let undone = self.undone_groups.contains(&undo_group);
impl PartialEq for CategoriesT {

            engine.undo(undos.clone());
    }
    #[bench]
                }
    pub fn is_enabled(&self) -> bool {
/// See `trace_block` for how the block works and `trace_payload` for a
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
            cur_len_utf8 += u.len_utf8();
        self.set_dirty(text);
}
    /// inserted, including the ones that were later deleted, in the locations
        /// Used to store a reversible difference between the old
    ///
    /// want to set the process name (if provided then sets the thread name).
                self.select_line(text, offset, line, false),
            .map(|(i, _)| i)
        // +2 for exe & thread name
        // 1 MB
    }

}
                if self.fragment.is_empty() {

            }
            }
    #[test]
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        if self.highlight_find {
/// Measured unit is utf8 code unit.
/// typing a paragraph) will be combined into a single segment in a transform
///


        assert_eq!(None, a.next_grapheme_offset(17));
        let mut samples = vec![

        ----#
            deletes: Subset::new(0),
        assert_eq!(snapshot[4].name, "z");
    /// The selection state for this view. Invariant: non-empty.
                    // We're super-aggressive about dropping these; after gc, the history
        rope.offset_of_line(5);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    TRACE.block_payload(name, categories, payload)
// Try to split at newline boundary (leaning left), if not, then split at codepoint
        let thread = std::thread::current();

                }
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        let deletes_from_union_b = parse_subset("-#---");
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
                    undo_group: i+1,

        #[derive(Serialize, Deserialize)]
            Merge(4,3),
        let end = self.line_col_to_offset(text, line + 1, 0);
        assert_eq!(trace.get_samples_count(), 0);
    }
    let inverse_tombstones_map = old_deletes_from_union.complement();

        }
use tabs::{ViewId, BufferId};
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
        self.timestamp_us.cmp(&other.timestamp_us)
        engine.edit_rev(1, 1, first_rev, build_delta_1());

                Some(offset)
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },


        }
    ///

    /// Invalidate the current selection. Note that we could be even more
    }
    ///
            None => {
                    to_payload(("some payload for the block"))));

    tombstones: Rope,
            inserts = inserts.transform_expand(trans_inserts, after);

categories_from_constant_array!(3);
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
/// revisions on top of the revisions represented by `expand_by`.
        }
        let mut to_undo = BTreeSet::new();
        }
        } else {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            thread_name: Sample::thread_name(),
            Sample::new_instant("local pid", &[], None),
            Assert(1, "acb".to_owned()),
                    }
            Merge(1,0),
    {
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    pub fn next_grapheme(&mut self) -> Option<usize> {
            edit: Edit {
        let ix = style_map.add(style);
            if i >= max_undos {
/// {
        let mut b = line_cache_shadow::Builder::new();
    }
pub struct RevId {

            let after = full_priority >= trans_priority;  // should never be ==
impl<'de> Deserialize<'de> for Rope {

        self.find_changed = FindStatusChange::Matches;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
#[inline]

    {
    /// Tracks whether find highlights should be rendered.



#[macro_use]
                payload: payload,
            for rev in &self.revs {
/// conforms to is currently determined by the feature this library is compiled
    }
                    }
            }
        let mut ix = 0;

        a.edit_str(1, 9, "era");
                        s = &s[..s.len() - 1];
    #[test]
        assert_eq!(None, a.next_codepoint_offset(10));
                }
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());

            retain_revs.insert(last.rev_id);
        revs.append(&mut revs_3);
        let first_rev = engine.get_head_rev_id().token();
            self.tid == other.tid &&
                        None

            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
        self.view_id
            match seg.tactic {
        self.revs.push(new_rev);
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        };
        next_boundary.unwrap_or(None)

    fn undo_2() {
        //for next line
        }
    /// The empty string will yield a single empty slice. In all other cases, the
        }
    /// The name to associate with the pid/tid.  Whether it's associated with
        let mut engine = Engine::new(Rope::from(TEST_STR));
        ");
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        match self.selection.len() {
        Some(pos) => minsplit + pos,
    pub metadata_name: Option<StrCow>,
///     something_else_expensive();
        assert_eq!(Some(3), a.next_grapheme_offset(0));
        self.revs.last().unwrap().max_undo_so_far
    /// Constructs an instantaneous sample.
        use self::MergeTestOp::*;
///
        false

                        gc_dels = new_gc_dels;
///
        let (mut l, mut offset) = self.get_leaf()?;
        }
        plan.request_lines(first_line, last_line);

    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
/// # Arguments
    /// Time complexity: O(log n)

        self.drag_state = None;
        let d = engine.delta_rev_head(after_first_edit);
/// Find a set of revisions common to both lists
    TRACE.block(name, categories)
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
                        if n_skip > 0 {
                self.select_word(text, offset, true)
            Assert(0, "acrbd".to_owned()),
        Some(self.cmp(other))
    #[bench]
        let mut cursor = Cursor::new(self, offset);
                },
        match *self {
        peers: Vec<Engine>,
    /// Returns the regions of the current selection.
                tid));
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        let correct = parse_subset_list("
    }
// limitations under the License.
    #[serde(deserialize_with = "deserialize_event_type")]
        let mut result = String::new();
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
                                                    self.size.width));
        self.height = last - first;
        self.rev_id_counter += 1;
    #[cfg(feature = "benchmarks")]
        assert_eq!(utf8_offset, 13);
        let a = Rope::from("a\r\nb\r\nc");
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
                            edit: Edit {
                    }
                    if seg.validity == line_cache_shadow::ALL_VALID {
                   r.lines_all().collect::<Vec<_>>());
                println!("running {:?} at index {}", op, i);
        self.find_changed = FindStatusChange::Matches;
    }
    let mut out = Vec::new();
    // Note: this function would need some work to handle retaining arbitrary revisions,
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        where S: Into<StrCow>, C: Into<CategoriesT>
            rendered_styles.push((iv.start() as isize) - ix);
        assert_eq!(rope.offset_of_line(4), rope.len());
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        self.tombstones = tombstones;
        } else {
use xi_rope::tree::Cursor;
#[derive(Clone, Copy)]

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        self.set_selection(text, SelRegion::caret(offset));
            self.wrap_col = WrapWidth::Bytes(wrap_col);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        serializer.serialize_str(&String::from(self))
impl TreeBuilder<RopeInfo> {
                let offset = self.selection[0].start;
        peers: Vec<Engine>,
    /// Selects the next find match.
        samples[0].timestamp_us = 10;
        let first_rev = engine.get_head_rev_id().token();
    fn merge_simple_delete_2() {
/// let b = a.slice(1, 9);
        assert_eq!(Some(3), a.next_codepoint_offset(1));
                              to_payload("test_get_samples"));
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
                _ => { }
    }
        in_base_units
                        &mut rest[bi - ai - 1]
    }
    }
    #[cfg(feature = "benchmarks")]
        self.tombstones = tombstones;
        d_builder.delete(Interval::new_closed_open(10, 36));
        }
            Merge(1,0),
        let snapshot = trace.samples_cloned_unsorted();
    #[test]
            Scroll(range) => self.set_scroll(range.first, range.last),
        in_measured_units
                    } else {
                    undo_group: i+1,
    pub pid: u64,
            Merge(1,0),
        }
        let tombstones_b = Rope::from("a");
        assert_eq!(snapshot[4].name, "y");
    FlowStart,
                l = nl;
            MergeTestState { peers }
            }
            self.lc_shadow.edit(start, end, new_end - start);
                                gc_dels = gc_dels.transform_union(inserts);
        let mut to_undo = BTreeSet::new();
                true => x.end,
    }
    }
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
    ObjectCreated,
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
        self.find.clear();

        for find in self.find.iter() {
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        let closest_occurrence = self.find.iter().flat_map(|x|
    }
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
        // if we have active find highlights, we don't collapse selections
        thread.name().map(|ref s| to_cow_str(s.to_string()))
    }
        let mut delta = serializer.serialize_struct("Delta", 2)?;
}
    }
        ------#
        expand_by = next_expand_by;
//


    // TODO: maybe refactor this API to take a toggle set
    ///
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            Merge(2,0),
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        let replacement = match self.selection.last() {
#[derive(Copy, Clone)]

///

        assert_eq!(snapshot[7].name, "z");
            SelectAll => self.select_all(text),
}
        engine.undo([1].iter().cloned().collect());
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
use std::sync::Mutex;
        let inserts = parse_subset_list("

        }
            },
    }
    /// of the chunks is indeterminate but for large strings will generally be

                    text.slice_to_string(region.min(), region.max())
        self.set_selection_for_edit(text, new_sel);
        cursor.next_grapheme()

}
        match self.inner.next() {
}
    }
        let (start, end) = {
}
/// A rope data structure.
    DurationEnd,
#![cfg_attr(feature = "cargo-clippy", allow(
        all_samples.reset_limit(0);
                None => {
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
                    if let Some(new_gc_dels) = new_gc_dels {
                        b.add_span(seg.n, 0, 0);
    } else {
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        if (b as i8) >= -0x40 {

            max_undo_so_far: 0,
                WrapWidth::Width(px) =>
            // On the next step we want things in expand_by to have op in the context
                } else {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
        assert_eq!(snapshot[7].name, "z");
                        let n_skip = seg.their_line_num - line_num;
}
    }
                last.1 = last.1.transform_union(&inserts);
//
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    {
    pub(crate) fn get_replace(&self) -> Option<Replace> {
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
        ---#--
                                        &selections, &hls, style_spans);
        let max_line = self.measure::<LinesMetric>() + 1;
            engine.undo(to_undo.clone());
    #[cfg(feature = "benchmarks")]
// Low level functions
        }
    #[bench]
            event_type: event_type,
        let b = Rope::from("b");
/// The result of the closure.

    ///
    }
                            }
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        let mut result = String::new();

    }

    TRACE.block_payload(name, categories, payload)
    }
                None => {
    /// # Panics


                            None
            None
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        let end = time::precise_time_ns();
        let a = Rope::from("\n");
///
    #[cfg(feature = "benchmarks")]
    type L = String;

        let b = a.slice(2, 4);

/// Boundary is trailing and determined by a newline char.
    fn replace_small() {
        self.pending_render = pending


///
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
            return None;
        }

        let cur_deletes_from_union = &self.deletes_from_union;

    }
            timestamp_us: ns_to_us(time::precise_time_ns()),
                if s.ends_with('\n') {
    fn next(&mut self) -> Option<&'a str> {
        samples.sort();
        }
    }
            }
    /// The return type is a `Cow<str>`, and in most cases the lines are slices

///
    }
///
        }
                    };
                    Some(chunk) => self.fragment = chunk,

        };
    }
    fn prev(s: &String, offset: usize) -> Option<usize> {
        leaf.as_bytes()[pos]
    }
    }
        self.sample_limit_count
    fn delta_rev_head_3() {
        use self::MergeTestOp::*;
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
/// let a = Rope::from("hello ");
                peers.push(peer);
type StyleMap = RefCell<ThemeStyleMap>;
// The advantage of using a session ID over random numbers is that it can be
}

        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
        assert_eq!(1, expand_by[0].0.priority);
        Self::with_limit_bytes(1 * 1024 * 1024)
    where D: serde::Deserializer<'de> {
    fn to_payload(value: &'static str) -> &'static str {
        assert_eq!(1, b.line_of_offset(2));
// See the License for the specific language governing permissions and
                        priority, undo_group,
use xi_trace::trace_block;

    }
    }
enum Contents {
/// on program launch.
use std::ops::Range;

    }
        text = new_text;

    /// Select entire buffer.
}
        }
    #[bench]

    type Output = Rope;

            AssertMaxUndoSoFar(1,3),


        // likely be improved.
    }
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
{
/// See `trace_payload` for a more complete discussion.
        for _i in 0..50 {
        enum RopeDeltaElement_ {
    #[test]
    fn eq(&self, other: &CategoriesT) -> bool {
            }

    }
/// Represents a transform from one rope to another.
pub type TracePayloadT = StrCow;
        assert_eq!(Some(9), b.next_codepoint_offset(5));

    fn eq(&self, other: &Sample) -> bool {
                        ops.push(self.build_update_op("copy", None, seg.n));
    use std::collections::BTreeSet;
        let a = Rope::from("a\nb\nc");
    }
        b.push(rhs);
        let rev = Revision {
        self.drag_state = None;
            None => text.line_of_offset(offset)
                c.provide_context(&pl, self.pos() - poffset);

    }
        tombstones = new_tombstones;
    /// This function does not perform any scrolling.
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
    out
    // maybe explore grabbing leaf? would require api in tree
            b.push('b');

    #[serde(rename = "ts")]
    fn identity() -> Self {
            self.idx = 0;

        assert_eq!(snapshot[4].name, "y");
        // We could probably reduce the cloning of selections by being clever.
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            find.set_hls_dirty(false)

        assert_eq!(rope.line_of_offset(0), 0);

            true => self.selection.clone(),

                        let (inserts, deletes) = if gc_dels.is_empty() {
    {
/// ```rust,ignore
    }
        self.rev_id_counter += 1;
    /// Create a new Engine with a single edit that inserts `initial_contents`
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
///
///
                        MetadataType::ThreadName { name: thread_name.to_string() },
                s.len()
            Merge(1,0),
        let end = time::precise_time_ns();

                            }

use std::collections::hash_map::DefaultHasher;
{
        } else {
}
    /// Note: unlike movement based selection, this does not scroll.
            Assert(0, "acrbd".to_owned()),
            tombstones: Rope::default(),
#[inline]
use xi_rope::spans::Spans;
    /// recomputing line wraps.
/// let b = Rope::from("world");

        Self {
        if offset == 0 {
    where D: serde::Deserializer<'de> {
        // 1 MB
///
            }
            }, to_payload("test_get_sorted_samples"));
        }
        if s.len() <= MAX_LEAF {
    #[test]
            replace_changed: false,
    fn bench_trace_block(b: &mut Bencher) {
            }
        }
    }
        assert_eq!(utf16_units, 17);
        engine.edit_rev(1, 1, first_rev, d1.clone());
    fn invalidate_selection(&mut self, text: &Rope) {

        assert_eq!(1, r.line_of_offset(a.len()));
        // is the new edit in an undo group that was already undone due to concurrency?
            MetadataType::ProcessLabels {..} => (None, None)
mod fixed_lifo_deque;
enum WrapWidth {
use std::sync::Mutex;
        ");

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                              payload: Option<TracePayloadT>,
        Ok(exe_name) => {
                    text.slice_to_string(start, end)
        assert_eq!(snapshot[0].name, "process_name");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },

            if self[i] != other[i] {
            self.first_line = line - (self.height - 1);
/// Disable tracing.  This clears all trace data (& frees the memory).
            CategoriesT::DynamicArray(ref self_arr) => {
        let revs = basic_insert_ops(inserts, 1);
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
        where S: Serializer
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
    }
                engine.gc(&to_gc)
    }

/// # Returns
            Some(region) => {
        }
categories_from_constant_array!(9);
    }
        }
        }
        let cursor = Cursor::new(self, offset);
        Self {
    #[test]
    /// This is a `Subset` of the "union string" representing the characters
    /// Return the offset of the codepoint after `offset`.
        len

            Assert(2, "ab".to_owned()),
use xi_rope::interval::Interval;
    fn gc() {
    fn next(s: &String, offset: usize) -> Option<usize> {
// Additional APIs custom to strings
        s.is_char_boundary(offset)
    /// Return the line number corresponding to the byte index `offset`.
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
                // TODO could probably be more efficient by avoiding shuffling from head every time
                    }
    find_changed: FindStatusChange,
    ObjectSnapshot,
        if offset >= next_line_offset {

        (line, offset - self.offset_of_line(text, line))
    }

        self.sample_limit_count
/// Returns all the samples collected so far ordered chronologically by
    edit: Contents,
    }
        use self::MergeTestOp::*;
/// beginning.
        }
impl Serialize for Rope {
                    self.do_gesture(text, line, column, GestureType::LineSelect)
    fn bench_trace_block_disabled(b: &mut Bencher) {
        // invert the changes to deletes_from_union starting in the present and working backwards
pub type SessionId = (u64, u32);
            wrap_col: WrapWidth::None,

    fn gc() {
            Assert(1, "acb".to_owned()),
    }
    }
        }
// Licensed under the Apache License, Version 2.0 (the "License");

                }
                SelectionModifier::Add => {
impl StringArrayEq<[&'static str]> for Vec<String> {
    #[test]
                self.set_selection_raw(text, selection);
                    priority, undo_group,
    Edit {
                    els: delta.els.drain(..)
            } else if incomp == GraphemeIncomplete::PrevChunk {
            Gesture { line, col, ty } =>
/// # Arguments
        let mut cursor = Cursor::new(self, offset);
                self.start_drag(offset, offset, offset);

#[cfg(feature = "json_payload")]
            for i in 0..count {
    {


        -----#
            let horiz = None;
    }
        ---#--
        if self.highlight_find {
        where S: Into<StrCow>, C: Into<CategoriesT>
#[derive(Clone, Copy)]
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
        // interior of first line should be first line
    move_delta.apply(tombstones)
        let (mut l, mut offset) = self.get_leaf()?;
    /// unsaved changes.
    DurationEnd,
        let trace = Trace::disabled();
            cur_len_utf16 += u.len_utf16();
                match *other {
/// assert_eq!("ello wor", String::from(&b));
    rev_id: RevId,
            let pos = bc.next::<BreaksMetric>();

    }
    /// The maximum number of entries the tracing data should allow.  Total

        let end = self.line_col_to_offset(text, line + 1, 0);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
/// See `trace_block` for how the block works and `trace_payload` for a

            self.first_line = line - (self.height - 1);
        self.lc_shadow = b.build();
        let utf8_offset = 9;
            // I think it's a precondition that this will never be called
#[derive(Clone, Debug, PartialEq, Eq)]
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
// ======== Generic helpers
        }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    }
                (drag_state.max, min(offset, drag_state.min))
            }
    pub args: Option<SampleArgs>
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    #[test]
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
        let params = json!({
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
    sample: Option<Sample>,
        if self.find.is_empty() {
            Assert(1, "apb".to_owned()),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        }
        engine.undo([].iter().cloned().collect());
        let subset_str = format!("{:#?}", expand_by[1].1);
        /// revision that were deleted by this revision.
            "ops": ops,
        tombstones = new_tombstones;
            let c = i.to_string() + "\n";
        //for next line
                    inserts: ins,
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
            for find in self.find.iter() {
//


    fn bench_get_pid(b: &mut Bencher) {

                }
///
    #[serde(rename = "dur")]
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        let mut leaf_offset = pos - offset;
    /// point. Used to optimize undo to not look further back.
            duration_us: None,
        let (leaf, pos) = cursor.get_leaf().unwrap();
                                inserts,
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
    /// than this will panic.
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
    /// Selects all find matches.
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
            self.first_line = line;
    fn measure(_: &RopeInfo, len: usize) -> usize {
        where S: Into<StrCow>, C: Into<CategoriesT>

        });
    // TODO make this faster somehow?
        #---
        // This might be an over-specified test as it will
        trace.instant("3", &["test"]);
                let mut peer = Engine::new(Rope::from(""));
use std::borrow::Cow;
    /// The largest undo group number of any edit in the history up to this
                rev_id: basic_rev(i+1),
        let mut hls = Vec::new();
            let splitpoint = if s.len() > MAX_LEAF {
        assert_eq!(snapshot[4].name, "y");
        --#--
    /// You could construct the "union string" from `text`, `tombstones` and
        let mut cur_len_utf16 = 0;
    }
    }
    /// Get previous codepoint before cursor position, and advance cursor backwards.
    pub fn prev_grapheme(&mut self) -> Option<usize> {
        struct RopeDelta_ {
        } else {
/// fn something_expensive() -> u32 {
        }
        let delta = Delta::synthesize(&self.tombstones,
            }
        let rearranged = rearrange(&revs, &base, 7);
use std::cell::RefCell;
        engine.undo([1].iter().cloned().collect());
        assert_eq!("zcpbdj", String::from(&text_2));
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
    TRACE.closure_payload(name, categories, closure, payload)
                let mut peer = Engine::new(Rope::from(""));
    #[test]
        } else {
    fn bench_trace_instant(b: &mut Bencher) {
                selection.add_region(SelRegion::caret(region.max()));
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),

/// Find a set of revisions common to both lists
        if !new_inserts.is_empty() {
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
        memchr(b'\n', &s.as_bytes()[offset..])
        b.add_span(height, 0, 0);
            Merge(4,3),
        if s.len() <= MAX_LEAF {
    }
/// supported as an optimization when only one reference exists, making the
        let first_rev = &self.revs.first().unwrap();
        let b = a.slice(2, 4);
            };
            update["lines"] = json!(lines);
        ");
        let mut b = TreeBuilder::new();
        engine.gc(&to_undo);
            'e' => SampleEventType::AsyncEnd,
        // multiple queries; select closest occurrence
    }
            let _ = trace.block("test_samples_block", &["test"]);
        count_newlines(&s[..in_base_units])
                last.1 = last.1.transform_union(&inserts);
categories_from_constant_array!(7);
/// Enable tracing with a specific configuration. Tracing is disabled initially
        MergeTestState::new(3).run_script(&script[..]);
}
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
            event_type: event_type,

    /// controlled by features (default string).
            trace.closure_payload("y", &["test"], || {
/// returned value is dropped.  `trace_closure` may be prettier to read.
/// See `trace_block` for how the block works and `trace_payload` for a
            rebased_deletes_from_union.union(to_delete)

    }
use interval::Interval;

            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        if !gc_dels.is_empty() {
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
    }

    /// return if a delete is un-done or an insert is re- done.
        assert_eq!(utf16_units, 11);
        assert_eq!(Some(2), b.next_codepoint_offset(0));

pub type SessionId = (u64, u32);
    // How should we count "column"? Valid choices include:
    fn measure(info: &RopeInfo, _: usize) -> usize {
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
    }

    //TODO: implement iter_chunks using ranges and delete this
            trace.closure_payload("y", &["test"], || {

        }
    {
    deletes: Subset,
            while !s.is_char_boundary(offset - len) {
            Assert(5, "zacpb".to_owned()),
        self.scroll_to_cursor(text);
                return false;
        /// The subset of the characters of the union string from after this
    }
    }
                    };
            fragment: ""

        if self.idx <= self.current.unwrap().len() {
            pos += 1;
///
                }
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            Merge(1,0),
                }
    }
        let inserts_3 = parse_subset_list("
    }
        }
    }
    }
/// samples are ordered chronologically for several reasons:
            self.next::<BaseMetric>();
                } else if click_count == Some(2) {
        match self {
        let is_base = base_revs.contains(&rev.rev_id);
/// revisions on top of the revisions represented by `expand_by`.
                },
            FindNext { wrap_around, allow_same, modify_selection } =>
        -> SampleGuard
    /// than this will panic.
    #[test]
    Matches
                warn!("Usage of click is deprecated; use do_gesture");
            Merge(2,1),
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
            Assert(2, "ab".to_owned()),
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,


        }
///
    fn undo_4() {
    /// fine-grained in the case of multiple cursors, but we also want this
}
                std::thread::sleep(std::time::Duration::new(0, 1000));
                              to_payload("test_get_samples"));

    }
            Assert(1, "pbj".to_owned()),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    /// Start of the region selected when drag was started (region is
        assert_eq!(trace.get_samples_limit(), 11);
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
                self.set(pos);

    size: Size,
    }
        }
            find.set_hls_dirty(false)
        LinesRaw {
}
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                    }
            utf16_count += 1;

///
    pub fn prev_codepoint(&mut self) -> Option<char> {
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
    // for simplicity.
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
        assert_eq!(0, a.line_of_offset(1));
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        let (start, end) = iv.start_end();
        assert_eq!(1, b.line_of_offset(2));
    #[test]


    /// None of the find parameters or number of matches changed.

extern crate time;
        first_line..(last_line + 1)
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
        let snapshot = trace.samples_cloned_unsorted();
    ///
                },
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
    pub fn select_all(&mut self, text: &Rope) {
    #[test]
    /// ties in edit priorities. Otherwise the results may be inconsistent.
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        }
                }

    #[cfg(feature = "benchmarks")]
            } else {
        match *self {
        ];
            selection.delete_range(offset, offset, true);
            l[offset..].chars().next()
            GestureType::LineSelect =>
        }
    fn gc_scenario(edits: usize, max_undos: usize) {
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
    /// Generally racy since the underlying storage might be mutated in a separate thread.
/// monotonically increasing single global integer (when tracing) per creation
    fn merge_whiteboard() {
    /// 96 bits which is more than sufficient for this to never happen.
    /// via process_name/thread_name respectively.
    #[allow(dead_code)]
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    priority: usize,
#[derive(Copy, Clone)]
        assert_eq!(utf16_units, 17);
        engine.undo([1].iter().cloned().collect());
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            }
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    }
            Assert(0, "ab".to_owned()),

/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        self.find_changed = FindStatusChange::All;
        let self_iv = Interval::new_closed_closed(0, self.len());

        value
    #[test]
            Merge(0,1),
        assert_eq!(a.len(), r.offset_of_line(1));
        let first_line = self.line_of_offset(text, start);
    }
        result
        let (mut l, mut offset) = self.get_leaf()?;
                        };
use std::cmp::{min,max};
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        if let Some(last) = self.revs.last() {
pub fn samples_len() -> usize {
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
    TRACE.closure_payload(name, categories, closure, payload)
            Rope::concat(
    }
            let new_region = region_movement(movement, region, self,
            );
    }
            splitpoint
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
        next_expand_by = Vec::with_capacity(expand_by.len());
        b if b < 0x80 => 1,
                        deletes_from_union = deletes_from_union.transform_union(inserts);
}
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
#[must_use]
        }
        cursor.next_grapheme()
    fn eq(&self, other: &CategoriesT) -> bool {
#[cfg(feature = "json_payload")]
        let a = Rope::from("a\nb\nc");

    }
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
            let splitpoint = if s.len() > MAX_LEAF {
impl RevId {
            let matches_only = self.find_changed == FindStatusChange::Matches;

        count_newlines(&s[..in_base_units])
    /// Selects an entire line and supports multi selection.
    /// Determines whether the offset is in any selection (counting carets and
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
// distributed under the License is distributed on an "AS IS" BASIS,
    #[derive(Clone, Debug)]
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        assert_eq!(soln, String::from(engine.get_head()));
//! conceptually represents the current text and all edit history for that
        for &region in self.sel_regions() {
    fn lines_raw_small() {
        self.enabled.store(false, AtomicOrdering::Relaxed);
    }
        Self {

    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            // with offset == 0, but be defensive.
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
use std::string::ParseError;
    /// fine-grained in the case of multiple cursors, but we also want this
/// A size, in pixel units (not display pixels).
        assert!(r != a_rope);
}
                    }
                    RopeDeltaElement_::Insert(s) =>
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
                Some(i) => {
                selections.push((sel_start_ix, sel_end_ix));
impl Metric<RopeInfo> for LinesMetric {
            // with offset == s.len(), but be defensive.
        self.set_selection(text, new_sel);

    /// # Panics
                    Some(Contents::Edit {
/// Stores the tracing data.
    #[test]
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
    fn merge_session_priorities() {
            } else {
                SelRegion::new(start, end)

    }
    #[test]
        assert_eq!(1, r.line_of_offset(a.len()));
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
    }
    #[test]

    }
            GotoLine { line } => self.goto_line(text, line),
        self.revs.last().unwrap().max_undo_so_far
                // merge logic.
            return Vec::with_capacity(0);
        self.revs.push(new_rev);
            MergeTestState { peers }
                        },
    fn merge_priorities() {

            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    pub fn max_size_in_bytes(&self) -> usize {

            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
    }
    pub fn empty() -> Engine {
    }
    #[test]
        /// revision that were added by this revision.
        let self_iv = Interval::new_closed_closed(0, self.len());
    #[cfg(feature = "json_payload")]
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
                } else {
        let trace = Trace::enabled(Config::with_limit_count(20));
        if all_samples.is_empty() {

                c.provide_context(&pl, self.pos() - poffset);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                    let full_path = exe_name.into_os_string();
    #[test]
                self.highlight_find = visible;
    /// should be constructed via SampleGuard.
        deletes_from_union
    /// Generate line breaks based on width measurement. Currently batch-mode,
                priority, undo_group, deletes,
            },
    #[cfg(feature = "benchmarks")]
    }
            inserts = inserts.transform_expand(trans_inserts, after);
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
            HighlightFind { visible } => {

    }
    #[test]
/// an argument.
    fn test_ser_de() {
                            edit: Undo {
impl PartialEq for Sample {
    }
{
fn find_leaf_split_for_merge(s: &str) -> usize {
        for &(sel_start, sel_end) in sel {
            // Snap to grapheme cluster boundary

            let matches_only = self.find_changed == FindStatusChange::Matches;
//

        let a = Rope::from("a\nb\n");
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        assert_eq!(0, a.lines_all().count());

categories_from_constant_array!(6);
    use std::collections::BTreeSet;
            self.lc_shadow.edit(start, end, new_end - start);
}
          F: FnOnce() -> R
        }
            session: default_session(),
                        let mut rendered_lines = Vec::new();
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
            return Vec::with_capacity(0);
    fn from(r: &Rope) -> String {
            trace.closure("something", &[], || ());
    /// If the cursor is at the end of the rope, returns the empty string.

    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
    use super::*;
        }
}
        Cow::from(a.into_owned() + b)
    }
        assert_tokens(&rope, &[
    /// height of visible portion
        let mut engine = Engine::empty();
    }
            rendered_styles.push((sel_start as isize) - ix);
        d_builder.build()
        #[derive(Serialize, Deserialize)]
            //if self.cursor.is_boundary::<BaseMetric>() {
            let mut word_cursor = WordCursor::new(text, offset);
    }
        let utf8_offset = 19;
    match b {
        deletes_bitxor: Subset,
        let deletes_from_union = Subset::new(0);

        }
            next_boundary = c.next_boundary(&l, leaf_offset);
    /// Merge the new content from another Engine into this one with a CRDT merge
        let (start, end) = {
/// # Performance
        }
        self.invalidate_selection(text);
categories_from_constant_array!(3);
    }
/// # Performance

                                                    style_spans, client,

            Assert(0, "acpbdj".to_owned()),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                        let offset = self.offset_of_line(text, start_line);
        if self.find.is_empty() {
        ---#--

        where D: Deserializer<'de>,
    /// fine-grained in the case of multiple cursors, but we also want this
    inner: LinesRaw<'a>
    ///
    }
        assert_eq!(1, b.line_of_offset(2));
    inner: ChunkIter<'a>,
}
#![cfg_attr(feature = "benchmarks", feature(test))]
            max_undo_so_far: 0,

}
    #[cfg(feature = "benchmarks")]
                    linewrap::rewrap_width(breaks, text, width_cache,
        assert_eq!(1, r.line_of_offset(a.len()));
        if last_col == 0 && last_line > first_line {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    #[test]
            Assert(1, "arpbj".to_owned()),
        let trace = Trace::enabled(Config::with_limit_count(10));

/// Represents the current state of a document and all of its history
use bytecount;

    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {

            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    pub metadata_sort_index: Option<i32>,
    #[test]
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        guard
    }
    pub payload: Option<TracePayloadT>,
                    Some(Contents::Edit {
            view_id: view_id,

            self.wrap_col = WrapWidth::Bytes(wrap_col);
    where S: Into<StrCow>, C: Into<CategoriesT>
        use self::MergeTestOp::*;
        }
    }
        let snapshot = trace.samples_cloned_unsorted();
        let end = time::precise_time_ns();
        self.replace.clone()

        assert_eq!(snapshot[8].name, "x");
        assert_eq!(correct, rearranged_inserts);

    }
            Assert(1, "arpb".to_owned()),
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
// limitations under the License.
    }
        trace.record(guard.sample.as_ref().unwrap().clone());
        }
    #[cfg(feature = "benchmarks")]
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    }
    ///



        MergeTestState::new(3).run_script(&script[..]);
    pub name: StrCow,
                    filename.to_str().map(|s| s.to_string())
    Edit {
    pub fn sel_regions(&self) -> &[SelRegion] {
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {

        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
            Merge(2,1),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
/// revisions on top of the revisions represented by `expand_by`.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
        -##-
            AssertAll("zacpb".to_owned()),
    fn append_large() {
///
#[derive(Clone, Debug, PartialEq, Eq)]

    pub event_type: SampleEventType,
///     0


    }

        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
/// are shared.
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    }
        Self {

    utf16_size: usize,
}
    pub fn is_enabled(&self) -> bool {
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        assert_eq!(trace.is_enabled(), true);
            a.push('a');

        // selection state, and for scrolling it into view if needed. This choice can
            Some(region) => {
            }),
        }
        a.push('\n');
    /// Garbage collection means undo can sometimes need to replay the very first
    }

                   r.lines_all().collect::<Vec<_>>());

/// Boundary is atomic and determined by codepoint boundary.
    }
enum WrapWidth {
use fixed_lifo_deque::FixedLifoDeque;
            self.record(Sample::new_duration(
        deletes: Subset,
    // allowing us to use the same method to insert the text into the tombstones.
    #[test]
            None => None
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        a.lines_all().collect::<Vec<_>>());
    }
    }
        let a = Rope::from("a\nb\n");
    pub fn iter_chunks_all(&self) -> ChunkIter {
            type Value = CategoriesT;
    for rev in revs.iter().rev() {
            end,
                    } else {
    out.as_mut_slice().reverse();
}
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
        Ok(Delta::from(d))


        }
        let sample_name = to_cow_str(meta.sample_name());
        if self.len() <= MAX_LEAF {
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let inserts = parse_subset_list("
    /// Offset of the point where the drag started.
        };
        engine.undo([].iter().cloned().collect());
        }
        for _ in 0..line_len {
        match self.breaks {
    }
/// Usage of static strings is encouraged for best performance to avoid copies.
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
        let params = json!({
    fn merge_idempotent() {
            // if using breaks update cursor
    #[test]

            let c = region.end;
    #[test]
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
            cursor: Cursor::new(self, start),
///
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
        }

use xi_rope::tree::Cursor;

        let region = SelRegion::caret(offset);
        engine.undo([1,2].iter().cloned().collect());
/// of Sample that determines order.
    // allowing us to use the same method to insert the text into the tombstones.
    }
        *self = b.build();
            Some((l, off)) => (l, off),
                        }
use word_boundaries::WordCursor;
impl<'a> From<&'a Rope> for String {
    #[serde(rename = "cat")]
        } else {
    fn can_fragment() -> bool { true }
                    return None;
        Ok(Delta::from(d))

        rope.line_of_offset(20);
        if self.is_enabled() {
        }
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
        all_samples.push_back(sample);
            height: 10,
    fn line_of_offset_small() {
                        let mut line_cursor = Cursor::new(text, offset);
        assert_eq!("-###-", &subset_str);
    #[bench]
            Assert(1, "afc".to_owned()),
            &self.deletes_from_union, &old_deletes_from_union);

    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
}
            splitpoint
            self.name == other.name &&
            None
        assert_eq!(Some(3), a.next_codepoint_offset(1));

        assert_eq!(rope.offset_of_line(1), 3);

            categories: None,
        if initial_contents.len() > 0 {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

        Assert(usize, String),
        let a = Rope::from("a\nb\nc");
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
    /// Time complexity: technically O(n log n), but the constant factor is so
                    // fast-forward this revision over all common ones after it
            }
        ");
        self.buffer_id
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
/// revisions on top of the revisions represented by `expand_by`.
    /// Starts a drag operation.
            }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
        fn run_op(&mut self, op: &MergeTestOp) {
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        ];
                el.end()
            Assert(1, "arpbj".to_owned()),

                Some(Cow::from(s))
                        Ok(s) => Some(s),
                cursors.push(c - start_pos);
//! info.

    // Note: this function would need some work to handle retaining arbitrary revisions,
        r.slice_to_string(0, r.len())

use std::hash::{Hash, Hasher};
        Cow::from(a.into_owned() + b)
    #[test]
        trace.closure_payload("z", &["test"], || {},
        let s = String::deserialize(deserializer)?;
            base_rev: RevToken, delta: Delta<RopeInfo>) {
        let (metadata_name, sort_index) = meta.consume();
    #[test]
                }


        engine.edit_rev(1, 2, new_head, d2);

            't' => SampleEventType::FlowInstant,
            Merge(1,0),
            deletes = deletes.transform_expand(&new_trans_inserts);
        } else {

    /// Highlights are only rendered when search dialog is open.
        where S: Into<StrCow>, C: Into<CategoriesT>
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
/// of Sample that determines order.
    #[test]
        where S: serde::Serializer
    /// Find parameters and number of matches changed.
categories_from_constant_array!(1);
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        self.invalidate_selection(text);

    /// revision, and so needs a way to get the deletion set before then.
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
            }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    /// Returns a u64 that will be equal for equivalent revision IDs and
}
use std::ops::Add;
    {
        let first_rev = engine.get_head_rev_id().token();
                    // of which undos were used to compute deletes_from_union in edits may be lost.

}
}

    #[bench]
/// version of Ropes, and if there are many copies of similar strings, the common parts
        let b = a.slice(2, 4);
            SampleEventType::AsyncStart => 'b',
    }
        for find in self.find.iter() {
            lines: count_newlines(s),
        // todo: for now only a single search query is supported however in the future
type StyleMap = RefCell<ThemeStyleMap>;
            Assert(0, "acrbd".to_owned()),
    impl MergeTestState {
            if self.fragment.is_empty() {
            Some(region) => {
    }
use delta::{Delta, DeltaElement};
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    }
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        for i in 0..5_000 {
        min
    pub fn disable(&self) {
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
                    let (start, end) = {
            SampleGuard::new_disabled()
        self.rev_id_counter += 1;
                }
    }
                self.do_gesture(text, line, col, ty),
    /// The selection state for this view. Invariant: non-empty.
            Scroll(range) => self.set_scroll(range.first, range.last),
            }
    /// part of the initial contents since any two `Engine`s need a common
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
    lines: usize,
        }
    pub fn token(&self) -> RevToken {
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        a.edit_str(1, 9, "era");

        result
    /// The state for replacing matches for this view.
        ------#
    /// should be constructed via SampleGuard.

///
                selection.add_region(occurrence);
    }
        self.revs.iter().enumerate().rev()
}

        let b = a.slice(1, 10);
    }
        deletes_bitxor: Subset,
            match exe_name.clone().file_name() {
        assert_eq!("zcpbdj", String::from(&text_2));
        assert_eq!("#---#--", &subset_str);
        let initial_rev = engine.get_head_rev_id().token();
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
        assert_eq!(snapshot.len(), 9);
        let sample_name = to_cow_str(meta.sample_name());


        ---#--
        self.lc_shadow = b.build();
        /// should go before typed text.
        assert_eq!(snapshot[0].name, "process_name");
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
    identity_op,
    /// Tests that merging again when there are no new revisions does nothing
        assert_eq!(snapshot.len(), 5);
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    }
            cursor: Cursor::new(self, start),
        if self.find.is_empty() {
            // d-expand by other
            Cancel => self.do_cancel(text),
    }
/// 2. Performance optimizations might have per-thread buffers.  Keeping all

        self.text = new_text;

        let expand_by = compute_transforms(a_revs);
    }
/// Atomicity is implicit, putting the offset
pub struct Trace {
impl<'de> Deserialize<'de> for Rope {
    #[test]

        b.iter(|| {
        self.set_selection_raw(text, selection);
    /// New offset to be scrolled into position after an edit.
    }
        let new_head = engine.get_head_rev_id().token();
///     something_else_expensive();
    #[test]

        let expand_by = compute_transforms(revs);
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
        assert_eq!(snapshot[6].name, "z");
/// rather than just this processe's samples).
        }
            Insert(String),

    fn merge_idempotent() {
    #[test]
        revs.append(&mut revs_2);
                },
        for i in 0..5_000 {
struct DeltaOp {
                warn!("Usage of click is deprecated; use do_gesture");
    #[serde(rename = "ts")]
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        }
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
        // probably change as the recording internals change.
    pub fn byte_at(&self, offset: usize) -> u8 {
    for r in revs {
        let inserts_3 = parse_subset_list("
            }
            // Go crazy

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
                }
        };
                    // fast-forward this revision over all common ones after it

    // https://github.com/serde-rs/serde/issues/1189 is fixed.
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
struct DragState {
        // the generated JSON.
        let mut gc_dels = self.empty_subset_before_first_rev();
            }
    }
#[derive(Clone, Copy)]
        let tombstones_a = Rope::from("a");
}
    fn thread_name() -> Option<StrCow> {
    use test::Bencher;
    #[inline]

            // to replicate whiteboard, z must be before a tombstone
    scroll_to: Option<usize>,
        Self {
// ======== Generic helpers
    #[test]
            SampleEventType::DurationEnd => 'E',
                    result = cow_append(result, self.fragment);
use linewrap;
            duration_us: None,
        ");
        use self::MergeTestOp::*;
#[macro_use]
impl Metric<RopeInfo> for BaseMetric {
/// associated performance hit across the board for turning it on).
#[inline]
                inserts: inserted,


/// Base unit is utf8 code unit.
        // rebase the deletion to be after the inserts instead of directly on the head union
            None

        match *self {
    /// Invalidates front-end's entire line cache, forcing a full render at the next

}
            Assert(2, "b".to_owned()),

        assert_eq!(TEST_STR, String::from(engine.get_head()));
        delta.serialize_field("base_len", &self.base_len)?;
                            if !deletes.is_empty() {

// See the License for the specific language governing permissions and
    /// End of the region selected when drag was started.
    fn eq(&self, other: &CategoriesT) -> bool {
            args: Some(SampleArgs {
        // todo: the correct Find instance needs to be updated with the new parameters
        let inserted = inserts.inserted_subset();
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        // a, b, y, z, c, x
        let text_inserts = inserts.transform_shrink(&deletes_from_union);

#[inline]
impl Leaf for String {
            } else {
        b.iter(|| black_box(trace.instant_payload(
    ///
        let new_head_2 = engine.get_head_rev_id().token();
    }
    fn merge_max_undo_so_far() {
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        let mut r = Rope::from("27");
            base_len: usize
        let mut b = TreeBuilder::new();

        if self.breaks.is_some() {
mod tests {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn is_ok_child(&self) -> bool {
            rendered_styles.push((sel_start as isize) - ix);
    #[test]

/// Given the inital byte of a UTF-8 codepoint, returns the number of
        let b = a.slice(1, 10);
    }
        let start = time::precise_time_ns();
        assert_eq!(snapshot.len(), 5);
        let deletes_from_union_a = parse_subset("-#---");
            self.args == other.args
            // about what wrapped.
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
                } else {
    #[serde(deserialize_with = "deserialize_event_type")]
        },

        &self.text
                payload: payload,
            }
pub struct SampleGuard<'a> {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                // TODO: small nit, merged region should be backward if end < start.
        let snapshot = trace.samples_cloned_unsorted();
            None
                            edit: Undo {
        let utf8_offset = 9;
        let mut cursor = Cursor::new(self, offset);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },


/// Replace part of a `Rope`:
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        guard
                let line = line.min(text.measure::<LinesMetric>() + 1);
                    };

    #[test]

    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    #[test]
    #[cfg(feature = "benchmarks")]
    /// Returns an iterator over chunks of the rope.

    TRACE.enable();
    pub fn collapse_selections(&mut self, text: &Rope) {
    }
#[derive(Serialize, Deserialize, Debug)]
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }
    // revision might hold content from an undo group that would otherwise be gc'ed),
            black_box(time::precise_time_ns());
        // probably change as the recording internals change.
            self.unset_find();
            'M' => SampleEventType::Metadata,
    }
        let inserts_2 = parse_subset_list("
                self.highlight_find = visible;
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {

                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
            scroll_to: Some(0),
            // Do the merge one direction
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    ObjectDestroyed,
        info.lines

    }



            let pos = bc.next::<BreaksMetric>();
            self.idx = 0;
    // TODO(vlovich): Replace all of this with serde flatten + rename once
            SampleEventType::ObjectDestroyed => 'D',
        assert_eq!(snapshot.len(), 5);

    #[test]

#![cfg_attr(feature = "collections_range", feature(collections_range))]
    }
        /// The subset of the characters of the union string from after this
    }
        let first_rev = engine.get_head_rev_id().token();
        let revs = basic_insert_ops(inserts, 1);
    fn empty_subset_before_first_rev(&self) -> Subset {
        }
            let c = region.end;
    fn test_disable_drops_all_samples() {
        self.pending_render
            Assert(1, "pbj".to_owned()),
        let script = vec![
    // this should have the same behavior, but worse performance
use edit_types::ViewEvent;
                SelectionModifier::AddRemovingCurrent => {
            find.unset();

                });
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
            Assert(1, "arpbzj".to_owned()),
        let len = match first_rev.edit {
            SampleEventType::AsyncInstant => 'n',
        };
        for i in 0..self.len() {
                        let n_skip = seg.their_line_num - line_num;
/// from multiple distributed sources (i.e. you want to sort the merged result
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        let script = vec![
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        result
    fn append_large() {
    // Note: this function would need some work to handle retaining arbitrary revisions,
        if self.find.is_empty() {
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
//See ../docs/MetricsAndBoundaries.md for more information.
// See the License for the specific language governing permissions and
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    use serde_test::{Token, assert_tokens};
    ///
        assert_eq!(snapshot[4].name, "z");
        let end = self.line_col_to_offset(text, line + 1, 0);
{
        all_samples.reset_limit(config.max_samples());
/// How tracing should be configured.
                client.replace_status(self.view_id, &json!(replace))

        }
            Merge(2,1),
    #[test]
        info.lines

        for (iv, style) in style_spans.iter() {
            Assert(0, "bdc".to_owned()),
        info.lines

                    selection.add_region(SelRegion::new(sel_start, end_of_line));
    #[cfg(feature = "json_payload")]
    #[test]
// You may obtain a copy of the License at
        }

    None,
        assert_tokens(&rope, &[
        if self.breaks.is_some() {
    ///
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        where D: Deserializer<'de>,
    }
    find_changed: FindStatusChange,
    /// Find what the `deletes_from_union` field in Engine would have been at the time
    /// finer grain invalidation.
            s = &s[splitpoint..];
            end += 1;
                            if !inserts.is_empty() {
///
        for rev in &self.revs[rev_index + 1..] {
    }
                        &mut start[bi]
        deserializer.deserialize_str(CategoriesTVisitor)
    /// This function does not perform any scrolling.
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    fn edit_rev_concurrent() {
        for i in ((edits-max_undos)..edits).rev() {

    None,
extern crate libc;
        }
    /// You could construct the "union string" from `text`, `tombstones` and

            retain_revs.insert(last.rev_id);

        if line < self.first_line {
            Merge(0,1),
            MetadataType::ThreadName {..} => "thread_name",
{
    }
            breaks: None,
        for rev in self.revs[rev_index..].iter().rev() {

                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        assert_eq!(None, b.next_codepoint_offset(9));
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        }
    /// how many times it has been deleted, so if a character is deleted twice
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    ProcessName { name: String },
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
    }
    TRACE.instant(name, categories);
                            edit: Edit {
}
                continue;
                        }
        self.set_selection_raw(text, selection);
        self.invalidate_selection(text);
            let not_in_tombstones = self.deletes_from_union.complement();
            None => {
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
        delta.end()
    },
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
impl NodeInfo for RopeInfo {
            retain_revs.insert(last.rev_id);
    }
        for _ in 0..in_measured_units {
            Assert(0, "adc".to_owned()),
            MetadataType::ProcessLabels {..} => (None, None)
            Merge(0,1),
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
// Copyright 2018 The xi-editor Authors.
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
///
    fn into_chrome_id(&self) -> char {
categories_from_constant_array!(1);
    }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
/// for single user cases, used by serde and ::empty
    }
    }
    }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// with.  By default, the type is string-like just like name.  If compiled with
// limitations under the License.
    /// vertical scroll position

    fn undo_2() {
            warn!("Failed to get path to current exe: {:?}", e);
    /// the same even if it is rebased or merged between devices.
            for rev in &self.revs {

        // invert the changes to deletes_from_union starting in the present and working backwards

            rendered_styles.push(0);
                        None if cursor.pos() == text.len() => cursor.pos(),
    #[test]
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
                                     event_type: SampleEventType)
                                     event_type: SampleEventType)
    #[test]
            'i' => SampleEventType::Instant,
            _ => None

                        ops.push(self.build_update_op("copy", None, seg.n));
///
            offset,
    #[cfg(feature = "benchmarks")]
}
            AssertAll("zacpb".to_owned()),
        }
                                inserts,
    }
            SampleEventType::ObjectSnapshot => 'O',
    pub fn disabled() -> Self {
            if let Some(ref thread_name) = sample.thread_name {
    /// how many times it has been deleted, so if a character is deleted twice
/// ```
        let s = String::deserialize(deserializer)?;
    // use own breaks if present, or text if not (no line wrapping)
    }
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
/// same priority into one transform to decrease the number of transforms that
        delta.serialize_field("base_len", &self.base_len)?;
pub struct Trace {

    }
        let mut samples = self.samples_cloned_unsorted();
    fn undo_4() {

/// Tracing is disabled initially on program launch.
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        while offset < l.len() && !l.is_char_boundary(offset) {
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        let res = find_common(&a, &b);
// Try to split at newline boundary (leaning left), if not, then split at codepoint
        if b >= 0xf0 {
            MetadataType::ThreadName {name} => (Some(name), None),
            self.push_leaf(s[..splitpoint].to_owned());
        let tombstones_a = Rope::from("a");
    /// fine-grained in the case of multiple cursors, but we also want this
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
        self.revs.reverse();
///
            Assert(1, "pb".to_owned()),

    #[cfg(feature = "benchmarks")]
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
    fn arr_eq(&self, other: &[&'static str]) -> bool {
                len += 1;
        while !leaf.is_char_boundary(end) {
    // * Actual measurement in text layout
        debug_subsets(&rearranged_inserts);
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    fn can_fragment() -> bool { true }
        if self.breaks.is_some() {
/// # use xi_rope::Rope;
            MetadataType::ProcessLabels {..} => "process_labels",
        assert_eq!(utf16_units, 17);
    }
                (drag_state.max, min(offset, drag_state.min))
///
    }
    }
            for (i,rev) in self.revs.iter().enumerate().rev() {

            None => {
        self.samples.lock().unwrap().limit()
    breaks: Option<Breaks>,
        } else {
            if i >= max_undos {
        cursor.next_grapheme()
/// ```
}
    {
            } else if incomp == GraphemeIncomplete::PrevChunk {
    /// The maximum number of entries the tracing data should allow.  Total
        let a2 = Rope::from("a");
struct DragState {
                len += 1;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
impl<'a> From<&'a Rope> for String {
    // TODO: a case can be made to hang this on Cursor instead
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    /// Time complexity: O(log n)
        next_expand_by = Vec::with_capacity(expand_by.len());
        let revs = basic_insert_ops(inserts, 1);

        inserts.into_iter().enumerate().map(|(i, inserts)| {
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        }
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    }
                // sanitize input
                    self.set_selection(text, selection);
/// bytes required to represent the codepoint.
#[derive(Clone, Debug)]
                self.set_dirty(text);

/// rather than just this processe's samples).
            }
///
    }
        engine.gc(&gc);
    #[serde(rename = "ts")]
            priority: 0,
    /// unsaved changes.
        let chars_left = (edits-max_undos)+1;
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    max: usize,
        // the smallest values with which it still fails:
                    sel.add_region(region);
    /// the text).
        assert_eq!("zcpbdj", String::from(&text_2));
/// an argument.
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
        let b = Rope::from("b");
    }
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        let line = line as usize;
    }
        s.is_char_boundary(offset)
            let expand_by = compute_transforms(a_new);
        assert_eq!(0, a.lines_all().count());
        if self.len() != other.len() {
    }
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    for rev in revs.iter().rev() {
        // rebase delta to be on the base_rev union instead of the text
    ///
            } else {
            edit: Undo { toggled_groups, deletes_bitxor }
    ///
        let mut gc_dels = self.empty_subset_before_first_rev();
                max_undo_so_far: i,

            Rope::concat(
        cursor.is_boundary::<BaseMetric>()
                c.provide_context(&pl, self.pos() - poffset);
    /// if there is not at least one edit.
    }


        if all_samples.is_empty() {
    }
    /// This function does not perform any scrolling.
use interval::Interval;
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
///
                    ops.push(self.build_update_op("invalidate", None, seg.n));
///
/// fn something_else_expensive(value: u32) {
    // * grapheme clusters
/// could trigger incorrect behavior if they collide, so u64 is safe.
        let mut engine = Engine::new(Rope::from(TEST_STR));

            Scroll(range) => self.set_scroll(range.first, range.last),
/// Replace part of a `Rope`:
            return;
            sample: Some(Sample::new_duration_marker(
    }
    fn prev_codepoint_offset_small() {
        let new_inserts = union_ins_delta.inserted_subset();
            event_type: event_type,
use delta::{Delta, DeltaElement};



        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            }, to_payload("test_get_samples_nested_trace"));

        #------
            ix = sel_end as isize;
pub enum CategoriesT {
pub struct Size {
            if !selection.is_empty() {
///
use std::fmt;
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {

/// for strings, specialized for incremental editing operations. Most operations
        let mut gc_dels = self.empty_subset_before_first_rev();
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        let tombstones_a = Rope::from("a");
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
                         first_line: usize, last_line: usize, pristine: bool) {

#[derive(Clone, Debug)]
impl serde::Serialize for CategoriesT {
    let new_text = del_delta.apply(text);
        d_builder.delete(Interval::new_closed_open(10, 36));
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                splitpoint -= 1;
        let col = col as usize;
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
        self.size = size;


                        DeltaElement::Copy(start, end),
        -##-
    {
            }
                true => x.end,
        let mut end = start_pos + len;

///
                        Err(e) => {

        ];
                            deletes_bitxor.transform_shrink(&gc_dels)
impl PartialEq for CategoriesT {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        assert_eq!(snapshot[1].name, "thread_name");
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
                if (flags & FLAG_SELECT) != 0 {
// Copyright 2016 The xi-editor Authors.
pub fn samples_cloned_unsorted() -> Vec<Sample> {
        let mut d = TracePayloadT::with_capacity(1);
    /// via process_name/thread_name respectively.
            }
///

use styles::{Style, ThemeStyleMap};
        if offset >= text.len() {
    pub fn with_limit_count(limit: usize) -> Self {
                    let b = if bi < ai {
    bytecount::count(s.as_bytes(), b'\n')
        let start = time::precise_time_ns();


    /// Returns a u64 that will be equal for equivalent revision IDs and
    highlight_find: bool,
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    #[serde(skip_serializing_if = "Option::is_none")]
pub fn samples_len() -> usize {
                   style_spans: &Spans<Style>, line_num: usize) -> Value

                }
            .find(|&(_, ref rev)| rev.rev_id == rev_id)

            Assert(1, "afc".to_owned()),
    #[serde(rename = "dur")]
            self.idx += 1;
    /// Find the first revision that could be affected by toggling a set of undo groups
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    fn find_base_1() {
            Merge(0,2), Merge(1, 2), Merge(3, 2),
            self.set_selection(text, sel);
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
            false
        let mut b = line_cache_shadow::Builder::new();
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        assert_eq!(snapshot[2].name, "x");
        -> Self
    tombstones: Rope,
/// first can make it ~1.7x slower than a regular trace.
use memchr::{memrchr, memchr};
    }

            end -= 1;
        }
                // TODO create InsertDelta directly and more efficiently instead of factoring

        //for next line
    }
                } else {
///
        let closest_occurrence = self.find.iter().flat_map(|x|
                    self.fragment = &self.fragment[i + 1 ..];
    pub fn push_str(&mut self, mut s: &str) {
        Subset::new(len)
        engine.undo([1].iter().cloned().collect());
        }
        let trace = Trace::enabled(Config::default());
        } else {


                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);


        assert_eq!(None, b.next_codepoint_offset(9));
/// Applies an optimization where it combines sequential revisions with the
            },
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
        if let Some(occ) = closest_occurrence {
            deletes = deletes.transform_expand(&new_trans_inserts);

            } else {
use multiset::{Subset, CountMatcher};
/// However, anything that can be converted into a Cow string can be passed as
    fn compute_transforms_2() {
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(snapshot[6].name, "z");
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        self.set_selection_for_edit(text, new_sel);
#[derive(Clone, Copy)]
    }
    #[serde(skip_serializing_if = "Option::is_none")]
        &leaf[offset..end]
        // rather than emitting an explicit start/stop to reduce the size of
    min: usize,
                leaf_offset = self.pos() - poffset;
        // x, a, y, b, z, c
                RenderTactic::Render => {
        self.buffer_id
                    let end_of_line = match cursor.next::<LinesMetric>() {
    /// Get the contents of the document at a given revision number
        if self.current.is_none() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
}
            size: Size::default(),
                None => {
            let end = self.line_of_offset(last_text, iv.end()) + 1;

    #[test]
    inserts: InsertDelta<RopeInfo>,
/// See `trace_payload` for a more complete discussion.
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    fragment: &'a str

                        }

/// ```
                              to_payload("test_get_samples"));
        let b_rope = Rope::from(&b);
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    #[cfg(feature = "benchmarks")]
    #[serde(skip_serializing_if = "Option::is_none")]
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
                self.select_line(text, offset, line, true),
    /// terminating newline.
            Revision {
            result["cursor"] = json!(cursors);
        ChunkIter {
    if a.is_empty() {
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
            Assert(1, "bdefg".to_owned()),

impl MetadataType {
                    RopeDeltaElement_::Copy(start, end) =>
                            ops.push(self.build_update_op("skip", None, n_skip));
        let mut selection = self.selection.clone();
        };
        // rebase the deletion to be after the inserts instead of directly on the head union
use xi_rope::spans::Spans;
        }

            Assert(0, "ab".to_owned()),
        }
            b.push('b');
        match self {
        assert_eq!(5, a.offset_of_line(3));
        use self::MergeTestOp::*;
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        });
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
}
        // probably change as the recording internals change.
    /// Width in px units, requiring measurement by the front-end.
}
        result
    }
    TRACE.instant(name, categories);
        let undone = self.undone_groups.contains(&undo_group);
        }
                    new_deletes = new_deletes.transform_expand(inserts);
        deletes_from_union = new_deletes_from_union;
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
    pub chars: String,

        assert_eq!(0, a.line_of_offset(0));
                        MetadataType::ThreadName { name: thread_name.to_string() },
        // todo: for now only a single search query is supported however in the future
impl<'de> Deserialize<'de> for Rope {
            Assert(1, "ab".to_owned()),
}
            self.args == other.args
            }
                        // no need to un-delete undone inserts since we'll just shrink them out

    }

            timestamp_us: ns_to_us(start_ns),
            to_payload("some description of the trace"))));
    {
    let new_text = del_delta.apply(text);
    pub fn with_limit_bytes(size: usize) -> Self {
        }
            utf16_size: count_utf16_code_units(s),
                        ops.push(self.build_update_op("copy", None, seg.n));
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        while offset < l.len() && !l.is_char_boundary(offset) {
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
        // current recording mechanism should see:

//
        /// revision that were added by this revision.
        assert_tokens(&rope, &[
    }
        // A with ring, hangul, regional indicator "US"
        let mut cursor = Cursor::new(self, offset);
                        deletes_from_union
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    fn merge_idempotent() {
    out
    /// Determines the current number of find results and search parameters to send them to
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
            self.next::<BaseMetric>();
            trace.instant("c", &["test"]);
        ");
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
        match self.breaks {

    pub fn empty() -> Engine {
        self.rev_id_counter += 1;
        self.buffer_id
    pub fn instant<S, C>(&self, name: S, categories: C)
/// Create an instantaneous sample with a payload.  The type the payload
            Revision {
        ];
}
            deletes_from_union,
        let s = String::deserialize(deserializer)?;
// should make this generic, but most leaf types aren't going to be sliceable
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    /// if it is non-empty. It needs to be a separate commit rather than just
            rev_id: self.next_rev_id(),
    }
/// an argument.
                        s = &s[..s.len() - 1];
        self.find_changed = FindStatusChange::Matches;
            self.event_type == other.event_type &&
//
                    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
    {
    size: Size,
    #[serde(rename = "dur")]
    }
    #[test]
    }
/// Replace part of a `Rope`:
        assert_eq!(0, a.line_of_offset(1));
#[cfg(test)]
/// * `name` - A string that provides some meaningful name to this sample.
            if next_chunk.is_none() { return None; }
impl<'a> SampleGuard<'a> {
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        let a_rope = Rope::from(&a);
mod sys_tid;
    fn from_chrome_id(symbol: char) -> Self {
        let mut delta = serializer.serialize_struct("Delta", 2)?;
            }
                    a.merge(b);
        let offset = self.line_col_to_offset(text, line, col);
///
    #[test]
        // TODO: may make this method take the iv directly
    /// is optional.
/// assert_eq!("ello wor", String::from(&b));
            Merge(0,1),
            self.current = None;
            };
        // todo: for now only a single search query is supported however in the future
        assert_eq!(trace.is_enabled(), true);
            AssertAll("zacpb".to_owned()),
                l = nl;
                }
        d_builder.build()
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        let base_sel = Selection::new();
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
                            rev_id: rev.rev_id,
    #[inline]
// Additional APIs custom to strings
        if let Some(breaks) = self.breaks.as_mut() {
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        #------
        s.is_char_boundary(offset)
/// a.edit_str(1, 9, "era");

    } else if x < max {
    use super::*;
    pub pid: u64,
            let start = self.line_of_offset(last_text, iv.start());
            }
}
            if self.line_of_offset(text, offset) <= line {

            }
    #[serde(rename = "xi_payload")]
            a.push('a');
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        // shouldn't do anything since it was double-deleted and one was GC'd
            lc_shadow: LineCacheShadow::default(),
#[derive(Clone, Debug, PartialEq, Eq)]
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        if let Some(exe_name) = exe_name() {
            }
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    #[test]
        // NOTE 2: from_micros is currently in unstable so using new


        self.find_changed = FindStatusChange::Matches;
        Self {
    #[test]
        }
    fn gc_3() {
            FindNext { wrap_around, allow_same, modify_selection } =>
    {
            find.update_highlights(text, delta);
            Assert(3, "ab".to_owned()),
    /// Selects a specific range (eg. when the user performs SHIFT + click).
        for i in 0..self.len() {
        deletes_from_union
        if b >= 0xf0 {
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
impl MetadataType {
    // TODO: this should be a Cow
            Assert(1, "zapbj".to_owned()),
/// Returns the file name of the EXE if possible, otherwise the full path, or
                // Deprecated (kept for client compatibility):

                metadata_sort_index: sort_index,
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
            Assert(1, "afc".to_owned()),
}
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    ///
        self.pending_render = pending

        let trace = Trace::enabled(Config::default());
    fn compute_deltas_1() {
        Self::with_limit_bytes(1 * 1024 * 1024)
    buffer_id: BufferId,
        self.deletes_from_union_before_index(rev_index + 1, true)

            if i >= max_undos {
            match seg.tactic {
        Ok(Rope::from(s))
        // same span exists in both sets (as when there is an active selection)

pub struct ChunkIter<'a> {
/// However, anything that can be converted into a Cow string can be passed as
}
        match rev.edit {
pub enum CategoriesT {
    pub fn max_samples(&self) -> usize {
    }
        let self_iv = Interval::new_closed_closed(0, self.len());
                        word_cursor.select_word()


                    text.slice_to_string(region.min(), region.max())
        self.start_drag(offset, region.start, region.end);

            edit: Undo { toggled_groups, deletes_bitxor }
    // trace_block()/trace_closure
    #[test]
    }
            write!(f, "Rope({:?})", String::from(self))
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
            new_deletes = new_deletes.transform_expand(&new_inserts);

        ]);
        }
                }
        self.set_selection(text, selection);
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());

        let rope = Rope::from("hi\ni'm\nfour\nlines");
    // TODO make this faster somehow?
        RopeInfo {

            rendered_styles.push(iv.end() as isize - iv.start() as isize);
///
            return Vec::with_capacity(0);
            FindAll => self.do_find_all(text),
/// ```rust

                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        }
            sample: Some(Sample::new_duration_marker(

            // I think it's a precondition that this will never be called

        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                    .with_affinity(affinity)
}
/// A size, in pixel units (not display pixels).
            }
        peers: Vec<Engine>,
        self.revs.push(new_rev);
            GestureType::MultiWordSelect =>
        if let Some(occ) = closest_occurrence {
            let splitpoint = if s.len() > MAX_LEAF {
        let new_deletes_from_union = {
        self.replace.clone()
        }
                        s = &s[..s.len() - 1];
        let mut selection = match multi_select {
    }
    {
impl TreeBuilder<RopeInfo> {

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    struct MergeTestState {
        let line = line as usize;
    fn do_cancel(&mut self, text: &Rope) {
    pub metadata_sort_index: Option<i32>,
    utf16_size: usize,

    fn len(&self) -> usize {
    current: Option<&'a str>,
                        if n_skip > 0 {

    /// Determine whether `offset` lies on a codepoint boundary.
/// Returns all the samples collected so far.  There is no guarantee that the
        let mut selection = Selection::new();
}
        let _t = trace_block("View::wrap_width", &["core"]);
mod sys_tid;
/// Revision will be used, which means only the (small) set of concurrent edits
            let head = engine.get_head_rev_id().token();
        a.lines_all().collect::<Vec<_>>());

            },
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    }
    }
                el.serialize_field(start)?;
extern crate test;
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
///
        }


        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            if next_chunk.is_none() { return None; }
#[must_use]

        self.text = text;
        assert!(a != b);
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
        let region = SelRegion::caret(offset);
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
            prev_boundary = c.prev_boundary(&l, leaf_offset);
            match modify_selection {
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
                return None;
        assert!(a.slice(0, 0) == empty);
        a.push('\n');
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        assert_eq!(trace.get_samples_limit(), 20);


    where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    (1, 0)
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
/// # Examples
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
            let b = self.current.unwrap().as_bytes()[self.idx];

        -> Self
                        }
        thread.name().map(|ref s| to_cow_str(s.to_string()))
///
                            ops.push(self.build_update_op("skip", None, n_skip));
        b.build()
            rev_id: self.next_rev_id(),
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            base_sel: selection.clone(),
        let mut style_map = style_map.borrow_mut();
    #[inline]

            SampleEventType::AsyncInstant => 'n',
        assert_eq!(1, b.line_of_offset(2));

        self.sample_limit_count * size_of::<Sample>()
    }
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
    lines: usize,
            as_vec.push(Sample::new_metadata(

    #[test]
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        assert_eq!(snapshot.len(), 9);

/// let b = Rope::from("world");
            std::thread::sleep(std::time::Duration::new(0, 1000));
        let mut result = Cow::from("");
        }

        assert_eq!(snapshot.len(), 9);
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        &self.selection
        }, deletes_from_union)
pub struct ByteIter<'a> {
#[must_use]
/// on program launch.
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
/// Atomicity is implicit, putting the offset
        self.session = session;
categories_from_constant_array!(7);
}

            .map(|(i, _)| i)

    }
        let mut cursor = Cursor::new(self, offset);
pub struct Lines<'a> {
    /// Determines the current number of find results and search parameters to send them to

    }
                        deletes_from_union
            sample.event_type = SampleEventType::DurationEnd;
    #[bench]
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    #[inline]
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    {
}
        } else { // no toggled groups, return past end
            categories: Some(categories.into()),
/// from the new revisions on the left.
            Merge(0,2), Merge(1, 2),
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    pub fn with_limit_count(limit: usize) -> Self {
            }


        });
            self.next()
                pos = leaf_offset + pl.len();
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
            }
    }
        b.iter(|| sys_pid::current_pid());
        r.slice_to_string(0, r.len())
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
    }
            r = op.inserts.apply(&r);
                Contents::Edit {inserts, ..} => inserts,
/// required). Mutations are generally copy-on-write, though in-place edits are
                            deletes_bitxor.transform_shrink(&gc_dels)
            let mut word_cursor = WordCursor::new(text, offset);
    rev_id_counter: u32,
                    // can only happen on empty input

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            Some(region) => {



    /// Exposed for unit tests.
        assert_eq!(utf8_offset, 13);

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    }
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
            Assert(1, "apbj".to_owned()),
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    inserts: InsertDelta<RopeInfo>,
        b.set_dirty(true);
/// The visual width of the buffer for the purpose of word wrapping.

    #[bench]
        cursor.next_grapheme()

}
                }
    fn test_trace_disabled() {
    new_without_default_derive,
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
            trace.record(sample);
    /// finer grain invalidation.
                        Err(e) => {
                                gc_dels = gc_dels.transform_expand(inserts);
/// ```
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        let b_rope = Rope::from(&b);
            match c.edit {
    /// Toggles a caret at the given offset.
    }
// should make this generic, but most leaf types aren't going to be sliceable
    if x < min {
    fn prev(s: &String, offset: usize) -> Option<usize> {
                    let mut selection = self.selection.clone();
/// # Performance
            Assert(1, "pbj".to_owned()),
///
        }
        self.replace_changed = true;
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
            retain_revs.insert(last.rev_id);
            MetadataType::ProcessLabels {..} => "process_labels",
    ThreadName { name: String },
    pub fn new_instant<S, C>(name: S, categories: C,
        trace.closure_payload("x", &["test"], || {
    /// Returns a tuple of a new `Revision` representing the edit based on the
                        let _ = s.pop();
        ");
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
            self.push_leaf(s[..splitpoint].to_owned());
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());

                    priority, undo_group,
        trace.closure_payload("y", &["test"], || {},
        let trace = Trace::enabled(Config::with_limit_count(10));

            Merge(0,2), Merge(1, 2),
                        Some(end) => max(0, end - 1),
                        None if cursor.pos() == text.len() => cursor.pos(),
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },

                if groups.contains(undo_group) {

        assert!(a.slice(0, 0) == empty);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());

        }
/// Measured unit is newline amount.
            }
        let (ins_delta, deletes) = delta.factor();
        }
                        // no need to un-delete undone inserts since we'll just shrink them out
        for i in 0..self.len() {

        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
        s.is_char_boundary(offset)
// Copyright 2018 The xi-editor Authors.
#[derive(Serialize, Deserialize, Debug, Clone)]
    #[inline]
        }
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {

        let mut engine = Engine::new(Rope::from(TEST_STR));
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
                WrapWidth::None => (),
pub fn count_newlines(s: &str) -> usize {
                        let new_deletes_bitxor = if gc_dels.is_empty() {
    /// The name to associate with the pid/tid.  Whether it's associated with
        ---#--
/// }
        Self {
    pub(crate) fn get_view_id(&self) -> ViewId {
}
    ///
    }
            Assert(1, "ab".to_owned()),
    ///
        // interior of first line should be first line
    session_id: SessionId,
        }
            if self.fragment.is_empty() {
    {
        // likely be improved.
                (region.is_upstream() && c == pos) ||
        self.set_selection(text, selection);

                        if self.undone_groups.contains(undo_group) {
use self::Contents::*;
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
    /// Sorting priority between processes/threads in the view.
            ),
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
            MetadataType::ThreadName {name} => (Some(name), None),


    }

    }
                    if undone_groups.contains(undo_group) {
        if !selection.regions_in_range(offset, offset).is_empty() {
        let script = vec![



    fn test_samples_pulse() {
    /// We attempt to reduce duplicate renders by setting a small timeout


        if last_col == 0 && last_line > first_line {

    scroll_to: Option<usize>,
        let script = vec![

struct Revision {

        deletes_from_union
    {
// limitations under the License.
        ids.iter().cloned().map(|i| {
    #[test]
use std::borrow::Cow;
// Copyright 2016 The xi-editor Authors.

                }
    /// Merge the new content from another Engine into this one with a CRDT merge

        result
        } else {
    }

            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        *self = b.build();
    out.as_mut_slice().reverse();
        // selection state, and for scrolling it into view if needed. This choice can
                            deletes_bitxor.transform_shrink(&gc_dels)

    /// the same even if it is rebased or merged between devices.
    }
        self.deletes_from_union = new_deletes_from_union;
        let b_revs = basic_insert_ops(inserts, 2);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        ]);
        let a2 = Rope::from("a");
                }
        MergeTestState::new(6).run_script(&script[..]);
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
                _ => panic!("to_base_units called with arg too large")
        ");

        }
        if last_col == 0 && last_line > first_line {
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    pub fn prev_codepoint(&mut self) -> Option<char> {
            FindPrevious { wrap_around, allow_same, modify_selection } =>

    }
}
/// typing a paragraph) will be combined into a single segment in a transform
                first_sample_timestamp,
    }
pub struct Replace {
    {
                   r.lines_all().collect::<Vec<_>>());
            // The deletes are already after our inserts, but we need to include the other inserts

            SampleEventType::ObjectDestroyed => 'D',
        assert_eq!(snapshot.len(), 9);
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    type L = String;
    /// borrowed from the rope.
}
    cursor: Cursor<'a, RopeInfo>,


pub enum CategoriesT {

    fn from(r: Rope) -> String {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
}
    // * Unicode codepoints

        engine.undo([1].iter().cloned().collect());
    #[test]
            buffer_id: buffer_id,
        if offset >= text.len() {
            let max_undo = self.max_undo_group_id();
        self.drag_state = None;
            trace: None,
        Self {
    /// concurrently it will have count `2` so that undoing one delete but not
                c.provide_context(&pl, self.pos() - poffset);
    TRACE.samples_cloned_unsorted()
}
        } else {
        assert_eq!(snapshot[5].name, "b");
        let col = col as usize;
    use engine::*;
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        Self {
        }
            pos += 1;
/// Valid within a session. If there's a collision the most recent matching
        let mut selections = Vec::new();
        --#-
    type Item = u8;
/// between two utf8 code units that form a code point is considered invalid.

//! This module actually implements a mini Conflict-free Replicated Data Type
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

            // which we can do with another peer that inserts before a and merges.
    pub fn max_size_in_bytes(&self) -> usize {

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                while cursor.pos() < region.max() {

            MetadataType::ProcessName {name} => (Some(name), None),
        }
        for op in &delta_ops {
            fragment: ""
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

                        None if cursor.pos() == text.len() => cursor.pos(),
        engine.edit_rev(1, 3, new_head_2, d3);
            }
    utf16_size: usize,
                        inserts: transformed_inserts,
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
        let mut plan = RenderPlan::create(height, self.first_line, self.height);

                } else {

    /// Time complexity: technically O(n log n), but the constant factor is so
    #[test]
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
use delta::{Delta, InsertDelta};
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;

        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
                SelectionModifier::Add => {
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        self.iter_chunks(0, self.len())

    }
    fn eq(&self, other: &CategoriesT) -> bool {
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
    }
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        engine.gc(&gc);
/// let c = b.slice(1, 7);

use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        tombstones = new_tombstones;
    }
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        if offset >= next_line_offset {
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        } else {
        // Note: for committing plugin edits, we probably want to know the priority
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

            } else {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        b.push('\n');
//

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);

/// Revision will be used, which means only the (small) set of concurrent edits
}
    type Output = Rope;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
        self.tombstones = tombstones;
        let b = a.slice(2, 4);
            Some(region) => {
        min
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
        let a = Rope::from("\n");
                                            closure: F, payload: P) -> R
            Assert(0, "zacpbdj".to_owned()),
            Merge(3,1), Merge(5,3),
///
        let mut ops = Vec::new();
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let mut all_samples = self.samples.lock().unwrap();
        let trace = Trace::enabled(Config::with_limit_count(10));
        let a = Rope::from("a\nb\nc");
        /// Just the `symmetric_difference` (XOR) of the two sets.
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
    }
#[inline]
                                deletes,
            //}
        match ty {
                                  _allow_same: bool, modify_selection: &SelectionModifier) {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    }

lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    {
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        if !gc_dels.is_empty() {
        for _ in 0..in_measured_units {
        a.lines_all().collect::<Vec<_>>());
        struct RopeDelta_ {
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
//! pending edit in flight each.
                name, categories, None, start, end - start));
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
    fn merge_insert_only_whiteboard() {
    #[bench]
                            deletes_bitxor.transform_shrink(&gc_dels)
/// fn something_else_expensive() {
                Some(filename) => {
            SampleGuard::new(&self, name, categories, None)
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        let mut cur_len_utf8 = 0;
                    if s.ends_with('\r') {
    /// Constructs an instantaneous sample.
    /// The largest undo group number of any edit in the history up to this
        let contents = Contents::Edit {
                if (flags & FLAG_SELECT) != 0 {
        Ok(Rope::from(s))
    TRACE.instant_payload(name, categories, payload);
            let _x = trace.block("something", &[]);
                    }
            }
        trace.closure_payload("x", &["test"], || (),
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    }
        }
            if !selection.is_empty() {
pub fn enable_tracing() {
    fn edit_rev_undo_3() {
use xi_trace::trace_block;
    fn measure(_: &RopeInfo, len: usize) -> usize {
                let (pl, poffset) = self.prev_leaf()?;
        self.set_selection(text, new_sel);

            false

pub fn len_utf8_from_first_byte(b: u8) -> usize {
            }
#[derive(Clone, Debug, PartialEq, Eq)]
            AssertMaxUndoSoFar(0,2),
    fn delta_rev_head_2() {
            'n' => SampleEventType::AsyncInstant,
            }
}
    /// If `modify` is `true`, the selections are modified, otherwise the results
    // transform representing the characters added by common revisions after a point.
    pub fn new_instant<S, C>(name: S, categories: C,
        let mut result = Cow::from("");
        // TODO: simplify this through the use of scopeguard crate
        });
        self.prev::<BaseMetric>();
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
/// However, anything that can be converted into a Cow string can be passed as
    pub fn get_samples_count(&self) -> usize {
extern crate log;
        RevId { session1: 1, session2: 0, num: i as u32 }
        assert_eq!(trace.get_samples_count(), 0);
}
                rev_id: basic_rev(i+1),
        /// along with the newline that triggered it.
        b.set_dirty(true);
        let snapshot = trace.samples_cloned_sorted();

            let b = self.current.unwrap().as_bytes()[self.idx];
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
    }
                                                        soft_breaks.as_mut(),
        b.iter(|| sys_pid::current_pid());
pub struct View {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
            }),
            Insert(String),

        }
        engine.gc(&to_undo);
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,

    }
impl Eq for Sample {}
                Edit { priority, undo_group, inserts, deletes } => {
    {
    {
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        self.pending_render
            self.first_line = line;
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        }
    priority: usize,
        }

    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            timestamp_us: ns_to_us(time::precise_time_ns()),
        let mut line_num = 0;  // tracks old line cache
        let mut soln = String::from("h");

        assert!(a != b);
categories_from_constant_array!(0);
    s.serialize_char(ph.into_chrome_id())
    move_delta.apply(tombstones)
        assert!(r != a_rope);
            AddSelectionBelow =>
                } else {
    priority: usize,
    fn len(&self) -> usize {


    }
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {

    #[test]
        where S: Serializer
impl<'de> serde::Deserialize<'de> for CategoriesT {
    }
            Assert(0, "zcbd".to_owned()),
    }

        self.cursor.next_leaf();
            lines: count_newlines(s),
        for rev in &self.revs[rev_index + 1..] {
                where E: serde::de::Error
    #[bench]
        assert_eq!(None, a.next_codepoint_offset(10));
        self.lines_raw(0, self.len())

    #[bench]
    }
        let first_rev = engine.get_head_rev_id().token();

                    rev_id: rev.rev_id,


                el.serialize_field(end)?;
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
}
        /// The set of groups toggled between undone and done.
                                     event_type: SampleEventType)
                        self.revs.push(Revision {
                         start: usize, end: usize, sel: &[(usize, usize)],
    pub fn with_limit_count(limit: usize) -> Self {


/// acquires a dependency on the `serde_json` crate.
pub struct SampleGuard<'a> {
    }
    priority: usize,

    FlowInstant,
    #[inline]
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        let inserts_1 = parse_subset_list("
        true

                           styles: &StyleMap, style_spans: &Spans<Style>,
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
                    s = inserts.transform_union(&s);
use bytecount;
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                    return None;
    fragment: &'a str
        self.drag_state = None;
    /// Find the first revision that could be affected by toggling a set of undo groups
            None => text.line_of_offset(offset)
            let c = region.end;
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
}
    }
    pub fn session_id(&self) -> SessionId {
        ]);
                Some(Cow::from(s))
// you may not use this file except in compliance with the License.
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    }
        let a = Rope::from("a\rb\rc");
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        if let Some(ref mut trace) = self.trace {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,

        let params = json!({
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

    }
    fn identity() -> Self {
                        let n_skip = seg.their_line_num - line_num;
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
        }
    for rev in revs.iter().rev() {
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    #[cfg(feature = "benchmarks")]
            samples: Mutex::new(FixedLifoDeque::new())
        let new_deletes_from_union = {
    TRACE.closure(name, categories, closure)
        if let Some(edit) = contents {
        let first_line = self.line_of_offset(text, start);
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
    #[test]
    /// Start of the region selected when drag was started (region is
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
    }
        });
                self.set_selection(text, SelRegion::caret(offset));
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
}
    pub fn get_head(&self) -> &Rope {
    revs: Vec<Revision>,
                if rev.max_undo_so_far < lowest_group {
/// fn something_expensive() {
    }
            GestureType::MultiWordSelect =>
    //TODO: implement lines_raw using ranges and delete this
    fn eq(&self, other: &Sample) -> bool {
    /// We attempt to reduce duplicate renders by setting a small timeout
        let end = self.line_col_to_offset(text, line + 1, 0);
        }
        }
    s.serialize_char(ph.into_chrome_id())
    }
// ======== Generic helpers

        }

            Merge(1,2),
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
///
pub fn samples_cloned_sorted() -> Vec<Sample> {
    // TODO: don't construct transform if subsets are empty
        }
                priority: new_priority,
    pub width: f64,
/// some way.
    #[test]

            trace.closure_payload("y", &["test"], || {
    fn utf16_code_units_metric() {
                    new_deletes = new_deletes.transform_expand(inserts);
    #[cfg(feature = "benchmarks")]
        // todo: this will be changed once multiple queries are supported
            }


        if b >= 0xf0 {
///
    #[serde(skip_serializing_if = "Option::is_none")]
    #[test]
    ///
            }
impl Rope {
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
                Some(filename) => {
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        where S: Into<StrCow>, C: Into<CategoriesT>
        if !self.is_point_in_selection(offset) {
        if offset == 0 {
        if self.breaks.is_some() {
/// Disable tracing.  This clears all trace data (& frees the memory).
            offset += 1;

    }
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        }
    //
        assert_eq!(snapshot[0].name, "process_name");
        use self::MergeTestOp::*;
            // shouldn't be called with this, but be defensive
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {


            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        Self {
                SelectionModifier::Set => self.set_selection(text, occ),

}
        if offset >= text.len() {
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
//
/// fn something_expensive() {
    }
/// * `categories` - A static array of static strings that tags the samples in
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
            }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
//     http://www.apache.org/licenses/LICENSE-2.0
            // On the next step we want things in expand_by to have op in the context
            let _ = trace.block("test_samples_block", &["test"]);
            }
    TRACE.closure(name, categories, closure)
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        }).unwrap_or(text.len());
            while !s.is_char_boundary(splitpoint) {
///
                        deletes_from_union = deletes_from_union.union(deletes);
    }
    type Item = Cow<'a, str>;

                         first_line: usize, last_line: usize, pristine: bool) {
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    fn into_chrome_id(&self) -> char {

    }
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    }
}
            self.set_dirty(text);
        trace.closure_payload("z", &["test"], || {},
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
use std::cmp::{min,max};
            Merge(0,2), Merge(1, 2),
                        None if cursor.pos() == text.len() => cursor.pos(),

        // insert a character at the beginning
    end: usize,
    #[cfg(feature = "benchmarks")]
            match memchr(b'\n', &s.as_bytes()[offset..]) {
    }
pub fn disable_tracing() {
    rev_id: RevId,
    }
}
    ///
/// some way.

            match seg.tactic {
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        let offset = self.line_col_to_offset(text, line as usize, 0);
    }
            a.push('a');
                    }
        serializer.serialize_str(&String::from(self))
                for &region in rest {

                    let _ = s.pop();
            Merge(1,0),
            if (c > start_pos && c < pos) ||
                    if undone_groups.contains(undo_group) {


/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
/// # Performance
        let after_first_edit = engine.get_head_rev_id().token();
            let new_region = region_movement(movement, region, self,
        for i in ((edits-max_undos)..edits).rev() {
    /// slices will be nonempty.
            // corner and I'm lazy -cmyr
}
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
        let tombstones_b = Rope::from("a");

        assert_eq!(5, a.offset_of_line(3));
                self.run_op(op);

        let revs = basic_insert_ops(inserts, 1);
        ];
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                self.drag_state = None;
        }
}
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    /// the frontend.
                    priority, inserts, deletes,
            // TODO: finer grain invalidation for the line wrapping, needs info
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();


    {
// you may not use this file except in compliance with the License.
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
        assert!(r != a_rope);
            AssertAll("zacpb".to_owned()),

        assert_eq!(snapshot[4].name, "z");
impl<'de> serde::Deserialize<'de> for CategoriesT {
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
            }
                None => {
    }
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    #[bench]

///
            let b_to_merge = &other.revs[base_index..];
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
            }
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
/// * `categories` - A static array of static strings that tags the samples in
        let mut selections = Vec::new();
            Insert(String),
    }

            Merge(0,1),
        // the front-end, but perhaps not for async edits.
/// ```
            SelectionForFind { case_sensitive } =>
            // trans-expand other by expanded so they have the same context
        where D: Deserializer<'de>,
    /// Selects a specific range (eg. when the user performs SHIFT + click).

        &self.selection
            AddSelectionBelow =>
                payload: payload,
    }
    fn next(&mut self) -> Option<&'a str> {

    fn hash<H: Hasher>(&self, state: &mut H) {
        expand_by = next_expand_by;

        // NOTE: 1 us sleeps are inserted as the first line of a closure to
///
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
    fn merge_idempotent() {
enum Contents {
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    }
            rev_id: self.next_rev_id(),

        self.lines_raw(0, self.len())
        let new_head_2 = engine.get_head_rev_id().token();
        let mut b = String::new();
            retain_revs.insert(last.rev_id);
                },
            let end = self.line_of_offset(last_text, iv.end()) + 1;
    /// Determine whether `offset` lies on a codepoint boundary.
/// Computes a series of priorities and transforms for the deltas on the right
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                    };
/// the session ID component of a `RevId`
    pub fn get_caret_offset(&self) -> Option<usize> {
            'D' => SampleEventType::ObjectDestroyed,
        self.enabled.load(AtomicOrdering::Relaxed)
    }
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    fn gc_5() {
            rendered_styles.push(1);
        self.text = text;
        self.deletes_from_union_before_index(rev_index + 1, true)
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    //TODO: implement lines_raw using ranges and delete this
        assert_eq!(utf16_units, 20);
        }
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
        }
                },
                } else if click_count == Some(3) {
// See the License for the specific language governing permissions and
        };
        // todo: for now only a single search query is supported however in the future
        MergeTestState::new(3).run_script(&script[..]);
            splitpoint
///
 //additional cursor features
            if self.fragment.is_empty() {
        // todo: this will be changed once multiple queries are supported
                      delta: &Delta<RopeInfo>, client: &Client,
            categories: None,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
}
///
    {
    }
    fn edit_rev_undo() {
    #[bench]
            };
        }
    num: u32,
                edit: contents.clone()
                sel
    /// This method is responsible for updating the cursors, and also for
        cur_len_utf8
/// for single user cases, used by serde and ::empty
        // clamp to end of line
        }

                    } else {
    /// Determines the current number of find results and search parameters to send them to

        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
            AddSelectionBelow =>
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
/// an argument.
    }
pub struct SampleArgs {
            SelectionForFind { case_sensitive } =>
                      width_cache: &mut WidthCache, keep_selections: bool)
    #[cfg(feature = "benchmarks")]
    /// Return the offset of the codepoint before `offset`.
    first_line: usize,
                    }
            }
        assert_eq!(trace.get_samples_count(), 1);
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let (new_text, new_tombstones) =
        let subset_str = format!("{:#?}", expand_by[0].1);
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),

    Width(f64),
        assert_eq!(snapshot[7].name, "c");
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        }
    a_ids.intersection(&b_ids).cloned().collect()
            Assert(0, "cbd".to_owned()),
        let correct = parse_subset_list("

            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
                }
}
pub type StrCow = Cow<'static, str>;
    /// Only works well for ASCII, will probably not be maintained long-term.
    }
        if !before {
}
    }
        if wrap_col > 0 {
        // update only find highlights affected by change
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
                        if self.undone_groups.contains(undo_group) {
    /// If `line` is equal to one plus the current number of lines,
                        });
                    let transformed_inserts = inserts.transform_expand(&s);
                    if !deletes.is_empty() {
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        if !selection.regions_in_range(offset, offset).is_empty() {
        println!("{:#?}", delta_ops);


//! text.
                match *other {

        self.buffer_id
        deserializer.deserialize_str(CategoriesTVisitor)
    // this is the cost contributed by the timestamp to trace()
                while cursor.pos() < region.max() {
            let after = full_priority >= trans_priority;  // should never be ==
        }
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        match self {
    /// ties in edit priorities. Otherwise the results may be inconsistent.
                sel.add_region(SelRegion::new(last.start, offset));
        let deletes_from_union_a = parse_subset("-#---");
        // spam cmd+z until the available undo history is exhausted
        if self.is_enabled() {
///

use xi_rope::interval::Interval;
                }
    selection: Selection,
            trace.closure_payload("y", &["test"], || {
    }
        assert!(r != b_rope + a_rope);
    type Item = Cow<'a, str>;
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
                        } else {
        } else {
    pub fn with_limit_count(limit: usize) -> Self {
    /// This is a `Subset` of the "union string" representing the characters
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
            &rebased_deletes_from_union, &new_deletes_from_union);
    }
                    let end_of_line = match cursor.next::<LinesMetric>() {
        self.tombstones = new_tombstones;
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
mod sys_pid;
/// ```rust,ignore
    fn undo_5() {
    }
}
        self.prev::<BaseMetric>();
}
    #[derive(Debug)]
                        word_cursor.select_word()

        }
            Drag(MouseAction { line, column, .. }) =>
impl<'de> serde::Deserialize<'de> for CategoriesT {
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
            if Some(priority) == last_priority {
// limitations under the License.
    /// selection edges).
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
/// ```

    }
#[macro_use]
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
use std::borrow::Cow;
        println!("{:#?}", delta_ops);
//! text.
    out
            max_undo_so_far,
        let mut samples = self.samples_cloned_unsorted();

            if inserts.is_empty() {
            sample: Some(Sample::new_duration_marker(
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    Undo {
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).

            false => Selection::new(),
            // I think it's a precondition that this will never be called
    /// This uniquely represents the identity of this revision and it stays
        assert_eq!(None, a.prev_codepoint_offset(0));
    }
    #[bench]
        self.send_update_for_plan(text, client, styles,
    /// via process_name/thread_name respectively.
        b.push('\n');
    min: usize,
            }, to_payload("test_get_samples_nested_trace"));
        undo_group: usize,
                el.serialize_field(start)?;
        };
    /// Time complexity: O(log n)
            GotoLine { line } => self.goto_line(text, line),
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
enum FindStatusChange {
        let a = Rope::from("a\nb\nc");
                    let (mut a, rest) = end.split_first_mut().unwrap();

    fn from(r: Rope) -> String {
        self.start_drag(offset, region.start, region.end);
macro_rules! categories_from_constant_array {

        assert_eq!(Some(0), a.prev_codepoint_offset(1));
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    DurationEnd,

    /// Exposed for unit tests only.
pub struct ChunkIter<'a> {
}
        let mut samples = vec![
use std::fmt;
    }
use xi_rope::spans::Spans;
                        ops.push(self.build_update_op("copy", None, seg.n));
    fn gc() {

    }
/// Base unit is utf8 code unit.
            "ops": ops,
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
    session2: u32,
            lines: count_newlines(s),
                undo_group,
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
categories_from_constant_array!(1);
            Some(offset + len_utf8_from_first_byte(b))
        deletes_from_union
//! info.
        assert_eq!(trace.get_samples_count(), 0);
    // TODO: don't construct transform if subsets are empty
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
}
        let result = closure();
/// Base unit is utf8 code unit.
            self.tid == other.tid &&
    /// Sets the selection to a new value, without invalidating.
        --#-
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
        let (iv, new_len) = delta.summary();
                _ => panic!("to_base_units called with arg too large")
        let mut a = String::new();
    pub fn get_caret_offset(&self) -> Option<usize> {

        AssertMaxUndoSoFar(usize, usize),
        let first_rev = engine.get_head_rev_id().token();
    fn next_codepoint_offset_small() {
///
        let a = Rope::from("");
    out.as_mut_slice().reverse();
    /// Each instance represents a separate search query.
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,

            Assert(0, "acbd".to_owned()),
    None,
        self.invalidate_selection(text);
        self.pending_render = pending
    }
                    let after = new_full_priority >= full_priority;  // should never be ==
    #[inline]
/// Computes a series of priorities and transforms for the deltas on the right
    #[test]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    }
                last.1 = last.1.transform_union(&inserts);
use xi_rope::spans::Spans;
//
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
        if !new_inserts.is_empty() {
    /// The revision history of the document
            Copy(usize, usize),
            let horiz = None;
            // Snap to grapheme cluster boundary
            Assert(0, "ab".to_owned()),
pub type TracePayloadT = StrCow;
        --#--
    new_without_default_derive,
        Cow::from(a.into_owned() + b)
    #[bench]
        });
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
///
        };
        let rev = Revision {
            // Do the merge one direction
            }
    }
impl<'a> Drop for SampleGuard<'a> {
#[inline]
            let (start, end) = if offset < drag_state.offset {
                }
            MetadataType::ProcessLabels {..} => "process_labels",
        ");
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        let mut d_builder = Builder::new(TEST_STR.len());
/// are shared.
            event_type: event_type,
        in_base_units
        let mut engine = Engine::new(Rope::from(TEST_STR));
pub struct LinesRaw<'a> {
            rebased_deletes_from_union.union(to_delete)
///
        } else {

                },
        );
            Assert(0, "acrpbdzj".to_owned()),

                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
}
            return None;
        for region in self.selection.regions_in_range(start_pos, pos) {
/// });
            let mut len = 1;
        inserts: Subset,
                    let new_gc_dels = if inserts.is_empty() {
/// fn something_else_expensive() {

    fn next_codepoint_offset_small() {
            }
        let d = RopeDelta_::deserialize(deserializer)?;

    }
            self.collapse_selections(text);
            'O' => SampleEventType::ObjectSnapshot,
            ),
        let script = vec![
        self.utf16_size += other.utf16_size;

/// returned value is dropped.  `trace_closure` may be prettier to read.
    buffer_id: BufferId,
    assert!(a[0].rev_id == b[0].rev_id);
        assert_eq!(Some(10), a.next_codepoint_offset(6));
        let mut cursor = Cursor::new(self, offset);
        }

        let inserts_2 = parse_subset_list("
        let a = Rope::from("a\nb\nc");
                // TODO: small nit, merged region should be backward if end < start.
use std;
            SampleEventType::ObjectCreated => 'N',
            self.idx = 0;
    fn from(c: Vec<String>) -> CategoriesT {
        a.push('\n');
pub struct ByteIter<'a> {
        Self {
    /// You could construct the "union string" from `text`, `tombstones` and
        assert!(r == a_rope.clone() + b_rope.clone());
    pub fn set_scroll(&mut self, first: i64, last: i64) {
        assert_eq!(Some(0), b.prev_codepoint_offset(2));

// you may not use this file except in compliance with the License.
            None

        assert_eq!(output, String::from(engine.get_head()));
                engine.gc(&to_gc)
    wrap_col: WrapWidth,

/// A rope data structure.



        where S: Serializer
    {
            r = op.inserts.apply(&r);
    #[test]
        match self.breaks {
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    }
                        None if cursor.pos() == text.len() => cursor.pos(),

    fn add(self, rhs: Rope) -> Rope {
    fn lines_med() {

        assert_eq!(trace.get_samples_limit(), 20);
                self.start_drag(offset, offset, offset);
/// supported as an optimization when only one reference exists, making the
            // shouldn't be called with this, but be defensive
        for _ in 0..line_len {
        if self.is_enabled() {
    /// Selects the next find match.
// Low level functions
        if self.find.is_empty() {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
categories_from_constant_array!(5);
        }
        assert_eq!(5, a.offset_of_line(3));
    /// set with this function, which will make the revisions they create not have colliding IDs.
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
                         styles: &StyleMap, style_spans: &Spans<Style>,
        } else {

    #[serde(rename = "sort_index")]
        self.revs.push(new_rev);
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {

        }
        assert_eq!(trace.is_enabled(), true);
                println!("running {:?} at index {}", op, i);

                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
#[inline]

                    }
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
    fn bench_trace_instant(b: &mut Bencher) {
        engine
    #[test]
    // in a single session.
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);

    }
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
            wrap_col: WrapWidth::None,
}
    {
            // d-expand by other
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        self.scroll_to = Some(end);
    }
    fn is_boundary(s: &String, offset: usize) -> bool {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
impl Eq for CategoriesT {}
        let a = Rope::from("a\nb\nc");
    }
    /// Returns an iterator over chunks of the rope.
        }
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
/// }
    #[inline]
/// For example, take a string that starts with a 0xC2 byte.
///     something_else_expensive();
        self.rev_id_counter += 1;
            find.update_highlights(text, delta);
            // with offset == s.len(), but be defensive.
        }
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        x
pub struct BaseMetric(());
    tombstones: Rope,
        if line > max_line {

    /// Select entire buffer.
        let trace = Trace::disabled();
    }
        let mut to_undo = BTreeSet::new();
        }
    #[test]
        let snapshot = trace.samples_cloned_unsorted();



            retain_revs.insert(last.rev_id);


            }
                }
            self.shrink_to_fit();
impl SampleEventType {
    }
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
///
}

    /// This function does not perform any scrolling.

    /// should be as unlikely to collide as two random u64s.
}
            Assert(1, "bdefg".to_owned()),
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        for u in s.chars() {
            lc_shadow: LineCacheShadow::default(),
        let mut hls = Vec::new();
                (region.is_upstream() && c == pos) ||
    }
//

        assert_eq!(snapshot[3].name, "b");
impl Engine {
                    }
    }
        }
            session: default_session(),
            self.unset_find();
                self.set(pos);
            cursor: Cursor::new(self, start),
                }
    #[cfg(feature = "json_payload")]
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
                // merge logic.
        /// Just the `symmetric_difference` (XOR) of the two sets.
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
        } else {
            // shouldn't be called with this, but be defensive
            self.idx += 1;
    #[serde(rename = "sort_index")]
    }
            SampleEventType::ObjectDestroyed => 'D',
        let cursor = Cursor::new(self, offset);
    /// Tracks whether find highlights should be rendered.
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        assert_tokens(&rope, &[
/// Boundary is atomic and determined by codepoint boundary.
                rev_id: basic_rev(i),
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
                }
pub struct RevId {
            Merge(0,2), Merge(1, 2),
    /// Return the offset of the codepoint before `offset`.
    /// The line number is 0-based, thus this is equivalent to the count of newlines
}
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        let new_pos = self.pos() + (end - offset);
    TRACE.is_enabled()
}

            std::thread::sleep(std::time::Duration::new(0, 1000));
        let (mut new_revs, text, tombstones, deletes_from_union) = {
    /// Tracks whether find highlights should be rendered.
            let a_to_merge = &self.revs[base_index..];
                    sel.add_region(region);
        }

        assert_eq!(rope.offset_of_line(0), 0);
        }
// You may obtain a copy of the License at
}
    }

    height: usize,

        }).collect();
            // copy the current state
    #[test]
//! `Engine::merge`, which is more powerful but considerably more complex.
            match c.edit {
        let r = r + Rope::from(&b[MIN_LEAF..]);
    /// The maximum number of bytes the tracing data should take up.  This limit
        // send updated replace status if changed
    fn test_ser_de() {
/// The result of the closure.
    fn gc_6() {
    fn bench_trace_closure_payload(b: &mut Bencher) {


    pub fn get_head(&self) -> &Rope {
    } else if x < max {

                let (pl, poffset) = self.prev_leaf()?;
extern crate time;
        ----
                    let end_of_line = match cursor.next::<LinesMetric>() {
        self.sample_limit_count
    TRACE.enable();
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        let subset_str = format!("{:#?}", expand_by[0].1);
            l[offset..].chars().next()
            args: Some(SampleArgs {
// utility function to clamp a value within the given range
    // TODO make this faster somehow?
///
            find.find_status(matches_only)
            offset += 1;
            MergeTestState { peers }
                l = pl;
        assert_eq!(0, a.line_of_offset(0));
pub type RevToken = u64;
        }
            engine.edit_rev(0, 0, first_rev, delta);
        self.revs.reverse();
    /// the pid or the tid depends on the name of the event
/// Find a set of revisions common to both lists
            self.start_drag(offset, offset, offset);
/// # Examples
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
    pub fn prev_codepoint(&mut self) -> Option<char> {

                        word_cursor.select_word()
    fn delta_rev_head_3() {
    //TODO: implement lines_raw using ranges and delete this
    session: SessionId,

            word_cursor.select_word()
        /// and new deletes_from_union
        let new_head = engine.get_head_rev_id().token();
    }
    {
    fn invalidate_selection(&mut self, text: &Rope) {
        assert_eq!(5, a.offset_of_line(3));
        trace.disable();

use std::cell::RefCell;
/// could trigger incorrect behavior if they collide, so u64 is safe.
            Assert(0, "zcpbdj".to_owned()),
            return ix;
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
                              to_payload("test_get_samples"));
}
                leaf_offset = self.pos() - noffset;
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {

//
        -#-
                self.select_word(text, offset, false),


            Merge(2,0),
    #[serde(skip_serializing_if = "Option::is_none")]

        self.pending_render = pending
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
// Unless required by applicable law or agreed to in writing, software
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
    }
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
            pos += 1;
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
#[inline]
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                    filename.to_str().map(|s| s.to_string())
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
                        let start_line = seg.our_line_num;
        }
        expand_by = next_expand_by;
            return Vec::with_capacity(0);
    }
        };
    match std::env::current_exe() {
            duration_us: None,

    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    // * Actual measurement in text layout
                                deletes,
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)

        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        }
    /// Sorting priority between processes/threads in the view.
    if x < min {
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
    /// The line number is 0-based.
            Assert(0, "adfc".to_owned()),
                    if seg.validity == line_cache_shadow::ALL_VALID {
/// could trigger incorrect behavior if they collide, so u64 is safe.
    // How should we count "column"? Valid choices include:
                let mut peer = Engine::new(Rope::from(""));
        }
        // todo: for now only a single search query is supported however in the future
                                                        soft_breaks.as_mut(),
        // find the lowest toggled undo group number
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            }
        }
        // creation) is:
/// discussion on payload.

            AssertMaxUndoSoFar(0,3),
        assert_eq!(Some(8), a.next_grapheme_offset(0));

        // We add selection after find because we want it to be preferred if the
    /// Does a drag gesture, setting the selection from a combination of the drag
}
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
#[cfg(feature = "json_payload")]
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    if sel_end_ix > sel_start_ix {
#[macro_use]
            let max_undo = self.max_undo_group_id();
    fn gc_6() {
        // NOTE: we derive to an interim representation and then convert
        // This might be an over-specified test as it will
                self.drag_state = None;
            }
#![cfg_attr(feature = "benchmarks", feature(test))]
    }
        if self.cursor.pos() >= self.end {
use std::hash::{Hash, Hasher};
        (Revision {
                            ops.push(self.build_update_op("skip", None, n_skip));
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn find_common_1() {
            Find { chars, case_sensitive, regex, whole_words } =>
            self.start_drag(offset, offset, offset);
        assert_eq!(1, b.line_of_offset(2));
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
}

        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        Some(&leaf[start_pos .. end])
            next_expand_by.push((trans_priority, new_trans_inserts));
            black_box(time::precise_time_ns());
                cursors.push(c - start_pos);
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
            // The deletes are already after our inserts, but we need to include the other inserts
        match *self {
        a.push('\n');
    let new_text = del_delta.apply(text);
/// * `name` - A string that provides some meaningful name to this sample.

    TRACE.closure_payload(name, categories, closure, payload)
    }
            event_type: SampleEventType::CompleteDuration,
        fn run_script(&mut self, script: &[MergeTestOp]) {

        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
            categories: Some(categories.into()),
        self.lines(0, self.len())
    /// in the slice up to `offset`.
        assert!(a == a2);
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
                metadata_sort_index: None,
    }
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        while !leaf.is_char_boundary(end) {
            let _x = trace.block("something", &[]);

            SampleEventType::CompleteDuration => 'X',
//! `Engine::merge`, which is more powerful but considerably more complex.
    }
        // update only find highlights affected by change
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
use xi_rope::delta::Delta;
// you may not use this file except in compliance with the License.
    fn test_ser_de() {
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
/// are shared.
use bytecount;
        sel.collapse();
        self.set_dirty(text);
    offset: usize,
    fn do_cancel(&mut self, text: &Rope) {
mod sys_tid;
        if self.find.is_empty() {
    out.as_mut_slice().reverse();
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
/// Enable tracing with the default configuration.  See Config::default.
        self.find_changed = FindStatusChange::All;
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
            find: Vec::new(),
            thread_name: Sample::thread_name(),
        engine.undo([1,3].iter().cloned().collect());
            }

        assert_eq!(correct, rearranged_inserts);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
use client::Client;

    }
    }
    /// Find what the `deletes_from_union` field in Engine would have been at the time
impl PartialOrd for Sample {
        assert_eq!(trace.get_samples_count(), 5);
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

    fn bench_trace_closure_disabled(b: &mut Bencher) {
    /// return if a delete is un-done or an insert is re- done.
    }
/// ```
                Undo { ref toggled_groups, ref deletes_bitxor } => {
        self.undone_groups = groups;
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
                let (pl, poffset) = self.prev_leaf()?;
            if let Edit { ref inserts, .. } = rev.edit {

            let max_undo = self.max_undo_group_id();
        assert_eq!(snapshot[0].name, "process_name");
        }
        }
    AsyncInstant,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                s.len()
        a.lines_all().collect::<Vec<_>>());
                Some(pos) => offset += pos + 1,
            tid: sys_tid::current_tid().unwrap(),

/// Boundary is trailing and determined by a newline char.
        } else {
    }
        } else {
                              to_payload("test_get_samples"));
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    }
            let mut sel = drag_state.base_sel.clone();
        // rebase insertions on text and apply
struct DragState {

        let text_a = Rope::from("zcbd");

    /// Toggles a caret at the given offset.
/// as opposed to thousands of revisions.
            revs: vec![rev],
    }
    }
            SelectAll => self.select_all(text),
//
        } else if self.first_line + self.height <= line {
        assert_eq!(4, a.offset_of_line(2));


        // We could probably reduce the cloning of selections by being clever.

            }


        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            trace: None,
                    inserts: ins,
        let mut engine = Engine::empty();
        d

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    fn edit_rev_concurrent() {
            let c = i.to_string() + "\n";
    }
pub type SessionId = (u64, u32);
    #[test]
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
/// The payload associated with any sample is by default a string but may be
        b.iter(|| black_box(trace.instant_payload(
pub struct Replace {
    #[test]
            height: 10,
    #[serde(skip_serializing_if = "Option::is_none")]
/// creation.  Roughly corresponds to start_ns but instead there's a
                }
            let mut word_cursor = WordCursor::new(text, offset);
                RenderTactic::Preserve => {
                // merge logic.
                        undone_groups = Cow::Owned(new_undone);
        for _ in 0..line_len {


    }
            None
    /// The maximum amount of space the tracing data will take up.  This does
                            max_undo_so_far: rev.max_undo_so_far,
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
            match seg.tactic {
    pub categories: Option<CategoriesT>,
        for _i in 0..50 {
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    }
    #[cfg(feature = "benchmarks")]
/// assert_eq!("ello wor", String::from(&b));
    fn undo_2() {
                Contents::Edit {inserts, ..} => inserts,
    }
        self.undone_groups = groups;
    #[serde(rename = "name")]
        let mut selections = Vec::new();
    fn identity() -> Self {
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            event_type: event_type,
    fn replace_small() {
                    return None;
        assert_eq!(None, a.next_codepoint_offset(10));
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
            let head = engine.get_head_rev_id().token();


        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
    }
    {
        }
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        assert_eq!(0, b.offset_of_line(0));
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
                    let full_path_str = full_path.into_string();
                            warn!("Failed to get string representation: {:?}", e);
// ======== Merge helpers
        if !self.is_enabled() {
    scroll_to: Option<usize>,

        let trace = Trace::enabled(Config::with_limit_count(20));
}
    fn can_fragment() -> bool { false }
    /// The session ID used to create new `RevId`s for edits made on this device
}
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
            _ => return
    }
    fn test_get_samples() {
        };
        self.revs.iter().enumerate().rev()
            categories: None,
        let contents = match rev.edit {
        } else { // no toggled groups, return past end
                        }
        let search_query = match self.selection.last() {
        engine.gc(&gc);
        assert!(a.slice(0, 0) == empty);
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
                _ => { }
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            Assert(0, "ab".to_owned()),
        if self.current.is_none() {
        /// Just the `symmetric_difference` (XOR) of the two sets.
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
    #[test]
    }
    s.serialize_char(ph.into_chrome_id())
            Merge(0,1), // the merge from the whiteboard scan
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
            s = &s[splitpoint..];
        let start = self.line_col_to_offset(text, line, 0);
// limitations under the License.

            Merge(1,2),
        Merge(usize, usize),
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
    }
        }
        self.revs.reverse();
            tid: sys_tid::current_tid().unwrap(),
    fn bench_trace_block_disabled(b: &mut Bencher) {
        }
            max_undo_so_far: 0,
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
            next_boundary = c.next_boundary(&l, leaf_offset);

            offset,

        }
    }
    }

    {
#[inline]
        inserts: Subset,

    /// This function will panic if `offset > self.len()`. Callers are expected to
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
}
    fn undo_3() {
        }
    }
/// ```rust
    /// Updates the view after the text has been modified by the given `delta`.
            let expand_by = compute_transforms(a_new);
    ObjectSnapshot,
                peer.set_session_id(((i*1000) as u64, 0));

use std;
                            rev_id: rev.rev_id,
            // Do the merge one direction
/// first can make it ~1.7x slower than a regular trace.
            return 0;
        ---#--
/// fn something_expensive() {

        self.wrap_col = WrapWidth::Width(self.size.width);
        self.enable_config(Config::default());
}
        let offset = self.line_col_to_offset(text, line as usize, 0);
    pub fn offset_of_line(&self, line: usize) -> usize {
    #[serde(rename = "name")]
    /// This function will panic if `offset > self.len()`. Callers are expected to
            }
                            (inserts.transform_shrink(&gc_dels),
    #[test]
}
    #[test]
    text: Rope,
            GestureType::MultiLineSelect =>
    #[should_panic]
            &rebased_deletes_from_union, &new_deletes_from_union);

mod sys_pid;
                                                     "insert", node)
pub type StrCow = Cow<'static, str>;

                              payload: Option<TracePayloadT>,
            session: default_session(),
        // send updated replace status if changed
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        self.enabled.load(AtomicOrdering::Relaxed)
// you may not use this file except in compliance with the License.

            }
        let inserts = parse_subset_list("

        let inserts_1 = parse_subset_list("
    }
        where S: Serializer
/// Returns all the samples collected so far.  There is no guarantee that the
        let mut a = String::new();
        let delta = Delta::synthesize(&self.tombstones,
// You may obtain a copy of the License at
                        None
        }
        }, to_payload("test_get_sorted_samples"));

                    priority, undo_group,
        self.height
use xi_rope::delta::Delta;
        assert_eq!(None, a.prev_grapheme_offset(0));
            els: Vec<RopeDeltaElement_>,
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
    {
fn initial_revision_counter() -> u32 {
    rev_id: RevId,
            event_type: SampleEventType::Metadata,
            deletes: Subset::new(0),
    }
/// A flag used to indicate when legacy actions should modify selections
// Low level functions
    /// The maximum number of samples that should be stored.
        }
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        undo_group: usize,
        #[serde(rename_all = "snake_case")]
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
    #[test]
            if !selection.is_empty() {
        self.replace.clone()
        match ty {
}
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {


    #[test]
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
        assert_eq!(trace.get_samples_count(), 5);
        let mut all_samples = self.samples.lock().unwrap();
            }
    }
    fn deserialize<D>(deserializer: D)


/// std::mem::drop(trace_guard); // finalize explicitly if
            GestureType::WordSelect =>
        ChunkIter {
    #[cfg(feature = "benchmarks")]
            let right_str = self[splitpoint..].to_owned();
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    #[test]
        if !selection.regions_in_range(offset, offset).is_empty() {

/// ```

//! There is also a full CRDT merge operation implemented under
    fn to_payload(value: &'static str) -> TracePayloadT {
        MergeTestState::new(6).run_script(&script[..]);
        let mut delta = serializer.serialize_struct("Delta", 2)?;
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        // the smallest values with which it still fails:
        // creation) is:
        ---#-
        assert_eq!(2, a.line_of_offset(4));
        let tombstones = Rope::from("27");


        ");
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    }

                return offset;
#[derive(PartialEq, Debug)]
    /// Tests that priorities are used to break ties correctly
    #[test]
pub struct View {

    }

                Contents::Undo { .. } => panic!(),

    fn measure(info: &RopeInfo, _: usize) -> usize {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);


    }
                        &mut rest[bi - ai - 1]
            let mut word_cursor = WordCursor::new(text, offset);
    #[test]

        }
        RopeInfo {
    }
        let mut b = line_cache_shadow::Builder::new();
            SampleEventType::ObjectCreated => 'N',
        -----#
    #[test]
                selection.add_region(occurrence);
    fn merge_associative() {
}
        }
        /// and new deletes_from_union
    fn merge_simple_delete_1() {
            Some(region) => {
    }
            .map(|(i, _)| i)
        // current recording mechanism should see:

}
                SelRegion::new(start, end)

    /// tiny it is effectively O(n). This iterator does not allocate.
                } else if click_count == Some(2) {
            event_type: SampleEventType::Metadata,
    }

    #[cfg(feature = "benchmarks")]
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                    } else {
        let (start, end) = {
        assert_eq!("-###-", &subset_str);
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());


        }
    /// of the chunks is indeterminate but for large strings will generally be
        Self {
// See the License for the specific language governing permissions and
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let (leaf, offset) = match self.get_leaf() {
                   style_spans: &Spans<Style>, line_num: usize) -> Value
        if self.find.is_empty() {

                }
        let trace = Trace::enabled(Config::with_limit_count(11));
        /// The subset of the characters of the union string from after this
pub fn len_utf8_from_first_byte(b: u8) -> usize {
/// than a string that needs to be copied (or ~4.5x slower than a static string)
            _ => return
    }
}
        } else {
            };
    TRACE.samples_cloned_sorted()
               a.lines_all().collect::<Vec<_>>());
        let trace = Trace::disabled();
    fn gc_2() {

///
/// returned value is dropped.  `trace_closure` may be prettier to read.
// See the License for the specific language governing permissions and
        self.do_set_replace(replacement, false);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

                len += 1;
        assert_eq!(snapshot[6].name, "z");
    }
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        // A with ring, hangul, regional indicator "US"
            Some((l, off)) => (l, off),
            name: name.into(),
use multiset::{Subset, CountMatcher};
extern crate serde_json;
                    result = cow_append(result, &self.fragment[.. i + 1]);
        }
    fn merge_whiteboard() {

    }
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
        self.drag_state = Some(DragState { base_sel, offset, min, max });
                   whole_words: bool) {
///
            }
    }
use delta::{Delta, InsertDelta};

use unicode_segmentation::GraphemeIncomplete;


    ///
            "pristine": pristine,
/// * `name` - A string that provides some meaningful name to this sample.

            // d-expand by other
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
            }
}
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

    pub fn default() -> Self {
/// Measured unit is utf8 code unit.
        let tid = all_samples.front()
        fn run_op(&mut self, op: &MergeTestOp) {
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {

        client.def_style(&style.to_json(ix));
}
                if s.ends_with('\n') {

impl Hash for Sample {
        assert_eq!(trace.get_samples_count(), 1);
                    }
// limitations under the License.
            black_box(trace.block_payload(
    // TODO: insert from keyboard or input method shouldn't break undo group,
    }

    match b {

    }
                    let after = new_full_priority >= full_priority;  // should never be ==
        inserts: Subset,
            match memchr(b'\n', &s.as_bytes()[offset..]) {
        let (new_text, new_tombstones) =
        });

        json!({"test": value})
            pos -= 1;
    Width(f64),
        // find the lowest toggled undo group number
            name: name.into(),
/// ```rust
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
                            max_undo_so_far: rev.max_undo_so_far,
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
const FLAG_SELECT: u64 = 2;
        let script = vec![
}
impl Rope {
        for i in 0..self.len() {
                }
                self.set_selection(text, SelRegion::caret(offset));
        self.wrap_col = WrapWidth::Width(self.size.width);
impl Eq for CategoriesT {}
        &self.selection
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
// Unless required by applicable law or agreed to in writing, software

/// Base unit is utf8 code unit.
#[inline]


        let tid = all_samples.front()

    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
                } else {
                }
            }
    /// Determines whether the offset is in any selection (counting carets and
        self.drag_state = Some(DragState {
        let (mut l, mut offset) = self.get_leaf()?;
}
            tid: sys_tid::current_tid().unwrap(),
        client.update_view(self.view_id, &params);
                // sanitize input
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();

/// {
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before

    TRACE.block(name, categories)
    }
                }
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    fn merge_simple_delete_1() {
            Assert(0, "ab".to_owned()),
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        for _ in 0..(edits-max_undos) {
    }
    #[cfg(feature = "benchmarks")]
            Move(movement) => self.do_move(text, movement, false),
        engine.gc(&gc);
pub struct View {
}
            self.name == other.name &&
        /// The subset of the characters of the union string from after this
            Assert(1, "bdefg".to_owned()),
    #[test]
                        None if cursor.pos() == text.len() => cursor.pos(),
    }
        for &(sel_start, sel_end) in hls {
    /// Collapse all selections in this view into a single caret
        self.prev::<BaseMetric>();
                    if s.ends_with('\r') {

impl serde::Serialize for CategoriesT {
        let mut d_builder = Builder::new(TEST_STR.len());
        where D: serde::Deserializer<'de>
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
#[cfg(test)]
    utf16_size: usize,
            trace.closure("test_samples_closure", &["test"], || {});
            edit: Edit {
        ];
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
/// ```
    #[test]
        self.set(new_pos);

        /// and new deletes_from_union
            SampleEventType::Instant => 'i',
// distributed under the License is distributed on an "AS IS" BASIS,

}
    }
    #[cfg(feature = "benchmarks")]
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            max: offset,
        MergeTestState::new(3).run_script(&script[..]);
        }


            samples: Mutex::new(FixedLifoDeque::new())
    out
    TRACE.samples_cloned_unsorted()
/// Represents a transform from one rope to another.
                        Some(gc_dels.transform_shrink(&inserts))
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    #[bench]

    }
    lines: usize,
    /// This is a regression test to ensure that session IDs are used to break
use memchr::{memrchr, memchr};
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let (mut l, mut offset) = self.get_leaf()?;
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
                Some(filename) => {


    #[test]


    fn gc_4() {
}
const MAX_LEAF: usize = 1024;
            self.set_selection(text, sel);
        self.find_changed = FindStatusChange::All;
        let first_rev = engine.get_head_rev_id().token();


                Rope::from(s1.clone()),
                last_priority = Some(priority);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                cur_all_inserts = older_all_inserts;
}
            utf16_size: 0,
    /// # Panics
    }
///
///     something_else_expensive();
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
use xi_rope::delta::Delta;

            self.mk_new_rev(priority, undo_group, base_rev, delta);
            }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
/// 1. Samples that span sections of code may be inserted on end instead of
            event_type: SampleEventType::Metadata,
            undo_group: 0,
    {
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
    #[should_panic]
    ProcessSortIndex { sort_index: i32 },
                if !region.is_caret() {
    }
        a.lines_all().collect::<Vec<_>>());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
                    self.fragment = &self.fragment[i + 1 ..];
                self.highlight_find = visible;
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
    /// Determines whether the offset is in any selection (counting carets and
    /// Exposed for unit tests only.
        assert_eq!(trace.get_samples_count(), 5);
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    fn merge_insert_only_whiteboard() {
        let mut sel = self.selection.clone();
use tabs::{ViewId, BufferId};
pub struct Trace {
//! text.
                self.find_changed = FindStatusChange::All;
    #[serde(serialize_with = "serialize_event_type")]
            Merge(1,0),
            //} else {
}
                    }
        let mut pos = self.pos();

/// overhead tracing routine available.
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        let inserts = parse_subset_list("
                    let after = new_full_priority >= full_priority;  // should never be ==
            find.unset();
                self.select_line(text, offset, line, false),
        assert_eq!(rope.line_of_offset(15), 3);
                            max_undo_so_far: rev.max_undo_so_far,
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
                    els: delta.els.drain(..)
        b if b < 0xf0 => 3,
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
impl<'a> Iterator for Lines<'a> {
    pub fn prev_grapheme(&mut self) -> Option<usize> {
        self.selection = sel;


        // send updated replace status if changed
        let a = Rope::from("");
#[cfg(feature = "json_payload")]
        if !self.is_enabled() {
//
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        let mut engine = Engine::new(Rope::from(TEST_STR));
use find::Find;
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
    }
            GestureType::PointSelect => {
    TRACE.samples_cloned_unsorted()
                    if !inserts.is_empty() {
            Some((l, off)) => (l, off),
        let utf8_offset = 19;
    }
        let b = a.slice(2, 4);
        let a = Rope::from("a\nb\nc");
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
        let a = Rope::from("");
    }
    /// If `line` is equal to one plus the current number of lines,
        if let Some(occ) = closest_occurrence {

pub fn enable_tracing() {
    fn test_samples_pulse() {
    }
/// revisions not shared by both sides.
        for rev in self.revs[rev_index..].iter().rev() {
/// same priority into one transform to decrease the number of transforms that
    }
                         hls: &[(usize, usize)],
            // Snap to grapheme cluster boundary
    #[serde(serialize_with = "serialize_event_type")]
        if !cursors.is_empty() {
/// Find an index before which everything is the same
    }
            if let Some(pos) = pos { start_of_line.set(pos) }

    /// All the selection regions other than the one being dragged.
    pub fn slice(&self, start: usize, end: usize) -> Rope {
            Assert(1, "arpbj".to_owned()),
    pub name: StrCow,
    revs: Vec<Revision>,
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        ];
                }
            Find { chars, case_sensitive, regex, whole_words } =>
        self.text = new_text;
    #[test]
    /// Sorting priority between processes/threads in the view.
        if wrap_col > 0 {
        deletes_from_union

    pub fn sel_regions(&self) -> &[SelRegion] {

    }

    /// Each instance represents a separate search query.

            Gesture { line, col, ty } =>
#[derive(Clone, Copy)]
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
                (!region.is_upstream() && c == start_pos) ||
    fn into_chrome_id(&self) -> char {
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();

        // todo: this will be changed once multiple queries are supported
        assert_eq!(2, expand_by.len());
                            }
            }
                Contents::Undo { .. } => panic!(),
            let right_str = self[splitpoint..].to_owned();
                    selection.add_region(occ);
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        }
        }
        client.def_style(&style.to_json(ix));
    end: usize,
                selections.push((sel_start_ix, sel_end_ix));
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
                    return i + 1; // +1 since we know the one we just found doesn't have it
    idx: usize,
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
                }
impl RevId {
            MetadataType::ThreadName {..} => "thread_name",
    fn gc_2() {
        println!("{:#?}", b_delta_ops);
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
//
/// ```
    /// The incrementing revision number counter for this session used for `RevId`s
                find_leaf_split_for_bulk(s)
                    linewrap::rewrap_width(breaks, text, width_cache,
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        assert_eq!(Some(9), a.next_grapheme_offset(3));
    }
        MergeTestState::new(6).run_script(&script[..]);
    }
        // same span exists in both sets (as when there is an active selection)
        }
}
        let mut all_samples = self.samples.lock().unwrap();
impl SampleEventType {
        }
    // and partly because you need to retain more undo history, to supply input to the
// You may obtain a copy of the License at
        ---#--
        let first_line = self.line_of_offset(text, start);
//! CRDT implementation techniques, because all operations are serialized in
        CategoriesT::DynamicArray(c)

    /// Time complexity: O(log n)

    {
        self.set_selection_for_edit(text, new_sel);
            Assert(0, "ab".to_owned()),
//! A rope data structure with a line count metric and (soon) other useful
                },
        revs.append(&mut revs_3);
            't' => SampleEventType::FlowInstant,
        } else {

    // transform representing the characters added by common revisions after a point.

                Undo { toggled_groups, deletes_bitxor } => {
            deletes_from_union,
const MAX_LEAF: usize = 1024;
            rev_id: self.next_rev_id(),
            Assert(0, "zacbd".to_owned()),
        }
/// an argument.
/// });
        // Any edit cancels a drag. This is good behavior for edits initiated through
                metadata_name: None,
//! conceptually represents the current text and all edit history for that
                }
use width_cache::WidthCache;
        /// together. For example, an auto-indent insertion would be un-done
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    }
        });
        #------
        let end = self.sel_regions().last().unwrap().end;
                    s = s.transform_shrink(&transformed_inserts);

        let mut d_builder = Builder::new(TEST_STR.len());
    }
    #[test]
            size: Size::default(),
            match *op {
        for find in &mut self.find {
        b.iter(|| {
    /// This method is responsible for updating the cursors, and also for
    #[cfg(feature = "benchmarks")]

            },
        if s.len() <= MAX_LEAF {
        #------
    // trace_block()/trace_closure
    #[test]
        assert_eq!(snapshot[2].name, "x");
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
    /// Returns a slice of the string from the byte range [`start`..`end`).
/// an argument.

            self.set_dirty(text);
/// However, anything that can be converted into a Cow string can be passed as

                         styles: &StyleMap, style_spans: &Spans<Style>,
        self.iter_chunks(0, self.len())
            _ => return
    ObjectCreated,
        let mut b = line_cache_shadow::Builder::new();
/// the `base_revs`. This allows the rest of the merge to operate on only
        let res = find_common(&a, &b);
        trace.instant("4", &["test"]);
    }

            utf16_size: count_utf16_code_units(s),

            // which we can do with another peer that inserts before a and merges.
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
        }
            }
    pub(crate) fn has_pending_render(&self) -> bool {
                                                                0, "copy", 2)?;
        let mut selection = self.selection.clone();
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
            } else {
        engine.undo([1].iter().cloned().collect());

            // The deletes are already after our inserts, but we need to include the other inserts

            sel.add_region(new_region);
                self.push_leaf(s.to_owned());
/// # Performance
        let initial_rev = engine.get_head_rev_id().token();
        if last_col == 0 && last_line > first_line {
                let offset = self.selection[0].start;
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
    }
    session1: u64,
    }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        ------#
    }
/// bytes required to represent the codepoint.
        }

        };
}
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
            s = &s[splitpoint..];
/// Returns the file name of the EXE if possible, otherwise the full path, or

    deletes: Subset,
            self.record(Sample::new_duration(
    /// Sets the selection to a new value, invalidating the line cache as needed.
pub struct ByteIter<'a> {
        assert_eq!(0, a.lines_raw_all().count());
    fn can_fragment() -> bool {


/// Is tracing enabled.  Technically doesn't guarantee any samples will be
                        } else {
    /// If the cursor is at the end of the leaf, advances to the next leaf.
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
            let b = s.as_bytes()[offset];
    }
            1 if self.selection[0].is_caret() => {
        d_builder.delete(Interval::new_closed_open(58, 61));
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            SelectionForFind { case_sensitive } =>
    }
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                } else {
                }
            result["cursor"] = json!(cursors);
    }
    fn test_get_sorted_samples() {
}
    }

    #[test]
                            }

        assert_eq!(snapshot[3].name, "b");
        let text = Rope::from("13456");


extern crate test;
}
    }
#[inline]
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let d = engine.delta_rev_head(first_rev);
        self.find_changed = FindStatusChange::Matches;

    fn is_boundary(s: &String, offset: usize) -> bool {
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        b.iter(|| {
/// See `trace_closure` for how the closure works and `trace_payload` for a
        }
    }
        engine.undo([].iter().cloned().collect());
/// Boundary is atomic and determined by codepoint boundary.
                self.highlight_find = visible;

        let mut engine = Engine::new(Rope::from(TEST_STR));
                                gc_dels = gc_dels.transform_union(inserts);
        b.push('\n');

use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        // send updated find status only if there have been changes
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
                    as_vec.push(Sample::new_metadata(
        a.push('\n');
    ///
///
            trace.instant("test_samples_pulse", &["test"]);
    /// Returns an iterator over chunks of the rope.
            }
        }).collect();
    }
        while !leaf.is_char_boundary(end) {
            if cur_len_utf16 >= in_measured_units {
use internal::find::FindStatus;
    #[test]
        let head = engine.get_head_rev_id().token();

            let right_str = self[splitpoint..].to_owned();
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
    {
        }
///
        thread.name().map(|ref s| to_cow_str(s.to_string()))
mod sys_tid;
            height: 10,
#[inline]
                        gc_dels = new_gc_dels;
#[inline]
                    selection.add_region(occ);
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
    utf16_size: usize,

                }
        } else {
    #[test]
    /// Imagine a "union string" that contained all the characters ever
    // even worth the code complexity.
    }
    // Render a single line, and advance cursors to next line.
        #---
                last_priority = Some(priority);
            }

            edit: Contents::Edit {
        engine.undo([1].iter().cloned().collect());

        self.samples.lock().unwrap().limit()
        b.iter(|| black_box(trace.instant_payload(
pub fn enable_tracing_with_config(config: Config) {
    fn can_fragment() -> bool {
            .map(|(i, _)| i)
    type Item = Cow<'a, str>;
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
                    text.slice_to_string(region.min(), region.max())
        ");
    /// Get text of a given revision, if it can be found.
        #[serde(rename_all = "snake_case")]
//! CRDT implementation techniques, because all operations are serialized in
                self.add_selection_by_movement(text, Movement::Up),
            engine.edit_rev(1, i+1, head, d);
    // of the union string length *before* the first revision.
                        };
            //} else {
    pub(crate) fn has_pending_render(&self) -> bool {
        ids.iter().cloned().map(|i| {
    }
            samples: Mutex::new(FixedLifoDeque::new())

            }
            Drag(MouseAction { line, column, .. }) =>
// Licensed under the Apache License, Version 2.0 (the "License");
impl Metric<RopeInfo> for LinesMetric {
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        }
            Assert(1, "zapbj".to_owned()),
            scroll_to: Some(0),
            engine.undo(undos.clone());
            // with offset == 0, but be defensive.
        info.lines
    pub fn session_id(&self) -> SessionId {


            'i' => SampleEventType::Instant,
            }
        } else {
    fn edit_rev_undo_3() {
            }
    utf16_size: usize,
        trace.instant("2", &["test"]);
    /// description for the invariant.
        });
        let subset_str = format!("{:#?}", expand_by[0].1);
        for find in self.find.iter() {
                if !inserts.is_empty() {

            if inserts.is_empty() {
#[inline]
/// A static string has the lowest overhead as no copies are necessary, roughly
        fn run_op(&mut self, op: &MergeTestOp) {
            } else {
    fn sample_name(&self) -> &'static str {
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
///
                    } else {
        engine.edit_rev(1, 3, new_head_2, d3);
    /// The thread the sample was captured on.  Omitted for Metadata events that
    }
extern crate serde_json;
    #[test]
                    // of which undos were used to compute deletes_from_union in edits may be lost.
    pub fn offset_of_line(&self, line: usize) -> usize {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        if !new_inserts.is_empty() {
    /// Find the first revision that could be affected by toggling a set of undo groups
use std::borrow::Cow;
        assert_eq!(rope.line_of_offset(3), 1);
        } else {
    {

            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
            let (start, end) = if offset < drag_state.offset {
    /// The maximum number of entries the tracing data should allow.  Total
            //leaf.len() - start_pos
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    }


            priority: 0,
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        use self::MergeTestOp::*;
    }

        assert_eq!(snapshot.len(), 9);
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
                    };
                SelectionModifier::Add => {
            write!(f, "{}", String::from(self))
            _ => return
        }
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
            let next_chunk = self.inner.next();

        // A with ring, hangul, regional indicator "US"
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        ");
            };

//! this central engine. It provides the ability to apply edits that depend on
            // corner and I'm lazy -cmyr
                for &region in rest {
        hasher.finish()
    /// The largest undo group number of any edit in the history up to this
        assert_eq!(snapshot[8].name, "x");
/// See `trace_payload` for a more complete discussion.
        self.pending_render

        self.set_selection_raw(text, selection);
}
    }
                return;
        }
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        let text_with_inserts = text_ins_delta.apply(&self.text);
    ns / 1000
                         start: usize, end: usize, sel: &[(usize, usize)],
        if !self.is_enabled() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.

    // TODO: this should be a Cow
                }

        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
        }
        let trace = Trace::enabled(Config::with_limit_count(10));
            }
use bytecount;
        };
/// stored as tracing could still be enabled but set with a limit of 0.
            let right_str = self[splitpoint..].to_owned();
        for rev in old_revs.into_iter().rev() {
pub struct Lines<'a> {

            engine.undo(to_undo.clone());
///
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
        a.lines_all().collect::<Vec<_>>());

    // allowing us to use the same method to insert the text into the tombstones.
            self.unset_find();
    }
    // for simplicity.
        d_builder.build()
                    return None;
    }
/// # Examples
            Assert(3, "ab".to_owned()),
            DeltaElement::Copy(ref start, ref end) => {
        x
            find.find_status(matches_only)
    #[cfg(feature = "benchmarks")]
                        });
        // +2 for exe & thread name.
            } else {
    }
    } else {

/// Find a set of revisions common to both lists
/// Create a `Rope` from a `String`:
    fn compute_transforms_2() {
        // rather than emitting an explicit start/stop to reduce the size of
    }
use std::cmp::{min,max};
        selection.add_region(region);
            &self.deletes_from_union, &old_deletes_from_union);
    fn line_of_offset_panic() {
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
    }
                    s = &s[..s.len() - 1];

    }
        let mut b = String::new();
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        let subset_str = format!("{:#?}", expand_by[0].1);
    /// This function will panic if `offset > self.len()`. Callers are expected to
    #[test]
    /// When was the sample started.
            Merge(2,0),
        deletes: Subset,
                                                        soft_breaks.as_mut(),
                }
            Merge(1,0),

/// returned value is dropped.  `trace_closure` may be prettier to read.
            if next_chunk.is_none() { return None; }
        self.set_dirty(text);

                        first_sample_timestamp,
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        assert_eq!(trace.is_enabled(), true);
            l[offset..].chars().next()
        offset
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
use fixed_lifo_deque::FixedLifoDeque;
extern crate time;
    /// ancestor in order to be mergeable.
        for &(trans_priority, ref trans_inserts) in &expand_by {

            Assert(1, "zpbj".to_owned()),
    }

/// Get a slice of a `Rope`:
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    #[test]
            AssertMaxUndoSoFar(0,2),
                // sanitize input
    deletes_from_union: Subset,
    ThreadSortIndex { sort_index: i32 },
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
// You may obtain a copy of the License at
        }
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
}
        }
        for find in self.find.iter() {
            match seg.tactic {
                            rendered_lines.push(line);
                        deletes: transformed_deletes,
        self.rev_id_counter += 1;
        }
// distributed under the License is distributed on an "AS IS" BASIS,
                match self.inner.next() {
            }
        self.scroll_to_cursor(text);
        max
            Assert(0, "acbd".to_owned()),
        let mut b = String::new();
                let line = line.min(text.measure::<LinesMetric>() + 1);
        assert_eq!(snapshot[8].name, "c");
        for _i in 0..50 {

        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
/// A size, in pixel units (not display pixels).
            end -= 1;
            Replace { chars, preserve_case } =>
    }
        result
        if !self.lc_shadow.needs_render(plan) { return; }
}
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        trace.record(guard.sample.as_ref().unwrap().clone());
    }
        self.height
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    pub fn prev_codepoint(&mut self) -> Option<char> {
impl<'a> Iterator for Lines<'a> {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
    pub fn empty() -> Engine {
            if (c > start_pos && c < pos) ||
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {

    /// ties in edit priorities. Otherwise the results may be inconsistent.

    // use own breaks if present, or text if not (no line wrapping)

                CategoriesT::StaticArray(c)
        // send updated replace status if changed
        prev_boundary.unwrap_or(None)
    fn compute_info(s: &String) -> Self {
    fn prev(s: &String, offset: usize) -> Option<usize> {
        /// Used to order concurrent inserts, for example auto-indentation
            self.wrap_col = WrapWidth::Bytes(wrap_col);
fn default_session() -> (u64,u32) {
        self.selection = sel;
        }
        deletes_from_union
    /// The revision history of the document
    #[bench]

                self.set(pos);
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {

///
        if self.idx <= self.current.unwrap().len() {
            }
        Assert(usize, String),
    /// method to be fast even when the selection is large.
    // Send the requested lines even if they're outside the current scroll region.

use std::borrow::Cow;
enum MetadataType {
    pub(crate) fn has_pending_render(&self) -> bool {

/// some way.

        assert_eq!(Some(6), a.next_codepoint_offset(3));
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
                    base_len: delta.base_len
        MergeTestState::new(3).run_script(&script[..]);
        let all_caret = self.selection.iter().all(|region| region.is_caret());
            args: Some(SampleArgs {
                inserts: inserted,
            Merge(1,2),
    }
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    }
        if offset == 0 {
        }
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
}
        assert_eq!(snapshot[5].name, "z");

}
        ");
#[cfg(test)]
/// with.  By default, the type is string-like just like name.  If compiled with
    pub fn offset_of_line(&self, line: usize) -> usize {
        where S: Into<StrCow>, C: Into<CategoriesT>
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
                MetadataType::ProcessName {name: exe_name},


/// some way.
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {

        assert_eq!(utf16_units, 17);
                    let new_gc_dels = if inserts.is_empty() {
    fn bench_trace_block(b: &mut Bencher) {
/// an argument.
    /// Invalidate the current selection. Note that we could be even more
    pub fn line_of_offset(&self, offset: usize) -> usize {
    }
    fn merge_whiteboard() {
        }
        Self::with_limit_count(size / size_of::<Sample>())

    pub fn next_grapheme(&mut self) -> Option<usize> {
            categories: None,
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
enum FindStatusChange {
        
    }

    }
            None
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        Rope::from_str(s.as_ref()).unwrap()
        x
        let mut ops = Vec::new();
        let style = style_map.merge_with_default(style);
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    replace: Option<Replace>,
            as_vec.push(Sample::new_metadata(
        let mut engine = Engine::new(Rope::from(TEST_STR));
                   r.lines_all().collect::<Vec<_>>());
            }
        }
        cur_len_utf8
}
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    fn edit_rev_simple() {
        assert!(end <= leaf.len());
                Contents::Edit {inserts, ..} => inserts,
        let mut b = TreeBuilder::new();
        }
//See ../docs/MetricsAndBoundaries.md for more information.
    #[cfg(feature = "json_payload")]
    fn merge_insert_only_whiteboard() {
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,

                }
    }
            Assert(1, "apbj".to_owned()),
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    //TODO: implement iter_chunks using ranges and delete this
    fn can_fragment() -> bool { true }
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        let cur_deletes_from_union = &self.deletes_from_union;
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    find_leaf_split(s, MIN_LEAF)
        assert_eq!(rope.line_of_offset(1), 0);
            min: offset,
        for _i in 0..50 {
        if offset == 0 {
        // rebase delta to be on the base_rev union instead of the text
            if cur_len_utf16 >= in_measured_units {
    /// The name of the event to be shown.

            trace.instant("c", &["test"]);
    #[test]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
/// A flag used to indicate when legacy actions should modify selections
            None
                self.do_set_replace(chars, preserve_case),
        Self {
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
/// Atomicity is implicit, putting the offset

            Assert(2, "ab".to_owned()),
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            result.push_str(chunk);
        assert_eq!("1234567", String::from(r));
        let text_with_inserts = text_ins_delta.apply(&self.text);
                }
                self.select_line(text, offset, line, true),
// you may not use this file except in compliance with the License.
    {
    }
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
/// 1. Samples that span sections of code may be inserted on end instead of
        });
        samples
                SelectionModifier::AddRemovingCurrent => {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
mod tests {
                formatter.write_str("comma-separated strings")
                    b.add_span(seg.n, 0, 0);
/// A rope data structure.

            true => self.selection.clone(),
        let inserts = parse_subset_list("
    }

    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    }
        }
    /// Sets the selection to a new value, without invalidating.
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());

        ----#
                self.start_drag(offset, offset, offset);
                    to_payload(("some payload for the block"))));
    }
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    /// Sorting priority between processes/threads in the view.
                        line_num = seg.their_line_num + seg.n;

/// let c = b.slice(1, 7);
        where S: Serializer
            b.push('b');
            }
            breaks: None,
    /// Tracks whether the replacement string or replace parameters changed.
        engine.undo([2].iter().cloned().collect());
pub fn samples_cloned_unsorted() -> Vec<Sample> {
            } else {
        let d = engine.delta_rev_head(after_first_edit);
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
fn exe_name() -> Option<String> {
/// as opposed to thousands of revisions.
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
                self.do_gesture(text, line, col, ty),
        let is_base = base_revs.contains(&rev.rev_id);
    /// An iterator over the raw lines. The lines, except the last, include the
            };
        assert_eq!(None, b.prev_codepoint_offset(0));
    }
        self.push_str(&other[start..end]);
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        let start = self.line_col_to_offset(text, line, 0);
                    match full_path_str {
        assert_eq!(Some(3), a.next_codepoint_offset(1));
    /// a point that should be scrolled into view.
    let new_text = del_delta.apply(text);
        assert_eq!(rope.line_of_offset(3), 1);
        ------#
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());


                });

        assert_eq!(0, a.line_of_offset(0));
        let inserts = parse_subset_list("
            // TODO: finer grain invalidation for the line wrapping, needs info
        len
        // we add the special find highlights (1) and selection (0) styles first.
    #[test]

    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
    /// that are currently deleted, and thus in `tombstones` rather than
                    }
        let iv = Interval::new_closed_open(start, end);
use std::cmp::{min,max};
// you may not use this file except in compliance with the License.
            let inserted = inserts.inserted_subset();
                            (inserts, deletes)
        // position after 'f' in four
        /// should go before typed text.
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
                None => {
                let (pl, poffset) = self.prev_leaf()?;
                                         self, text, modify);

/// assert_eq!("herald", String::from(a));
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        }
                Some(offset)
}
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        self.utf16_size += other.utf16_size;
    #[inline]
///
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                        let new_deletes_bitxor = if gc_dels.is_empty() {
            Assert(1, "apb".to_owned()),
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
    }
use std::hash::{Hash, Hasher};
        b.push('\n');

                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos

                        let n_skip = seg.their_line_num - line_num;
                            }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        all_samples.reset_limit(0);
//! CRDT implementation techniques, because all operations are serialized in
        }
        }
        match *self {
        self.undone_groups = groups;
            replace: None,
    #[test]
            deletes = deletes.transform_expand(&new_trans_inserts);
    }
                    let mut e = &mut self.peers[ei];
        let ix = style_map.add(style);
    fn compute_transforms_2() {
///
    fn edit_rev_undo_2() {
///
            Scroll(range) => self.set_scroll(range.first, range.last),
        }
    #[cfg(feature = "benchmarks")]

        let mut samples = self.samples_cloned_unsorted();
        delta.end()
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        /// together. For example, an auto-indent insertion would be un-done
            }
        --#--
            SelectAll => self.select_all(text),
                    }

// The advantage of using a session ID over random numbers is that it can be
    }
pub struct BaseMetric(());
        self.set_selection(text, SelRegion::caret(offset));
///
        b.set_dirty(true);
    fn line_of_offset_small() {
            match reverse {
                    }
    pub fn with_limit_bytes(size: usize) -> Self {
                            edit: Undo {
pub struct SampleGuard<'a> {
    }
    /// indicates a search for the next occurrence past the end of the file.
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
        engine.undo([1].iter().cloned().collect());
    /// Tests that priorities are used to break ties correctly
            if inserts.is_empty() {
    }
                undo_group,

    sample_limit_count: usize
                leaf_offset = self.pos() - poffset;

            GestureType::PointSelect => {
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
type StyleMap = RefCell<ThemeStyleMap>;
                serializer.serialize_newtype_variant("DeltaElement", 1,
            return false;
        }).collect()
    }

    utf16_count
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    // callers should be encouraged to use cursor instead

                                                        style_spans, line_num);
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    #[test]
        };
    // TODO: don't construct transform if subsets are empty
                    .with_affinity(affinity)

        self.enabled.store(false, AtomicOrdering::Relaxed);
        self.text = text;
        self.lc_shadow = b.build();
        self.revs.append(&mut new_revs);
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    }


        if !selection.regions_in_range(offset, offset).is_empty() {

        assert_eq!(1, expand_by[0].0.priority);
        enum RopeDeltaElement_ {
            view_id: view_id,
            word_cursor.select_word()
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
        assert_eq!(trace.is_enabled(), true);
    /// Selects all find matches.
    }
    /// Merge the new content from another Engine into this one with a CRDT merge
            base_rev: RevToken, delta: Delta<RopeInfo>) {

    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
/// A size, in pixel units (not display pixels).
                        let n_skip = seg.their_line_num - line_num;
                } else if click_count == Some(2) {
            deletes = deletes.transform_expand(&new_trans_inserts);
                                priority,
            }

        self.convert_metrics::<LinesMetric, BaseMetric>(line)
    }
///
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
    #[test]

/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
            black_box(time::precise_time_ns());
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let text = Rope::from("13456");
            }

pub type RopeDelta = Delta<RopeInfo>;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                while cursor.pos() < region.max() {
/// # Arguments

        let tombstones_b = Rope::from("a");
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
    /// of individual region movements become carets.
        }
{
    //TODO: implement lines_raw using ranges and delete this
    }
            .map(|(i, _)| i)
        let ix = style_map.add(style);
            Rope::concat(
                payload: None,
    1
impl<'a> From<&'a Rope> for String {

            result.push_str(chunk);

    #[test]
            }
pub struct SampleArgs {
    pub fn set_scroll(&mut self, first: i64, last: i64) {

                let (pl, poffset) = self.prev_leaf()?;


        }
            return None;
        let mut engine = Engine::new(Rope::from(TEST_STR));
        self.selection = sel;
#[inline]
    }
            priority: 0,
            trace.record(sample);
    }
///
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
impl<'a> Iterator for Lines<'a> {

                    result = cow_append(result, self.fragment);
        assert!(self.current.is_some());
        }
        engine.edit_rev(1, 2, initial_rev, d1.clone());
                let offset = self.selection[0].start;

fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
            if (c > start_pos && c < pos) ||
    trace: Option<&'a Trace>,

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// `base_revs`, but modified so that they are in the same order but based on
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            }
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        assert_eq!(correct, res);
    pub fn do_find_all(&mut self, text: &Rope) {

#[cfg(test)]

        if all_samples.is_empty() {
        assert_eq!(snapshot[4].name, "y");

                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    // TODO: replace this with a version of `lines` that accepts a range
        let mut r = Rope::from("27");
        }
    use super::*;
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);


use serde_json::Value;
        let mut engine = Engine::empty();
        self.set_selection(text, sel);
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        }
                cursors.push(c - start_pos);
        engine.edit_rev(1, 2, initial_rev, d1.clone());
pub struct LinesMetric(usize);  // number of lines
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    #[test]
    lines: usize,
        let (ins_delta, deletes) = delta.factor();
                (drag_state.max, min(offset, drag_state.min))
    }
        let mut all_samples = self.samples.lock().unwrap();
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    pub fn merge(&mut self, other: &Engine) {
        }
//
                    let mut selection = self.selection.clone();
            .map_or(0, |ref s| s.timestamp_us);

        self.convert_metrics::<LinesMetric, BaseMetric>(line)
use std::borrow::Cow;
    fn line_of_offset_panic() {
        engine.gc(&gc);
        let mut hasher = DefaultHasher::new();
#![cfg_attr(feature = "collections_range", feature(collections_range))]
/// ```
    ///
/// some way.
        let mut b = TreeBuilder::new();
    let mut out = Vec::new();

//     http://www.apache.org/licenses/LICENSE-2.0

        }
    }
        trace.instant("3", &["test"]);
                    }
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
    #[serde(default = "default_session", skip_serializing)]
    {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        for rev in &self.revs[rev_index + 1..] {
            Merge(1,0),
    fn compute_transforms_1() {
            tid: tid,
    }
        let tombstones_b = Rope::from("a");
/// # use xi_rope::Rope;
        }
        // multiple queries; select closest occurrence
    min: usize,
    fn can_fragment() -> bool {

/// the `base_revs`. This allows the rest of the merge to operate on only
            self.categories == other.categories &&
            duration_us: None,
        tombstones = new_tombstones;
        trace.disable();
    /// concurrently it will have count `2` so that undoing one delete but not
    /// Starts a drag operation.

        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        assert_eq!(soln, String::from(engine.get_head()));
    #[cfg(feature = "benchmarks")]
        }
    #[test]
        }
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        for region in self.selection.iter() {

    }
        // probably change as the recording internals change.

        engine.edit_rev(1, 2, first_rev, d1.clone());
            pos
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        let mut selection = self.selection.clone();
        ];
        b if b < 0xe0 => 2,
        assert_eq!(trace.get_samples_count(), 0);
    TRACE.block(name, categories)
    session2: u32,
    #[inline]
            //if self.cursor.is_boundary::<BaseMetric>() {
                let (ins, _) = delta.factor();
        }
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    pub fn set_size(&mut self, size: Size) {
        Ok(Delta::from(d))
        engine.gc(&gc);
            if inserts.is_empty() {

    // TODO: a case can be made to hang this on Cursor instead
                max_undo_so_far: i+1,
    /// height of visible portion
    /// Generally racy since the underlying storage might be mutated in a separate thread.

                        }
    // TODO make this faster somehow?
    ///
    ProcessLabels { labels: String },
    #[serde(skip_serializing)]
/// Usage of static strings is encouraged for best performance to avoid copies.
}
        for &(trans_priority, ref trans_inserts) in &expand_by {
fn count_utf16_code_units(s: &str) -> usize {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        assert_eq!(0, b.line_of_offset(0));
                match *other {
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));

            let splitpoint = if s.len() > MAX_LEAF {
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
            CategoriesT::DynamicArray(ref self_arr) => {
                        &mut rest[bi - ai - 1]
    #[test]
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

            Some(ref breaks) => {
                        Some(end) => max(0, end - 1),
/// A guard that when dropped will update the Sample with the timestamp & then
        sel.collapse();
            for &occurrence in find.occurrences().iter() {
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
        a.push('\n');

            },
        let mut d_builder = Builder::new(TEST_STR.len());
    use delta::{Builder, Delta};
        d

        };
            scroll_to: Some(0),
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
        engine.edit_rev(1, 2, first_rev, d1.clone());
        };
    pub(crate) fn unset_find(&mut self) {
        let correct = parse_subset_list("

///
        }
/// });
            }
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
                                                        style_spans, line_num);



use std::cmp;

        Rope::from_str(s.as_ref()).unwrap()
        assert_eq!(1, r.line_of_offset(a.len()));
            Merge(1,0),
#[derive(Clone, Copy)]
            match *op {
            None => return "",
            match modify_selection {
use multiset::{Subset, CountMatcher};
use word_boundaries::WordCursor;
                undo_group,
        // if we have active find highlights, we don't collapse selections
        assert_tokens(&rope, &[
    }
}
    /// in the slice up to `offset`.

                                deletes.transform_shrink(&gc_dels))
    #[serde(rename = "xi_payload")]
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

                    s = s.transform_shrink(&transformed_inserts);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
    // * Unicode codepoints
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    #[allow(dead_code)]

            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
/// Create an instantaneous sample with a payload.  The type the payload
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
            // with offset == s.len(), but be defensive.
/// for strings, specialized for incremental editing operations. Most operations
        x
/// feature makes the payload a `serde_json::Value` (additionally the library
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
                len += 1;
        }
                             client: &Client, style_spans: &Spans<Style>)
                                gc_dels = gc_dels.union(deletes);
        }
                        }
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
        }
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let script = vec![
}
    #[serde(rename = "ts")]

        let trace = Trace::enabled(Config::default());
                            max_undo_so_far: rev.max_undo_so_far,
            Merge(0,1),
        }
        for _i in 0..50 {
        for find in &mut self.find {
    }

        assert_eq!(snapshot[6].name, "z");
            "text": &l_str,

}
    #[derive(Clone, Debug)]
        fn run_script(&mut self, script: &[MergeTestOp]) {
    /// `text`. The count of a character in `deletes_from_union` represents

    /// Get the line range of a selected region.
    fn lines_raw_small() {
        b.build()
                metadata_name: None,
        if !new_inserts.is_empty() {
    }
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        let mut gc_dels = self.empty_subset_before_first_rev();
            pid: sys_pid::current_pid(),
                max_undo_so_far: i,
        let correct = parse_subset_list("
        match self.breaks {

        ];
    where S: serde::Serializer {
                    let _ = s.pop();
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
            if let Some(ref thread_name) = sample.thread_name {
            }
        use self::MergeTestOp::*;
        let a = Rope::from("a\nb\nc");
    /// that are currently deleted, and thus in `tombstones` rather than
        for rev in old_revs.into_iter().rev() {
/// beginning.
        }
    }

                rev_id: basic_rev(i+1),

                },
                } else {
        ##
            first_line: 0,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        };
                                                        soft_breaks.as_mut(),
            timestamp_us: ns_to_us(time::precise_time_ns()),
            for (i, op) in script.iter().enumerate() {
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
    DurationBegin,
        self.enabled.store(true, AtomicOrdering::Relaxed);
                last.1 = last.1.transform_union(&inserts);

//
                    return i + 1; // +1 since we know the one we just found doesn't have it

        self.first_line = first;
    fn gc_scenario(edits: usize, max_undos: usize) {
                              payload: Option<TracePayloadT>,
        if !cursors.is_empty() {
        x
            thread_name: Sample::thread_name(),
            sample_limit_count: limit
    // How should we count "column"? Valid choices include:
        all_samples.reset_limit(0);
    #[inline]
        } else {
    /// how many times it has been deleted, so if a character is deleted twice
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };

        for i in 1..(s1.len() * 3) {


            let deletes = Subset::new(inserts.len());
    }
    }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                }
        let mut end = start_pos + len;
                    self.set_selection(text, selection);
        engine.edit_rev(1, 1, first_rev, d1.clone());

                        deletes_from_union = deletes_from_union.union(deletes);
                        ops.push(self.build_update_op("copy", None, seg.n));
        b.push(self);
                metadata_sort_index: None,
            utf16_count += 1;
            MetadataType::ProcessLabels {..} => (None, None)
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
/// on program launch.
    /// Sets the selection to a new value, invalidating the line cache as needed.
        base_subset.is_some() && base_subset == other_subset
        }
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        });
    /// state and new offset.
            self.args == other.args
                        .map(DeltaElement::from).collect(),

        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        match self {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
            return self.revs.len();
                formatter.write_str("comma-separated strings")
            Merge(2,0),
            Some(offset + len_utf8_from_first_byte(b))
        #[serde(rename_all = "snake_case")]
            for (i, op) in script.iter().enumerate() {
#[inline]
        let correct = parse_subset_list("

//! info.
            r = op.inserts.apply(&r);
            if Some(priority) == last_priority {
        }
    offset: usize,
        self.lines_raw(0, self.len())
            // with offset == s.len(), but be defensive.
        }
                        }
    }
        let offset = self.line_col_to_offset(text, line as usize, 0);
        }
                    if !deletes.is_empty() {
        }
    view_id: ViewId,
    }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        false
    /// should be constructed via SampleGuard.

        self.enabled.store(false, AtomicOrdering::Relaxed);
        }
}
            Some(Cow::Owned(mut s)) => {
            self.wrap_col = WrapWidth::Bytes(wrap_col);
            Merge(1,0),
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
/// between two utf8 code units that form a code point is considered invalid.
            // I think it's a precondition that this will never be called
        self.text = text;
    }
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    #[test]
{
        serializer.serialize_str(&String::from(self))
                    selection.add_region(occ);
            let next_chunk = self.inner.next();
    }
        /// revision that were deleted by this revision.
    {
        while !leaf.is_char_boundary(end) {
    priority: usize,
                    } else {
                std::thread::sleep(std::time::Duration::new(0, 1000));
/// 3. You may not care about them always being sorted if you're merging samples
        self.set_selection_raw(text, selection);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            new_deletes = new_deletes.transform_expand(&new_inserts);
        }, deletes_from_union)

                    self.set_selection(text, selection);
    /// The state for replacing matches for this view.
    }

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
            // copy the current state
    }
    /// Move the selection by the given movement. Return value is the offset of
            engine.undo(undos);
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
                metadata_sort_index: sort_index,
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
        self.wrap_col = WrapWidth::Width(self.size.width);
        let a = Rope::from("a\nb\nc");
    fn measure(info: &RopeInfo, _: usize) -> usize {
            Rope::concat(
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
//
    }
    fn deserialize<D>(deserializer: D)
/// ```

        self.set_dirty(text);
        while let Err(incomp) = next_boundary {
        --#--
}
                            rendered_lines.push(line);
    session1: u64,
                        }
                    // can only happen on empty input
    }
        self.scroll_to = Some(end);
    }
        assert_eq!(snapshot.len(), 5);
    cursor: Cursor<'a, RopeInfo>,
impl<'a> SampleGuard<'a> {
            GestureType::WordSelect =>
            duration_us: None,
use std::borrow::Cow;
                          payload: Option<TracePayloadT>) -> Self
            // trans-expand other by expanded so they have the same context
        let trace = Trace::enabled(Config::default());
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    fn compute_deltas_1() {
    }
pub fn len_utf8_from_first_byte(b: u8) -> usize {
        trace.instant("1", &["test"]);
        assert_eq!(soln, String::from(engine.get_head()));
                client.replace_status(self.view_id, &json!(replace))
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        let delta = Delta::synthesize(&self.tombstones,
            }
use std::cmp::{min,max};

                    priority, inserts, deletes,
                self.select_word(text, offset, true)
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
    }
        let first_rev = engine.get_head_rev_id().token();
    {
        cursor.prev::<BaseMetric>()
        assert_eq!(samples[1].name, "local pid");
        let trace = Trace::enabled(Config::with_limit_count(10));
        self.first_line = first;
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    // * Unicode width (so CJK counts as 2)
        assert_eq!(0, a.line_of_offset(1));
            }
            selection.delete_range(offset, offset, true);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let mut cursor = Cursor::new(self, offset);
pub fn trace<S, C>(name: S, categories: C)
        in_measured_units
        as_vec.extend(all_samples.iter().cloned());
                                undo_group,
        let a = Rope::from("a\nb\nc");
        for _ in 0..(edits-max_undos) {

pub fn trace<S, C>(name: S, categories: C)
///
        AssertMaxUndoSoFar(usize, usize),
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    fn test_cross_process_samples() {
                        // no need to un-delete undone inserts since we'll just shrink them out
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
        // find the lowest toggled undo group number
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);

        }
            // if using breaks update cursor
        ");

            trace.closure_payload("y", &["test"], || {
        serializer.serialize_str(&String::from(self))
    }
    ///
        if !self.lc_shadow.needs_render(plan) { return; }


                        }
            let first_rev = engine.get_head_rev_id().token();
/// However, anything that can be converted into a Cow string can be passed as
    }
    }
            let next_chunk = self.inner.next();
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        });
    #[test]
    /// of the chunks is indeterminate but for large strings will generally be
            panic!("line number {} beyond last line {}", line, max_line);
        engine.edit_rev(1, edits+1, head, d1);

    ///
    pub fn enable_config(&self, config: Config) {
            undone_groups: BTreeSet::new(),
    }
//

        }
    pub fn get_head_rev_id(&self) -> RevId {
    fn gc_scenario(edits: usize, max_undos: usize) {
        prev_boundary.unwrap_or(None)
}
                        line_num = seg.their_line_num + seg.n;

                RenderTactic::Preserve => {
        }

        use serde::de::Visitor;
                    priority, undo_group,
        let line = self.line_of_offset(text, end);
                Rope::from(s1.clone()),
macro_rules! categories_from_constant_array {

/// associated performance hit across the board for turning it on).
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);

        assert_eq!(a.len(), r.offset_of_line(1));

            Replace { chars, preserve_case } =>
        impl From<RopeDelta_> for Delta<RopeInfo> {
            SelectionForReplace => self.do_selection_for_replace(text),
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    fn from(r: &Rope) -> String {
                payload: payload,
}
#[cfg(feature = "dict_payload")]
    a_ids.intersection(&b_ids).cloned().collect()
        }
/// See `trace_payload` for a more complete discussion.

            "n": n,
    #[test]
        out.push(Revision {

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let a = Rope::from("a\nb\n");
        let script = vec![
    pub payload: Option<TracePayloadT>,
        Cow::from(a.into_owned() + b)

/// let b = a.slice(1, 9);
    /// The revision history of the document
        MergeTestState::new(4).run_script(&script[..]);
                },
    }
        self.find_changed = FindStatusChange::All;
    Width(f64),
///


    fn gc() {
            }
/// });

        // same span exists in both sets (as when there is an active selection)
        if self.scroll_to.is_none() && wrap {
    rev_id_counter: u32,

    }
        let mut hasher = DefaultHasher::new();
use std::collections::BTreeSet;
        }
                }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            FindPrevious { wrap_around, allow_same, modify_selection } =>
    }
/// of Sample that determines order.

    pub fn undo(&mut self, groups: BTreeSet<usize>) {
            "styles": styles,
        let mut engine = Engine::new(Rope::from(TEST_STR));
                              start_ns: u64,
pub struct BaseMetric(());
        self.deletes_from_union = new_deletes_from_union;
            }
// you may not use this file except in compliance with the License.
            Assert(1, "ab".to_owned()),
}
                    let _ = s.pop();
    /// The selection state for this view. Invariant: non-empty.
///
                        if !last_selection.is_caret() {
}
        assert_eq!(Some(10), a.next_codepoint_offset(6));
        ];
            self.idx += 1;
        assert_eq!(utf16_units, 11);
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    session: SessionId,
            't' => SampleEventType::FlowInstant,
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    ///

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
#![cfg_attr(feature = "cargo-clippy", allow(
                    if !inserts.is_empty() {
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        let mut offset = 0;
pub enum CategoriesT {
                    if let Some(last_selection) = self.selection.last() {
    }
    }
            }, to_payload("test_get_samples_nested_trace"));
fn shuffle(text: &Rope, tombstones: &Rope,
                    })
                        first_sample_timestamp,
            }
        let new_pos = self.pos() + (end - offset);

        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
fn count_utf16_code_units(s: &str) -> usize {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        let first_rev = engine.get_head_rev_id().token();
use multiset::{Subset, CountMatcher};
        // if self.end is inside this chunk, verify that it is a codepoint boundary

            sample_limit_count: limit

                }

    }
    }
            let expand_by = compute_transforms(a_new);
        ----#
        // insert `edits` letter "b"s in separate undo groups

        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
    }
    }

        assert_eq!(Some(6), a.next_codepoint_offset(3));
    }
}
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
    /// An iterator over the raw lines. The lines, except the last, include the
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
impl Config {
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    (out, text, tombstones, deletes_from_union)
    Width(f64),
    #[test]
            }

                        };
            None
    fn next(s: &String, offset: usize) -> Option<usize> {
        samples
        } else {
            },
            Merge(0,2), Merge(1, 2),
    /// slices will be nonempty.
    #[bench]
        // position after 'f' in four
        let r = r + Rope::from(&b[MIN_LEAF..]);
    fn prev_codepoint_offset_small() {
/// discussion on payload.
                    // We're super-aggressive about dropping these; after gc, the history
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
            }
                }

use tabs::{ViewId, BufferId};
            Merge(0,2), Merge(1, 2), Merge(3, 2),
        let mut selection = match multi_select {

    }
    #[test]
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
            Assert(0, "zcbd".to_owned()),

            engine.undo(undos.clone());
        a.lines_all().collect::<Vec<_>>());
            false
            self.find.push(Find::new());
/// Usage of static strings is encouraged for best performance to avoid copies.
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
    }
///
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                    text.slice_to_string(region.min(), region.max())
    /// of the chunks is indeterminate but for large strings will generally be
///
impl From<Vec<String>> for CategoriesT {
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        let all_samples = self.samples.lock().unwrap();

        self.text = new_text;
    #[test]
    }
            find: Vec::new(),
            for i in 0..count {

        let mut cursor = Cursor::new(self, offset);
        }
            self.find.push(Find::new());
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    #[test]

}
        let s = String::deserialize(deserializer)?;
        let mut result = String::new();
///
struct DragState {
    }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
impl SampleEventType {
        ]);
        let trace = Trace::enabled(Config::with_limit_count(20));
    }
    ///
}
        delta.serialize_field("els", &self.els)?;
                undo_group,
        // stable order since the resolution of timestamps is 1us.
    /// Return the offset of the codepoint before `offset`.
            if Some(priority) == last_priority {
            'b' => SampleEventType::AsyncStart,
            Revision {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
        #------
            name: sample_name,
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
    }
                            if !deletes.is_empty() {

            offset -= 1;
    }

    /// Get text of head revision.
    }


        engine.gc(&gc);
    }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            Assert(1, "ab".to_owned()),
        let mut offset = self.offset_of_line(text, line).saturating_add(col);

    inserts: InsertDelta<RopeInfo>,
                    let mut e = &mut self.peers[ei];
        // TODO: may make this method take the iv directly
#[inline]
            lc_shadow: LineCacheShadow::default(),
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
/// std::mem::drop(trace_guard); // finalize explicitly if
                        // no need to un-delete undone inserts since we'll just shrink them out
        engine.edit_rev(1, 2, new_head, d2);
        }
        for chunk in self.iter_chunks(start, end) {
    fn can_fragment() -> bool { false }
        self.selection = sel;
    /// This is a `Subset` of the "union string" representing the characters
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
        max
    /// Returns a u64 that will be equal for equivalent revision IDs and
#[derive(Clone, Debug, PartialEq, Eq)]
}

}
        let height = self.line_of_offset(text, text.len()) + 1;
    if a.is_empty() {
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
    /// # Panics
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
    fn prev(s: &String, offset: usize) -> Option<usize> {

    #[bench]
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
        if offset == 0 {
        }
        cursor.next_grapheme()
            //if self.cursor.is_boundary::<BaseMetric>() {
        if self.find.is_empty() {
// Copyright 2016 The xi-editor Authors.
    fn prev_codepoint_offset_small() {
    fn test_get_samples_nested_trace() {
                        if n_skip > 0 {
    /// if there is not at least one edit.
        let utf8_offset = 13;
impl FromStr for Rope {
    fn next_grapheme_offset() {
                    let after = new_full_priority >= full_priority;  // should never be ==
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                    if let Some(new_gc_dels) = new_gc_dels {
        min
    }
            duration_us: Some(ns_to_us(duration_ns)),
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    #[test]
/// some way.
    pub fn offset_of_line(&self, line: usize) -> usize {
        let col = col as usize;
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                }
                //// if we aren't on a boundary we can't be at the end of the chunk
    /// The name to associate with the pid/tid.  Whether it's associated with
    fn test_disable_drops_all_samples() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
    /// via process_name/thread_name respectively.
            None
            }, to_payload("test_get_sorted_samples"));
            let c = region.end;
    {
                    } else {
use xi_rope::tree::Cursor;
        for &region in self.sel_regions() {
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size

            self.current = None;
        }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
//! It enables support for full asynchronous and even peer-to-peer editing.
        -#-
    for &b in s.as_bytes() {
    fn rearrange_1() {
    }
            SampleEventType::FlowStart => 's',
        /// The subset of the characters of the union string from after this
            GestureType::MultiWordSelect =>
            Merge(0,1),
    // encourage callers to use Cursor instead?
    /// The current contents of the document as would be displayed on screen
        fn run_op(&mut self, op: &MergeTestOp) {
            }
    ///
            Assert(0, "adfc".to_owned()),

        Lines {
                }
    #[test]
        }
        self.drag_state = None;
        // We add selection after find because we want it to be preferred if the

    ProcessName { name: String },
        let text = Rope::from("13456");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    pub fn instant<S, C>(&self, name: S, categories: C)

        while offset < l.len() && !l.is_char_boundary(offset) {
                        word_cursor.select_word()
            duration_us: None,
    /// No wrapping in effect.
    /// Time complexity: O(log n)

        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(correct, res);
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
/// Boundary is atomic and determined by codepoint boundary.

                if !inserts.is_empty() {
        // we add the special find highlights (1) and selection (0) styles first.
        if !self.is_point_in_selection(offset) {


use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    pub fn offset_of_line(&self, line: usize) -> usize {
            self.args == other.args
            Assert(0, "adfc".to_owned()),
/// # Performance
        );
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    /// state and new offset.
                (!region.is_upstream() && c == start_pos) ||
            MetadataType::ProcessLabels {..} => (None, None)

            ix = iv.end() as isize;
            // recurse at most once; this doesn't feel great but I wrote myself into a
    use engine::*;
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                                                     "insert", node)
    pub fn set_size(&mut self, size: Size) {
    }
        assert_eq!(rope.line_of_offset(0), 0);
                metadata_sort_index: None,
        let new_head_2 = engine.get_head_rev_id().token();

                leaf_offset = self.pos() - poffset;
{
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
        }

    /// If the cursor is at the end of the leaf, advances to the next leaf.
        // a, b, y, z, c, x
            }

                } else {
    }
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                inserts: new_inserts,
                selection.add_region(SelRegion::caret(region.max()));
        self.set_dirty(text);
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
    /// Move the selection by the given movement. Return value is the offset of
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    }
            b.push_str(&c);
        revs.append(&mut revs_3);
    pub fn slice(&self, start: usize, end: usize) -> Rope {
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
mod tests {
    /// Return the line number corresponding to the byte index `offset`.
struct Revision {
///

            MetadataType::ThreadName {name} => (Some(name), None),
/// let b = Rope::from("world");
    }
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {

{
        CategoriesT::DynamicArray(c)
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    DurationEnd,
        samples[1].pid = 2;
        // interior of first line should be first line
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        Cow::from(b)
            DeltaElement::Copy(ref start, ref end) => {
impl Trace {
        }
            a = a + Rope::from(&c);
    session1: u64,
        // since one of the two deletes was gc'd this should undo the one that wasn't
                let (pl, poffset) = self.prev_leaf()?;
    }
            args: Some(SampleArgs {
                    let (start, end) = self.peers.split_at_mut(ai);
                        for line_num in start_line..end_line {
    }
                }
    sample: Option<Sample>,
                        for line_num in start_line..end_line {
            self.collapse_selections(text);
    }
    pub fn disable(&self) {
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
        } else if line == max_line {
        {

        b.iter(|| black_box(sys_tid::current_tid()));
#[inline]
                formatter.write_str("comma-separated strings")
    /// # Panics
        let inserts_2 = parse_subset_list("
        }
            trace.instant("something", &[]);
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
/// returned value is dropped.  `trace_closure` may be prettier to read.
        });
            self.next()
// See the License for the specific language governing permissions and
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        Ok(Rope::from(s))
    DurationBegin,
    // * grapheme clusters
                if s.ends_with('\n') {
    #[test]
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            "ops": ops,
        deletes_from_union = new_deletes_from_union;
            self.first_line = line;
        self.find_changed = FindStatusChange::All;
    session: SessionId,

        for &(sel_start, sel_end) in sel {

    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {



                         start: usize, end: usize, sel: &[(usize, usize)],

    /// If the cursor is at the end of the rope, returns the empty string.
        engine.edit_rev(0, 2, first_rev, build_delta_2());

        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        // the front-end, but perhaps not for async edits.
}
        }
    rev_id: RevId,
    TRACE.instant(name, categories);
    /// Generate line breaks based on width measurement. Currently batch-mode,
            //}
    use serde_test::{Token, assert_tokens};
            "styles": styles,
        (self.pid, self.timestamp_us).hash(state);
        delta.serialize_field("els", &self.els)?;

        let mut ops = Vec::new();

    }
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        }
                    let e = &mut self.peers[ei];
        // expand by each in expand_by
    find_changed: FindStatusChange,
        // ensure that when the samples are sorted by time they come out in a
        // expand by each in expand_by
            }
    fn gc_4() {
        Cow::from(a.into_owned() + b)
            SampleEventType::DurationBegin => 'B',
            None
        }
/// }

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
              F: FnOnce() -> R

        self.buffer_id
mod sys_tid;

                }
            inner: self.lines_raw(start, end)
            }
                        Err(e) => {
        {
            sample.event_type = SampleEventType::DurationEnd;
    }

    }
        let mut sel = Selection::new();
        // We could probably reduce the cloning of selections by being clever.

        assert_eq!(trace.is_enabled(), true);
    }
        }
        let script = vec![
            return Vec::with_capacity(0);
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
        }
impl Leaf for String {
        self.find_changed = FindStatusChange::Matches;

        if let Some(sel) = new_sel {
        assert_eq!(0, b.offset_of_line(0));
                        if self.undone_groups.contains(undo_group) {
            // I think it's a precondition that this will never be called


            Merge(1,0),
            deletes_from_union = match rev.edit {

    ProcessSortIndex { sort_index: i32 },

            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    // * Actual measurement in text layout
            }
#[derive(Serialize, Deserialize, Debug)]
    fn gc() {
    // Render a single line, and advance cursors to next line.
extern crate time;
        ------#
        // update only find highlights affected by change

    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
                len += 1;
        let expand_by = compute_transforms(revs);
mod tests {
    #[test]
    TRACE.instant_payload(name, categories, payload);


    pub fn token(&self) -> RevToken {
use std::str;
impl<'a> Iterator for LinesRaw<'a> {

            );
        self.samples.lock().unwrap().limit()
        self.session = session;
}

        // NOTE: we derive to an interim representation and then convert
            Merge(1,2),
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        ]);
}

/// Create an instantaneous sample without any payload.  This is the lowest
mod fixed_lifo_deque;
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        RopeInfo {
    where S: Into<StrCow>, C: Into<CategoriesT>
            Assert(0, "acrpbdzj".to_owned()),
}
        self.selection = sel;
#[derive(Clone, Debug)]
        if f.alternate() {
        assert_eq!("a", String::from(&tombstones_2));
        let mut engine = Engine::new(Rope::from(TEST_STR));

                metadata_name: None,
        #------
    pub fn disable(&self) {
            min: offset,
    }
use std::cmp::{min,max};
        assert_eq!(None, a.prev_grapheme_offset(0));
        engine.undo([1,3].iter().cloned().collect());
    // TODO: replace this with a version of `lines` that accepts a range
    }
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
                            }
        let a = Rope::from("a\nb\n");
            buffer_id: buffer_id,
    use serde_test::{Token, assert_tokens};
        let inserted = inserts.inserted_subset();
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

        ]);
                    } else {

    /// in the slice up to `offset`.
    // Render a single line, and advance cursors to next line.

}
        MergeTestState::new(3).run_script(&script[..]);
    fn delta_rev_head_3() {
    /// Select entire buffer.
                    s = &s[..s.len() - 1];
        if !self.is_point_in_selection(offset) {
        if let Some((l, offset)) = self.get_leaf() {

    #[test]

        let trace = Trace::enabled(Config::with_limit_count(10));
    /// state and new offset.
            find.find_status(matches_only)
            CategoriesT::StaticArray(ref self_arr) => {
                                                    style_spans, client,
impl<'a> Iterator for ChunkIter<'a> {

    pub width: f64,
            if let Some(ref thread_name) = sample.thread_name {
                name, categories, None, start, end - start));
        engine.edit_rev(1, 2, new_head, d2);
        b.set_dirty(true);
        }
//
}
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let a = Rope::from("a\nb\n");
            };
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// monotonically increasing single global integer (when tracing) per creation
    #[test]
/// How tracing should be configured.
        }
            timestamp_us: ns_to_us(start_ns),

///
        }
        for find in &mut self.find {
    fn invalidate_selection(&mut self, text: &Rope) {
                (region.is_upstream() && c == pos) ||
            rendered_styles.push(0);
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
    pub fn next_grapheme(&mut self) -> Option<usize> {
/// Revision will be used, which means only the (small) set of concurrent edits
        for rev in &self.revs[rev_index + 1..] {
#[inline]
        let first_rev = &self.revs.first().unwrap();
    ///
        assert_eq!(0, a.line_of_offset(0));
pub fn trace<S, C>(name: S, categories: C)
        self.convert_metrics::<LinesMetric, BaseMetric>(line)

            Merge(1,2),
///     something_expensive()
                //// if we aren't on a boundary we can't be at the end of the chunk
                            rendered_lines.push(line);
                out.push(DeltaOp {
        let mut selection = match multi_select {
        // is the new edit in an undo group that was already undone due to concurrency?

    // Send the requested lines even if they're outside the current scroll region.
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        let new_head = engine.get_head_rev_id().token();
    }

        assert_eq!(snapshot[8].name, "x");
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        engine.undo([].iter().cloned().collect());
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
        if self.find_changed != FindStatusChange::None {
            sel.add_region(new_region);
        ##
categories_from_constant_array!(8);
    pub(crate) fn has_pending_render(&self) -> bool {
        d
        assert!(r == a_rope.clone() + b_rope.clone());
        // a, b, y, z, c, x
            if self[i] != other[i] {
    pub fn default() -> Self {

impl Engine {
            Some(region) => {
/// }
        }
    {
    /// inserted, including the ones that were later deleted, in the locations
        }
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
        let base_sel = Selection::new();
/// However, anything that can be converted into a Cow string can be passed as
        }
    pub fn byte_at(&self, offset: usize) -> u8 {

            self.set_selection(text, sel);
        s.is_char_boundary(offset)
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
                                deletes.transform_shrink(&gc_dels))
    // for simplicity.
        // rebase insertions on text and apply
            // These two will be different without using session IDs
    }
    }

}
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                    // We're super-aggressive about dropping these; after gc, the history
            Assert(1, "ab".to_owned()),
                }
//! An engine for handling edits (possibly from async sources) and undo. It
                break;
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
            let (start, end) = if offset < drag_state.offset {
            let horiz = None;

    #[bench]
            None
        let mut cur_len_utf16 = 0;
            self.find.push(Find::new());
    }
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
impl From<Vec<String>> for CategoriesT {
    }
                    rev_id: rev.rev_id,
            Assert(1, "arpbj".to_owned()),
        let (new_text, new_tombstones) =
/// overhead tracing routine available.
            Merge(0,2), Merge(1, 2),
        let trace = Trace::enabled(Config::with_limit_count(10));
    /// Each instance represents a separate search query.
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            }
#[derive(Serialize, Deserialize, Debug)]
                self.start_drag(offset, offset, offset);
#[cfg(feature = "json_payload")]
/// # use xi_rope::Rope;
    #[allow(dead_code)]
    AsyncStart,
        }
        let deletes_from_union_b = parse_subset("-#---");
    fn compute_deltas_1() {
    #[test]
    pub fn default() -> Self {
    // in a single session.
        -> Result<CategoriesT, D::Error>
    ///
        next_boundary.unwrap_or(None)
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
    }
    pub fn is_enabled(&self) -> bool {

//! which is sufficient for asynchronous plugins that can only have one
        // A with ring, hangul, regional indicator "US"
        assert_eq!(2, expand_by.len());
pub struct Size {
            if self[i] != other[i] {
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
                // TODO create InsertDelta directly and more efficiently instead of factoring

        ids.iter().cloned().map(|i| {
        assert_eq!(1, a.line_of_offset(2));
                    }
            return self.len();
        let mut ix = 0;
enum MetadataType {

        assert_eq!(snapshot[5].name, "z");
}
    // in a single session.
    /// unsaved changes.
        let col = col as usize;
        // TODO: simplify this through the use of scopeguard crate
///
    size: Size,

    pub fn set_size(&mut self, size: Size) {
        trace.instant("3", &["test"]);
    pub duration_us: Option<u64>,
    }
    pub fn set_dirty(&mut self, text: &Rope) {
///
    }
        }

    }
    replace_changed: bool,
            name: name.into(),

/// Measured unit is newline amount.
        }
        assert_eq!(1, expand_by[0].0.priority);
            } else {

    (out, text, tombstones, deletes_from_union)
        }
                    return Some(result);
    pub fn collapse_selections(&mut self, text: &Rope) {
        undo_group: usize,

                    } else {
            }
    }
            Revision {
            None
                            if !deletes.is_empty() {
        assert_eq!(None, a.prev_grapheme_offset(0));
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
//! conceptually represents the current text and all edit history for that
impl Config {
                let (last, rest) = self.sel_regions().split_last().unwrap();
        impl<'de> Visitor<'de> for CategoriesTVisitor {
        --#-
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
// distributed under the License is distributed on an "AS IS" BASIS,
                self.add_selection_by_movement(text, Movement::Up),
        match symbol {
}
/// Usage of static strings is encouraged for best performance to avoid copies.
    fn replace_small() {
            black_box(trace.block_payload(
    }
            let c = region.end;
        }
                peers.push(peer);

    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
            rendered_styles.push((iv.start() as isize) - ix);
        // insert `edits` letter "b"s in separate undo groups
    {
    }
                std::thread::sleep(std::time::Duration::new(0, 1000));
        let first_rev = engine.get_head_rev_id().token();
            }
        let mut cursor = Cursor::new(self, offset);
///
    }
    /// Constructs a Duration sample.  For use via xi_trace::closure.
        if wrap_col > 0 {

            first_line: 0,
        b.iter(|| black_box(time::precise_time_ns()));
            match exe_name.clone().file_name() {
            find.update_highlights(text, delta);
    AsyncStart,
        // position after 'f' in four
    /// unsaved changes.
    wrap_col: WrapWidth,

    pub fn push_str(&mut self, mut s: &str) {
    DurationEnd,
    // Render a single line, and advance cursors to next line.
    fn empty_subset_before_first_rev(&self) -> Subset {
        engine.gc(&gc);
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
///
categories_from_constant_array!(4);
    /// after an edit is applied, to allow batching with any plugin updates.
        // todo: the correct Find instance needs to be updated with the new parameters
            Merge(1,2),
/// Usage of static strings is encouraged for best performance to avoid copies.
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
//     http://www.apache.org/licenses/LICENSE-2.0
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            }
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    }
        loop {
                }
        } else {
        assert!(a != empty);
    /// Replacement string.
        assert_eq!(Some(9), a.next_grapheme_offset(3));

        if let Some(exe_name) = exe_name() {
///
///
            }),

    #[test]
    fn sample_name(&self) -> &'static str {
        String::from(&r)
        assert_eq!(1, r.line_of_offset(r.len() - 1));
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
        let mut revs = basic_insert_ops(inserts_1, 1);
            highlight_find: false,
        assert_eq!(trace.get_samples_limit(), 0);
        use self::MergeTestOp::*;
        self.subseq(iv)
            scroll_to: Some(0),
/// A static string has the lowest overhead as no copies are necessary, roughly
            }
    type Err = ParseError;
            GestureType::LineSelect =>
        assert_eq!(snapshot[1].name, "thread_name");
        }
}
        for _ in 0..line_len {
    #[test]
    }
            self.next::<BaseMetric>();
}

            next_boundary = c.next_boundary(&l, leaf_offset);
            None

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
            sample: None,
        trace.disable();
    type Item = Cow<'a, str>;

            }
/// ```
        self.selection = sel;
                    text.slice_to_string(start, end)
    /// The semantics are intended to match `str::lines()`.
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    fn from(s: T) -> Rope {
/// * `categories` - A static array of static strings that tags the samples in
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
    inner: ChunkIter<'a>,
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
    }
        }
    pub fn get_head(&self) -> &Rope {
    /// borrowed from the rope.
    pub duration_us: Option<u64>,
            Merge(0,2), Merge(1, 2),
    }
            max_undo_so_far: 0,

            Assert(1, "apb".to_owned()),
                                                    style_spans, client,
        // send updated find status only if there have been changes
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
}

        if self.highlight_find {
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
                serializer.serialize_newtype_variant("DeltaElement", 1,
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    }
                (region.is_upstream() && c == pos) ||

    /// Returns the regions of the current selection.
            &self.deletes_from_union, &old_deletes_from_union);
    /// `text`. The count of a character in `deletes_from_union` represents
            utf16_count += 1;
        --#--
        Self {
                        self.revs.push(Revision {
    pub categories: Option<CategoriesT>,
    FlowStart,
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);

        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {

    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
    }
                        _ => break
use find::Find;
    trace: Option<&'a Trace>,
impl Hash for Sample {
        --#--

    }
/// from the new revisions on the left.
/// Also note: in addition to the `From` traits described below, this module
/// ```
                    els: delta.els.drain(..)
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                        Some(end) => max(0, end - 1),
            line_cache_shadow::CURSOR_VALID
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {

/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
            engine.undo(undos);
        let (leaf, offset) = match self.get_leaf() {
    pub event_type: SampleEventType,
                return None;

        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
    pub height: f64,
}
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
                    Some(chunk) => self.fragment = chunk,
    }

    /// the same even if it is rebased or merged between devices.
    #[bench]
                where E: serde::de::Error
    {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),

                    priority, inserts, deletes,

                client.replace_status(self.view_id, &json!(replace))
    fn edit_rev_undo_3() {
    fn identity() -> Self {
        delta.end()
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
    }
/// ```
}
        }

        assert_eq!(TEST_STR, String::from(engine.get_head()));
        false

        match cmd {
// See the License for the specific language governing permissions and
        use std::hash::{Hash, Hasher};
    fn eq(&self, other: &Sample) -> bool {
        d_builder.delete(Interval::new_closed_open(10, 36));
        // update only find highlights affected by change
        };
        if offset == 0 {

        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
}
    /// # Panics
                            deletes_bitxor.transform_shrink(&gc_dels)
}
        assert_eq!(snapshot[5].name, "b");
        let d = engine.delta_rev_head(first_rev);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        out.push(Revision {
                            deletes_bitxor
trait StringArrayEq<Rhs: ?Sized = Self> {

        engine.undo([1].iter().cloned().collect());
// distributed under the License is distributed on an "AS IS" BASIS,
        Err(ref e) => {
    /// indicates a search for the next occurrence past the end of the file.
        -##-
                selection.add_region(SelRegion::caret(region.max()));
/// ```rust,ignore
            self.record(Sample::new_instant(name, categories, None));
        }
                            }
        }
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        where S: Into<StrCow>, C: Into<CategoriesT>
/// 1. Samples that span sections of code may be inserted on end instead of

                splitpoint -= 1;
    pub fn line_of_offset(&self, offset: usize) -> usize {
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    enabled: AtomicBool,
pub fn samples_cloned_unsorted() -> Vec<Sample> {
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
                                                    self.size.width));


        let utf8_offset = 19;
    /// description for the invariant.
            self.args == other.args
        self.send_update_for_plan(text, client, styles,
        trace.record(guard.sample.as_ref().unwrap().clone());
        /// and new deletes_from_union
        let inserts_3 = parse_subset_list("
    fn merge_simple_delete_1() {
                first_sample_timestamp,
                    Some(chunk) => self.fragment = chunk,

impl<'a> Cursor<'a, RopeInfo> {
            sample: None,
                        let mut word_cursor = WordCursor::new(text, region.max());
        --#--

/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        soln.push('f');
        self.replace.clone()
            Assert(0, "acbd".to_owned()),
        if self.replace_changed {
    pub tid: u64,


            let deletes = Subset::new(inserts.len());



        ");
        engine.gc(&gc);
}
    }
        self.samples.lock().unwrap().len()
        assert_eq!(2, a.offset_of_line(1));
}

        // interior of last line should be last line
    }
        }
//
    }
    }
        let first_rev = engine.get_head_rev_id().token();
        }

        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
impl Trace {

                    None => return if result.is_empty() { None } else { Some(result) }

    rev_id: RevId,
        }
    {
            'O' => SampleEventType::ObjectSnapshot,
            let a_to_merge = &self.revs[base_index..];
        let first_rev = engine.get_head_rev_id().token();
///
        undo_group: usize,
        }
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
    }
            'E' => SampleEventType::DurationEnd,
                    }
    #[test]
            SampleGuard::new(&self, name, categories, None)
    }
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
// Unless required by applicable law or agreed to in writing, software
            1 if self.selection[0].is_caret() => {
            fragment: ""
    fn into_chrome_id(&self) -> char {
    }
/// ```
                rev_id: basic_rev(i+1),
    All,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let a2 = Rope::from("a");
        let a = Rope::from("a\nb\n");
    fn offset_of_line_small() {
                    let end_of_line = match cursor.next::<LinesMetric>() {
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
            Merge(1,0), Merge(2,0),
        }
            } else {


            trace.closure("test_samples_closure", &["test"], || {});
        gc_scenario(35,20);
        ];
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    }
    // this is the cost contributed by the timestamp to
    pub fn lines(&self, start: usize, end: usize) -> Lines {
            enabled: AtomicBool::new(true),
    #[allow(dead_code)]

    }
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
        if let Some(lines) = lines {
        }
        }
                    s = inserts.transform_union(&s);
        assert_eq!(snapshot[1].name, "thread_name");
                                inserts,
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
/// Usage of static strings is encouraged for best performance to avoid copies.
            }
                match self.inner.next() {
    fn gc_5() {
    /// that are currently deleted, and thus in `tombstones` rather than
            b.push_str(&c);
        if self.is_enabled() {
                if self.fragment.is_empty() {
    match b {
        self.selection = sel;
                max_undo_so_far: i,
categories_from_constant_array!(10);

        Some(&leaf[start_pos .. end])
    }
}
    #[serde(skip_serializing)]
        let mut selection = self.selection.clone();
            Merge(0,1),
    fn merge_priorities() {
        self.enabled.load(AtomicOrdering::Relaxed)
    }
    fn bench_get_tid(b: &mut Bencher) {
                    } else {
        self.iter_chunks(0, self.len())
    /// Tests that priorities are used to break ties correctly
        self.timestamp_us == other.timestamp_us &&
{
            Assert(1, "acpbdj".to_owned()),
        let end = time::precise_time_ns();
        });
    /// The current contents of the document as would be displayed on screen
// distributed under the License is distributed on an "AS IS" BASIS,
impl PartialOrd for Sample {
    {
            edit: Contents::Edit {
                    for (ei, e) in self.peers.iter().enumerate() {
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    #[test]

                    }

        // shouldn't do anything since it was double-deleted and one was GC'd
    Instant,
    /// This is a regression test to ensure that session IDs are used to break
}
        let inserts = parse_subset_list("

    TRACE.samples_cloned_unsorted()
    }
    }
impl<'a> Iterator for LinesRaw<'a> {
        if self.is_enabled() {
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    TRACE.samples_cloned_sorted()
        assert_eq!(trace.get_samples_count(), 1);
        self.utf16_size += other.utf16_size;
// distributed under the License is distributed on an "AS IS" BASIS,
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
    None,
            "something", &["benchmark"],
                self.do_find(text, chars, case_sensitive, regex, whole_words),
        assert_eq!(None, a.next_grapheme_offset(17));
    ///
        assert_eq!(snapshot[8].name, "c");
        assert_eq!(2, a.offset_of_line(1));
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        }
    }
    fn from(s: T) -> Rope {
                      width_cache: &mut WidthCache, keep_selections: bool)
            let mut sample = self.sample.take().unwrap();
            }

            GestureType::MultiLineSelect =>
        let utf8_offset = 9;
        if let Some(occ) = closest_occurrence {
        match *self {
use std::collections::hash_map::DefaultHasher;
                    selection.add_region(occ);
impl FromStr for Rope {
            next_expand_by.push((trans_priority, new_trans_inserts));
pub fn len_utf8_from_first_byte(b: u8) -> usize {

// you may not use this file except in compliance with the License.
///
            Merge(0,1),
    }
fn ns_to_us(ns: u64) -> u64 {
        assert_eq!(Some(1), a.next_codepoint_offset(0));
                                        &selections, &hls, style_spans);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            // about what wrapped.
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),

                    }
            l[offset..].chars().next()
    tombstones: Rope,
impl MetadataType {
    }
                    let mut selection = self.selection.clone();
            let start = self.line_of_offset(last_text, iv.start());
        assert_eq!(utf8_offset, 13);
    fn rebase_1() {

/// With `json_payload` feature:
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {

        let r = r + Rope::from(&b[MIN_LEAF..]);
                },
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    }
    pub fn sel_regions(&self) -> &[SelRegion] {
}
        }
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        }
/// Create a `Rope` from a `String`:

                            let line = self.render_line(client, styles, text,
    first_line: usize,

}
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
            },
        }
}
    }
    }
/// However, anything that can be converted into a Cow string can be passed as
    fn bench_two_timestamps(b: &mut Bencher) {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
            black_box(time::precise_time_ns());
        let b = Rope::from("b");

            SampleEventType::FlowStart => 's',
    // Render a single line, and advance cursors to next line.

    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        let s = String::deserialize(deserializer)?;

            lines: count_newlines(s),
}

pub struct BaseMetric(());
    ThreadName { name: String },

        self.join(",").serialize(serializer)
    /// Invalidates the styles of the given range (start and end are offsets within

    }
        fn new(count: usize) -> MergeTestState {
    fn next_grapheme_offset() {
#[derive(Clone, Copy)]
                }
        use self::MergeTestOp::*;
    #[cfg(feature = "benchmarks")]
                    }
    pub fn next_grapheme(&mut self) -> Option<usize> {
/// # Arguments
            _ => None
    pub fn default() -> Self {
        self.lines_raw(0, self.len())
    -> SampleGuard<'a>
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        self.pending_render

            if let Edit { ref inserts, .. } = rev.edit {
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
            max_undo_so_far: 0,

    pub fn next_grapheme(&mut self) -> Option<usize> {
        let mut offset = 0;
    #[allow(dead_code)]
    /// Tracks whether the replacement string or replace parameters changed.
    fn from(r: Rope) -> String {
    pub height: f64,
                self.do_gesture(text, line, col, ty),
        let cur_deletes_from_union = &self.deletes_from_union;
        // probably change as the recording internals change.
        assert_eq!(1, expand_by[0].0.priority);
///
    }
    /// Width in bytes (utf-8 code units).
/// supported as an optimization when only one reference exists, making the
        serializer.serialize_str(&String::from(self))
            Assert(1, "abc".to_owned()),
    ///
                        let end_line = start_line + seg.n;
            GotoLine { line } => self.goto_line(text, line),
        delta.apply(&self.text)

pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        for i in 0..self.len() {
    }
            tid: sys_tid::current_tid().unwrap(),
    #[test]
                    };
    /// this returns the offset of the end of the rope. Arguments higher
                    } else {
pub struct Trace {
    /// Tests that merging again when there are no new revisions does nothing
    #[cfg(feature = "dict_payload")]
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        if let Some(ix) = style_map.lookup(style) {
        let all_caret = self.selection.iter().all(|region| region.is_caret());

        // todo: this will be changed once multiple queries are supported

        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
    #[test]
    out
        }
        let first_sample_timestamp = all_samples.front()
    ///
        self.drag_state = Some(DragState {
                        None if cursor.pos() == text.len() => cursor.pos(),
        selection.add_region(region);
    /// concurrently it will have count `2` so that undoing one delete but not
///
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        if let Some((l, offset)) = self.get_leaf() {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        assert_eq!(utf16_units, 11);
                }
/// # Returns
    fn hash<H: Hasher>(&self, state: &mut H) {
            },
        // todo: for now only a single search query is supported however in the future
        self.set_selection_raw(text, selection);


        self.revs.iter().enumerate().rev()
            SelectionForFind { case_sensitive } =>
        let mut b = TreeBuilder::new();
    {
        let trace = Trace::enabled(Config::with_limit_count(10));
pub struct Lines<'a> {

    size: Size,
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
                metadata_sort_index: None,

        engine.gc(&gc);

                } else {
        trace.instant("1", &["test"]);

                                     event_type: SampleEventType)
            self.current = next_chunk;
        let first_rev = engine.get_head_rev_id().token();
        if let Some((l, offset)) = self.get_leaf() {
                        let offset = self.offset_of_line(text, start_line);

                        self.revs.push(Revision {
                max_undo_so_far: i+1,
            tid: sys_tid::current_tid().unwrap(),

}
                }
        let mut b = TreeBuilder::new();
        self.set_dirty(text);
        if last_col == 0 && last_line > first_line {
    /// The maximum amount of space the tracing data will take up.  This does
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
            Assert(2, "ab".to_owned()),
        let mut to_undo = BTreeSet::new();
    pub fn get_samples_count(&self) -> usize {
            Merge(5,4),
    }
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
        (Revision {
        assert_eq!(0, a.lines_raw_all().count());
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
    ///
    enum MergeTestOp {
        // creation) is:

}
    /// terminating newline.
                        MetadataType::ThreadName { name: thread_name.to_string() },
pub type Rope = Node<RopeInfo>;
            Merge(0,2), Merge(1, 2),

    }
            }
mod fixed_lifo_deque;
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        client.def_style(&style.to_json(ix));
                }
    }
#[inline]
/// an argument.
            GestureType::WordSelect =>
    ///
            end += 1;
            "ops": ops,
                    } else {
                        Ok(s) => Some(s),
/// 3. You may not care about them always being sorted if you're merging samples
        ---#-
    /// Generally racy since the underlying storage might be mutated in a separate thread.
            match c.edit {
    // in a single session.
    }
    /// An iterator over the lines of a rope.
        }
            tid: sys_tid::current_tid().unwrap(),

    fn invalidate_selection(&mut self, text: &Rope) {
    fn test_trace_disabled() {
            MetadataType::ProcessName {name} => (Some(name), None),

        let expand_by = compute_transforms(revs);
                Contents::Edit {inserts, ..} => inserts,
        assert_eq!(0, b.offset_of_line(0));
                let (last, rest) = self.sel_regions().split_last().unwrap();
    }
    pub metadata_name: Option<StrCow>,
            word_cursor.select_word()
                        Err(e) => {
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
    AsyncInstant,
    }
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
                        })
pub enum CategoriesT {
        assert_eq!(output, String::from(engine.get_head()));
                name, categories, Some(payload.into()), start, end - start));
}
                   whole_words: bool) {
        info.lines
    /// If the cursor is at the end of the leaf, advances to the next leaf.
#[must_use]
    fn bench_trace_closure(b: &mut Bencher) {
                // TODO could probably be more efficient by avoiding shuffling from head every time
{
        as_vec
            if let Edit { ref inserts, .. } = rev.edit {
        let closest_occurrence = self.find.iter().flat_map(|x|
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
/// implementation as efficient as a mutable version.
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        assert!(a != empty);
            Assert(1, "apb".to_owned()),
    #[cfg(feature = "benchmarks")]
    /// The state for replacing matches for this view.
    undo_group: usize,
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
        use std::hash::{Hash, Hasher};
            Merge(0,2), Merge(1, 2),
use memchr::{memrchr, memchr};
                (region.is_upstream() && c == pos) ||
/// assert_eq!("ello wor", String::from(&b));
            Some(region) => {
        struct CategoriesTVisitor;
                            if !inserts.is_empty() {
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
                metadata_sort_index: None,
    type Output = Rope;
extern crate serde_derive;
        self.iter_chunks(0, self.len())
// ======== Merge helpers
                } else if click_count == Some(3) {
use std::string::ParseError;
        let mut a = Rope::from("hello world");
    }
                match self.inner.next() {
    /// Offset of the point where the drag started.
        let mut engine = Engine::new(Rope::from(TEST_STR));

    #[serde(rename = "ts")]
}


}
        let trace = Trace::enabled(Config::with_limit_count(10));
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
        assert_eq!(snapshot[1].name, "thread_name");

}
}
                        let n_skip = seg.their_line_num - line_num;
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
                break;
        let mut engine = Engine::new(Rope::from(TEST_STR));
    fn basic_rev(i: usize) -> RevId {
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
/// # Returns
}
            lines: count_newlines(s),
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    }
        // todo: for now only a single search query is supported however in the future
    /// Selects an entire line and supports multi selection.
/// std::mem::drop(trace_guard); // finalize explicitly if
            session: default_session(),
    // ============== Merge script tests

/// stored as tracing could still be enabled but set with a limit of 0.
        self.revs.last().unwrap().max_undo_so_far
        }
                    Some(chunk) => self.fragment = chunk,
        trace.instant("2", &["test"]);

    #[cfg(feature = "benchmarks")]
    {
            result.push_str(chunk);

    }
                    } else {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            }
    out
// Licensed under the Apache License, Version 2.0 (the "License");
    }
    /// Selects a specific range (eg. when the user performs SHIFT + click).
        self.lines += other.lines;
    fn delta_rev_head_3() {
        let trace = Trace::enabled(Config::default());
    fn eq(&self, other: &CategoriesT) -> bool {
    /// Selects all find matches.
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
            self.pid == other.pid &&
        }
        value
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    pub args: Option<SampleArgs>
//     http://www.apache.org/licenses/LICENSE-2.0
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        deletes_from_union
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
use std::ops::Range;
pub struct LinesMetric(usize);  // number of lines
                Contents::Undo { .. } => panic!(),
            Merge(2,1),
        assert_eq!(utf8_offset, 13);
    #[cfg(feature = "benchmarks")]
///

                },

    /// description for the invariant.
//! conceptually represents the current text and all edit history for that
            let b_to_merge = &other.revs[base_index..];
                metadata_name: None,
        selection.add_region(region);
                                             &text, false);
        }

        self.deletes_from_union = new_deletes_from_union;
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
use std::cmp::{min,max};
                },
            // with offset == 0, but be defensive.
        if !self.lc_shadow.needs_render(plan) { return; }
        ]);
//

        assert_eq!(rope.line_of_offset(15), 3);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        });
    {
    #[bench]
            pid: sys_pid::current_pid(),
    // TODO: insert from keyboard or input method shouldn't break undo group,
                formatter.write_str("comma-separated strings")
}
    type Item = &'a str;
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {

            self.lc_shadow.edit(start, end, new_end - start);
    fn can_fragment() -> bool { true }
            }
        let l_str = text.slice_to_string(start_pos, pos);
            thread_name: Sample::thread_name(),
        self.session = session;
                        for line_num in start_line..end_line {
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    /// inserted, including the ones that were later deleted, in the locations
        let (leaf, pos) = cursor.get_leaf().unwrap();
        self.revs.push(new_rev);
        engine.gc(&gc);
            Merge(0,2),
    /// Tests that priorities are used to break ties correctly
    /// This function does not perform any scrolling.
                    linewrap::rewrap_width(breaks, text, width_cache,
        Self {
            }
        if b >= 0xf0 {
    #[test]
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),

            base_sel: selection.clone(),
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        assert_eq!(snapshot.len(), 9);
    }
//! info.
    /// if it is non-empty. It needs to be a separate commit rather than just


#[must_use]
        /// Groups related edits together so that they are undone and re-done
        let result = closure();

    fn measure(_: &RopeInfo, len: usize) -> usize {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
impl<'a> Drop for SampleGuard<'a> {
        let a = Rope::concat(
        }
            timestamp_us: ns_to_us(timestamp_ns),
                sel.add_region(SelRegion::new(last.start, offset));
            }
    }
                    let mut selection = self.selection.clone();
        });
            Assert(0, "acbd".to_owned()),
}
        let mut b = String::new();
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        }
use rpc::{GestureType, MouseAction, SelectionModifier};
    use delta::{Builder, Delta};
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        samples[1].timestamp_us = 5;


        where S: Into<StrCow>, C: Into<CategoriesT>

        let expand_by = compute_transforms(revs);
            None => None
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    #[test]
        let (new_text, new_tombstones) =
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
impl FromStr for Rope {
        if before {
            Merge(1,2),
}
            cursor: Cursor::new(self, start),
        let subset_str = format!("{:#?}", expand_by[0].1);
    ///

            Scroll(range) => self.set_scroll(range.first, range.last),
            match memchr(b'\n', &s.as_bytes()[offset..]) {
            replace_changed: false,

            base_len: usize
/// A rope data structure.
pub struct Utf16CodeUnitsMetric(usize);

    }
        assert_eq!(0, a.line_of_offset(0));
                    // are empty, could send update removing the cursor.
        deletes_from_union
        trace.instant("1", &["test"]);
/// Stores the tracing data.
    /// The name of the event to be shown.
    /// Find the first revision that could be affected by toggling a set of undo groups
                    let (start, end) = {
            true => self.selection.clone(),
/// have to be considered in `rebase` substantially for normal editing
        for find in &mut self.find {

        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
                match self.inner.next() {
    }
            thread_name: Sample::thread_name(),
        } else {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

            deletes = deletes.transform_expand(&new_trans_inserts);
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))

/// Find a set of revisions common to both lists
            MetadataType::ProcessName {..} => "process_name",
            ModifySelection(movement) => self.do_move(text, movement, true),
            GestureType::MultiLineSelect =>
                        if !last_selection.is_caret() {
    ///
    if a.is_empty() {
use self::Contents::*;
            SampleGuard::new_disabled()
        for _i in 0..50 {

    /// selection edges).

        -> R

// You may obtain a copy of the License at

            if !s.is_empty() {

}
        }
    // callers should be encouraged to use cursor instead
        let mut cursors = Vec::new();
// should make this generic, but most leaf types aren't going to be sliceable
    ///
        self.set_dirty(text);
        }
        ];
        }
                SelectionModifier::Set => self.set_selection(text, occ),
    }
        self.revs.push(new_rev);
        // rebase the delta to be on the head union instead of the base_rev union
        engine.edit_rev(1, edits+1, head, d1);
                let (last, rest) = self.sel_regions().split_last().unwrap();
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            let expand_by = compute_transforms(a_new);
/// ```
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        x
        let initial_rev = engine.get_head_rev_id().token();
/// version of Ropes, and if there are many copies of similar strings, the common parts
/// discussion on payload.
                Undo { toggled_groups, deletes_bitxor } => {
    /// Returns the byte offset corresponding to the line `line`.
            Merge(0,1),
        };
                    };
    /// The line number is 0-based.
    }
            Merge(0,1),
                         start: usize, end: usize, sel: &[(usize, usize)],
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
    fn eq(&self, other: &CategoriesT) -> bool {
                offset = prev;
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
        }
        };
            }
                            if !inserts.is_empty() {
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
        if self.find_changed != FindStatusChange::None {
    DurationBegin,
                        DeltaElement::Insert(Rope::from(s)),
    /// Get the contents of the document at a given revision number
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        gc_scenario(4,3);
        RevId { session1: 1, session2: 0, num: i as u32 }
        self.join(",").serialize(serializer)
        // the generated JSON.

        use self::MergeTestOp::*;
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
            Assert(0, "acbd".to_owned()),
    fn next(&mut self) -> Option<&'a str> {
            let sel = {
                last.1 = last.1.transform_union(&inserts);

    }
/// * `categories` - A static array of static strings that tags the samples in
    }
                    }
    priority: usize,

        delta.end()
        inserts: Subset,
///

/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
/// }
use delta::{Delta, InsertDelta};
                        if self.undone_groups.contains(undo_group) {
            Click(MouseAction { line, column, flags, click_count }) => {
            match seg.tactic {
}
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    pub fn scroll_height(&self) -> usize {
        self.hash(&mut hasher);
               a.lines_all().collect::<Vec<_>>());
categories_from_constant_array!(1);
                match *other {
    }
        assert_eq!(snapshot[8].name, "x");
            'e' => SampleEventType::AsyncEnd,
    /// Tests that merging again when there are no new revisions does nothing

///
                    if let Some(new_gc_dels) = new_gc_dels {
        self.find_changed = FindStatusChange::All;
            Assert(0, "zacpbdj".to_owned()),
use serde_json::Value;
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
}

        cursor.is_boundary::<BaseMetric>()
    }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

        }, to_payload("test_get_samples_nested_trace"));
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        Assert(usize, String),

            engine.undo(undos);
    /// Selects the next find match.


/// `base_revs`, but modified so that they are in the same order but based on
        let start = time::precise_time_ns();
                l = nl;
        // if self.end is inside this chunk, verify that it is a codepoint boundary

        assert_eq!(trace.is_enabled(), true);
            return ix;
                s.len()
    }
    pub fn set_size(&mut self, size: Size) {
/// # use xi_rope::Rope;
extern crate serde;
        }
        d_builder.delete(Interval::new_closed_open(10, 36));
    }
            timestamp_us: ns_to_us(time::precise_time_ns()),
        }

        let after_first_edit = engine.get_head_rev_id().token();
    }
    /// Return the offset of the codepoint after `offset`.
            Assert(1, "apbj".to_owned()),
    fn is_boundary(s: &String, offset: usize) -> bool {
                    } else {
        let (leaf, pos) = cursor.get_leaf().unwrap();
/// Represents the current state of a document and all of its history

            rev_id_counter: 1,
                let (last, rest) = self.sel_regions().split_last().unwrap();
}
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
            match rev.edit {
        assert_eq!(1, expand_by[0].0.priority);
        cursor.prev::<BaseMetric>()
        self.invalidate_selection(text);
            offset = text.len();
            match *op {
            Some(ref breaks) => {
        #[derive(Serialize, Deserialize)]
    }
            AssertMaxUndoSoFar(1,1),
    out.as_mut_slice().reverse();

        }
            r = op.inserts.apply(&r);
            .map_or(0, |ref s| s.timestamp_us);

        in_base_units
            let head = engine.get_head_rev_id().token();

    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            // These two will be different without using session IDs
}
    fn merge_whiteboard() {
            Some(offset + len_utf8_from_first_byte(b))
        Ok(Delta::from(d))
    pub fn new_duration<S, C>(name: S,
    // TODO: a case can be made to hang this on Cursor instead
impl Config {
        Assert(usize, String),
        }
            _ => return
    fn test_get_sorted_samples() {
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
    // TODO: maybe refactor this API to take a toggle set
        if self.len() != other.len() {
    fn gc_4() {
        let mut a = String::new();
            thread_name: Sample::thread_name(),
#[inline]
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
                        deletes: transformed_deletes,

    #[cfg(feature = "benchmarks")]
/// Get a slice of a `Rope`:
        let first_rev = engine.get_head_rev_id().token();
            deletes = deletes.transform_expand(&new_trans_inserts);
    /// If the cursor is at the end of the rope, returns the empty string.
        use self::MergeTestOp::*;
fn exe_name() -> Option<String> {
        }
        engine.edit_rev(1, 1, first_rev, d1.clone());
    }
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
                first_sample_timestamp,
    #[test]
    ///
    /// Exposed for unit tests.
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        rendered_styles
        let self_iv = Interval::new_closed_closed(0, self.len());
            let b = self.current.unwrap().as_bytes()[self.idx];
    }
    /// assumed to be forward).
            // I think it's a precondition that this will never be called
    /// Width in bytes (utf-8 code units).
        }

#[derive(Serialize, Deserialize, Debug, Clone)]
}
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
}
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {

                              payload: Option<TracePayloadT>,
                }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        assert_eq!(snapshot[1].name, "thread_name");
}
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
                        s = &s[..s.len() - 1];
    /// Returns the regions of the current selection.
    }
            "something", &["benchmark"],
    }
            let _x = trace.block("something", &[]);

    fn gc() {
    fn delta_rev_head_2() {
/// Returns all the samples collected so far.  There is no guarantee that the


    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
//
                          payload: Option<TracePayloadT>) -> Self
        #---
        let r = r + Rope::from(&b[MIN_LEAF..]);
        assert!(a.slice(0, 0) == empty);
/// });
        cursor.next::<BaseMetric>()
use edit_types::ViewEvent;
/// fn something_else_expensive(value: u32) {
        if let Some((l, offset)) = self.get_leaf() {
#[derive(Serialize, Deserialize, Clone, Debug)]
            Assert(0, "cbd".to_owned()),
        // rebase delta to be on the base_rev union instead of the text
            self.start_drag(offset, offset, offset);
    #[bench]
        // if we have active find highlights, we don't collapse selections
        // todo: for now only a single search query is supported however in the future
    }
        match ty {
    }
        let head = engine.get_head_rev_id().token();
    }
        }
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
//
    }
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }

            true => self.selection.clone(),


            line_cache_shadow::CURSOR_VALID
            Assert(0, "ab".to_owned()),
        } else {

    {
        ---#-
    }
// You may obtain a copy of the License at
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {

    /// the other doesn't make it re-appear.
    AsyncStart,
        assert_eq!(snapshot[8].name, "c");
        let inserts = parse_subset_list("
        Ok(Rope::from(s))

fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {

}
        }
            edit: Contents::Edit {
            scroll_to: Some(0),
                let mut cursor = Cursor::new(&text, region.min());
        let mut cursor = Cursor::new(self, offset);
        engine.edit_rev(1, 1, initial_rev, d1.clone());

                                  style_spans, &plan, pristine);
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            base_len: usize
            priority: 0,
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        // interior of last line should be last line

        let d = engine.delta_rev_head(first_rev);
            None
        -##-

        if self.is_enabled() {
        for i in 1..(s1.len() * 3) {
                }

        assert_eq!(2, expand_by[1].0.priority);
}
        engine.edit_rev(1, 1, first_rev, build_delta_1());

            MergeTestState { peers }
/// Usage of static strings is encouraged for best performance to avoid copies.
///
///
    /// Sorting priority between processes/threads in the view.
        self.cursor.next_leaf();
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
            Assert(0, "abc".to_owned()),
        /// revision that were added by this revision.
        }
/// See `trace_block` for how the block works and `trace_payload` for a
            write!(f, "{}", String::from(self))
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
            GestureType::LineSelect =>

    }
            self.current = None;
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        let trace = Trace::enabled(Config::with_limit_count(10));
    }
    }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

                        ops.push(self.build_update_op("invalidate", None, seg.n));
                if self.fragment.is_empty() {

        trace.instant("4", &["test"]);

                }

        let after_first_edit = engine.get_head_rev_id().token();
        let mut r = Rope::from("27");
                        first_sample_timestamp,
}

        MergeTestState::new(3).run_script(&script[..]);
/// * `name` - A string that provides some meaningful name to this sample.
    cursor: Cursor<'a, RopeInfo>,
        }
    }
            timestamp_us: ns_to_us(time::precise_time_ns()),
        }
            return 0;
        // Note: for committing plugin edits, we probably want to know the priority
                MergeTestOp::Merge(ai, bi) => {
categories_from_constant_array!(3);
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    fn sample_name(&self) -> &'static str {
        // selection state, and for scrolling it into view if needed. This choice can
    /// Get revision id of head revision.
        ]);
/// version of Ropes, and if there are many copies of similar strings, the common parts
            prev_boundary = c.prev_boundary(&l, leaf_offset);
#[derive(Clone, Debug, PartialEq, Eq)]
            b.push_str(&c);
                         style_spans: &Spans<Style>) -> Vec<isize>
use std::cell::RefCell;
                inserts: new_inserts,
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
        let trace = Trace::enabled(Config::default());
        let mut engine = Engine::new(Rope::from(TEST_STR));
            sel.add_region(
            s = &s[splitpoint..];
    #[inline]
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
#[inline]
            }
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        assert_eq!(correct, rearranged_inserts);
            name: sample_name,
}
                None => {

            Assert(1, "pbj".to_owned()),

        let new_head = engine.get_head_rev_id().token();
            }
fn count_utf16_code_units(s: &str) -> usize {
                    if sel_end_ix > sel_start_ix {
pub fn enable_tracing_with_config(config: Config) {
        let mut hasher = DefaultHasher::new();
        let trace = Trace::disabled();
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            Assert(1, "arpbzj".to_owned()),
}
                },
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    /// Front end's line cache state for this view. See the `LineCacheShadow`
            categories: Some(categories.into()),
            }, to_payload("test_get_sorted_samples"));
    }
    pub fn lines_raw_all(&self) -> LinesRaw {
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        rendered_styles
            categories: Some(categories.into()),

    fn drop(&mut self) {
        memchr(b'\n', &s.as_bytes()[offset..])
        selection.add_region(region);
        assert_eq!(1, a.line_of_offset(2));
            match c.edit {
    {
            } else {
    /// Tracks whether find highlights should be rendered.
pub type Rope = Node<RopeInfo>;
            Assert(0, "acpbdj".to_owned()),
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
        }
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
            next_expand_by.push((trans_priority, new_trans_inserts));
                }

                                     payload: Option<TracePayloadT>,
                    // can only happen on empty input
        let offset = self.line_col_to_offset(text, line as usize, 0);
        Some(&leaf[start_pos .. end])
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
            match memchr(b'\n', self.fragment.as_bytes()) {
            SampleGuard::new_disabled()
        });
            Merge(3,1), Merge(5,3),
    use super::*;
//
        Cow::from(b)
        self.revs.iter().enumerate().rev()
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
fn find_leaf_split_for_merge(s: &str) -> usize {
    for rev in revs.iter().rev() {
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        where D: serde::Deserializer<'de>
}
    use rope::{Rope, RopeInfo};
        -##-

                leaf_offset = self.pos() - noffset;
        match symbol {
            end,
        --#--
        if let Some(lines) = lines {
use delta::{Delta, DeltaElement};
        tombstones = new_tombstones;
        let trace = Trace::enabled(Config::with_limit_count(10));
    fn edit_rev_undo_2() {
        let snapshot = trace.samples_cloned_sorted();
    ProcessSortIndex { sort_index: i32 },
        } else {
    }

                el.serialize_field(end)?;
        assert_eq!(Some(6), a.next_codepoint_offset(3));
        let (ins_delta, deletes) = delta.factor();
            // I think it's a precondition that this will never be called
        let end = self.sel_regions().last().unwrap().end;
    }

        r.slice_to_string(0, r.len())
    CompleteDuration,
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        if wrap_col > 0 {
            els: Vec<RopeDeltaElement_>,
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
/// Stores the relevant data about a sample for later serialization.
        let offset = self.line_col_to_offset(text, line as usize, 0);
    }
    inner: ChunkIter<'a>,
                    deletes: deletes.clone(),
                    }
    let mut out = Vec::new();
/// than a string that needs to be copied (or ~4.5x slower than a static string)
            Assert(0, "abc".to_owned()),
        for rev in old_revs.into_iter().rev() {
    }
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
    // of the union string length *before* the first revision.
        for chunk in self.iter_chunks(start, end) {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            max: offset,
        // todo: this will be changed once multiple queries are supported
        samples[1].pid = 2;
        // probably change as the recording internals change.
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    max_undo_so_far: usize,
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();

            Merge(1,2),
    TRACE.closure(name, categories, closure)
                            }
        self.session = session;
    pub fn join(&self, sep: &str) -> String {
///
    }
                        let mut word_cursor = WordCursor::new(text, region.max());
            Assert(2, "b".to_owned()),
    /// Sets the selection to a new value, without invalidating.
        &self.selection
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    /// Updates the view after the text has been modified by the given `delta`.
/// 1. Samples that span sections of code may be inserted on end instead of
            for find in self.find.iter() {
        (Revision {
        assert_eq!(1, b.line_of_offset(2));
    /// The line number is 0-based, thus this is equivalent to the count of newlines
            while !s.is_char_boundary(splitpoint) {
                } else {
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        }
use xi_rope::tree::Cursor;
        next_boundary.unwrap_or(None)
        // the generated JSON.
        let first_rev = engine.get_head_rev_id().token();
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
/// fn something_expensive() -> u32 {

            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
    pub fn enable(&self) {
    #[serde(default = "default_session", skip_serializing)]
    }
// distributed under the License is distributed on an "AS IS" BASIS,
    #[test]

        ).min_by_key(|x| {
                    } else {
}
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);

}
    fn next_codepoint_offset_small() {
    pub fn slice(&self, start: usize, end: usize) -> Rope {
        self.undone_groups = groups;
        match *self {
        assert_eq!("1234567", String::from(r));
        let a = Rope::from("a");
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
        let trace = Trace::enabled(Config::default());

use serde_json::Value;
    /// Get the line range of a selected region.

            Merge(0,2), Merge(1, 2),
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        where S: serde::Serializer
        where S: serde::Serializer
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        self.timestamp_us == other.timestamp_us &&

    /// fine-grained in the case of multiple cursors, but we also want this
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);

        if let Some(occ) = closest_occurrence {
                    let after = new_full_priority >= full_priority;  // should never be ==
        b if b < 0x80 => 1,
                SelectionModifier::AddRemovingCurrent => {

        true
const MIN_LEAF: usize = 511;

        self.revs.push(new_rev);
    /// Time complexity: technically O(n log n), but the constant factor is so
            }
        }
pub fn enable_tracing_with_config(config: Config) {
            utf16_count += 1;
            let c = region.end;
        let a2 = Rope::from("a");
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
pub struct LinesMetric(usize);  // number of lines
                        if n_skip > 0 {
    }
/// With `json_payload` feature:

        if !self.is_point_in_selection(offset) {

// ======== Generic helpers
    {
    ThreadName { name: String },
        where D: Deserializer<'de>,
    /// not account for any overhead of storing the data itself (i.e. pointer to
                            }
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
        assert_eq!(rope.line_of_offset(1), 0);
        CategoriesT::DynamicArray(c)
    fn lines_med() {
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {

                                deletes.transform_shrink(&gc_dels))
    }
impl<'a> Drop for SampleGuard<'a> {
        where S: Serializer
        -##-
#[inline]


            pid: sys_pid::current_pid(),
        }
fn count_utf16_code_units(s: &str) -> usize {

    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        if !self.is_enabled() {
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
            Merge(2,0),

        b.push('\n');
        let a = Rope::from("a\nb\nc");
    /// Note: `edit` and `edit_str` may be merged, using traits.
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
    #[serde(serialize_with = "serialize_event_type")]
    }
        self.tombstones = tombstones;
                        DeltaElement::Insert(Rope::from(s)),
            rebased_deletes_from_union.union(to_delete)
use selection::{Affinity, Selection, SelRegion};
    fn bench_trace_closure(b: &mut Bencher) {
    {
        self.pending_render = pending


        samples
            }

            } else {
///
///
        }
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.

            session: default_session(),

            for i in 0..count {
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
        self.push_str(&other[start..end]);
    pub fn set_scroll(&mut self, first: i64, last: i64) {
            base_len: usize
    let mut utf16_count = 0;

            self.record(Sample::new_duration(
        d_builder.delete(Interval::new_closed_open(10, 36));
            SampleEventType::AsyncInstant => 'n',
    // * Actual measurement in text layout
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
/// Usage of static strings is encouraged for best performance to avoid copies.
    #[test]
            selection: SelRegion::caret(0).into(),
            // d-expand by other
        }
            trace.closure_payload("y", &["test"], || {
///
    pub fn default() -> Self {
            for find in self.find.iter() {
            while !s.is_char_boundary(offset - len) {
use fixed_lifo_deque::FixedLifoDeque;
    #[test]
    }
    }


}
        let d = engine.delta_rev_head(first_rev);
        a.push('\n');
            self.pid == other.pid &&
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        // ensure that when the samples are sorted by time they come out in a
        for _ in 0..in_measured_units {
                    let full_path = exe_name.into_os_string();
            b.push('b');
use movement::{Movement, region_movement, selection_movement};

        // todo: this will be changed once multiple queries are supported
                // should be removed in favor of do_gesture
            pid: sys_pid::current_pid(),
    #[serde(skip_serializing_if = "Option::is_none")]
    }
        assert_eq!(Some(9), a.next_grapheme_offset(3));
                            styles: &StyleMap, style_spans: &Spans<Style>,
    for op in b_new {
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        },
        };
        &leaf[offset..end]
                    let transformed_inserts = inserts.transform_expand(&s);
    /// Determines whether the offset is in any selection (counting carets and
            name: sample_name,
        self.rev_id_counter += 1;
                    if s.ends_with('\r') {
        self.text = new_text;

        let mut revs_2 = basic_insert_ops(inserts_2, 4);
        }
        let invalid = if all_caret {
    /// The thread the sample was captured on.  Omitted for Metadata events that
mod sys_pid;
    ObjectCreated,


categories_from_constant_array!(3);
    }
///
            Click(MouseAction { line, column, flags, click_count }) => {

            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
        }
            None
    #[test]
            Assert(1, "pbj".to_owned()),

    // TODO find the maximum base revision.
        assert_eq!(snapshot[5].name, "z");


/// * `name` - A string that provides some meaningful name to this sample.
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();

    // partly because the reachability calculation would become more complicated (a
        let contents = match rev.edit {
        // This might be an over-specified test as it will
    }
    #[cfg(feature = "benchmarks")]
    /// The process the sample was captured in.
        let r = Rope::from(&a[..MAX_LEAF]);
        assert_eq!(0, b.offset_of_line(0));
        let mut d_builder = Builder::new(TEST_STR.len());
    /// terminating newline.
                    } else if !inserts.is_empty() {


fn exe_name() -> Option<String> {

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            b.push('b');

        gc_scenario(35,20);
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
        let mut pos = self.pos();
    Instant,
        -----#
/// Enable tracing with the default configuration.  See Config::default.

            );
        let undone = self.undone_groups.contains(&undo_group);
            if inserts.is_empty() {
        let deletes_from_union = parse_subset("-#----#");
        while !s.is_empty() {

            ix = sel_end as isize;
                    priority, inserts, deletes,

                        gc_dels = gc_dels.transform_expand(inserts);
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure

    pub fn enable(&self) {
            {
        // likely be improved.
/// Returns all the samples collected so far.  There is no guarantee that the
                        }
                    sel.add_region(region);
    fn next(&mut self) -> Option<u8> {
                        line_num = seg.their_line_num + seg.n;
    /// Return the byte offset corresponding to the line number `line`.
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                                  style_spans, &plan, pristine);
        assert_eq!(snapshot[8].name, "x");
    }
            els: Vec<RopeDeltaElement_>,
                    return Some(result);


    }
    #[test]
    }
    }
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                    } else if !inserts.is_empty() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                self.start_drag(offset, offset, offset);
            }
    }
            Assert(0, "acrbdz".to_owned()),
                    if let Some(new_gc_dels) = new_gc_dels {
}
    undo_group: usize,
pub type RopeDeltaElement = DeltaElement<RopeInfo>;

            els: Vec<RopeDeltaElement_>,

        for i in ((edits-max_undos)..edits).rev() {
    /// Return the line number corresponding to the byte index `offset`.
///
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        assert_eq!(None, a.next_grapheme_offset(17));
///
enum FindStatusChange {
impl Config {
    #[bench]
                    // fast-forward this revision over all common ones after it
    }
/// patterns. Any large runs of typing in the same place by the same user (e.g
            GestureType::PointSelect => {
            Merge(0,2), Merge(1, 2),
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);


    pub fn lines(&self, start: usize, end: usize) -> Lines {

/// See `trace_payload` for a more complete discussion.
        let contents = Contents::Edit {
        }
use xi_rope::delta::Delta;
    // for simplicity.

        }
        /// The subset of the characters of the union string from after this

            }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    // use own breaks if present, or text if not (no line wrapping)
    /// Offset of the point where the drag started.
        // original values this test was created/found with in the UI:
    identity_op,
use edit_types::ViewEvent;
            //if self.cursor.is_boundary::<BaseMetric>() {
        /// The set of groups toggled between undone and done.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    None,
                return offset;
// Copyright 2016 The xi-editor Authors.
    fn arr_eq(&self, other: &Vec<String>) -> bool {
            tid: sys_tid::current_tid().unwrap(),
                        if !last_selection.is_caret() {
    }

            next_expand_by.push((trans_priority, new_trans_inserts));
        let d = engine.delta_rev_head(first_rev);
        engine.undo([].iter().cloned().collect());
        count_utf16_code_units(&s[..in_base_units])
                false => x.start
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    fn lines_med() {
    pub fn lines_raw_all(&self) -> LinesRaw {
    type Item = u8;
        if let Some(exe_name) = exe_name() {
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
                                     categories: C,
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    All,

        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {

}
        self.scroll_to = Some(end);
    /// than this will panic.
use std;
    /// Determines the current number of find results and search parameters to send them to
    /// Get revision id of head revision.

            MergeTestState { peers }
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    }
                    if let Some(new_gc_dels) = new_gc_dels {
        // original values this test was created/found with in the UI:
    }


        // update only find highlights affected by change
pub fn enable_tracing() {
            Assert(0, "abc".to_owned()),
    }

        }
    #[serde(rename = "xi_payload")]
        if s.len() <= MAX_LEAF {
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
        // todo: for now only a single search query is supported however in the future
    type Item = &'a str;
        }
            AssertMaxUndoSoFar(0,3),
        println!("{:#?}", b_delta_ops);
impl<'a> Iterator for ChunkIter<'a> {
                return None;
mod tests {
        Self {
        }
        memrchr(b'\n', &s.as_bytes()[..offset])
    // * grapheme clusters
            AddSelectionAbove =>
        Ok(Delta::from(d))
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
        match *self {
                    result = cow_append(result, self.fragment);
            Some(b)
enum Contents {
/// The payload associated with any sample is by default a string but may be
/// ```
    /// You could construct the "union string" from `text`, `tombstones` and
        }
        }
        if self.is_enabled() {
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });

        let correct = parse_subset_list("
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        client.update_view(self.view_id, &params);
            };
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        self.set_selection(text, sel);
                (drag_state.min, max(offset, drag_state.max))
                        word_cursor.select_word()
    }
        }
        let script = vec![

            max_undo_so_far: 0,
            pid: sys_pid::current_pid(),

    priority: usize,
    }
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
    }
    }
        let mut samples = vec![
        self.enabled.load(AtomicOrdering::Relaxed)
    pub fn set_size(&mut self, size: Size) {
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    // A colliding session will break merge invariants and the document will start crashing Xi.
            return;
            height: 10,
        selection.add_region(region);
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    pub fn max_undo_group_id(&self) -> usize {

    }
        /// revision that were deleted by this revision.
        for &(sel_start, sel_end) in hls {
                        ops.push(self.build_update_op("invalidate", None, seg.n));


pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        // TODO: may make this method take the iv directly
            AssertMaxUndoSoFar(0,2),
    }
                                inserts,
/// * `categories` - A static array of static strings that tags the samples in
            'B' => SampleEventType::DurationBegin,
    }
        };
    session2: u32,
    }

        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
                    }

    where S: Into<StrCow>, C: Into<CategoriesT>
struct Revision {
#[cfg(test)]
            args: Some(SampleArgs {
                MetadataType::ProcessName {name: exe_name},
                        let mut rendered_lines = Vec::new();

}
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
// Copyright 2016 The xi-editor Authors.
//! conceptually represents the current text and all edit history for that
            FindNext { wrap_around, allow_same, modify_selection } =>

    pub fn prev_codepoint(&mut self) -> Option<char> {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
    }
        }
    use interval::Interval;

use width_cache::WidthCache;
        Err(ref e) => {
        let mut b = TreeBuilder::new();
        if let Some(edit) = contents {

                if (flags & FLAG_SELECT) != 0 {
        if self.is_enabled() {
struct Revision {
    pub args: Option<SampleArgs>

        let text_with_inserts = text_ins_delta.apply(&self.text);
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
    }
    fn bench_trace_closure_payload(b: &mut Bencher) {
        let trace = Trace::disabled();
            }

    }
            Assert(0, "b".to_owned()),

/// Applies an optimization where it combines sequential revisions with the
                        };
        // We could probably reduce the cloning of selections by being clever.

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        (self.session1, self.session2)
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
}
        let d = engine.delta_rev_head(first_rev);
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

        for &(sel_start, sel_end) in sel {
}
                            deletes_bitxor
/// Is tracing enabled.  Technically doesn't guarantee any samples will be

            result.push_str(chunk);
        ---#-
                text.offset_of_line(line)
        }
    /// The name to associate with the pid/tid.  Whether it's associated with
                let line = line.min(text.measure::<LinesMetric>() + 1);
        b.iter(|| black_box(trace.closure_payload(
        where D: Deserializer<'de>,
///
            self.truncate(splitpoint);
        let a = Rope::from("a\rb\rc");
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    pub(crate) fn has_pending_render(&self) -> bool {
/// How tracing should be configured.
/// State required to resolve a drag gesture into a selection.
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
                    let sel_start = cursor.pos();
                                        &selections, &hls, style_spans);
// limitations under the License.
    #[should_panic]

use std::borrow::Cow;

        self.enabled.store(false, AtomicOrdering::Relaxed);
    where D: serde::Deserializer<'de> {
    fn replace_small() {
        d.insert(StrCow::from("test"), StrCow::from(value));
            selection: SelRegion::caret(0).into(),

            Merge(2,0),
use rpc::{GestureType, MouseAction, SelectionModifier};
    use rope::{Rope, RopeInfo};
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
    }
        if offset == 0 {

    fn append_large() {
    #[test]
        let self_iv = Interval::new_closed_closed(0, self.len());
        self.replace.clone()
                        } else {
    where D: serde::Deserializer<'de> {
// Licensed under the Apache License, Version 2.0 (the "License");
                self.select_line(text, offset, line, false),
//     http://www.apache.org/licenses/LICENSE-2.0
        self.lines_raw(0, self.len())
                max_undo_so_far: i+1,
    assert!(a[0].rev_id == b[0].rev_id);
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
                self.run_op(op);
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
            Merge(1,2),
/// An element in a `RopeDelta`.
    fn bench_get_tid(b: &mut Bencher) {
/// creation.  Roughly corresponds to start_ns but instead there's a
mod tests {
                        // no need to un-delete undone inserts since we'll just shrink them out
//! `Engine::merge`, which is more powerful but considerably more complex.
mod sys_tid;
    /// Exposed for unit tests only.

        let deletes_from_union = parse_subset("-#----#");
            SampleEventType::AsyncStart => 'b',
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
        }
}
/// some way.
        engine.gc(&gc);
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
use unicode_segmentation::GraphemeCursor;

    use serde_test::{Token, assert_tokens};
/// However, anything that can be converted into a Cow string can be passed as

    ///
            }
                    let end_of_line = match cursor.next::<LinesMetric>() {
}
    1

    // trace_block()/trace_closure

            trace.instant("something", &[]);
    }
    /// revision, and so needs a way to get the deletion set before then.
    }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
/// # Examples
        self.set_selection(text, SelRegion::caret(offset));

    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
        let len = match first_rev.edit {
    }
                        };
        // rebase the delta to be on the head union instead of the base_rev union
    }
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

                    }
        let d = engine.delta_rev_head(after_first_edit);
}
            } else if incomp == GraphemeIncomplete::NextChunk {
        assert_eq!(soln, String::from(engine.get_head()));
#[must_use]

            match c.edit {
categories_from_constant_array!(10);
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
    #[test]
                len += 1;
pub fn enable_tracing_with_config(config: Config) {
    /// not account for any overhead of storing the data itself (i.e. pointer to

    }
    }

    }
    }
            None => None
        }
        impl<'de> Visitor<'de> for CategoriesTVisitor {
                        } else {
///
        for &region in self.sel_regions() {
            None => None
        false

            Assert(1, "ab".to_owned()),
            }),
                selection.add_region(SelRegion::caret(region.max()));
    ///
    /// This uniquely represents the identity of this revision and it stays
}
                              payload: Option<TracePayloadT>,
    fn bench_trace_instant(b: &mut Bencher) {
    ///
    // this is the cost contributed by the timestamp to trace()
        let (start, end) = {
    }
        _ => 4
    tombstones: Rope,
    }
/// between two utf8 code units that form a code point is considered invalid.
            // copy the current state
        String::from(&r)
            categories: Some(categories.into()),
    fn merge_associative() {
            Assert(0, "abc".to_owned()),
    /// This is a regression test to ensure that session IDs are used to break
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
            SampleGuard::new_disabled()


            None
            warn!("Failed to get path to current exe: {:?}", e);
    }

        if self.current.is_none() {
        }
        as_vec
// utility function to clamp a value within the given range
    /// update cycle. This should be a last resort, updates should generally cause
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// return if a delete is un-done or an insert is re- done.

        a.lines_all().collect::<Vec<_>>());
    /// how many times it has been deleted, so if a character is deleted twice
        assert_eq!(rope.offset_of_line(0), 0);
                c.provide_context(&pl, self.pos() - poffset);
            Merge(1,0), Merge(2,0),
    }
#[derive(Clone, Debug)]
            Merge(0,2),
    }
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        self.utf16_size += other.utf16_size;
            Scroll(range) => self.set_scroll(range.first, range.last),
    #[test]

        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
/// A rope data structure.

    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
                         start: usize, end: usize, sel: &[(usize, usize)],
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        let mut to_undo = BTreeSet::new();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
// Unless required by applicable law or agreed to in writing, software
        let script = vec![
{
    }
    fn next(s: &String, offset: usize) -> Option<usize> {
                        let _ = s.pop();
                self.select_word(text, offset, false),
        }
        let snapshot = trace.samples_cloned_unsorted();
#[inline]

        ];
    fn hash<H: Hasher>(&self, state: &mut H) {

        assert_eq!(rope.offset_of_line(0), 0);
/// configured via the `dict_payload` or `json_payload` features (there is an

        debug_subsets(&rebased_inserts);
impl Serialize for Delta<RopeInfo> {
extern crate time;
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        let script = vec![
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            if region.is_caret() {
                             client: &Client, style_spans: &Spans<Style>)
///
        let new_head = engine.get_head_rev_id().token();
            Some(right_str)
        ---#--
        let mut cursor = Cursor::new(self, offset);
        }

        }, deletes_from_union)
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        let r = r + Rope::from(&b[MIN_LEAF..]);
//     http://www.apache.org/licenses/LICENSE-2.0
            cur_len_utf16 += u.len_utf16();

/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
    }
                    let transformed_inserts = inserts.transform_expand(&s);
            GestureType::MultiLineSelect =>
            }
categories_from_constant_array!(10);
        engine.edit_rev(0, 2, first_rev, build_delta_2());

}
                Ok(CategoriesT::DynamicArray(categories))
                //self.end - prev_pos
// ======== Generic helpers
    #[cfg(feature = "benchmarks")]
        update
            self.unset_find();
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
        let next_line_offset = self.offset_of_line(text, line + 1);
                    }
/// let c = b.slice(1, 7);
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
    /// Return the byte offset corresponding to the line number `line`.
                    self.set_selection(text, selection);
    fn test_get_samples() {
    /// An iterator over the lines of a rope.
                    let end_of_line = match cursor.next::<LinesMetric>() {
            // The deletes are already after our inserts, but we need to include the other inserts
    fn test_get_samples() {
    /// Selects an entire word and supports multi selection.
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]

                formatter.write_str("comma-separated strings")
    #[test]

impl PartialOrd for Sample {
        b if b < 0xf0 => 3,

/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        let inserts = parse_subset_list("

            rendered_styles.push((sel_start as isize) - ix);
    #[cfg(feature = "json_payload")]
    /// Returns a tuple of a new `Revision` representing the edit based on the
                        let un_deleted = deletes_from_union.subtract(deletes);
            undo_group: 0,

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
}
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
/// returned value is dropped.  `trace_closure` may be prettier to read.
        }
    where D: serde::Deserializer<'de> {
                    };
            pid: sys_pid::current_pid(),
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
    TRACE.enable_config(config);
        self.pending_render = pending
    /// inserted, including the ones that were later deleted, in the locations
            AssertMaxUndoSoFar(1,3),
    /// Generate line breaks based on width measurement. Currently batch-mode,
        }
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
}
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
                let mut peer = Engine::new(Rope::from(""));
                }
                if (flags & FLAG_SELECT) != 0 {
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
use delta::{Delta, DeltaElement};

        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
                                            closure: F, payload: P) -> R
        ---#--
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        ");
///
        assert_tokens(&rope, &[
pub type RevToken = u64;


    use super::*;
            Assert(1, "pb".to_owned()),
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
        Some(&leaf[start_pos .. end])
        Ok(Rope::from(s))
    #[test]
    pub metadata_sort_index: Option<i32>,
    /// Sets the selection to a new value, invalidating the line cache as needed.
                // This could be done by explicitly overriding, or by tweaking the
}
    base_sel: Selection,
                            warn!("Failed to get string representation: {:?}", e);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// of Sample that determines order.
        for rev in &self.revs[first_candidate..] {
        let expand_by = compute_transforms(a_revs);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
        assert_eq!(snapshot[3].name, "y");
    None,
                    // We're super-aggressive about dropping these; after gc, the history
        match *self {
    ///
        self.rev_id_counter += 1;
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
            deletes: Subset::new(0),
pub struct BaseMetric(());
        let height = self.line_of_offset(text, text.len()) + 1;
        samples.sort_unstable();
            Some(region) => {
                payload: payload,
            let new_region = region_movement(movement, region, self,
    #[test]
    // partly because the reachability calculation would become more complicated (a
    /// Exposed for unit tests.
    samples: Mutex<FixedLifoDeque<Sample>>,
            tid: sys_tid::current_tid().unwrap(),
            self.mk_new_rev(priority, undo_group, base_rev, delta);
            MergeTestState { peers }
            Assert(1, "cb".to_owned()),
    }
                selection.add_region(occurrence);
        }
            'E' => SampleEventType::DurationEnd,
            }
    pub fn get_samples_count(&self) -> usize {
pub struct Replace {
        assert_eq!(snapshot[6].name, "z");

        let mut engine = Engine::new(Rope::from(TEST_STR));
/// assert_eq!("herald", String::from(a));
            base_rev: RevToken, delta: Delta<RopeInfo>) {

    pub fn iter_chunks_all(&self) -> ChunkIter {
        MergeTestState::new(3).run_script(&script[..]);
categories_from_constant_array!(0);
    samples: Mutex<FixedLifoDeque<Sample>>,
impl Trace {
            &self.deletes_from_union, &old_deletes_from_union);
///
        let mut pos = self.pos();
                                deletes.transform_shrink(&gc_dels))
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),

            let mut len = 1;
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
            }
        let contents = Contents::Edit {
                out.push(DeltaOp {
use linewrap;
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        self.enable_config(Config::default());
    rev_id: RevId,
    /// controlled by features (default string).
        for &(sel_start, sel_end) in hls {
            CategoriesT::DynamicArray(ref self_arr) => {
        // position after 'f' in four
    #[allow(dead_code)]
/// Measured unit is newline amount.
        self.lines_raw(0, self.len())
use rpc::{GestureType, MouseAction, SelectionModifier};
                    };
    #[serde(rename = "name")]
        let mut offset = self.offset_of_line(text, line).saturating_add(col);

            //self.cursor.set(self.end);
    /// List of categories the event applies to.
    }
        let inserts_1 = parse_subset_list("

}
            Some(ref breaks) => {
    /// from the rope.
        let mut cur_len_utf16 = 0;
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                match elem {
        let mut selections = Vec::new();
        assert_eq!("-###-", &subset_str);
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
        let max_line = self.measure::<LinesMetric>() + 1;
// Unless required by applicable law or agreed to in writing, software
                sel.add_region(SelRegion::new(last.start, offset));
        for &(sel_start, sel_end) in hls {
    ///
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,

        let mut sel = self.selection.clone();
        for seg in self.lc_shadow.iter_with_plan(plan) {
    /// The line ending is stripped from the resulting string. The final line ending
    fn is_boundary(s: &String, offset: usize) -> bool {
    fn merge_simple_delete_2() {
        b.push(rhs);
        }

    {
                        inserts: transformed_inserts,
}
#[inline]
categories_from_constant_array!(3);
        assert_eq!(snapshot[6].name, "z");
        Merge(usize, usize),

        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);



    highlight_find: bool,
pub struct Sample {
            },
            pos += 1;
        deletes_from_union
    ///
    }
            Revision {

/// 1. Samples that span sections of code may be inserted on end instead of
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
    fn edit_rev_concurrent() {
                   r.lines_all().collect::<Vec<_>>());
            self.record(Sample::new_duration(
        self.height
#[derive(Clone, Copy)]
                    RopeDeltaElement_::Insert(s) =>
    /// is optional.

        let revs = basic_insert_ops(inserts, 1);
        self.tombstones = tombstones;
            //}
            selection.delete_range(offset, offset, true);
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            // The deletes are already after our inserts, but we need to include the other inserts
                    new_deletes = new_deletes.transform_expand(inserts);
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
            Copy(usize, usize),

}
            SampleEventType::Instant => 'i',
        let (ins_delta, deletes) = delta.factor();
        // original values this test was created/found with in the UI:
            // with offset == s.len(), but be defensive.
/// ```

                        let un_deleted = deletes_from_union.subtract(deletes);
/// supported as an optimization when only one reference exists, making the
                self.set(pos);
            s = &s[splitpoint..];
        let _t = trace_block("View::wrap_width", &["core"]);
                metadata_sort_index: None,
        self.revs.iter().enumerate().rev()
    DurationBegin,

    fn prev(s: &String, offset: usize) -> Option<usize> {
    }
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
        for _i in 0..50 {
    struct MergeTestState {
//
                inserts: new_inserts,


        let mut b = line_cache_shadow::Builder::new();
        let a_revs = basic_insert_ops(inserts.clone(), 1);
                client.replace_status(self.view_id, &json!(replace))
    rev_id: RevId,
        for sample in all_samples.iter() {
use styles::{Style, ThemeStyleMap};
    pub fn default() -> Self {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)

    /// Get previous codepoint before cursor position, and advance cursor backwards.

    #[bench]
        assert_eq!(1, expand_by[0].0.priority);
impl StringArrayEq<[&'static str]> for Vec<String> {
    fn thread_name() -> Option<StrCow> {
        use self::MergeTestOp::*;
            self.set_selection(text, sel);
                            ops.push(self.build_update_op("skip", None, n_skip));
        self.join(",").serialize(serializer)
pub struct Trace {
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    /// Returns a u64 that will be equal for equivalent revision IDs and
        let a = Rope::from("");
        assert_eq!(Some(5), b.next_codepoint_offset(2));
    /// Replacement string.
            SampleGuard::new_disabled()
        ---#-
    pub fn next_grapheme(&mut self) -> Option<usize> {
        cursor.next::<BaseMetric>()
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
        engine.gc(&gc);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            return false;
        a.push('\n');
        while offset < l.len() && !l.is_char_boundary(offset) {
    /// Tracks whether this view has been scheduled to render.
    }
        // This might be an over-specified test as it will
        }

            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    text: Rope,
                    let head = e.get_head_rev_id().token();

            SampleEventType::ObjectDestroyed => 'D',


#[derive(Clone, Copy)]

        json!({"test": value})

    None,
            Merge(4,3),
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        ---#--
        assert_eq!("zcpbdj", String::from(&text_2));
        let first_line = self.line_of_offset(text, start);
            AssertMaxUndoSoFar(0,3),
        cur_len_utf8
            Merge(0,1),
/// ```
    }
        self.revs.iter().enumerate().rev()
    // Render a single line, and advance cursors to next line.
/// # Returns
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
            }

fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
                edit: contents.clone()
        let mut b = TreeBuilder::new();
        self.set_selection_raw(text, selection);
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
            return self.len();
        }).collect()
        if !new_inserts.is_empty() {
        self.subseq(iv)
fn shuffle(text: &Rope, tombstones: &Rope,
    /// Select entire buffer.
        assert_eq!(4, a.offset_of_line(2));
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
    pub name: StrCow,
            match rev.edit {

use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
    fn test_samples_pulse() {
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    // Note: this function would need some work to handle retaining arbitrary revisions,
    }
        #---
                el.serialize_field(start)?;
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    fn merge_simple_delete_2() {
/// conversions in both directions.
        let a = Rope::from("a\nb\nc");
#[derive(Clone, Copy)]
/// assert_eq!("herald", String::from(a));
categories_from_constant_array!(8);
        #------

        assert_eq!(2, r.line_of_offset(r.len()));
#[cfg(test)]
        for u in s.chars() {
    }
//! `Engine::merge`, which is more powerful but considerably more complex.
pub struct View {
            utf16_size: count_utf16_code_units(s),
        (line, offset - self.offset_of_line(text, line))
        match self.breaks {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
}
        self.revs.iter().enumerate().rev()
                        Some(gc_dels.transform_shrink(&inserts))
#[macro_use]
            warn!("Failed to get path to current exe: {:?}", e);
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
        let max_line = self.measure::<LinesMetric>() + 1;
            engine.edit_rev(1, i+1, head, d);
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
    for r in revs {
/// an argument.
    DynamicArray(Vec<String>),
        let b_revs = basic_insert_ops(inserts, 2);
            let mut len = 1;
        self.sample_limit_count
                RenderTactic::Discard => {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
            self.lc_shadow.edit(start, end, new_end - start);
                        if !last_selection.is_caret() {
    ///
            &rebased_deletes_from_union, &new_deletes_from_union);
impl Add<Rope> for Rope {
                }
            trace.record(sample);
        let r = Rope::from(&a[..MAX_LEAF]);
                    } else {
///
    /// point. Used to optimize undo to not look further back.
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
        for seg in self.lc_shadow.iter_with_plan(plan) {

        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    }
            Assert(2, "ab".to_owned()),
/// # use xi_rope::Rope;
/// An element in a `RopeDelta`.
    }
}
}
            categories: None,
        b.build()
    DurationBegin,
        a.lines_all().collect::<Vec<_>>());
    /// vertical scroll position
                out.push((prio, inserts));
    ///
        };
                    if !inserts.is_empty() {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    /// the other doesn't make it re-appear.
    #[test]
    /// The maximum number of entries the tracing data should allow.  Total
        let a = Rope::from("");
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        // We could probably reduce the cloning of selections by being clever.
            } else {
// easily delta-compressed later.



    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
        self.session = session;
        }
/// assert!("hello world" == String::from(a + b));

                if s.ends_with('\n') {
        self.undone_groups = groups;
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        }
            self.tid == other.tid &&
                                priority,
                name, categories, Some(payload.into()), start, end - start));
                    as_vec.push(Sample::new_metadata(
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

            Assert(1, "acb".to_owned()),
//! text.
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
        }


            to_payload("some description of the trace"))));
use std::borrow::Cow;
            self.args == other.args
            }
}
 //additional cursor features
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
    }
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },

            self.idx += 1;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
/// some way.
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
    /// Starts a drag operation.

    // There will probably never be a document with more than 4 billion edits
            if let Some(replace) = self.get_replace() {
                         styles: &StyleMap, style_spans: &Spans<Style>,
                if rev.max_undo_so_far < lowest_group {
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
/// See `trace_payload` for a more complete discussion.
        assert!(r == a_rope.clone() + b_rope.clone());
        self.find.iter().map(|find| {
    }
///
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        assert_eq!(1, r.line_of_offset(r.len() - 1));




    Undo {
            warn!("Failed to get path to current exe: {:?}", e);
        self.revs.append(&mut new_revs);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        engine.undo([].iter().cloned().collect());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        
    ///
}
    /// The empty string will yield a single empty slice. In all other cases, the
pub struct SampleGuard<'a> {
                            Cursor::new(breaks, offset));
/// # Performance
                leaf_offset = self.pos() - noffset;
                            rendered_lines.push(line);
        match *self {
        if !gc_dels.is_empty() {
    for op in b_new {
    }
        }
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    pub fn prev_grapheme(&mut self) -> Option<usize> {
use find::Find;
        }
        // todo: this will be changed once multiple queries are supported

                    text.slice_to_string(start, end)
            write!(f, "Rope({:?})", String::from(self))
    #[test]
    // reachability calculation.
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {

/// ```
                                     event_type: SampleEventType)
    }
        }
        Self {
        self.lines(0, self.len())
                    let full_path_str = full_path.into_string();
                rev_id: basic_rev(i+1),
    }
        gc_scenario(35,20);
                MetadataType::ProcessName {name: exe_name},
    }

    session1: u64,
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
        // that into our actual target.
    ///
/// Internally, the implementation uses reference counting (not thread safe, though
            new_deletes = new_deletes.transform_expand(&new_inserts);
        let a_rope = Rope::from(&a);
}
    }
        for region in self.selection.iter() {
    }
            &rebased_deletes_from_union, &new_deletes_from_union);
    ///
    /// The thread the sample was captured on.  Omitted for Metadata events that
    for rev in revs.iter().rev() {
        let mut r = Rope::from("27");
    fn build_delta_1() -> Delta<RopeInfo> {
    pub(crate) fn get_replace(&self) -> Option<Replace> {
            find.find_status(matches_only)
        }


    /// Time complexity: technically O(n log n), but the constant factor is so

            'e' => SampleEventType::AsyncEnd,
}
{
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                tid));
        assert_eq!(trace.get_samples_limit(), 20);
            for i in 0..count {
    /// Note: `edit` and `edit_str` may be merged, using traits.
///
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
            None
    fn test_samples_pulse() {
        if let Some(last) = self.revs.last() {
//! which is sufficient for asynchronous plugins that can only have one
            utf16_size: 0,
                self.add_selection_by_movement(text, Movement::Up),
        let trace = Trace::enabled(Config::with_limit_count(10));
impl StringArrayEq<[&'static str]> for Vec<String> {
    fn prev_grapheme_offset() {
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo

                }
    pub fn disable(&self) {
        } else { // no toggled groups, return past end

                    a.merge(b);
            SampleEventType::Metadata => 'M'

pub struct Replace {

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
                            Cursor::new(breaks, offset));
    }
/// let mut a = Rope::from("hello world");
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
impl NodeInfo for RopeInfo {

                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
        let start_pos = start_of_line.pos();
    /// The empty string will yield a single empty slice. In all other cases, the
    }
/// ```rust
                MetadataType::ProcessName {name: exe_name},
            if Some(priority) == last_priority {
    ///
        }
        });
    // TODO: insert from keyboard or input method shouldn't break undo group,
        use self::MergeTestOp::*;
                }

                } else {
    fn next(s: &String, offset: usize) -> Option<usize> {
            Assert(2, "ab".to_owned()),
        self.deletes_from_union_before_index(rev_index + 1, true)
            tid: sys_tid::current_tid().unwrap(),
            AssertMaxUndoSoFar(1,1),
    fn lines_small() {
        let trace = Trace::enabled(Config::with_limit_count(20));
    }
#[derive(Clone, Debug, PartialEq, Eq)]
            for &occurrence in find.occurrences().iter() {
        assert_eq!(None, b.prev_codepoint_offset(0));
        let mut gc_dels = self.empty_subset_before_first_rev();
    fn is_boundary(s: &String, offset: usize) -> bool {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
        let first_rev = &self.revs.first().unwrap();
#[derive(Clone, Debug)]

        assert_eq!(2, a.line_of_offset(5));
    fn utf16_code_units_metric() {
        assert_eq!("zcpbdj", String::from(&text_2));
            self.next()
            // The deletes are already after our inserts, but we need to include the other inserts
//! This module actually implements a mini Conflict-free Replicated Data Type
/// acquires a dependency on the `serde_json` crate.
                    filename.to_str().map(|s| s.to_string())
            if sel_end_ix > sel_start_ix {
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        b.push(rhs);
            soln.push('b');
        let mut selection = self.selection.clone();
            base_rev: RevToken, delta: Delta<RopeInfo>) {
            }
    StaticArray(&'static[&'static str]),
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
                payload: payload,

// Licensed under the Apache License, Version 2.0 (the "License");
        let search_query = match self.selection.last() {
        #------


    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
//

}
    #[test]
use linewrap;

    /// Returns the regions of the current selection.
            self.record(Sample::new_instant(name, categories, None));
                c.provide_context(&pl, self.pos() - poffset);
        }
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        delta.serialize_field("els", &self.els)?;

        } else {
                if rev.max_undo_so_far < lowest_group {
                    let (start, end) = {

            Assert(0, "zacpb".to_owned()),
    }
            let a_to_merge = &self.revs[base_index..];
    // * Code units in some encoding
    assert!(a[0].rev_id == b[0].rev_id);
        ]);
    }
/// Boundary is trailing and determined by a newline char.
            self.truncate(splitpoint);
        assert_eq!(utf16_units, 17);
            .map(|(i, _)| i)
            name: sample_name,
            Merge(0,2), Merge(1, 2),
    }
        let expand_by = compute_transforms(revs);

/// }
        let selection = SelRegion::new(0, text.len()).into();

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },

        prev_boundary.unwrap_or(None)
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
}
        let is_base = base_revs.contains(&rev.rev_id);

///
    #[test]
/// Tracing is disabled initially on program launch.

        self.drag_state = Some(DragState {

/// Create an instantaneous sample without any payload.  This is the lowest
        assert_eq!(None, a.prev_codepoint_offset(0));
        let head2 = engine.get_head_rev_id().token();
    //
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            utf16_size: 0,
/// an argument.
                self.do_gesture(text, line, col, ty),
    }

        let inserts_1 = parse_subset_list("
    {

    /// This uniquely represents the identity of this revision and it stays
                             client: &Client, style_spans: &Spans<Style>)
        where D: Deserializer<'de>,

    pub(crate) fn unset_find(&mut self) {
    /// This uniquely represents the identity of this revision and it stays
        let mut b = String::new();
        Ok(Rope::from(s))
                name, categories, None, start, end - start));
            deletes: Subset::new(0),

        let mut engine = Engine::new(Rope::from(TEST_STR));
    pub fn byte_at(&self, offset: usize) -> u8 {
        }
#[derive(Clone, Copy)]
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
/// the `base_revs`. This allows the rest of the merge to operate on only

    }
        let mut engine = Engine::new(Rope::from(""));
            trace.record(sample);
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    /// indicates a search for the next occurrence past the end of the file.

        engine.undo([1].iter().cloned().collect());
                }
        b.push(self);
    fn from(s: T) -> Rope {
            Assert(2, "ab".to_owned()),
                            }
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
            GestureType::MultiLineSelect =>
    #[serde(skip_serializing_if = "Option::is_none")]

            self.shrink_to_fit();
    /// and currently in a debugging state.
        if !new_inserts.is_empty() {
/// However, anything that can be converted into a Cow string can be passed as
 //additional cursor features
            Some(offset + len_utf8_from_first_byte(b))
        Self {
        }
        // selection state, and for scrolling it into view if needed. This choice can

    ///
        }
                }
                        if n_skip > 0 {
        s.is_char_boundary(offset)
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
    inner: LinesRaw<'a>
                    sel.add_region(region);
        assert_eq!(snapshot[0].name, "process_name");
    pub fn new_duration<S, C>(name: S,
    out
                Ok(CategoriesT::DynamicArray(categories))
            self.current = None;
        AssertMaxUndoSoFar(usize, usize),
    /// concurrently it will have count `2` so that undoing one delete but not
// Unless required by applicable law or agreed to in writing, software
    }
    #[inline]
                            ops.push(self.build_update_op("skip", None, n_skip));
        ix
    /// Collapse all selections in this view into a single caret
///     something_expensive()
            GestureType::RangeSelect => self.select_range(text, offset),
        // rebase insertions on text and apply
            Some(region) => {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    }
        true

        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
            self.idx = 0;
    }
    }
                return None;
    replace_changed: bool,
        }
    /// Get text of a given revision, if it can be found.
    }
use std::mem::size_of;
    }

                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        }
    fn accumulate(&mut self, other: &Self) {
#![cfg_attr(feature = "cargo-clippy", allow(
            MergeTestState { peers }

}


        }
        }
    #[test]
    // this should have the same behavior, but worse performance
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);

    fn measure(_: &RopeInfo, len: usize) -> usize {
        impl<'de> Visitor<'de> for CategoriesTVisitor {
    fn eq_small() {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        let line = line as usize;
            args: Some(SampleArgs {
    }
            splitpoint
/// Contains replacement string and replace options.
pub type SessionId = (u64, u32);
        // set last selection or word under current cursor as search query
    #[test]
        } else {

        Subset::new(len)
#[derive(Clone, Debug, PartialEq, Eq)]
                }
                    let e = &mut self.peers[ei];
        let deletes_from_union = parse_subset("-#----#");

#[inline]
                max_undo_so_far: i+1,
    }
                                          closure: F, payload: P)
    }

    fn undo() {
        }, deletes_from_union)
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        let first_rev = engine.get_head_rev_id().token();

                if !region.is_caret() {
                metadata_name: None,
}
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        let first_sample_timestamp = all_samples.front()

        ]);
/// For example, take a string that starts with a 0xC2 byte.
            if let Some(replace) = self.get_replace() {

    move_delta.apply(tombstones)
    fn merge_simple_delete_1() {
                last_priority = Some(priority);
    fn compute_info(s: &String) -> Self {
    fn lines_raw_small() {

/// # Examples
        if let Some((l, offset)) = self.get_leaf() {
    /// validate their input.
        let inserts_1 = parse_subset_list("
//! conceptually represents the current text and all edit history for that
            AssertMaxUndoSoFar(0,3),
        // A with ring, hangul, regional indicator "US"
        self.pending_render
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        let region = SelRegion::caret(offset);
        for mut find in self.find.iter_mut() {
            trace.closure("something", &[], || ());
{
    } else {
                    if seg.validity == line_cache_shadow::ALL_VALID {

        }
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        }

    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    fn line_offsets() {
        AssertMaxUndoSoFar(usize, usize),
impl Serialize for DeltaElement<RopeInfo> {

        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");

//
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        } else {
    idx: usize,
    /// All the selection regions other than the one being dragged.
                let (nl, noffset) = self.next_leaf()?;
            rev_id: self.next_rev_id(),
            event_type: SampleEventType::Metadata,

    /// This function does not perform any scrolling.
                    // are empty, could send update removing the cursor.
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
                                          closure: F, payload: P)
impl From<Rope> for String {
    }
    #[bench]
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    for &b in s.as_bytes() {
    // possible to fix it so that's not necessary.
                self.drag_state = None;
            Rope::from(s1.clone()),
        deserializer.deserialize_str(CategoriesTVisitor)
            a.push('a');
}
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    rev_id_counter: u32,
        }
                    a.merge(b);
            GestureType::PointSelect => {
            pid: sys_pid::current_pid(),
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
            rendered_styles.push(1);
 //additional cursor features
                pos = leaf_offset + nl.len();
    /// Offset of the point where the drag started.
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    pub fn get_head_rev_id(&self) -> RevId {
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();

            trace: None,
    fn prev_codepoint_offset_small() {

        -#-
                let offset = self.selection[0].start;
        samples[1].pid = 2;
            let pos = bc.next::<BreaksMetric>();
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
impl<'a> Drop for SampleGuard<'a> {
            let style_id = self.get_or_def_style_id(client, styles, &style);
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            args: Some(SampleArgs {
                inserts: new_inserts,
            Cancel => self.do_cancel(text),
    // Delta that deletes the right bits from the text
        a.lines_all().collect::<Vec<_>>());
        assert_eq!(snapshot[1].name, "thread_name");
/// ```
    // How should we count "column"? Valid choices include:
        let inserts_2 = parse_subset_list("
            },
        where S: Into<StrCow>, C: Into<CategoriesT>
            rendered_styles.push(style_id as isize);


            let next_chunk = self.inner.next();
    ///
    fn edit_rev_simple() {
    /// Time complexity: technically O(n log n), but the constant factor is so
            Assert(0, "zacpb".to_owned()),
        if let Contents::Edit {priority, inserts, .. } = r.edit {
        assert_eq!(None, a.prev_grapheme_offset(0));
        // We somewhat arbitrarily choose the last region for setting the old-style
/// # Arguments
    let mut out = Vec::with_capacity(b_new.len());
        if offset == 0 {
        }
            }
                         start: usize, end: usize, sel: &[(usize, usize)],
        (self.session1, self.session2)
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
/// let c = b.slice(1, 7);
                pos = leaf_offset + nl.len();
        let thread = std::thread::current();
    fn eq_small() {
                len += 1;

    }
#[derive(PartialEq, Debug)]
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
    FlowInstant,
        assert_eq!("#---#--", &subset_str);

            Merge(0,1),
pub struct View {
    /// This method is responsible for updating the cursors, and also for
//! `Engine::merge`, which is more powerful but considerably more complex.
    }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
                    } else {
use serde::de::{Deserialize, Deserializer};
            Assert(1, "ab".to_owned()),
        client.update_view(self.view_id, &params);
    }
    #[test]
            AssertAll("ac".to_owned()),

            let matches_only = self.find_changed == FindStatusChange::Matches;
}
    /// This uniquely represents the identity of this revision and it stays
        assert_eq!(Some(3), a.next_grapheme_offset(0));
                         style_spans: &Spans<Style>) -> Vec<isize>
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        cursor.prev_grapheme()
    /// The line number is 0-based.
        let script = vec![
        d_builder.build()
            // I think it's a precondition that this will never be called
        }
            }
    fn scroll_to_cursor(&mut self, text: &Rope) {
// See the License for the specific language governing permissions and
        let mut b = String::new();

        if before {

    }
            std::thread::sleep(std::time::Duration::new(0, 1000));
    fn empty_subset_before_first_rev(&self) -> Subset {
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        let first_rev = engine.get_head_rev_id().token();
                    if retain_revs.contains(&rev.rev_id) {
    use interval::Interval;
use tabs::{ViewId, BufferId};
    #[bench]
// Additional APIs custom to strings
        for region in self.selection.regions_in_range(start_pos, pos) {
        self.deletes_from_union = new_deletes_from_union;
use std::borrow::Cow;
        where S: serde::Serializer
            'n' => SampleEventType::AsyncInstant,
            let common = find_common(a_to_merge, b_to_merge);
        let a = Rope::from("\n");
        let mut cur_len_utf8 = 0;
    } else if x < max {
}

            edit: Edit {
    // Delta that deletes the right bits from the text
}
        let is_base = base_revs.contains(&rev.rev_id);
        } else {
use delta::{Delta, DeltaElement};
/// A static string has the lowest overhead as no copies are necessary, roughly
pub fn samples_cloned_sorted() -> Vec<Sample> {
    #[test]
    where S: Into<StrCow>, C: Into<CategoriesT>
use interval::Interval;

    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
                let mut sel = Selection::new();
        ---#--
        struct CategoriesTVisitor;
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
        }
}
    }
}
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);

/// than a string that needs to be copied (or ~4.5x slower than a static string)
        self.start_drag(offset, region.start, region.end);
/// ```
                        priority, undo_group,

            GestureType::WordSelect =>
                    filename.to_str().map(|s| s.to_string())
        // original values this test was created/found with in the UI:
        assert!(r != a_rope);
    match b {
    fn utf16_code_units_metric() {
/// Transform `revs`, which doesn't include information on the actual content of the operations,
// limitations under the License.
        };
        self.prev::<BaseMetric>();
                inserts: inserted,
        b.iter(|| {
        match *self {
        count_newlines(&s[..in_base_units])
        assert_eq!(correct, res);
    /// a point that should be scrolled into view.
                        b.add_span(seg.n, 0, 0);
    /// Set the selection to a new value.
#[cfg(feature = "json_payload")]
        -##-
        let mut engine = Engine::new(Rope::from(TEST_STR));

                    let mut e = &mut self.peers[ei];
        -----#
        let contents = match rev.edit {
        let mut all_samples = self.samples.lock().unwrap();
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
    out
            Assert(1, "abefg".to_owned()),

            timestamp_us: ns_to_us(time::precise_time_ns()),
        let undone = self.undone_groups.contains(&undo_group);

use std::ops::Add;
/// How tracing should be configured.
                            (inserts.transform_shrink(&gc_dels),
}
            SampleEventType::AsyncInstant => 'n',
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
    }
}
// distributed under the License is distributed on an "AS IS" BASIS,
        let (mut l, mut offset) = self.get_leaf()?;
        // clamp to end of line
            },
/// Revision 0 is always an Undo of the empty set of groups
        cur_len_utf8
use memchr::{memrchr, memchr};
            categories: None,
///
                            (inserts.transform_shrink(&gc_dels),
    fn gc_5() {
        let a = Rope::from("a\nb\nc");
pub struct Trace {
    }
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
    /// Returns a tuple of a new `Revision` representing the edit based on the
        assert!(a.slice(0, 0) == empty);
/// overhead tracing routine available.
            duration_us: None,
        Self {
                        line_num = seg.their_line_num + seg.n;
    let mut out = Vec::with_capacity(b_new.len());
        engine.undo([1].iter().cloned().collect());
        assert_eq!(snapshot[0].name, "process_name");
                        } else {
impl NodeInfo for RopeInfo {

    #[test]
/// bytes required to represent the codepoint.
                sel
    }
    }
            self.set_selection(text, sel);

        });
}
    {
                            max_undo_so_far: rev.max_undo_so_far,
                cur_all_inserts = older_all_inserts;
    /// a point that should be scrolled into view.
                return;
    // There will probably never be a document with more than 4 billion edits
/// 1. Samples that span sections of code may be inserted on end instead of
                    .with_horiz(horiz)
        }

    }
/// # Arguments
    }
            self.pid == other.pid &&
            Assert(2, "adfc".to_owned()),
        engine.gc(&gc);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
///
        });
        let offset = self.line_col_to_offset(text, line as usize, col as usize);

// limitations under the License.
        let subset_str = format!("{:#?}", expand_by[0].1);
                c.provide_context(&pl, self.pos() - poffset);
            s = &s[splitpoint..];
        assert_eq!(trace.is_enabled(), true);
                      width_cache: &mut WidthCache, keep_selections: bool)
        }
        true
        --#--
    for rev in revs.iter().rev() {
    {
                    let (start, end) = {
///
#[cfg(test)]
        let inserts_3 = parse_subset_list("
    {
            let b = s.as_bytes()[offset];
    TRACE.closure(name, categories, closure)
        let mut pos = self.pos();
            Assert(3, "ab".to_owned()),
/// could trigger incorrect behavior if they collide, so u64 is safe.

                }
                self.add_selection_by_movement(text, Movement::Down),
        MergeTestState::new(4).run_script(&script[..]);
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
}
use movement::{Movement, region_movement, selection_movement};
            utf16_count += 1;
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        }
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
    }
        // interior of first line should be first line
    pub timestamp_us: u64,
    {
    {



    match std::env::current_exe() {
            end -= 1;
        assert_eq!(snapshot[5].name, "b");

            session: default_session(),
            self.pid == other.pid &&

        assert_eq!(snapshot[2].name, "x");
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
            GestureType::MultiWordSelect =>
        use self::ViewEvent::*;
        use self::MergeTestOp::*;
    #[test]
            self.start_drag(offset, offset, offset);
/// configured via the `dict_payload` or `json_payload` features (there is an
extern crate test;
        assert_eq!(Some(1), a.next_codepoint_offset(0));
            highlight_find: false,
    #[serde(default = "initial_revision_counter", skip_serializing)]
        where S: Into<StrCow>, C: Into<CategoriesT>
    pub metadata_name: Option<StrCow>,
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
                        undone_groups = Cow::Owned(new_undone);
                            ops.push(self.build_update_op("skip", None, n_skip));
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    // Delta that deletes the right bits from the text
    /// selection edges).
        assert!(empty == empty);
    /// the pid or the tid depends on the name of the event
impl<'a> Cursor<'a, RopeInfo> {
/// # Examples
    }
/// stored as tracing could still be enabled but set with a limit of 0.
            }
                    let (mut a, rest) = end.split_first_mut().unwrap();
        self.revs.iter().enumerate().rev()

    }
            Assert(1, "ab".to_owned()),
    /// This case is a regression test reproducing a panic I found while using the UI.
use std::borrow::Cow;
}
                let (pl, poffset) = self.prev_leaf()?;
        if self.is_enabled() {
                }
        Lines {

            Revision {
type StyleMap = RefCell<ThemeStyleMap>;

    let mut next_expand_by = Vec::with_capacity(expand_by.len());
        -> Result<CategoriesT, D::Error>
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    #[bench]
                },

fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        while offset < l.len() && !l.is_char_boundary(offset) {
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
            Assert(1, "apbj".to_owned()),
impl Config {
    }
            }
    /// This function does not perform any scrolling.
impl Engine {
        self.height = last - first;
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };

            //let prev_pos = self.cursor.pos();
                    };
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
            }
                    if invert_undos {
        engine.undo([1].iter().cloned().collect());

                });
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
/// # use xi_rope::Rope;
///
            self.tid == other.tid &&
        assert_eq!(1, expand_by.len());
        if !before {
                max_undo_so_far: i,
    // revision might hold content from an undo group that would otherwise be gc'ed),
        {
        // 1 for exe name & 1 for the thread name
            'b' => SampleEventType::AsyncStart,
        assert_eq!(0, b.line_of_offset(1));
        if self.cursor.pos() >= self.end {
    fn bench_trace_closure_payload(b: &mut Bencher) {
        }

}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            Assert(0, "abc".to_owned()),
                    s = inserts.transform_union(&s);
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
                         hls: &[(usize, usize)],
        revs.append(&mut revs_3);
                    if undone_groups.contains(undo_group) {
    }
                        };
use std::str;
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
            Assert(1, "cb".to_owned()),
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        self.first_line = first;
            replace_changed: false,
    /// Sets the selection to a new value, invalidating the line cache as needed.
        if self.replace_changed {
/// Returns the operations in `revs` that don't have their `rev_id` in


    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        // update only find highlights affected by change
    fn delta_rev_head_2() {
        let mut revs = basic_insert_ops(inserts_1, 1);
                Undo { toggled_groups, deletes_bitxor } => {
                self.do_selection_for_find(text, case_sensitive),
                None => {
            'E' => SampleEventType::DurationEnd,
        assert_eq!(trace.is_enabled(), true);
        b.iter(|| black_box(time::precise_time_ns()));
                rev_id: basic_rev(i+1),
        Self {
            // selection with interior
                        hls.push((sel_start_ix, sel_end_ix));
/// equivalent performance to a regular trace.  A string that needs to be copied
        },
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
#[derive(Serialize, Deserialize, Clone, Debug)]
            // On the next step we want things in expand_by to have op in the context
}
/// ```rust,ignore
    }
    /// Sets the selection to a new value, without invalidating.
                _ => panic!("to_base_units called with arg too large")
/// However, anything that can be converted into a Cow string can be passed as
                out.push(DeltaOp {
        }
        }
        assert_eq!(2, a.line_of_offset(4));
    FlowInstant,
use delta::{Delta, InsertDelta};
        assert!(leaf.is_char_boundary(end));
//
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
            }, to_payload("test_get_sorted_samples"));
        let rope = Rope::from("hi\ni'm\nfour\nlines");

///     something_else_expensive();
                    let e = &mut self.peers[ei];
            cursor: Cursor::new(self, start),
            lc_shadow: LineCacheShadow::default(),
// Low level functions
    /// Only number of matches changed
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            Merge(1,0), Merge(2,0),
            panic!("line number {} beyond last line {}", line, max_line);
            // if using breaks update cursor
    /// Constructs an instantaneous sample.
        let revs = basic_insert_ops(inserts, 1);
                        }
    /// The selection state for this view. Invariant: non-empty.
        let plan = RenderPlan::create(height, self.first_line, self.height);
        --#-
}
        self.size = size;
            None => text.line_of_offset(offset)
        ");
        Engine {
        if let Some(breaks) = self.breaks.as_mut() {
impl SampleEventType {
        } else if line == max_line {
use selection::{Affinity, Selection, SelRegion};
            ),
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
                        let start_line = seg.our_line_num;
/// an argument.
            self.set_selection(text, sel);
pub struct LinesMetric(usize);  // number of lines
            // about what wrapped.
        match rev.edit {
        engine.undo([2].iter().cloned().collect());
        let (leaf, offset) = match self.get_leaf() {
        let mut engine = Engine::empty();
        }
        a.push('\n');
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        }
mod fixed_lifo_deque;
            {
            a.push('a');
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    current: Option<&'a str>,
            trace.closure_payload("y", &["test"], || {

        result
            }
/// # Examples
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        b.push_str(new);
categories_from_constant_array!(3);
            GestureType::PointSelect => {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
#[inline]

        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
use rope::{Rope, RopeInfo};
///
}

    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
    #[test]
    /// Tracks whether there has been changes in find results or find parameters.
    /// Replacement string.
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    (out, text, tombstones, deletes_from_union)
        }
        // interior of first line should be first line
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were

            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    /// Exposed for unit tests.
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {

    ObjectSnapshot,
                if (flags & FLAG_SELECT) != 0 {
/// equivalent performance to a regular trace.  A string that needs to be copied
            duration_us: None,
        }
    session: SessionId,
            base_len: usize
                                         self, text, modify);
            end -= 1;
                }
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        if let Some(sel) = new_sel {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
            ),
        d_builder.delete(Interval::new_closed_open(58, 61));
    }
        let a = Rope::from("a\nb\n");
                text.offset_of_line(line)

        #[serde(rename_all = "snake_case")]
    }
        #------
    }

    #[test]
            // with offset == s.len(), but be defensive.
    }
    /// Get previous codepoint before cursor position, and advance cursor backwards.
                            rendered_lines.push(line);
        self.revs.push(new_rev);
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        ).min_by_key(|x| {
                (!region.is_upstream() && c == start_pos) ||
    }
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
            MetadataType::ProcessName {name} => (Some(name), None),
    fn goto_line(&mut self, text: &Rope, line: u64) {
        self.set_selection_for_edit(text, new_sel);
        assert_eq!(snapshot[6].name, "z");
                priority: new_priority,
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    fn gc_6() {

        a.lines_all().collect::<Vec<_>>());

                    match full_path_str {
                client.replace_status(self.view_id, &json!(replace))
                              duration_ns: u64) -> Self
    assert!(a[0].rev_id == b[0].rev_id);
    #[bench]
            event_type: event_type,
        // 1 MB
    #[test]
                break;
            }

    Metadata
    pub fn get_head(&self) -> &Rope {
/// # Examples
        // send updated replace status if changed
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
                    if sel_end_ix > sel_start_ix {
        }
}
        text = new_text;
            // with offset == s.len(), but be defensive.

/// Create a `Rope` from a `String`:
                return;

    #[test]

        match *self {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
/// A static string has the lowest overhead as no copies are necessary, roughly
    fn consume(self) -> (Option<String>, Option<i32>) {
        ]);
    fn eq(&self, other: &CategoriesT) -> bool {
    priority: usize,
        self.enabled.store(false, AtomicOrdering::Relaxed);
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
            self.lc_shadow.edit(start, end, new_end - start);
        // ensure that when the samples are sorted by time they come out in a
        where S: Serializer
    AsyncStart,
    }
        /// along with the newline that triggered it.
    // partly because the reachability calculation would become more complicated (a
                Undo { toggled_groups, deletes_bitxor } => {
    }
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        // shouldn't do anything since it was double-deleted and one was GC'd
    pub fn instant<S, C>(&self, name: S, categories: C)
        let revs = basic_insert_ops(inserts, 1);
    {
// See the License for the specific language governing permissions and
    #[should_panic]
    #[bench]
            s.as_bytes()[offset - 1] == b'\n'
    ///
categories_from_constant_array!(7);

            };
    }
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
trait StringArrayEq<Rhs: ?Sized = Self> {
        self.height = last - first;
            event_type: SampleEventType::Instant,
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        let script = vec![
            categories: Some(categories.into()),
        let b = a.slice(1, 10);
                                                                0, "copy", 2)?;
        let d = RopeDelta_::deserialize(deserializer)?;

    }
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
                    self.fragment = "";
            None => {
impl fmt::Debug for Rope {
        self.set_selection_raw(text, sel.into());
/// {
    #[test]
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
}
        let style = style_map.merge_with_default(style);
    }
    pub fn iter_chunks_all(&self) -> ChunkIter {
pub fn is_enabled() -> bool {
        if offset >= text.len() {
        selection.add_region(region);


            CategoriesT::StaticArray(ref self_arr) => {
    min: usize,
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        });
        let trace = Trace::enabled(Config::with_limit_count(10));

            "styles": styles,
        let style = style_map.merge_with_default(style);
                self.run_op(op);
    fn offset_of_line_small() {

                });
                (drag_state.max, min(offset, drag_state.min))

        hasher.finish()
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        let initial_rev = engine.get_head_rev_id().token();
            panic!("line number {} beyond last line {}", line, max_line);
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// Transform `revs`, which doesn't include information on the actual content of the operations,
            let mut word_cursor = WordCursor::new(text, offset);
    ///

            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        }
// See the License for the specific language governing permissions and
categories_from_constant_array!(4);

    /// You could construct the "union string" from `text`, `tombstones` and
    pub fn lines_all(&self) -> Lines {
        let mut samples = vec![
                        Ok(s) => Some(s),
    }

        // since one of the two deletes was gc'd this should re-do the one that wasn't
        false
    fn prev_codepoint_offset_small() {
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        }
                self.do_find(text, chars, case_sensitive, regex, whole_words),
///     something_else_expensive(result);
/// fn something_else_expensive(value: u32) {
    }
//
                    }
                   style_spans: &Spans<Style>, line_num: usize) -> Value
            } else {
            FindNext { wrap_around, allow_same, modify_selection } =>
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
            "pristine": pristine,
        // send updated find status only if there have been changes
            'i' => SampleEventType::Instant,
            }, to_payload("test_get_sorted_samples"));
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
            sel

    #[test]
        self.deletes_from_union = deletes_from_union;
        }
                if groups.contains(undo_group) {
    }

        self.deletes_from_union = new_deletes_from_union;
                RenderTactic::Discard => {
impl Serialize for Delta<RopeInfo> {
    }
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
            }),
        match rev.edit {
    #[test]
            as_vec.push(Sample::new_metadata(

    }
        assert_eq!(2, b.offset_of_line(1));


                false => x.start
                    }
        assert_eq!(2, a.offset_of_line(1));
        b.iter(|| {
        } else {
        let revs = basic_insert_ops(inserts, 1);
    #[inline]
    ///
        json!({"test": value})
                        gc_dels = gc_dels.transform_expand(inserts);
        Some(&leaf[start_pos .. end])
            Copy(usize, usize),
        let mut engine = Engine::new(Rope::from(TEST_STR));
        struct RopeDelta_ {
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,

        for i in 0..self.len() {
        // since character was inserted after gc, editor gcs all undone things
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
    pub fn prev_grapheme(&mut self) -> Option<usize> {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
            if region.is_caret() {
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
    // * Actual measurement in text layout
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }

    /// Toggles a caret at the given offset.
/// See `trace_payload` for a more complete discussion.
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        }

        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        // same span exists in both sets (as when there is an active selection)
/// monotonically increasing single global integer (when tracing) per creation
enum FindStatusChange {

    }
            Insert(String),
                            plan: &RenderPlan, pristine: bool)
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    /// Starts a drag operation.
        let (start, end) = iv.start_end();
extern crate log;

    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
                } else {
        -##-
        // set last selection or word under current cursor as replacement string
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    /// Note: unlike movement based selection, this does not scroll.
    /// assumed to be forward).
            Assert(1, "ab".to_owned()),
            match self.wrap_col {
        }
        let mut retain_revs = BTreeSet::new();

        false

        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Some(offset + len_utf8_from_first_byte(b))
        ];
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
use client::Client;
            to_payload("some description of the trace"))));
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
    #[cfg(feature = "benchmarks")]
    /// Return the offset of the codepoint after `offset`.
        let mut cursor = Cursor::new(self, offset);
    #[serde(default = "default_session", skip_serializing)]
    }

        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
                        if n_skip > 0 {
                if s.ends_with('\n') {
    All,
                leaf_offset = self.pos() - poffset;
/// # Arguments
    }
        let mut cursor = Cursor::new(self, offset);
            } else {
            sel
        }
        let subset_str = format!("{:#?}", expand_by[0].1);
        let s = String::deserialize(deserializer)?;

    #[cfg(feature = "benchmarks")]
    /// If `modify` is `true`, the selections are modified, otherwise the results
    }
}
fn find_leaf_split_for_merge(s: &str) -> usize {
                        line_num = seg.their_line_num + seg.n;
    }
        d_builder.delete(Interval::new_closed_open(10, 36));
/// creation.  Roughly corresponds to start_ns but instead there's a
        Subset::new(len)
    #[cfg(feature = "dict_payload")]
            let inserted = inserts.inserted_subset();

        impl<'de> Visitor<'de> for CategoriesTVisitor {
        if initial_contents.len() > 0 {
        ];
        if self.idx <= self.current.unwrap().len() {
        count_newlines(&s[..in_base_units])
        assert!(a != b);
            inner: self.lines_raw(start, end)
        assert_eq!(output, String::from(engine.get_head()));
        /// together. For example, an auto-indent insertion would be un-done
        // set last selection or word under current cursor as replacement string
        let max_line = self.measure::<LinesMetric>() + 1;
        ];


                    } else {
            self.current = None;
            DeltaElement::Insert(ref node) =>
        assert_eq!(utf16_units, 17);
        }

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                        let mut word_cursor = WordCursor::new(text, region.max());
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)

/// # use xi_rope::Rope;
#[derive(Clone, Debug, PartialEq, Eq)]
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        /// The set of groups toggled between undone and done.
            if region.is_caret() {
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    session: SessionId,
    }
    }
/// revisions not shared by both sides.
        // This might be an over-specified test as it will
        let first_rev = engine.get_head_rev_id().token();
                while cursor.pos() < region.max() {
    #[test]
        peers: Vec<Engine>,
            // trans-expand other by expanded so they have the same context
use client::Client;
    ///
        let mut b = line_cache_shadow::Builder::new();
        }
    use super::*;

        }
    /// they would be if they hadn't been deleted.
        let a = Rope::from("\n");
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        // current recording mechanism should see:
        fn new(count: usize) -> MergeTestState {
            self.set_selection(text, sel);
        result

        self.deletes_from_union = new_deletes_from_union;
use std::str::FromStr;
                            rev_id: rev.rev_id,
/// implementation as efficient as a mutable version.

    fn gc() {
    /// The process the sample was captured in.
        let inserted = inserts.inserted_subset();
pub struct Config {
        }

            GestureType::MultiWordSelect =>
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        }
/// }
    }
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
        match *self {
    out
    pub fn merge(&mut self, other: &Engine) {
        selection.add_region(region);
        a.lines_all().collect::<Vec<_>>());
    fn eq(&self, other: &Sample) -> bool {
    {
            for i in 0..count {
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    }
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        b.iter(|| {
        let subset_str = format!("{:#?}", expand_by[1].1);
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));

            }),
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
                    let new_gc_dels = if inserts.is_empty() {
        let new_sel = selection_movement(movement, &self.selection,
                    b.add_span(seg.n, 0, 0);
                priority: new_priority,
    /// Sets the selection to a new value, invalidating the line cache as needed.

        where S: Into<StrCow>, C: Into<CategoriesT>
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
    // since undo and gc replay history with transforms, we need an empty set
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    fn is_boundary(s: &String, offset: usize) -> bool {
                    els: delta.els.drain(..)
        });

            let mut sample = self.sample.take().unwrap();
/// # Arguments
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));

                if is_base {
                serializer.serialize_newtype_variant("DeltaElement", 1,
            thread_name: Sample::thread_name(),
impl TreeBuilder<RopeInfo> {
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        } else { // no toggled groups, return past end
}
use std::collections::BTreeSet;


            "op": op,

                    .with_affinity(affinity)
            }
    }
// should make this generic, but most leaf types aren't going to be sliceable
        let new_head = engine.get_head_rev_id().token();
        b.iter(|| black_box(trace.instant_payload(
        assert_eq!(1, a.line_of_offset(2));
/// # Examples
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
                }


        }
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
use xi_rope::interval::Interval;
            return self.len();
    priority: usize,
        } else if self.first_line + self.height <= line {
    #[test]
        for i in 0..5_000 {
        let delta = Delta::synthesize(&self.tombstones,
        self.timestamp_us.cmp(&other.timestamp_us)
            self.set_selection(text, sel);

    // TODO: maybe refactor this API to take a toggle set
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        guard
        
                    linewrap::rewrap_width(breaks, text, width_cache,
                std::thread::sleep(std::time::Duration::new(0, 1000));
        for i in 0..self.len() {
    pub fn collapse_selections(&mut self, text: &Rope) {
/// The result of the closure.
        -----#
    }
            SelectionIntoLines => self.do_split_selection_into_lines(text),
                                             &text, false);
                            }
    ///
}
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
            }
            Cancel => self.do_cancel(text),
// Unless required by applicable law or agreed to in writing, software
        }
        /// Groups related edits together so that they are undone and re-done
    }
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    #[test]
        MergeTestState::new(3).run_script(&script[..]);
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
/// an argument.
        }
    #[cfg(feature = "benchmarks")]
            inserts = inserts.transform_expand(trans_inserts, after);
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                        Some(gc_dels.transform_shrink(&inserts))
}
}
        } else {


            sel.add_region(

    }
                if s.ends_with('\n') {
    fn lines_med() {
                    els: delta.els.drain(..)
        // x, a, y, b, z, c
    #[test]
            while !s.is_char_boundary(offset - len) {

        #------
            trace.instant("test_samples_pulse", &["test"]);
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        }).collect();
        let mut engine = Engine::new(Rope::from(TEST_STR));
            'X' => SampleEventType::CompleteDuration,
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        delta.end()
                metadata_sort_index: None,

                    }
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
        if f.alternate() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        }
        while offset < l.len() && !l.is_char_boundary(offset) {

        // probably change as the recording internals change.
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
        ");
                Contents::Undo { .. } => panic!(),
    /// method to be fast even when the selection is large.

            let b = s.as_bytes()[offset];
/// Find an index before which everything is the same
            duration_us: None,
                   style_spans: &Spans<Style>, line_num: usize) -> Value

        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
///

//! conceptually represents the current text and all edit history for that
    for r in revs {
        assert_eq!(utf8_offset, 9);
}
        value
            }
            GotoLine { line } => self.goto_line(text, line),
///
    pub(crate) fn unset_find(&mut self) {
            Assert(0, "acbd".to_owned()),
                metadata_sort_index: sort_index,
        assert_eq!(soln, String::from(engine.get_head()));
    }
            first_line: 0,
    fn build_delta_1() -> Delta<RopeInfo> {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
    #[serde(default = "default_session", skip_serializing)]
    }
            }
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        trace.closure_payload("x", &["test"], || {
    }
            trace: Some(&trace),
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            };
            SampleEventType::DurationBegin => 'B',
            self.name == other.name &&
                        .map(DeltaElement::from).collect(),

        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
            args: Some(SampleArgs {
    }
            for (i,rev) in self.revs.iter().enumerate().rev() {
// limitations under the License.
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
            Assert(1, "zpbj".to_owned()),
            Merge(0,2), Merge(1, 2),
        }

    first_line: usize,

// you may not use this file except in compliance with the License.
            }
            Rope::concat(
    #[test]
    }
impl CategoriesT {
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
        assert_eq!(snapshot[0].name, "process_name");
            client.scroll_to(self.view_id, line, col);
                    b.add_span(seg.n, 0, 0);
}
            // with offset == 0, but be defensive.
    }
            let b = s.as_bytes()[offset];
        }
        });
        assert_eq!(utf16_units, 17);
            timestamp_us: ns_to_us(start_ns),
    ///
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    #[test]

        // We somewhat arbitrarily choose the last region for setting the old-style
        assert_eq!(trace.get_samples_limit(), 0);
///
            }
    /// The maximum number of entries the tracing data should allow.  Total
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
            self.args == other.args
        self.height
                payload: payload,
            None
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                engine.gc(&to_gc)
        AssertAll(String),

                        let mut word_cursor = WordCursor::new(text, region.max());
    }
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
                        } else {
            write!(f, "Rope({:?})", String::from(self))
                    if seg.validity == line_cache_shadow::ALL_VALID {
        engine.undo([2].iter().cloned().collect());
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
/// supported as an optimization when only one reference exists, making the
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    #[inline]
                        self.revs.push(Revision {
                // Deprecated (kept for client compatibility):
        }
        out.push(Revision {
            Merge(0,1),
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
        }
/// Measured unit is newline amount.
        }
/// fn something_expensive() {
        // of the delta so we can set the cursor before or after the edit, as needed.

        let d = engine.delta_rev_head(first_rev);
        }
    #[serde(skip_serializing_if = "Option::is_none")]
                    if !inserts.is_empty() {
    pub(crate) fn unset_find(&mut self) {
            Assert(2, "ab".to_owned()),
        // Note: for committing plugin edits, we probably want to know the priority
    #[serde(rename = "ph")]
        //for next line
                    ops.push(self.build_update_op("invalidate", None, seg.n));
    ///
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();

///
    }
    fn delta_rev_head() {
    /// is optional.
        let utf8_offset = 19;
            }
    }
                }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        assert_eq!(2, r.line_of_offset(r.len()));
use std::fmt;
                    }
}
        Some(pos) => minsplit + pos,
/// some way.

    }
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
//! It enables support for full asynchronous and even peer-to-peer editing.
        let snapshot = trace.samples_cloned_unsorted();
            SampleEventType::FlowEnd => 'f',
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
                        DeltaElement::Insert(Rope::from(s)),
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
            if cur_len_utf16 >= in_measured_units {
    /// Generally racy since the underlying storage might be mutated in a separate thread.
/// let a = Rope::from("hello world");

                Contents::Undo { .. } => panic!(),
        expand_by = next_expand_by;
        }
            let mut sel = drag_state.base_sel.clone();
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
        engine.undo([].iter().cloned().collect());
                    };
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    #[allow(dead_code)]
        memrchr(b'\n', &s.as_bytes()[..offset])
    TRACE.is_enabled()
            trace.record(sample);
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
        assert_eq!(Some(1), a.prev_codepoint_offset(3));


}
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            match modify_selection {

        self.height = last - first;
    /// Time complexity: O(log n)

    #[test]

            ModifySelection(movement) => self.do_move(text, movement, true),

        let end = time::precise_time_ns();
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
            Assert(0, "cbd".to_owned()),
}
    fn delta_rev_head_3() {
            engine.undo(undos);
        self.drag_state = Some(DragState { base_sel, offset, min, max });
                            (inserts.transform_shrink(&gc_dels),



            word_cursor.select_word()
        ---#--
        assert!(r != a_rope);
        }

                        if n_skip > 0 {

                }
            Assert(0, "acrbd".to_owned()),
        };
///
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    #[test]
                name, categories, payload, SampleEventType::DurationBegin)),
            't' => SampleEventType::FlowInstant,
    ///
        // ensure that when the samples are sorted by time they come out in a
    /// What kind of sample this is.
categories_from_constant_array!(5);
        self.lc_shadow = b.build();
        if self.scroll_to.is_none() && wrap {
/// some way.
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {


        }
/// Tracing is disabled initially on program launch.
        where S: Into<StrCow>, C: Into<CategoriesT>
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
            self.set_selection(text, sel);
        use self::MergeTestOp::*;
    /// want to set the process name (if provided then sets the thread name).
            Some(b)

        where S: Serializer
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            Assert(1, "apbj".to_owned()),
    /// Get previous codepoint before cursor position, and advance cursor backwards.
//
///
        // insert `edits` letter "b"s in separate undo groups
        }
                if !region.is_caret() {
            for &occurrence in find.occurrences().iter() {
                } else {
                Undo { toggled_groups, deletes_bitxor } => {

        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
        assert_eq!(2, expand_by.len());
        if let Some(occ) = closest_occurrence {
        assert!(a == a2);

        let b_revs = basic_insert_ops(inserts, 2);
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
    #[serde(rename = "sort_index")]
        let start = self.line_col_to_offset(text, line, 0);
    /// The state for finding text for this view.
        assert!(a.slice(0, 0) == empty);
        } else {
            let c = region.end;
    fn merge_simple_delete_1() {
            let deletes = Subset::new(inserts.len());
            self.record(Sample::new_duration(
            sample: None,
                self.set_selection_raw(text, selection);
    fn render_line(&self, client: &Client, styles: &StyleMap,
                           pristine: bool)
                max_undo_so_far: i+1,
        }
                    text.slice_to_string(region.min(), region.max())
    rev_id: RevId,
            sel.add_region(region);
            find.find_status(matches_only)
            Merge(1,0),
                },
        assert_eq!(0, b.line_of_offset(1));
                // TODO: small nit, merged region should be backward if end < start.
        }
        (self.session1, self.session2)
                self.do_selection_for_find(text, case_sensitive),
    /// Offset of the point where the drag started.

                serializer.serialize_newtype_variant("DeltaElement", 1,
    fn undo_3() {
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        assert_eq!(snapshot[8].name, "x");
    #[cfg(feature = "benchmarks")]
    for r in revs {
                peer.set_session_id(((i*1000) as u64, 0));
    1
    /// the other doesn't make it re-appear.
        let (new_text, new_tombstones) =


        #---
        impl<'de> Visitor<'de> for CategoriesTVisitor {
    #[serde(rename = "ph")]

lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    }

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        (self.pid, self.timestamp_us).hash(state);
    // TODO: maybe refactor this API to take a toggle set

            let not_in_tombstones = self.deletes_from_union.complement();

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },


                edit: contents.clone()
        enum RopeDeltaElement_ {


        } else {
}


}
impl RevId {
    /// All the selection regions other than the one being dragged.

        assert_eq!(rope.line_of_offset(1), 0);
//! this central engine. It provides the ability to apply edits that depend on

impl Leaf for String {
        }
            undo_group: 0,
        }
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
        // rather than emitting an explicit start/stop to reduce the size of
    #[test]
                                inserts,
pub struct View {
        Self {
/// A rope data structure.
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
    }
    /// The state for replacing matches for this view.
    }
        if self.is_enabled() {
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
    type Item = &'a str;
    fn edit_rev_simple() {
        where D: Deserializer<'de>,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    {
        let rearranged = rearrange(&revs, &base, 7);
        }
    #[serde(skip_serializing)]
        }
}
            //self.cursor.set(self.end);
                self.do_drag(text, line, column, Affinity::default()),
        }
categories_from_constant_array!(10);
                let (last, rest) = self.sel_regions().split_last().unwrap();

/// monotonically increasing single global integer (when tracing) per creation
    /// The line number is 0-based, thus this is equivalent to the count of newlines
                (drag_state.min, max(offset, drag_state.max))

        for rev in &self.revs[rev_index + 1..] {
    fn next(&mut self) -> Option<Cow<'a, str>> {
            Merge(1,0),
    #[test]
        let guard = Self {
/// implementation as efficient as a mutable version.
    }
            engine.edit_rev(0, 0, first_rev, delta);
    let mut utf16_count = 0;
        b if b < 0x80 => 1,
// Unless required by applicable law or agreed to in writing, software
        });
    }
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        assert_eq!(None, a.next_grapheme_offset(17));
            fragment: ""


        let all_caret = self.selection.iter().all(|region| region.is_caret());
    /// Get text of a given revision, if it can be found.
    }
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        }
impl MetadataType {

extern crate libc;
    }

                    priority, undo_group,
        let all_caret = self.selection.iter().all(|region| region.is_caret());
#[inline]
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        for region in self.selection.iter() {

/// ```
        -> R
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
categories_from_constant_array!(5);
#[cfg(test)]


    }
macro_rules! categories_from_constant_array {
/// equivalent performance to a regular trace.  A string that needs to be copied
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        /// Used to store a reversible difference between the old
                    if retain_revs.contains(&rev.rev_id) {
                //self.end - prev_pos
            }
                            rev_id: rev.rev_id,
    ObjectSnapshot,

    /// The selection state for this view. Invariant: non-empty.
    }
        let mut rendered_styles = Vec::new();
            Assert(1, "ab".to_owned()),
        let first_line = self.line_of_offset(text, start);
            SampleGuard::new_disabled()
        result
            // with offset == s.len(), but be defensive.
    }
                                                        style_spans, line_num);
            Some(offset - len)
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
    #[inline]
                c.provide_context(&pl, self.pos() - poffset);
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
/// # Arguments
    }


            engine.undo(to_undo.clone());
        }
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    // encourage callers to use Cursor instead?
        assert_eq!(snapshot[4].name, "y");
    }



    pub fn empty() -> Engine {
        self.selection = sel;
/// }
        let script = vec![

        ----#
    #[serde(serialize_with = "serialize_event_type")]
            'e' => SampleEventType::AsyncEnd,
            Assert(1, "apb".to_owned()),
        assert_eq!(snapshot[1].name, "thread_name");
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            selection.delete_range(offset, offset, true);
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
    fn bench_trace_block(b: &mut Bencher) {

        result
}
        }, to_payload("test_get_samples_nested_trace"));

            None => None
    /// indicates a search for the next occurrence past the end of the file.
/// returned value is dropped.  `trace_closure` may be prettier to read.
                self.set(pos);
        assert_eq!(1, res);
              F: FnOnce() -> R
        assert_eq!("#-####-", &subset_str);
        text = new_text;
{
///

    }
}

    }

                self.push_leaf(s.to_owned());
    }

        }
    fn undo_2() {
    #[bench]
/// let mut a = Rope::from("hello world");
            Rope::concat(
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
 //additional cursor features
            offset,
        if !gc_dels.is_empty() {


/// discussion on payload.
    }
        where S: Into<StrCow>, C: Into<CategoriesT>

    }
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,

impl Trace {
/// However, anything that can be converted into a Cow string can be passed as
                return None;

        let mut d_builder = Builder::new(TEST_STR.len());
}
        let (new_text, new_tombstones) =
        }
    #[test]
            trace.closure("something", &[], || ());
        let last = max(last, 0) as usize;
/// A static string has the lowest overhead as no copies are necessary, roughly

fn default_session() -> (u64,u32) {
    out.as_mut_slice().reverse();
    {
    pub fn get_head_rev_id(&self) -> RevId {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            view_id: view_id,

                        DeltaElement::Copy(start, end),
        let (metadata_name, sort_index) = meta.consume();
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
impl Add<Rope> for Rope {

use std::hash::{Hash, Hasher};
        deletes_from_union
/// * `categories` - A static array of static strings that tags the samples in
pub struct ChunkIter<'a> {
    /// This uniquely represents the identity of this revision and it stays
                    .with_affinity(affinity)
            let mut len = 1;
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
        engine.edit_rev(1, edits+1, head, d1);
    /// This function will panic if `offset > self.len()`. Callers are expected to
    /// The line ending is stripped from the resulting string. The final line ending
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
/// # Examples
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
            Assert(1, "arpb".to_owned()),

// You may obtain a copy of the License at
                Delta {

    // * Actual measurement in text layout
        }
                            if !inserts.is_empty() {
                                             &text, false);
}
            AssertMaxUndoSoFar(1,3),

    fn from(s: T) -> Rope {
        let cur_deletes_from_union = &self.deletes_from_union;
            // with offset == s.len(), but be defensive.
        cursor.is_boundary::<BaseMetric>()
        let first_rev = engine.get_head_rev_id().token();
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        // since one of the two deletes was gc'd this should undo the one that wasn't
    }
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        // Rust is unlikely to break the property that this hash is strongly collision-resistant

    fn is_ok_child(&self) -> bool {
                        b.add_span(seg.n, 0, 0);

    }
        ");
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
use unicode_segmentation::GraphemeCursor;
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
                _ => panic!("to_base_units called with arg too large")


    }
        };
        assert_eq!(trace.get_samples_count(), 5);
        engine.edit_rev(1, 2, initial_rev, d1.clone());
    }
    #[test]
    /// Find parameters and number of matches changed.
                } else if click_count == Some(3) {
        engine.edit_rev(1, 1, first_rev, d1.clone());
                    }
                    if !inserts.is_empty() {
///

    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        } else {
        self.deletes_from_union_before_index(rev_index + 1, true)

        let deletes_from_union = parse_subset("-#----#");
    fn into_chrome_id(&self) -> char {
        for _i in 0..50 {
        let first_rev = engine.get_head_rev_id().token();
            Assert(1, "ab".to_owned()),
        if let Some((l, offset)) = self.get_leaf() {
    }
                MergeTestOp::AssertAll(ref correct) => {
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
/// ```
        if self.find.is_empty() {
impl<'a> Iterator for LinesRaw<'a> {
    use std::collections::BTreeSet;
        let first_rev = engine.get_head_rev_id().token();
            SelectionForFind { case_sensitive } =>
/// }
    out.as_mut_slice().reverse();
            'e' => SampleEventType::AsyncEnd,

                                deletes_bitxor: new_deletes_bitxor,
            Assert(1, "acpbdj".to_owned()),
))]
pub fn count_newlines(s: &str) -> usize {
        self.send_update_for_plan(text, client, styles,
            for rev in &self.revs {

    DurationBegin,
                        let (inserts, deletes) = if gc_dels.is_empty() {
                                             &text, false);
    }
        let b = Rope::from("b");
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
            // selection with interior

        let mut cursor = Cursor::new(self, offset);

//! pending edit in flight each.
        let first_rev = engine.get_head_rev_id().token();
        all_samples.reset_limit(config.max_samples());
        -##-
/// See `trace_payload` for a more complete discussion.
extern crate serde;
        engine.undo([].iter().cloned().collect());
    #[serde(skip_serializing_if = "Option::is_none")]
    }
            Some(b)
            self.collapse_selections(text);
/// Enable tracing with the default configuration.  See Config::default.
    lines: usize,
        assert!(end <= leaf.len());
        }
            CategoriesT::DynamicArray(ref self_arr) => {
        for _i in 0..50 {
    #[test]
    pub fn set_dirty(&mut self, text: &Rope) {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
}


        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
                continue;
            trace.instant("something", &[]);
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.

    }
}
                            (inserts, deletes)
            // I think it's a precondition that this will never be called
            return false;
                l = nl;
                println!("running {:?} at index {}", op, i);
    pub fn new_duration_marker<S, C>(name: S,
                        let n_skip = seg.their_line_num - line_num;
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    fn build_delta_1() -> Delta<RopeInfo> {
            }
}
//! pending edit in flight each.
        self.samples.lock().unwrap().len()
                    let (mut a, rest) = end.split_first_mut().unwrap();
        engine.edit_rev(1, 2, first_rev, d1.clone());
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
            Assert(3, "ab".to_owned()),
        assert_eq!(None, a.prev_grapheme_offset(0));
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
// Copyright 2016 The xi-editor Authors.
/// than a string that needs to be copied (or ~4.5x slower than a static string)
    {
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
            cur_len_utf16 += u.len_utf16();
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    // revision might hold content from an undo group that would otherwise be gc'ed),
            rev_id, max_undo_so_far,
                        priority, undo_group,
        let mut update = json!({
            "pristine": pristine,
            Rope::concat(
            match c.edit {
        } else {
        } else {
            result["cursor"] = json!(cursors);
    }
    fn bench_two_timestamps(b: &mut Bencher) {
                    }
        let a = Rope::from("a\nb\n");
        ");
        }
            //leaf.len() - start_pos
                None => {
#[inline]
        undo_group: usize,
    }
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        ");
        assert_eq!(snapshot[0].name, "process_name");
        self.revs.reverse();
        if b >= 0xf0 {
    #[cfg(feature = "benchmarks")]
    /// Move the selection by the given movement. Return value is the offset of
        --#-
                Contents::Edit {inserts, ..} => inserts,
        assert_eq!(rope.offset_of_line(4), rope.len());
    }

        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
                self.select_word(text, offset, false),
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
    fn thread_name() -> Option<StrCow> {
        assert_eq!(snapshot[5].name, "b");
            retain_revs.insert(last.rev_id);
                    self.do_gesture(text, line, column, GestureType::WordSelect)
                }
    pub fn disabled() -> Self {
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
                payload: payload,
    }
    #[test]

        assert_eq!(trace.get_samples_count(), 5);
        self.set(new_pos);
    TRACE.enable();
    num: u32,
    pub fn byte_at(&self, offset: usize) -> u8 {
                    match full_path_str {
    use multiset::Subset;
        if (b as i8) >= -0x40 {

                                undo_group,
            if cur_len_utf16 >= in_measured_units {
            Assert(0, "ab".to_owned()),
fn shuffle(text: &Rope, tombstones: &Rope,
    }
                    let full_path_str = full_path.into_string();

                        Ok(s) => Some(s),

                        first_sample_timestamp,
type StyleMap = RefCell<ThemeStyleMap>;
                std::thread::sleep(std::time::Duration::new(0, 1000));
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
                out.push(DeltaOp {
    /// should be as unlikely to collide as two random u64s.

        }
        d.insert(StrCow::from("test"), StrCow::from(value));
// ======== Generic helpers
                        Ok(s) => Some(s),
            deletes: Subset::new(0),
impl<'a> Iterator for LinesRaw<'a> {
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    enum MergeTestOp {
        self.send_update_for_plan(text, client, styles,
        if offset == 0 {

        self.set_selection_raw(text, selection);

    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        String::from(&r)
        #[serde(rename_all = "snake_case")]
            }
                    None => return if result.is_empty() { None } else { Some(result) }
        assert_eq!("1234567", String::from(r));
        engine.edit_rev(1, 1, initial_rev, d1.clone());
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        self.len()
        let (new_text, new_tombstones) =
                                             &text, false);
            Some(region) => {
/// Usage of static strings is encouraged for best performance to avoid copies.
        assert_eq!(snapshot.len(), 9);

    /// The selection state for this view. Invariant: non-empty.
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
impl PartialEq for CategoriesT {
        let iv = Interval::new_closed_open(start, end);

        for _ in 0..line_len {
                    None => return if result.is_empty() { None } else { Some(result) }
    fn line_of_offset_panic() {
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    #[serde(rename = "cat")]
        let mut delta = serializer.serialize_struct("Delta", 2)?;
/// samples are ordered chronologically for several reasons:
        self.rev_id_counter += 1;
            event_type: SampleEventType::Instant,
/// record it.
    fn from(s: T) -> Rope {
    where D: serde::Deserializer<'de> {
    /// The state for finding text for this view.
                let (pl, poffset) = self.prev_leaf()?;
        // interior of first line should be first line
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        let contents = Contents::Edit {

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);

        inserts: Subset,

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    }
}
/// an argument.
    AsyncInstant,


    // allowing us to use the same method to insert the text into the tombstones.
        let (leaf, offset) = match self.get_leaf() {

    /// If the cursor is at the end of the rope, returns the empty string.
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)

                     modify_selection: &SelectionModifier) {
        self.tombstones = tombstones;
    type Err = ParseError;
            Merge(4,3),
        self.set_selection_raw(text, sel.into());

    /// Returns a tuple of a new `Revision` representing the edit based on the
        &leaf[offset..end]
            }
        if self.scroll_to.is_none() && wrap {
        });
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        });
    // maybe explore grabbing leaf? would require api in tree
impl<'a> From<&'a Rope> for String {
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    }
    }
    }

        // We could probably reduce the cloning of selections by being clever.
            name: name.into(),
    1
    }
        if offset == s.len() {
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
use memchr::{memrchr, memchr};
            Assert(1, "arpb".to_owned()),
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
            trace.closure("test_samples_closure", &["test"], || {});
        gc_scenario(4,3);
                    };

    }
}
    /// that are currently deleted, and thus in `tombstones` rather than
            }),
/// }
}
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
            &self.deletes_from_union, &old_deletes_from_union);
    }
                           pristine: bool)
    fn scroll_to_cursor(&mut self, text: &Rope) {
struct DragState {
                            max_undo_so_far: rev.max_undo_so_far,
        let mut all_samples = self.samples.lock().unwrap();
    pub fn empty() -> Engine {
    {
                if s.ends_with('\n') {
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
            AssertMaxUndoSoFar(1,3),
        RopeInfo {
        assert_eq!(snapshot[3].name, "b");
        let utf8_offset = 13;
            SampleGuard::new_disabled()
        let expand_by = compute_transforms(revs);
///
use std::borrow::Cow;
    }
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        assert_eq!(snapshot[4].name, "y");

                            ops.push(self.build_update_op("skip", None, n_skip));
        update
    }
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());

                              categories: C,
    {

    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        engine.edit_rev(1, edits+1, head, d1);
        let (iv, new_len) = delta.summary();
// Copyright 2016 The xi-editor Authors.
        let a = Rope::from("");
    // possible to fix it so that's not necessary.
        engine.gc(&gc);
        assert_eq!(rope.offset_of_line(4), rope.len());
                engine.gc(&to_gc)
extern crate log;
        self.height
    find_leaf_split(s, MIN_LEAF)
    /// Get the line range of a selected region.
#[derive(Clone, Debug)]
        // A with ring, hangul, regional indicator "US"
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
/// Revision 0 is always an Undo of the empty set of groups
        }
    }

    // Send the requested lines even if they're outside the current scroll region.
///
                    let (start, end) = {
    /// the heap, counters, etc); just the data itself.
    ///
/// an argument.
}
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
        } else { // no toggled groups, return past end
                          payload: Option<TracePayloadT>) -> Self
            } else if incomp == GraphemeIncomplete::PrevChunk {
    fn goto_line(&mut self, text: &Rope, line: u64) {
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
    #[cfg(feature = "benchmarks")]
    pub pid: u64,
        }

use std::mem::size_of;

            write!(f, "{}", String::from(self))
categories_from_constant_array!(4);
            self.wrap_col = WrapWidth::Bytes(wrap_col);
        let closest_occurrence = self.find.iter().flat_map(|x|
    /// Callers are expected to validate their input.
    offset: usize,

        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
        assert_eq!(1, res);
    {
use std::cmp;
        MergeTestState::new(3).run_script(&script[..]);
        // interior of last line should be last line
#[derive(Serialize, Deserialize, Clone, Debug)]
                                           client, iv, new_len, px),
    undone_groups: BTreeSet<usize>,  // set of undo_group id's

            }
    }
        use self::MergeTestOp::*;
        // TODO(vlovich): optimize this path to use the Complete event type
        b.push(self);
    type Item = Cow<'a, str>;
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    fn offset_of_line_small() {
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
        if offset == 0 {
    }
/// ```
        assert_eq!(snapshot[0].name, "process_name");
        if self.cursor.pos() >= self.end {
        samples[1].pid = 2;

        let a = Rope::from("\n");
                }
            //let prev_pos = self.cursor.pos();
pub struct RopeInfo {

    }
        -##-

    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
        let trace = Trace::enabled(Config::with_limit_count(10));
        if self.idx <= self.current.unwrap().len() {

    let inverse_tombstones_map = old_deletes_from_union.complement();
        if b >= 0xf0 {
        } else if line == max_line {
    }
        d_builder.delete(Interval::new_closed_open(10, 36));
}
/// supported as an optimization when only one reference exists, making the
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
                        })
/// an argument.
        s.is_char_boundary(offset)
                find_leaf_split_for_bulk(s)

    pub fn next_grapheme(&mut self) -> Option<usize> {
        let trace = Trace::disabled();
        }
        }
            splitpoint

        let mut a = String::new();
            pid: sys_pid::current_pid(),
    #[serde(skip_serializing_if = "Option::is_none")]
    //
    /// that are currently deleted, and thus in `tombstones` rather than
        for region in self.selection.regions_in_range(start_pos, pos) {
    fn rebase_1() {
///
            self.lc_shadow.edit(start, end, new_end - start);
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        -> Self
        } else if self.first_line + self.height <= line {
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
                match *other {
    ///
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        self.samples.lock().unwrap().limit()
            // I think it's a precondition that this will never be called
        if b >= 0xf0 {
// See the License for the specific language governing permissions and
            Merge(0,1),
        {
    fn next_rev_id(&self) -> RevId {
    // this is the cost contributed by the timestamp to
        }
#[derive(Clone, Debug)]
    /// Returns an iterator over chunks of the rope.

    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,

    inner: ChunkIter<'a>,
        }
        match cmd {
}
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
/// Tracing is disabled initially on program launch.
/// bytes required to represent the codepoint.

        assert_eq!(Some(17), a.next_grapheme_offset(9));
        }
    }
        // We could probably reduce the cloning of selections by being clever.

/// a.edit_str(1, 9, "era");
            }
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
                              start_ns: u64,
            }
        d_builder.delete(Interval::new_closed_open(10, 36));
            },
        trace.closure_payload("z", &["test"], || {},
        let a = Rope::from("a\nb\n");

        if s.len() <= MAX_LEAF {
            Assert(2, "ab".to_owned()),
        assert_tokens(&rope, &[

    /// The state for replacing matches for this view.
        if self.is_enabled() {
// limitations under the License.
/// 3. You may not care about them always being sorted if you're merging samples
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            // I think it's a precondition that this will never be called
        let script = vec![
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        } else if line == max_line {
// Licensed under the Apache License, Version 2.0 (the "License");
        let mut line_num = 0;  // tracks old line cache
    }
        deletes: Subset,
            trace.instant("c", &["test"]);
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
use std::cmp::{min,max};

    #[cfg(feature = "benchmarks")]

//
                    }
// Try to split at newline boundary (leaning left), if not, then split at codepoint
    /// Constructs a Duration sample.  For use via xi_trace::closure.
            self.set_selection(text, sel);
use std::borrow::Cow;
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        engine.gc(&gc);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    ///
        delta.apply(&self.text)
// Copyright 2018 The xi-editor Authors.
        let revs = basic_insert_ops(inserts, 1);
    pub fn empty() -> Engine {
        let thread = std::thread::current();
    }

    // and partly because you need to retain more undo history, to supply input to the
    fn merge_max_undo_so_far() {
                    a.merge(b);
        trace.closure_payload("x", &["test"], || (),
            let mut len = 1;
    /// Selects all find matches.
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        trace.instant("4", &["test"]);
    #[test]
    }
        if !self.is_enabled() {
    }
/// equivalent performance to a regular trace.  A string that needs to be copied
        thread.name().map(|ref s| to_cow_str(s.to_string()))
            highlight_find: false,
    /// Invalidates the styles of the given range (start and end are offsets within
    text: Rope,
    /// The revision history of the document
        let first_rev = engine.get_head_rev_id().token();
            }
    selection: Selection,
                                undo_group,
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
    let mut utf16_count = 0;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    fn merge_whiteboard() {
/// for strings, specialized for incremental editing operations. Most operations
    pub fn new_duration<S, C>(name: S,

    }

use delta::{Delta, InsertDelta};
        }
    /// Front end's line cache state for this view. See the `LineCacheShadow`
    struct MergeTestState {
        // additional tests for line indexing
    }
            }),
            SampleEventType::ObjectSnapshot => 'O',
        trace.disable();
    }
        if (b as i8) >= -0x40 {
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
    }
        }
    #[test]
    }
                        s = &s[..s.len() - 1];
    }
        self.selection = sel;

                    }
}

    /// Return the offset of the codepoint before `offset`.
pub fn count_newlines(s: &str) -> usize {
                            rendered_lines.push(line);
#[derive(Clone, Copy)]
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
pub struct ChunkIter<'a> {
                (drag_state.max, min(offset, drag_state.min))
    /// List of categories the event applies to.
                    RopeDeltaElement_::Insert(s) =>

    /// Only works well for ASCII, will probably not be maintained long-term.
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
        let script = vec![
        }, to_payload("test_get_sorted_samples"));

            fragment: ""
            }
    #[inline]
        let mut cur_len_utf8 = 0;
}
    }


            }
impl CategoriesT {
            utf16_count += 1;
    pub(crate) fn record(&self, sample: Sample) {
        self.lc_shadow = b.build();
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
            AssertMaxUndoSoFar(1,3),
                    text.slice_to_string(region.min(), region.max())
    type Item = Cow<'a, str>;

/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
            replace: None,
    /// Width in bytes (utf-8 code units).

        let initial_rev = engine.get_head_rev_id().token();
    /// The process the sample was captured in.
/// rather than just this processe's samples).
                    } else {

/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        in_base_units
    }
// You may obtain a copy of the License at
        struct RopeDelta_ {
    fn merge_associative() {
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    }

    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
// distributed under the License is distributed on an "AS IS" BASIS,
}

                        let mut word_cursor = WordCursor::new(text, region.max());
        let correct = parse_subset_list("
    // A colliding session will break merge invariants and the document will start crashing Xi.
            Gesture { line, col, ty } =>
            Merge(1,0),

fn count_utf16_code_units(s: &str) -> usize {
        let d = engine.delta_rev_head(first_rev);
struct DragState {

    }
        assert_eq!(snapshot[1].name, "thread_name");
            }
impl Leaf for String {
            Merge(0,2), Merge(1, 2),

    #[cfg(feature = "benchmarks")]
    fn delta_rev_head_3() {
                    Some(chunk) => self.fragment = chunk,
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
            AssertMaxUndoSoFar(1,1),
            next_expand_by.push((trans_priority, new_trans_inserts));
//!
        let mut cur_len_utf8 = 0;

            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        self.samples.lock().unwrap().limit()
    /// fine-grained in the case of multiple cursors, but we also want this
            samples: Mutex::new(FixedLifoDeque::new())
                }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        cursor.prev::<BaseMetric>()
    /// An iterator over the lines of a rope.
    /// Constructs an instantaneous sample.
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
            let b = self.current.unwrap().as_bytes()[self.idx];
// You may obtain a copy of the License at
impl From<Vec<String>> for CategoriesT {
    fn line_of_offset_small() {
            Assert(1, "acb".to_owned()),
            sel.add_region(
            if let GraphemeIncomplete::PreContext(_) = incomp {
    // use own breaks if present, or text if not (no line wrapping)
        let a = Rope::from("a\r\nb\r\nc");
/// first can make it ~1.7x slower than a regular trace.
                    };
}
            Some(offset - len)
                            ops.push(self.build_update_op("skip", None, n_skip));

            rev_id, max_undo_so_far,
#[derive(Clone, Copy)]
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        assert_eq!(Some(6), a.next_codepoint_offset(3));
                    if s.ends_with('\r') {
        as_vec.extend(all_samples.iter().cloned());
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        // todo: the correct Find instance needs to be updated with the new parameters
        }
}
    deletes: Subset,
    type Item = Cow<'a, str>;
    priority: usize,
    /// The line number is 0-based, thus this is equivalent to the count of newlines
        let mut rendered_styles = Vec::new();
        };
    pub fn prev_grapheme(&mut self) -> Option<usize> {
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
                    "something", &["benchmark"], || {},
        }).collect::<Vec<FindStatus>>()
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        assert!(r.clone().slice(0, a.len()) == a_rope);
    // Render a single line, and advance cursors to next line.
        assert_eq!("herald", String::from(a));

    }
                            edit: Undo {
    // * Actual measurement in text layout
                } else {

        let tombstones = Rope::from("27");
use tabs::{ViewId, BufferId};
            Assert(5, "zacpb".to_owned()),
                out.push(DeltaOp {
                    let e = &mut self.peers[ei];
        let trace = Trace::disabled();
/// ```
    fn undo_4() {
    ///
        assert_eq!(snapshot[6].name, "z");
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
///
    }
                    }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            find.unset();
        }
            trace.closure_payload("y", &["test"], || {
        // TODO: simplify this through the use of scopeguard crate
    /// Tracks whether this view has been scheduled to render.
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        if !self.lc_shadow.needs_render(plan) { return; }
        let first_rev = engine.get_head_rev_id().token();
                self.do_find(text, chars, case_sensitive, regex, whole_words),

    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
#[derive(PartialEq, Debug)]
        let mut a = Rope::from("hello world");
        }
    #[test]
    #[test]

            Assert(3, "ab".to_owned()),
/// });
            let mut sample = self.sample.take().unwrap();
    /// The state for finding text for this view.
    {
        if self.breaks.is_some() {
    pub fn empty() -> Engine {
                        _ => break
        // send updated find status only if there have been changes
        assert_eq!(2, b.offset_of_line(1));
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
                leaf_offset = self.pos() - noffset;
        }, new_text, new_tombstones, new_deletes_from_union)
        assert!(self.current.is_some());
            find.update_highlights(text, delta);


            categories: Some(categories.into()),
            let next_chunk = self.inner.next();
                c.provide_context(&pl, self.pos() - poffset);
            Assert(2, "b".to_owned()),
    pub fn instant<S, C>(&self, name: S, categories: C)
    #[cfg(feature = "benchmarks")]
        // We add selection after find because we want it to be preferred if the
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    /// Generally racy since the underlying storage might be mutated in a separate thread.
            els: Vec<RopeDeltaElement_>,
                            (inserts, deletes)
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    fn offset_of_line_panic() {
        // TODO(vlovich): optimize this path to use the Complete event type
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
///
        let edit_iv = Interval::new_closed_open(start, end);
                    filename.to_str().map(|s| s.to_string())
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(2, a.line_of_offset(5));
}
                    rev_id: rev.rev_id,
        thread.name().map(|ref s| to_cow_str(s.to_string()))
    Instant,
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        inserts: Subset,


fn initial_revision_counter() -> u32 {
    #[cfg(feature = "benchmarks")]

        trace.closure_payload("z", &["test"], || {},
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            // The deletes are already after our inserts, but we need to include the other inserts

    out
        let (mut l, mut offset) = self.get_leaf()?;
        revs.append(&mut revs_3);
    wrap_col: WrapWidth,
            tid: sys_tid::current_tid().unwrap(),
    /// Return the offset of the codepoint after `offset`.
            }

use interval::Interval;
    }
        } else { // no toggled groups, return past end
        assert_eq!(trace.get_samples_limit(), 11);
        let new_inserts = union_ins_delta.inserted_subset();
            FindAll => self.do_find_all(text),
                        Ok(s) => Some(s),
        assert_eq!(b, String::from(a));
}
    /// When was the sample started.

            if Some(priority) == last_priority {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
                false => x.start
            AddSelectionAbove =>

    }
        let end = self.line_col_to_offset(text, line + 1, 0);
    }
        let a = Rope::from("");
use std::ops::Range;
    type Item = Cow<'a, str>;

        self.buffer_id
        if self.is_enabled() {

        let new_deletes_from_union = {
        self.drag_state = None;
        if !before {
        assert_eq!(trace.get_samples_limit(), 20);
    // allowing us to use the same method to insert the text into the tombstones.

}
        ChunkIter {
                           styles: &StyleMap, style_spans: &Spans<Style>,
        b.push_str(s);
/// Represents the current state of a document and all of its history

        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    /// from the rope.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
}
        engine.undo([].iter().cloned().collect());
        let a2 = Rope::from("a");
        self.drag_state = Some(DragState {
    pub fn byte_at(&self, offset: usize) -> u8 {
    } else {
/// from the new revisions on the left.
            pos -= 1;
        let mut b = String::new();
///
            SampleGuard::new_disabled()

pub struct Lines<'a> {
        engine.undo([2].iter().cloned().collect());
        if let Some(exe_name) = exe_name() {
                        Some(end) => max(0, end - 1),
        // shouldn't do anything since it was double-deleted and one was GC'd
    TRACE.block(name, categories)
    }
                        self.revs.push(Revision {
    #[serde(default = "initial_revision_counter", skip_serializing)]
        Some(self.cmp(other))
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);

///
    pub(crate) fn get_replace(&self) -> Option<Replace> {
                let mut cursor = Cursor::new(&text, region.min());
            None => None
            let deletes = Subset::new(inserts.len());
        }
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        let revs = basic_insert_ops(inserts, 1);
        // We could probably reduce the cloning of selections by being clever.

        // TODO: want to let caller retain more rev_id's.
///
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                   whole_words: bool) {
    fn to_payload(value: &'static str) -> &'static str {
        let mut r = Rope::from("27");
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
    ///
    #[serde(rename = "xi_payload")]
        ];
}
/// ```

/// fn something_expensive() -> u32 {
use std::fmt;

        if initial_contents.len() > 0 {
                    if seg.validity == line_cache_shadow::ALL_VALID {

    }
            // TODO: on double or triple click, quantize offset to requested granularity.
            Contents::Undo { .. } => panic!("can't merge undo yet"),
                    if sel_end_ix > sel_start_ix {
        trace.closure_payload("x", &["test"], || {
                        DeltaElement::Copy(start, end),
            Merge(2,3),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
    fn merge_session_priorities() {
        self.set_selection(text, sel);
    }
            Merge(1,0),
            b.push('b');

    use delta::{Builder, Delta};
        let mut cursor = Cursor::new(self, offset);

        self.lc_shadow = b.build();

                   style_spans: &Spans<Style>, line_num: usize) -> Value
        engine.edit_rev(1, 2, new_head, d2);
impl Serialize for Delta<RopeInfo> {
/// Represents a transform from one rope to another.
    }
    }
    }
use std::collections::hash_map::DefaultHasher;

    pub fn default() -> Self {
        assert_eq!(snapshot[0].name, "process_name");

            None => return "",
                    els: delta.els.drain(..)
    /// New offset to be scrolled into position after an edit.
                },
        let (new_text, new_tombstones) =
// you may not use this file except in compliance with the License.
        let trace = Trace::enabled(Config::with_limit_count(10));
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
    /// Returns a u64 that will be equal for equivalent revision IDs and
        self.lc_shadow = b.build();
    }
            if i >= max_undos {
    fn next(s: &String, offset: usize) -> Option<usize> {
/// The payload associated with any sample is by default a string but may be
        self.lc_shadow = b.build();
        if let Some(last) = self.revs.last() {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    sample: Option<Sample>,
pub type Rope = Node<RopeInfo>;
        debug_subsets(&rearranged_inserts);
                len += 1;
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
            }
///
    pub fn session_id(&self) -> SessionId {
        struct RopeDelta_ {

        if self.replace_changed {

    }

    fn gc_2() {
// Copyright 2018 The xi-editor Authors.
                }
            Assert(1, "zapbj".to_owned()),
    /// the heap, counters, etc); just the data itself.
        if self.current.is_none() {
/// ```
    } else if x < max {

        } else {
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
    /// Selects an entire line and supports multi selection.
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        let subset_str = format!("{:#?}", expand_by[0].1);
}
    /// Set the selection to a new value.
    }
                out.push((prio, inserts));
        };
    fn next_grapheme_offset() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        self.height = last - first;
        where S: Into<StrCow>, C: Into<CategoriesT>
        }
            Some(offset + len_utf8_from_first_byte(b))
        // Any edit cancels a drag. This is good behavior for edits initiated through
        let styles = self.render_styles(client, styles, start_pos, pos,
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        expand_by = next_expand_by;

    }
                    })
            AssertMaxUndoSoFar(1,1),
    /// terminating newline.
            } else {
fn find_leaf_split_for_merge(s: &str) -> usize {
    max: usize,
                // should be removed in favor of do_gesture
    fn test_ser_de() {
        sel.collapse();
use serde::de::{Deserialize, Deserializer};
        if let Some(sel) = new_sel {
use std::cell::RefCell;

                    } else {

        let head2 = engine.get_head_rev_id().token();
        assert_eq!(utf16_units, 20);
struct Revision {
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    match b {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
                    self.fragment = "";
    fn is_boundary(s: &String, offset: usize) -> bool {
                    ops.push(self.build_update_op("invalidate", None, seg.n));
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        // shouldn't do anything since it was double-deleted and one was GC'd

                priority: new_priority,
/// Also note: in addition to the `From` traits described below, this module
            let inserted = inserts.inserted_subset();
}
    #[test]
        trace.instant("3", &["test"]);
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
            enabled: AtomicBool::new(true),
        self.len() >= MIN_LEAF
            trace.instant("c", &["test"]);
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
            // Do the merge one direction
                                                    self.size.width));
impl<'de> Deserialize<'de> for Rope {
    {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
///
            sel.add_region(

    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    pub fn prev_codepoint(&mut self) -> Option<char> {
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
impl Trace {

        }
mod sys_tid;
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        self.samples.lock().unwrap().limit()
                    let b = if bi < ai {

        }
    ///
        Lines {
            let mut peers = Vec::with_capacity(count);
                metadata_name: None,
    ProcessSortIndex { sort_index: i32 },
    pub fn new_duration<S, C>(name: S,

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    fn accumulate(&mut self, other: &Self) {
    #[test]
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// not account for any overhead of storing the data itself (i.e. pointer to
/// Valid within a session. If there's a collision the most recent matching
            self.find.push(Find::new());
    }
    }
                                                          new_len, col),
    #[test]
            }
        assert_eq!(0, a.line_of_offset(1));
    }
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        text = new_text;
    #[serde(rename = "sort_index")]
        Rope::from_str(s.as_ref()).unwrap()
        } else {
    fn build_delta_1() -> Delta<RopeInfo> {
    #[test]
    }
        if self.find.is_empty() {
    }
            deletes_from_union = match rev.edit {
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)

            thread_name: Sample::thread_name(),
            height: 10,
    /// If the cursor is at the end of the rope, returns the empty string.
        ]);
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        self.lines += other.lines;
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
            black_box(trace.block_payload(
            }
    enabled: AtomicBool,
        // +2 for exe & thread name.

use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    {
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
/// typing a paragraph) will be combined into a single segment in a transform
        for rev in &self.revs[rev_index + 1..] {
                let (pl, poffset) = self.prev_leaf()?;
    rev_id_counter: u32,
    /// This is a `Subset` of the "union string" representing the characters
        let b_rope = Rope::from(&b);
    /// We attempt to reduce duplicate renders by setting a small timeout
            // d-expand by other

        } else {

    pub args: Option<SampleArgs>
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard

    }
    Bytes(usize),

// distributed under the License is distributed on an "AS IS" BASIS,
        } else {
    fn test_get_samples_nested_trace() {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        }
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    }
    /// This is a `Subset` of the "union string" representing the characters
        let region = SelRegion::caret(offset);
        let subset_str = format!("{:#?}", expand_by[1].1);

    /// from the rope.
    }
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));

    text: Rope,
    /// they would be if they hadn't been deleted.
extern crate libc;
        cur_len_utf8
            Assert(0, "acbd".to_owned()),

            trace.record(sample);
    }
/// Create an instantaneous sample without any payload.  This is the lowest
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
                    if let Some(last_selection) = self.selection.last() {
use std::borrow::Cow;
            replace: None,
    }
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        engine
    }

                    }
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
                // TODO: small nit, merged region should be backward if end < start.
                }

            duration_us: None,

/// Internally, the implementation uses reference counting (not thread safe, though
pub type TracePayloadT = StrCow;

}
            None
        MergeTestState::new(2).run_script(&script[..]);
                        MetadataType::ThreadName { name: thread_name.to_string() },
            wrap_col: WrapWidth::None,
        // todo: the correct Find instance needs to be updated with the new parameters
            new_deletes = new_deletes.transform_expand(&new_inserts);
        }
            }
        }
    }
// Low level functions
        match *self {
    /// Only works well for ASCII, will probably not be maintained long-term.
        // We somewhat arbitrarily choose the last region for setting the old-style
    // * grapheme clusters
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    #[bench]


    pub fn set_scroll(&mut self, first: i64, last: i64) {
    cursor: Cursor<'a, RopeInfo>,
pub enum CategoriesT {
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {


                match *other {
    #[cfg(feature = "json_payload")]
            categories: Some(categories.into()),
    #[allow(dead_code)]
    TRACE.enable_config(config);
            lc_shadow: LineCacheShadow::default(),
        match self.selection.len() {
    /// # Panics
    ///
#[cfg(feature = "json_payload")]

    }
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
    /// validate their input.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
#[inline]
            SampleEventType::ObjectCreated => 'N',
/// ```
                         styles: &StyleMap, style_spans: &Spans<Style>,
        let mut style_map = style_map.borrow_mut();
        let first_line = self.line_of_offset(text, start);
        if let Some(ix) = style_map.lookup(style) {
        let start = time::precise_time_ns();
    }

        self.prev::<BaseMetric>();
    assert!(!a.is_empty() && !b.is_empty());
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
                }
        self.drag_state = Some(DragState {


    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R

        // even though the actual sampling order (from timestamp of
        let start = self.line_col_to_offset(text, line, 0);
            };
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
///
        // update only find highlights affected by change
            offset = text.len();
        assert_eq!(0, b.line_of_offset(1));

                } else {
    }
    ///
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        }
    /// selection edges).
                    let after = new_full_priority >= full_priority;  // should never be ==
#[derive(Clone, Debug)]
        // This might be an over-specified test as it will

/// Given the inital byte of a UTF-8 codepoint, returns the number of
                    } else {
        let mut samples = vec![
{

            .map(|(i, _)| i)
    #[bench]
    /// Only works well for ASCII, will probably not be maintained long-term.
        }
    buffer_id: BufferId,
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
        }
                self.add_selection_by_movement(text, Movement::Down),
    #[serde(skip_serializing_if = "Option::is_none")]
    Edit {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        let text_a = Rope::from("zcbd");
        engine.edit_rev(1, 1, first_rev, d1);
        let head_rev = &self.revs.last().unwrap();
    /// The current contents of the document as would be displayed on screen
        if let Some(last) = self.revs.last() {

                self.add_selection_by_movement(text, Movement::Down),
        assert_eq!(snapshot.len(), 9);
}
                        let n_skip = seg.their_line_num - line_num;
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
                out.push(DeltaOp {
        let new_head_2 = engine.get_head_rev_id().token();
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
            },
            's' => SampleEventType::FlowStart,
    }
            }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        ];
            let b_to_merge = &other.revs[base_index..];
                Ok(CategoriesT::DynamicArray(categories))
            CategoriesT::StaticArray(ref self_arr) => {
    }
        };
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
    }
        where S: Serializer
            AddSelectionBelow =>
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
                serializer.serialize_newtype_variant("DeltaElement", 1,
    {
        assert_eq!(utf8_offset, 13);
/// beginning.
}
                }
                        let mut word_cursor = WordCursor::new(text, region.max());
    {
        self.revs.iter().enumerate().rev()
        }
    pub fn empty() -> Engine {

                              to_payload("test_get_samples"));
            Assert(0, "acrbd".to_owned()),
use width_cache::WidthCache;

        // since one of the two deletes was gc'd this should undo the one that wasn't
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        assert_eq!(r.len(), r.offset_of_line(2));

            undo_group: 0,
        Some(&leaf[start_pos .. end])

        debug_subsets(&rebased_inserts);
    }
        engine.edit_rev(1, 1, first_rev, d1);

        }).collect()
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        self.lc_shadow = b.build();
    }
impl<'a> Iterator for ByteIter<'a> {
                        inserts: transformed_inserts,
    /// storage allocated will be limit * size_of<Sample>
        } else {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
                Delta {
                    }

        }
                    // We're super-aggressive about dropping these; after gc, the history

        ");
        assert_eq!(correct, rebased_inserts);
impl From<Rope> for String {
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        -> Self
            lc_shadow: LineCacheShadow::default(),
    /// part of the initial contents since any two `Engine`s need a common
        // shouldn't do anything since it was double-deleted and one was GC'd
        assert_eq!(snapshot[5].name, "z");
    pub(crate) fn record(&self, sample: Sample) {
        -> R
        engine.undo([1].iter().cloned().collect());
            a.push('a');
                        gc_dels = gc_dels.transform_expand(inserts);
              F: FnOnce() -> R

    }

    #[bench]
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
            AddSelectionAbove =>

                    s = s.transform_shrink(&transformed_inserts);
        }
            let c = region.end;
// limitations under the License.


//! pending edit in flight each.
    fn eq(&self, other: &Sample) -> bool {
/// Enable tracing with a specific configuration. Tracing is disabled initially
        }
            }
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
            pid: sys_pid::current_pid(),
    fn lines_raw_small() {
        // Note: for committing plugin edits, we probably want to know the priority
        let end = time::precise_time_ns();
}

}
    /// Return the line number corresponding to the byte index `offset`.
    }
        #------

    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
            Merge(0,2),
}

                //// if we aren't on a boundary we can't be at the end of the chunk
        assert_eq!(snapshot[7].name, "z");
                    }

/// for strings, specialized for incremental editing operations. Most operations
            b.push('b');
    #[bench]
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },

#[inline]
    /// than this will panic.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    /// not account for any overhead of storing the data itself (i.e. pointer to
        if self.len() != other.len() {
        // if self.end is inside this chunk, verify that it is a codepoint boundary
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    fn rearrange_1() {
                    None => return if result.is_empty() { None } else { Some(result) }
                self.select_line(text, offset, line, false),
    /// how many times it has been deleted, so if a character is deleted twice
            Merge(2,3),
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`


            MetadataType::ProcessLabels {..} => "process_labels",
    // How should we count "column"? Valid choices include:
               a.lines_all().collect::<Vec<_>>());
}
/// an argument.
        }
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {

                         first_line: usize, last_line: usize, pristine: bool) {
        use self::MergeTestOp::*;
    }
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
            "styles": styles,
        (self.session1, self.session2)
}
    }
trait StringArrayEq<Rhs: ?Sized = Self> {
            AssertMaxUndoSoFar(1,1),
impl<'a> Iterator for ByteIter<'a> {
#[inline]
        self.revs.last().unwrap().max_undo_so_far
            }
        if let Some(edit) = contents {
    pub fn new_duration_marker<S, C>(name: S,
    /// Create a new Engine with a single edit that inserts `initial_contents`
        // since character was inserted after gc, editor gcs all undone things
        use serde::de::Visitor;
    pub fn prev_grapheme(&mut self) -> Option<usize> {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),


                }
        ];
//! this central engine. It provides the ability to apply edits that depend on
        let script = vec![



    }


            match memchr(b'\n', &s.as_bytes()[offset..]) {
        if !self.is_enabled() {
//
            for (i, op) in script.iter().enumerate() {
        // we add the special find highlights (1) and selection (0) styles first.


    /// finer grain invalidation.
    }
    }
    }
    use test::black_box;
        let a2 = Rope::from("a");
impl Metric<RopeInfo> for LinesMetric {
        let end = time::precise_time_ns();
        }
        trace.closure_payload("y", &["test"], || {},

        // is the new edit in an undo group that was already undone due to concurrency?
            ModifySelection(movement) => self.do_move(text, movement, true),
        // +2 for exe & thread name
/// ```
        self.lc_shadow = b.build();
                }
    let mut last_priority: Option<usize> = None;
pub struct ByteIter<'a> {
            retain_revs.insert(last.rev_id);
    }
}
        self.drag_state = None;
///
        let mut engine = Engine::new(Rope::from(TEST_STR));
                        let n_skip = seg.their_line_num - line_num;
#[cfg(test)]
    {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
pub struct Sample {
                Undo { ref toggled_groups, ref deletes_bitxor } => {
        {
///
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        b.iter(|| black_box(trace.instant_payload(


        assert_eq!(trace.get_samples_limit(), 0);
        let inserts_3 = parse_subset_list("
        self.pending_render
///
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

        let mut samples = vec![

                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        let tid = all_samples.front()
    #[test]

        let mut cur_len_utf8 = 0;
    fn test_cross_process_samples() {
                } else {
            undone_groups: BTreeSet::new(),
        Self {
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
//! which is sufficient for asynchronous plugins that can only have one
        let mut retain_revs = BTreeSet::new();
                   r.lines_all().collect::<Vec<_>>());
            let common = find_common(a_to_merge, b_to_merge);
        let text_with_inserts = text_inserts.apply(&text);
        Ok(exe_name) => {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            a.push('a');
        self.set_selection(text, sel);

        if self.is_enabled() {
            Assert(1, "apb".to_owned()),
}

        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            soln.push('b');
    #[inline]
extern crate lazy_static;
                l = pl;
                    new_deletes = new_deletes.transform_expand(inserts);
            Assert(1, "arpb".to_owned()),
        // interior of last line should be last line
            edit: Edit {

        engine.edit_rev(1, edits+1, head2, d2);

        self.samples.lock().unwrap().len()
///
        if wrap_col > 0 {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    ///
                    if let Some(last_selection) = self.selection.last() {
        client.def_style(&style.to_json(ix));
        }
        d_builder.delete(Interval::new_closed_open(10, 36));
    /// # Panics
    TRACE.closure(name, categories, closure)
        serializer.serialize_str(&String::from(self))
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        b.push_str(s);
            if let GraphemeIncomplete::PreContext(_) = incomp {
            engine.edit_rev(0, 0, first_rev, delta);
    /// Width in bytes (utf-8 code units).
    }
        }
                WrapWidth::Width(px) =>
    ProcessSortIndex { sort_index: i32 },
struct Revision {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Merge(0,1), // the merge from the whiteboard scan
    where D: serde::Deserializer<'de> {
//
            None
        let mut b = line_cache_shadow::Builder::new();
/// some way.
                    Some(Contents::Edit {
                //self.end - prev_pos
        }
// you may not use this file except in compliance with the License.
        if self.is_enabled() {
    where S: Into<StrCow>, C: Into<CategoriesT>
        self.lines += other.lines;
    use engine::*;
}

        let len = match first_rev.edit {
                                                    style_spans, client,
        // if we have active find highlights, we don't collapse selections
        assert_eq!(1, res);
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
            Sample::new_instant("local pid", &[], None),
    }
use delta::{Delta, DeltaElement};
/// ```
        assert!(r != b_rope + a_rope);
    fn lines_med() {

///
        Self {
                    };
/// However, anything that can be converted into a Cow string can be passed as
            Some(offset - len)
    }
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
/// revisions on top of the revisions represented by `expand_by`.
/// }
    }
        }
}
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    /// Only works well for ASCII, will probably not be maintained long-term.
/// implementation as efficient as a mutable version.
pub type RevToken = u64;
            if let GraphemeIncomplete::PreContext(_) = incomp {
        ");

    #[test]
        let snapshot = trace.samples_cloned_unsorted();

        &self.text
    }
        let expand_by = compute_transforms(revs);
{
    type Item = u8;
    fn test_get_sorted_samples() {
                first_sample_timestamp,
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
                        Cow::Owned(un_deleted.transform_shrink(inserts))
/// patterns. Any large runs of typing in the same place by the same user (e.g
    TRACE.samples_cloned_unsorted()
            CategoriesT::DynamicArray(ref self_arr) => {
        assert_eq!("herald", String::from(a));
impl PartialOrd for Sample {
    /// The maximum number of samples that should be stored.
    }
        (self.pid, self.timestamp_us).hash(state);
// Unless required by applicable law or agreed to in writing, software
        assert_eq!(rope.line_of_offset(0), 0);
    pub thread_name: Option<StrCow>,
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
        let mut a = Rope::from("");
            // TODO: on double or triple click, quantize offset to requested granularity.
        }).collect();
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
            }),
        deserializer.deserialize_str(CategoriesTVisitor)
        ");

    }
            replace_changed: false,
                        Cow::Owned(un_deleted.transform_shrink(inserts))
            AddSelectionAbove =>
    fn bench_trace_instant(b: &mut Bencher) {
            GestureType::WordSelect =>

/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {

        trace.instant("5", &["test"]);
/// Represents a transform from one rope to another.
            duration_us: Some(ns_to_us(duration_ns)),


        }, new_text, new_tombstones, new_deletes_from_union)
        trace.instant("2", &["test"]);
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            }
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        //} else {
            }, to_payload("test_get_sorted_samples"));
        assert_eq!(1, expand_by[0].0.priority);
                    a.merge(b);

        }
    #[test]
/// ```
            let expand_by = compute_transforms(a_new);

/// assert_eq!("llo wo", String::from(c));
    fn can_fragment() -> bool { false }

                self.do_set_replace(chars, preserve_case),
                            ops.push(self.build_update_op("skip", None, n_skip));
                where E: serde::de::Error
            self.unset_find();
    fn test_samples_closure() {
                    // we don't want new revisions before this to be transformed after us
/// # Examples
        let result = closure();
            // with offset == 0, but be defensive.
                    let transformed_inserts = inserts.transform_expand(&s);
        let head2 = engine.get_head_rev_id().token();
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
        while !leaf.is_char_boundary(end) {
    }
            offset -= 1;
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
use xi_rope::interval::Interval;
}
/// an argument.
            engine.edit_rev(0, 0, first_rev, delta);
                self.do_gesture(text, line, col, ty),
            };
    Instant,
            self.find.push(Find::new());
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
/// Get a slice of a `Rope`:
                    match full_path_str {
    /// slices will be nonempty.
        // selection state, and for scrolling it into view if needed. This choice can
        }
            for find in self.find.iter() {
    inner: LinesRaw<'a>
    bytecount::count(s.as_bytes(), b'\n')
            a.push('a');
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
            }
use word_boundaries::WordCursor;
use movement::{Movement, region_movement, selection_movement};
        sel.collapse();
    /// not account for any overhead of storing the data itself (i.e. pointer to
/// However, anything that can be converted into a Cow string can be passed as
                match *other {
        if self.idx <= self.current.unwrap().len() {
            MetadataType::ThreadName {..} => "thread_name",
    }

            // recurse at most once; this doesn't feel great but I wrote myself into a
                _ => panic!("to_base_units called with arg too large")
            Assert(1, "acb".to_owned()),
struct FullPriority {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
}
/// # Returns
}
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
    size: Size,
            'E' => SampleEventType::DurationEnd,


                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {

    }
            priority: 0,
/// of Sample that determines order.
        assert_eq!(utf16_units, 20);

    }
    }
/// let b = Rope::from("world");
    }
    }


        }
    fn delta_rev_head() {
            event_type: SampleEventType::Metadata,
            s.as_bytes()[offset - 1] == b'\n'
/// Tracing is disabled initially on program launch.
    pub fn new(initial_contents: Rope) -> Engine {
impl Ord for Sample {
        use self::MergeTestOp::*;
        // send updated find status only if there have been changes


/// # use xi_rope::Rope;
impl<'a> From<&'a Rope> for String {
impl PartialEq for CategoriesT {
    }
            match reverse {
        let mut all_samples = self.samples.lock().unwrap();
    /// Exposed for unit tests only.
    fn test_ser_de() {
            Some(Cow::Owned(mut s)) => {
                    undo_group: i+1,
            duration_us: None,
        }
                find_leaf_split_for_bulk(s)
            SampleGuard::new_disabled()

    fn test_samples_closure() {
//! info.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let a = Rope::from("a\nb\nc");
/// for single user cases, used by serde and ::empty
    }
        }
{
    #[test]
                let (last, rest) = self.sel_regions().split_last().unwrap();
}
            //} else {
            GestureType::WordSelect =>
///

    }
    ///
        let deletes_from_union = parse_subset("-#----#");
        self.selection = sel;
    #[test]
                // This could be done by explicitly overriding, or by tweaking the
            Cancel => self.do_cancel(text),
        cursor.next_grapheme()
                        deletes: transformed_deletes,
        }
        if self.scroll_to.is_none() && wrap {
    }
// The advantage of using a session ID over random numbers is that it can be
            AssertMaxUndoSoFar(0,2),
        deletes: Subset,
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {

            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
        /// Groups related edits together so that they are undone and re-done
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);


/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
            timestamp_us: ns_to_us(time::precise_time_ns()),
            Assert(0, "bdc".to_owned()),
}
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        if self.find.is_empty() {
#[derive(Clone, Debug, PartialEq, Eq)]
/// {

impl Ord for Sample {
        ");

                            max_undo_so_far: rev.max_undo_so_far,
        self.set_selection(text, new_sel);
            Merge(2,1),
/// fn something_else_expensive(value: u32) {

    ObjectCreated,


                RenderTactic::Preserve => {
mod tests {
use std;
        MergeTestState::new(4).run_script(&script[..]);

            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
    ObjectSnapshot,
        Ok(b.build())
    rev_id: RevId,
    pub fn new_duration<S, C>(name: S,

        let mut cur_len_utf8 = 0;
            categories: Some(categories.into()),
        assert_eq!(0, b.offset_of_line(0));
        self.revs.append(&mut new_revs);
            undone_groups: BTreeSet::new(),
    }
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    #[inline]
    }
                        deletes_from_union = deletes_from_union.union(deletes);
                selection.add_region(SelRegion::caret(region.max()));
                selection.add_region(SelRegion::caret(region.max()));
///
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    use delta::{Builder, Delta};
        for _ in 0..(edits-max_undos) {
            pos -= 1;
            Assert(1, "ab".to_owned()),
            return self.len();
                name, categories, payload, SampleEventType::DurationBegin)),

        if initial_contents.len() > 0 {
/// Internally, the implementation uses reference counting (not thread safe, though
                    selection.add_region(occ);
    fn from(r: &Rope) -> String {
        }
            self.first_line = line - (self.height - 1);
                engine.gc(&to_gc)
    }
        assert_eq!(utf16_units, 17);
        }
                                            closure: F, payload: P) -> R
    #[test]
}

            wrap_col: WrapWidth::None,
            if let Some(pos) = pos { start_of_line.set(pos) }
                        self.revs.push(Revision {
        }).collect::<Vec<FindStatus>>()
    {
}
}


    }
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
// Copyright 2016 The xi-editor Authors.

        assert_eq!(trace.get_samples_count(), 0);
enum WrapWidth {
        d_builder.delete(Interval::new_closed_open(10, 36));
            let b = self.current.unwrap().as_bytes()[self.idx];
                // sanitize input
}
        // insert `edits` letter "b"s in separate undo groups
use width_cache::WidthCache;
            );


    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        let last = max(last, 0) as usize;
        let height = self.line_of_offset(text, text.len()) + 1;
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
    /// Front end's line cache state for this view. See the `LineCacheShadow`
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
        let first_rev = engine.get_head_rev_id().token();
#[cfg(feature = "json_payload")]
    }
            find.update_highlights(text, delta);
        self.set_selection(text, SelRegion::caret(offset));
    type Item = Cow<'a, str>;

            None => return "",
                        deletes_from_union = deletes_from_union.union(deletes);
            }
            Assert(0, "acbd".to_owned()),
    fn edit_rev_undo_2() {
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);

                           style: &Style) -> usize {

pub struct View {
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
    fn measure(info: &RopeInfo, _: usize) -> usize {
        let offset = self.line_col_to_offset(text, line, col);
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
}
        }
            }
        }
        }, to_payload("test_get_sorted_samples"));
            offset,
        match self {
    end: usize,
enum Contents {

        (Revision {
    num: u32,
    }
/// # Performance
        ---#--
        self.set(new_pos);
            Assert(1, "bdefg".to_owned()),
    }
        assert_eq!(snapshot[3].name, "a");
/// A flag used to indicate when legacy actions should modify selections
            // On the next step we want things in expand_by to have op in the context
        }
        } else {
use xi_rope::interval::Interval;
    #[test]

    Edit {
    /// Selects the next find match.
//! info.
    fn offset_of_line_panic() {

            SampleEventType::ObjectDestroyed => 'D',
/// {
    #[serde(skip_serializing)]
    inner: ChunkIter<'a>,
}
    size: Size,
        }
    type Item = &'a str;

            'X' => SampleEventType::CompleteDuration,
            inserts: Subset::new(0),
/// required). Mutations are generally copy-on-write, though in-place edits are
                l = pl;
        let tombstones = Rope::from("27");
                                  style_spans, &plan, pristine);
pub fn len_utf8_from_first_byte(b: u8) -> usize {
}
    }
                    // We're super-aggressive about dropping these; after gc, the history

    }
    // * Actual measurement in text layout
/// * `name` - A string that provides some meaningful name to this sample.
        b.iter(|| black_box(trace.closure_payload(
    fn render_line(&self, client: &Client, styles: &StyleMap,

}
impl RevId {
    }
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
            .map_or(0, |ref s| s.timestamp_us);
                self.do_drag(text, line, column, Affinity::default()),
///
    pub fn get_head(&self) -> &Rope {
    fn merge_idempotent() {
                // TODO create InsertDelta directly and more efficiently instead of factoring
        }
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
                                priority,
/// For example, take a string that starts with a 0xC2 byte.

                    deletes: deletes.clone(),
/// record it.
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
                if s.ends_with('\n') {
        let revs = basic_insert_ops(inserts, 1);
        if all_samples.is_empty() {
    #[test]
}
                payload: payload,
    }
///
                    };
    /// The current contents of the document as would be displayed on screen
            categories: None,
                payload: payload,

                        Some(end) if end >= region.max() => max(0, region.max() - 1),
}
            return false;
                            let line = self.render_line(client, styles, text,

struct DragState {
        Self {
                            styles: &StyleMap, style_spans: &Spans<Style>,
            categories: Some(categories.into()),

}
        if !before {

        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
            },
            _ => None
        let trace = Trace::disabled();
            new_deletes = new_deletes.transform_expand(&new_inserts);
        }
            Rope::concat(
    }
pub struct Engine {
        } else {
        // if we have active find highlights, we don't collapse selections
    type Output = Rope;
    ///
impl<'a> From<&'a Rope> for String {
            let inserted = inserts.inserted_subset();
        let a2 = Rope::from("a");
    // since undo and gc replay history with transforms, we need an empty set
            Assert(0, "acpbdj".to_owned()),
                            deletes_bitxor
            timestamp_us: ns_to_us(timestamp_ns),
                _ => panic!("to_base_units called with arg too large")
        b.iter(|| black_box(trace.instant_payload(
/// Disable tracing.  This clears all trace data (& frees the memory).
            'i' => SampleEventType::Instant,
        let new_head_2 = engine.get_head_rev_id().token();
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        // todo: for now only a single search query is supported however in the future
            Assert(1, "ab".to_owned()),
        #------

        for &(sel_start, sel_end) in hls {
    #[cfg(feature = "benchmarks")]
    /// Selects an entire line and supports multi selection.
        let script = vec![
        let mut b = String::new();
            Merge(0,2), Merge(1, 2),
}
        self.set_selection(text, new_sel);
        }).collect();
    /// if it is non-empty. It needs to be a separate commit rather than just
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        self.invalidate_selection(text);
    pub fn join(&self, sep: &str) -> String {
        }
    }
        let mut offset = 0;
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        let new_inserts = union_ins_delta.inserted_subset();
        engine.edit_rev(1, 2, first_rev, d1.clone());

        ids.iter().cloned().map(|i| {
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        inserts.into_iter().enumerate().map(|(i, inserts)| {
/// Returns all the samples collected so far.  There is no guarantee that the
    }
    }
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        // rather than emitting an explicit start/stop to reduce the size of

            if let Some(ref thread_name) = sample.thread_name {
        }
    All,
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            for i in 0..count {
    undo_group: usize,
            self.set_dirty(text);
use xi_rope::delta::Delta;
    /// Get text of head revision.
}
        {
    pub fn scroll_height(&self) -> usize {
                // should be removed in favor of do_gesture
                self.add_selection_by_movement(text, Movement::Down),
/// Also note: in addition to the `From` traits described below, this module
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                Contents::Undo { .. } => panic!(),
/// A guard that when dropped will update the Sample with the timestamp & then
        /// Used to order concurrent inserts, for example auto-indentation

use std::string::ParseError;
        debug_subsets(&rebased_inserts);
        let line = line as usize;
    /// Toggles a caret at the given offset.
    use super::*;

    deletes: Subset,
    /// Highlights are only rendered when search dialog is open.

        let script = vec![
        assert_eq!(0, r.line_of_offset(a.len() - 1));
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
                                                        style_spans, line_num);
/// Tracing is disabled initially on program launch.
    height: usize,
        selection.add_region(region);
        assert_eq!(utf8_offset, 9);
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
/// # use xi_rope::Rope;
    }
use tabs::{ViewId, BufferId};
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
                    let full_path = exe_name.into_os_string();


        }
        let trace = Trace::enabled(Config::default());
    #[serde(rename = "name")]
    {
#[derive(Clone, Copy)]
/// Also note: in addition to the `From` traits described below, this module
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
    replace_changed: bool,
        if self.len() != other.len() {
    Undo {
                    let b = if bi < ai {
    /// Each instance represents a separate search query.
    }
        assert_eq!(rope.line_of_offset(1), 0);
                    } else {
// Unless required by applicable law or agreed to in writing, software
    }
            }
    pub fn max_undo_group_id(&self) -> usize {
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
                        s = &s[..s.len() - 1];
        for &(sel_start, sel_end) in hls {
        ---#-

///
impl<'a> From<&'a Rope> for String {

///
            Assert(0, "ab".to_owned()),
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
                        Cow::Owned(un_deleted.transform_shrink(inserts))

            max_undo_so_far,
                    if s.ends_with('\r') {
        let inserts_1 = parse_subset_list("

    ///
        (line, offset - self.offset_of_line(text, line))
/// Stores the relevant data about a sample for later serialization.
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        }, to_payload("test_get_samples_nested_trace"));

                (drag_state.min, max(offset, drag_state.max))

            utf16_size: count_utf16_code_units(s),
            let c = region.end;
        fn run_op(&mut self, op: &MergeTestOp) {
    }
}
        all_samples.push_back(sample);
    pub fn merge(&mut self, other: &Engine) {
            }
            }
    pub fn offset_of_line(&self, line: usize) -> usize {

    }
    Undo {
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
            self.first_line = line - (self.height - 1);
        }
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
    fn goto_line(&mut self, text: &Rope, line: u64) {
    /// Return the offset of the codepoint before `offset`.
            Assert(2, "ab".to_owned()),
        // NOTE 2: from_micros is currently in unstable so using new
        }

    }
/// Represents the current state of a document and all of its history

macro_rules! categories_from_constant_array {
/// configured via the `dict_payload` or `json_payload` features (there is an
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
            }
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
// limitations under the License.
    #[test]
        next_expand_by = Vec::with_capacity(expand_by.len());
        let mut selection = Selection::new();
    /// The name of the event to be shown.
            if Some(priority) == last_priority {
                    self.fragment = &self.fragment[i + 1 ..];
    view_id: ViewId,
/// let c = b.slice(1, 7);
        let res = find_common(&a, &b);
    // This computes undo all the way from the beginning. An optimization would be to not
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        assert_eq!(snapshot[5].name, "b");
/// For example, take a string that starts with a 0xC2 byte.
                              to_payload("test_get_samples"));
            SampleEventType::AsyncInstant => 'n',
                    };
    ObjectDestroyed,
        assert!(r.clone().slice(0, a.len()) == a_rope);
    /// You could construct the "union string" from `text`, `tombstones` and

            edit: Edit {
///
        enum RopeDeltaElement_ {
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
            'D' => SampleEventType::ObjectDestroyed,
    /// Toggles a caret at the given offset.
    /// Get the line range of a selected region.
    FlowEnd,
        self.replace.clone()
//
        self.deletes_from_union = new_deletes_from_union;
extern crate serde_derive;
    enum MergeTestOp {
    #[cfg(feature = "dict_payload")]
            Merge(2,3),
    /// Determines whether the offset is in any selection (counting carets and
            let inserted = inserts.inserted_subset();
    /// if there is not at least one edit.
impl fmt::Debug for Rope {
#[cfg(test)]
    }

///
    } else {
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
            offset = text.len();

    }

        all_samples.reset_limit(config.max_samples());
    }
    #[test]
            sample_limit_count: limit
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        for rev in &self.revs[rev_index + 1..] {
        for rev in self.revs[rev_index..].iter().rev() {
        while offset < l.len() && !l.is_char_boundary(offset) {
        ");
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        Assert(usize, String),
use xi_trace::trace_block;
///

/// Measured unit is utf8 code unit.
                metadata_name: None,
            text: Rope::default(),
        Self::with_limit_count(size / size_of::<Sample>())

                    let (start, end) = {
    }
            splitpoint
        ");
    }
        let (ins_delta, deletes) = delta.factor();
    /// Select entire buffer.
/// some way.
/// State required to resolve a drag gesture into a selection.
            'O' => SampleEventType::ObjectSnapshot,
    pending_render: bool,
            offset,
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
                match self.inner.next() {
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
        assert!(self.current.is_some());
                    };
        }

    /// the text).
    for r in revs {




        let trace = Trace::enabled(Config::default());
            let common = find_common(a_to_merge, b_to_merge);

        // likely be improved.
    #[test]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        self.size = size;
            AssertAll("ac".to_owned()),
    }
/// Also note: in addition to the `From` traits described below, this module
    {
                    return Some(result);
/// conversions in both directions.
/// Revision will be used, which means only the (small) set of concurrent edits
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    /// This is a regression test to ensure that session IDs are used to break
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    fn next(s: &String, offset: usize) -> Option<usize> {

            Assert(0, "ab".to_owned()),

        let start = time::precise_time_ns();
        let mut pos = self.pos();

    }
/// between two utf8 code units that form a code point is considered invalid.
        let revs = basic_insert_ops(inserts, 1);
    {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                            let line = self.render_line(client, styles, text,


impl PartialEq for CategoriesT {
        let a = Rope::from("a\r\nb\r\nc");
        }
    ///
                    text.slice_to_string(start, end)
}
        let text = Rope::from("13456");
/// monotonically increasing single global integer (when tracing) per creation
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
            GestureType::MultiWordSelect =>
            event_type: event_type,

                   whole_words: bool) {
                out.push((prio, inserts));
                            if !inserts.is_empty() {
impl<'de> Deserialize<'de> for Rope {
categories_from_constant_array!(9);
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
                len += 1;
                        &mut start[bi]
    pub fn max_size_in_bytes(&self) -> usize {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        engine.edit_rev(1, 2, first_rev, d1.clone());
        MergeTestState::new(3).run_script(&script[..]);
        self.do_set_replace(replacement, false);

        // insert a character at the beginning
/// associated performance hit across the board for turning it on).
///     something_else_expensive(result);
    }
/// ```
            Drag(MouseAction { line, column, .. }) =>

                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
    }

use std;
                if is_base {
        let first_rev = engine.get_head_rev_id().token();
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
    // ============== Merge script tests
    #[test]
    }

        }
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
}
        assert_eq!(1, a.line_of_offset(2));
/// ```

impl PartialOrd for Sample {
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    FlowEnd,
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    // since undo and gc replay history with transforms, we need an empty set
    /// Only number of matches changed

            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            }
    fn test_samples_pulse() {

            // These two will be different without using session IDs
        let result = closure();
    /// height of visible portion
        self.deletes_from_union = new_deletes_from_union;
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        engine.undo([1].iter().cloned().collect());
///
use std::str;
                }
    }
        Ok(b.build())
                let line = line.min(text.measure::<LinesMetric>() + 1);
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        let mut d_builder = Builder::new(TEST_STR.len());
    /// Set the selection to a new value.
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
            if let GraphemeIncomplete::PreContext(_) = incomp {
            SampleEventType::DurationBegin => 'B',
        let height = self.line_of_offset(text, text.len()) + 1;
        // probably change as the recording internals change.
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
    /// This case is a regression test reproducing a panic I found while using the UI.
                                           client, iv, new_len, px),
    }
        self.set_dirty(text);
/// * `categories` - A static array of static strings that tags the samples in
        }
    // callers should be encouraged to use cursor instead
    }
        let mut d_builder = Builder::new(TEST_STR.len());
    inner: LinesRaw<'a>
            match reverse {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
            self.breaks = None
                for &region in rest {
use std::string::ParseError;
    // callers should be encouraged to use cursor instead
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
#[inline]
        ]);
    }
            end,
use std::cmp;
    }
    trace: Option<&'a Trace>,
        let mut cursors = Vec::new();
    }
        engine

                    s = s.transform_shrink(&transformed_inserts);
    ProcessName { name: String },
//See ../docs/MetricsAndBoundaries.md for more information.
    #[cfg(feature = "benchmarks")]
            as_vec.push(Sample::new_metadata(

    breaks: Option<Breaks>,
    enabled: AtomicBool,
}
            // TODO: finer grain invalidation for the line wrapping, needs info
    /// Highlights are only rendered when search dialog is open.
        }
            tid: tid,

        // TODO: may make this method take the iv directly
        for i in 0..self.len() {
                SelectionModifier::AddRemovingCurrent => {
            drag_state: None,
use std::fmt;
            enabled: AtomicBool::new(true),
            // TODO: finer grain invalidation for the line wrapping, needs info
            self.idx += 1;
/// State required to resolve a drag gesture into a selection.
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))

        if offset == 0 {

    }

            GestureType::MultiWordSelect =>
            l[offset..].chars().next()
                    let full_path = exe_name.into_os_string();
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
                            rev_id: rev.rev_id,

        let offset = self.line_col_to_offset(text, line, col);
    for rev in revs.iter().rev() {
        // even though the actual sampling order (from timestamp of
            self.categories == other.categories &&
    pub fn prev_grapheme(&mut self) -> Option<usize> {
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
            Merge(1,2),
            ix = iv.end() as isize;
///
    }
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
                first_sample_timestamp,
impl Hash for Sample {
        }
                    }
    }
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
}

        // stable order since the resolution of timestamps is 1us.
        let first_rev = engine.get_head_rev_id().token();
    #[bench]
                        word_cursor.select_word()
/// acquires a dependency on the `serde_json` crate.
                true => x.end,
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        // rebase the delta to be on the head union instead of the base_rev union
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        serializer.serialize_str(&String::from(self))
        cursor.prev_grapheme()
        assert_eq!(Some(2), b.next_codepoint_offset(0));
}
/// Internally, the implementation uses reference counting (not thread safe, though
            self.set_selection(text, sel);
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
                    let mut e = &mut self.peers[ei];
    }
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
    }
    /// Returns an iterator over chunks of the rope.
}
    // use own breaks if present, or text if not (no line wrapping)
    /// Get the contents of the document at a given revision number
                cur_all_inserts = older_all_inserts;
        self.drag_state = Some(DragState { base_sel, offset, min, max });

                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

    fn bench_get_tid(b: &mut Bencher) {
        engine.edit_rev(1, 2, new_head, d2);
    }
            categories: Some(categories.into()),
    /// revision, and so needs a way to get the deletion set before then.

                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
/// The visual width of the buffer for the purpose of word wrapping.
            let new_region = region_movement(movement, region, self,
    fn basic_rev(i: usize) -> RevId {
            SampleEventType::DurationEnd => 'E',
    }
        }
    }
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    }
        let trace = Trace::enabled(Config::with_limit_count(20));
///

        let deletes_at_rev = self.deletes_from_union_for_index(ix);
///
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
                                gc_dels = gc_dels.transform_expand(inserts);
            timestamp_us: ns_to_us(time::precise_time_ns()),
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
pub type RopeDelta = Delta<RopeInfo>;
}
        ).min_by_key(|x| {

    #[cfg(feature = "benchmarks")]
            rev_id: self.next_rev_id(),
#[inline]
        // rebase the deletion to be after the inserts instead of directly on the head union
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
    /// Updates the view after the text has been modified by the given `delta`.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
    }
            a = a + Rope::from(&c);
        self.pending_render = pending
/// fn something_expensive() -> u32 {
    -> SampleGuard<'a>


        assert_eq!(utf8_offset, 9);
            b.push('b');
        ----
        }
    /// Update front-end with any changes to view since the last time sent.

            Scroll(range) => self.set_scroll(range.first, range.last),
        expand_by = next_expand_by;
        assert_eq!(utf8_offset, 13);
                        .map(DeltaElement::from).collect(),
        }
        let a = Rope::from("");
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        // probably change as the recording internals change.
        }

    pub payload: Option<TracePayloadT>,
            tombstones: Rope::default(),
        match self.breaks {
        println!("{:#?}", delta_ops);

            name: name.into(),

/// Valid within a session. If there's a collision the most recent matching
                    let transformed_inserts = inserts.transform_expand(&s);
            let common = find_common(a_to_merge, b_to_merge);
        self.view_id
        }, new_text, new_tombstones, new_deletes_from_union)
    }
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        let (leaf, pos) = cursor.get_leaf().unwrap();
    fn bench_get_pid(b: &mut Bencher) {
            SampleEventType::ObjectSnapshot => 'O',
        /// revision that were deleted by this revision.
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
    #[serde(skip_serializing_if = "Option::is_none")]
categories_from_constant_array!(4);
            text: Rope::default(),

            }, to_payload("test_get_sorted_samples"));

            } else {
        if offset == s.len() {
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        assert_eq!(2, a.line_of_offset(5));

        RopeInfo {
            if Some(priority) == last_priority {


                    linewrap::rewrap_width(breaks, text, width_cache,
            client.scroll_to(self.view_id, line, col);
    DynamicArray(Vec<String>),
    let inverse_tombstones_map = old_deletes_from_union.complement();
        let height = self.line_of_offset(text, text.len()) + 1;
        }
                        deletes_from_union = deletes_from_union.union(deletes);

        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
    {
    /// `text`. The count of a character in `deletes_from_union` represents
    sample_limit_count: usize
        } else {
            }

    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
    {
    }
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
        self.first_line = first;
    struct MergeTestState {
    }
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
        for seg in self.lc_shadow.iter_with_plan(plan) {
            }, to_payload("test_get_sorted_samples"));
                while cursor.pos() < region.max() {
            self.categories == other.categories &&
///
pub struct BaseMetric(());
        }
categories_from_constant_array!(8);
        let mut d_builder = Builder::new(TEST_STR.len());
    fn from(r: &Rope) -> String {
// Additional APIs custom to strings
    AsyncEnd,
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.

    {

            b.push('b');
/// ```
        ");
        };
    // callers should be encouraged to use cursor instead
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
            let mut len = 1;
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    }
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        let snapshot = trace.samples_cloned_unsorted();
    /// Returns the byte offset corresponding to the line `line`.
/// 3. You may not care about them always being sorted if you're merging samples
}
///
            args: Some(SampleArgs {
            let mut len = 1;
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        assert!(empty == empty);
        let mut offset = 0;
    fragment: &'a str
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
        // We could probably reduce the cloning of selections by being clever.
        }
    }
        }
}


        samples[1].timestamp_us = 5;
    #[bench]
        if let Some(breaks) = self.breaks.as_mut() {
        use std::hash::{Hash, Hasher};
            ix = sel_end as isize;
#[inline]
    base_sel: Selection,
    }
        true
        engine.gc(&to_undo);
pub enum SampleEventType {
        result
        let text_with_inserts = text_ins_delta.apply(&self.text);

            panic!("line number {} beyond last line {}", line, max_line);
                len += 1;
        -> Self
                    let sel_start = cursor.pos();
                    els: delta.els.drain(..)

/// # Returns

    }
        base_subset.is_some() && base_subset == other_subset
        engine.undo([].iter().cloned().collect());
        for seg in self.lc_shadow.iter_with_plan(plan) {
                        } else {
            None
            }, to_payload("test_get_sorted_samples"));
        let sample_name = to_cow_str(meta.sample_name());
///
            }
    fn test_disable_drops_all_samples() {
        match *self {
        let (iv, new_len) = delta.summary();
/// * `categories` - A static array of static strings that tags the samples in
        );
        if line < self.first_line {

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        (self.pid, self.timestamp_us).hash(state);
                payload: payload,
            SampleEventType::FlowStart => 's',
        let correct = parse_subset_list("
    pub payload: Option<TracePayloadT>,
        let params = json!({
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))


                WrapWidth::Width(px) =>
                                                        soft_breaks.as_mut(),

    }
        }
    }
        Self {
// ======== Merge helpers
    }
        let mut selections = Vec::new();
        let base_sel = Selection::new();
                splitpoint -= 1;
    /// they would be if they hadn't been deleted.
    /// Tracks whether the replacement string or replace parameters changed.
                        }
            false => Selection::new(),
        b.build()
        }).collect::<Vec<FindStatus>>()
pub struct Utf16CodeUnitsMetric(usize);
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
            Some(region) => {
        let expand_by = compute_transforms(revs);
}
            let b = s.as_bytes()[offset];
    }
        engine.gc(&gc);
            None

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                MergeTestOp::Merge(ai, bi) => {
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
/// * `name` - A string that provides some meaningful name to this sample.
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        // invert the changes to deletes_from_union starting in the present and working backwards
    deletes_from_union: Subset,
        }
    }
        // if we have active find highlights, we don't collapse selections
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
                    }
    /// of the chunks is indeterminate but for large strings will generally be
                    } else {
    #[cfg(feature = "json_payload")]
    /// Storage for all the characters that have been deleted  but could
        // spam cmd+z until the available undo history is exhausted
        }
                pos = leaf_offset + pl.len();
        assert!(a == a2);

        assert_eq!(Some(5), b.prev_codepoint_offset(9));

    /// The line number is 0-based, thus this is equivalent to the count of newlines
    for rev in revs.iter().rev() {
//
            Assert(0, "ab".to_owned()),
            }

        fn run_op(&mut self, op: &MergeTestOp) {
            Merge(1,0),

    ///
            next_boundary = c.next_boundary(&l, leaf_offset);
    fn gc_2() {
    #[test]
#[derive(Clone, Debug, PartialEq, Eq)]
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
    }
        engine.edit_rev(1, 1, first_rev, d1);
                    if invert_undos {
        while !leaf.is_char_boundary(end) {
        assert_eq!(2, r.line_of_offset(r.len()));
        --#--
}
    }
use std::cmp;
        count_utf16_code_units(&s[..in_base_units])
macro_rules! categories_from_constant_array {
        assert!(r == a_rope.clone() + b_rope.clone());
            Merge(0,2), Merge(1, 2),
            end -= 1;
///
        delta.serialize_field("base_len", &self.base_len)?;
    #[test]
    #[test]
    }
impl fmt::Debug for Rope {
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
            tid: sys_tid::current_tid().unwrap(),
    }

            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
    /// The line number is 0-based, thus this is equivalent to the count of newlines
        let mut style_map = style_map.borrow_mut();
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
            self.next()
            },
        }
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
    }
            }
        self.set_selection_raw(text, sel.into());
        // stable order since the resolution of timestamps is 1us.
}
                (drag_state.min, max(offset, drag_state.max))
                }
        assert_eq!(2, expand_by[1].0.priority);

    /// Selects an entire word and supports multi selection.
        assert_eq!(snapshot.len(), 9);
        delta.serialize_field("els", &self.els)?;
    inner: ChunkIter<'a>,
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
            timestamp_us: ns_to_us(time::precise_time_ns()),
                        deletes_from_union
    fn test_get_sorted_samples() {
        b.iter(|| sys_pid::current_pid());
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
/// Revision will be used, which means only the (small) set of concurrent edits
use std::ops::Range;
                      width_cache: &mut WidthCache, keep_selections: bool)
// Unless required by applicable law or agreed to in writing, software
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        let a = Rope::from("a\nb\n");
        let invalid = if all_caret {
    pub fn do_find_all(&mut self, text: &Rope) {
        }
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        self.set_selection_for_edit(text, new_sel);

            if self.fragment.is_empty() {
            if !s.is_empty() {

        }
        deletes_from_union = new_deletes_from_union;
    /// Tests that merging again when there are no new revisions does nothing

            Merge(1,0),
        if let Some((l, offset)) = self.get_leaf() {
        update
        self.set_selection(text, selection);
    fn deserialize<D>(deserializer: D)

    /// Only works well for ASCII, will probably not be maintained long-term.
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)

        let head_rev = &self.revs.last().unwrap();
        // Any edit cancels a drag. This is good behavior for edits initiated through
    }
        impl<'de> Visitor<'de> for CategoriesTVisitor {

                        inserts: transformed_inserts,
        let r = Rope::from(&a[..MAX_LEAF]);
}
/// State required to resolve a drag gesture into a selection.
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
    /// The maximum number of bytes the tracing data should take up.  This limit
    sample_limit_count: usize
            }
                Undo { toggled_groups, deletes_bitxor } => {
        let d = engine.delta_rev_head(after_first_edit);
        let script = vec![
                let (ins, _) = delta.factor();
use std::mem::size_of;
}
                        let mut rendered_lines = Vec::new();
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        ------#
        -> R
        self.send_update_for_plan(text, client, styles,
use fixed_lifo_deque::FixedLifoDeque;
        let deletes_from_union_a = parse_subset("-#---");
    /// Return the line number corresponding to the byte index `offset`.
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
                            rev_id: rev.rev_id,

    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
        let start = time::precise_time_ns();

use serde::de::{Deserialize, Deserializer};
                let mut cursor = Cursor::new(&text, region.min());
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
            let mut len = 1;
                }
    {
        let correct = parse_subset_list("
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        let a = Rope::from("\n");
    for r in revs {
            self.mk_new_rev(priority, undo_group, base_rev, delta);
    }
        Ok(b.build())
    }
        }, deletes_from_union)
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    utf16_size: usize,
            }
                        Some(end) => max(0, end - 1),
    }
        b.push('\n');
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
}
                    // we don't want new revisions before this to be transformed after us
        for i in 0..self.len() {

        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
    }
            }

    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
            None
    /// Start of the region selected when drag was started (region is
/// between two utf8 code units that form a code point is considered invalid.
            sample.event_type = SampleEventType::DurationEnd;

    ///
            inserts = inserts.transform_expand(trans_inserts, after);
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
        },
            let c = i.to_string() + "\n";
        plan.request_lines(first_line, last_line);
#[derive(PartialEq, Debug)]

            return false;
                self.find_changed = FindStatusChange::All;
                    result = cow_append(result, self.fragment);
        self.len() >= MIN_LEAF

    /// This is a regression test to ensure that session IDs are used to break
        max
                client.replace_status(self.view_id, &json!(replace))


    }
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
/// # Returns
            Assert(0, "zacbd".to_owned()),
        let mut style_map = style_map.borrow_mut();
    /// No wrapping in effect.
            Assert(2, "ab".to_owned()),

            lc_shadow: LineCacheShadow::default(),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    where D: serde::Deserializer<'de> {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        assert_eq!(0, r.line_of_offset(a.len() - 1));
                    let head = e.get_head_rev_id().token();
        b.add_span(height, 0, 0);
// Unless required by applicable law or agreed to in writing, software
        ];

    #[serde(rename = "cat")]
    ///
    /// point. Used to optimize undo to not look further back.
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
{
        engine.undo([3].iter().cloned().collect());
    pub preserve_case: bool
    // recompute the prefix up to where the history diverges, but it's not clear that's
    priority: usize,
    }
            let style_id = self.get_or_def_style_id(client, styles, &style);
///
    /// The maximum number of bytes the tracing data should take up.  This limit
    match b {
    /// point. Used to optimize undo to not look further back.
// distributed under the License is distributed on an "AS IS" BASIS,
        }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
fn count_utf16_code_units(s: &str) -> usize {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    #[test]
use serde_json::Value;
        Cow::from(a.into_owned() + b)
                    } else {
                self.set_dirty(text);
    #[inline]

        for mut find in self.find.iter_mut() {
                    "something", &["benchmark"], || {},
        let utf8_offset = 9;
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        let text_with_inserts = text_ins_delta.apply(&self.text);
            rendered_styles.push(sel_end as isize - sel_start as isize);

    /// Storage for all the characters that have been deleted  but could
/// `base_revs`, but modified so that they are in the same order but based on
        assert_eq!(1, a.line_of_offset(3));
    }
    /// Get text of a given revision, if it can be found.
    // revision might hold content from an undo group that would otherwise be gc'ed),
        match *self {
            //}
                    for (ei, e) in self.peers.iter().enumerate() {
            engine.undo(undos.clone());
    /// Exposed for unit tests.
        self.deletes_from_union = new_deletes_from_union;
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
            if self.fragment.is_empty() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
                    s = inserts.transform_union(&s);
    }
                            plan: &RenderPlan, pristine: bool)
                                undo_group,
    fn bench_trace_block_payload(b: &mut Bencher) {
    }
        self.find_changed = FindStatusChange::Matches;

///
                            Cursor::new(breaks, offset));
        if !self.is_enabled() {
                    if !inserts.is_empty() {
impl FromStr for Rope {
    pub thread_name: Option<StrCow>,
        for region in self.selection.regions_in_range(start_pos, pos) {
                    return None;
            None
                    result = cow_append(result, self.fragment);
                    if sel_end_ix > sel_start_ix {
        assert_eq!(trace.get_samples_count(), 5);
        // We somewhat arbitrarily choose the last region for setting the old-style
}
    /// concurrently it will have count `2` so that undoing one delete but not
            for &occurrence in find.occurrences().iter() {
            Assert(1, "arpbzj".to_owned()),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        #[derive(Serialize, Deserialize)]
use serde_json::Value;
            GestureType::RangeSelect => self.select_range(text, offset),
            // copy the current state
        let (first_line, _) = self.offset_to_line_col(text, region.min());
    }
    }
            rev_id: self.next_rev_id(),
    ObjectDestroyed,
    /// vertical scroll position
        self.size = size;
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
            rendered_styles.push(0);
        assert_eq!(0, a.line_of_offset(1));
                Contents::Edit {inserts, ..} => inserts,
        }
        ---#--
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    }
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

    }
        self.send_update_for_plan(text, client, styles,
    }
        if (b as i8) >= -0x40 {
                find_leaf_split_for_bulk(s)
    session2: u32,
    #[test]
/// for strings, specialized for incremental editing operations. Most operations
            edit: Undo { toggled_groups, deletes_bitxor }
            return false;
            match memchr(b'\n', self.fragment.as_bytes()) {

    edit: Contents,
        let mut a = String::new();
        }
                            }
        let mut engine = Engine::new(Rope::from(""));
        }
    }
categories_from_constant_array!(10);
        assert!(a == a2);
            }
    /// Splits current selections into lines.
categories_from_constant_array!(5);
        let plan = RenderPlan::create(height, self.first_line, self.height);
        } else {
        // ensure that when the samples are sorted by time they come out in a
        self.deletes_from_union = new_deletes_from_union;
                    }
    }
        }
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
    Bytes(usize),
        self.text = new_text;
        }
    // this should have the same behavior, but worse performance
/// Measured unit is utf8 code unit.
        MergeTestState::new(2).run_script(&script[..]);
/// ```
    #[serde(default = "default_session", skip_serializing)]
    pub fn set_session_id(&mut self, session: SessionId) {
}
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
                match elem {
        deserializer.deserialize_str(CategoriesTVisitor)
            } else if incomp == GraphemeIncomplete::NextChunk {
        }
        d
                    ops.push(self.build_update_op("invalidate", None, seg.n));
    }
        let closest_occurrence = self.find.iter().flat_map(|x|
#[derive(Serialize, Deserialize, Debug)]
                    self.do_gesture(text, line, column, GestureType::LineSelect)
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
/// patterns. Any large runs of typing in the same place by the same user (e.g
            }
                } else {
                        }
enum MetadataType {
        let first_rev = engine.get_head_rev_id().token();

/// # use xi_rope::Rope;
        assert_eq!(trace.get_samples_count(), 1);
        let (start, end) = {
                    b.add_span(seg.n, 0, 0);
            let max_undo = self.max_undo_group_id();
        assert_eq!(snapshot[6].name, "z");
    }
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        self.scroll_to_cursor(text);
            pos

            }

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    } else {

        // +2 for exe & thread name.
        assert_eq!(Some(9), a.next_grapheme_offset(3));
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            }
    /// This case is a regression test reproducing a panic I found while using the UI.
        self.cursor.next_leaf();
        Err(ref e) => {
    type Item = Cow<'a, str>;
        let start = time::precise_time_ns();
        }
    }
    #[cfg(feature = "benchmarks")]
        let end = self.line_col_to_offset(text, line + 1, 0);

/// }
            None
    ///
                        line_num = seg.their_line_num + seg.n;

                         styles: &StyleMap, style_spans: &Spans<Style>,
            } else {
    rev_id_counter: u32,
        assert_eq!(trace.get_samples_count(), 0);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            },
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
// Licensed under the Apache License, Version 2.0 (the "License");

        assert_eq!(trace.samples_cloned_unsorted().len(), 0);

    /// Find the first revision that could be affected by toggling a set of undo groups
    }
                continue;
    #[allow(dead_code)]
    }
            Merge(0,2), Merge(1, 2),
        self.set_selection_raw(text, selection);
            panic!("line number {} beyond last line {}", line, max_line);
    }
        }
//
    /// Selects the given region and supports multi selection.
        assert_eq!(0, a.offset_of_line(0));
        }
/// associated performance hit across the board for turning it on).
/// Revision 0 is always an Undo of the empty set of groups
/// rather than just this processe's samples).
    out
            SampleEventType::AsyncEnd => 'e',
/// `base_revs`, but modified so that they are in the same order but based on
    /// All the selection regions other than the one being dragged.
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            SampleEventType::AsyncStart => 'b',
        // TODO: refine for upstream (caret appears on prev line)
        Rope::from_str(s.as_ref()).unwrap()
    #[inline]
    /// The semantics are intended to match `str::lines()`.
            GestureType::MultiWordSelect =>
    fn merge_simple_delete_2() {
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
            els: Vec<RopeDeltaElement_>,
                metadata_sort_index: sort_index,
    fn line_of_offset_small() {
        let subset_str = format!("{:#?}", expand_by[0].1);
        for region in self.selection.iter() {
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
/// Returns the file name of the EXE if possible, otherwise the full path, or
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
                    deletes: deletes.clone(),

    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        let snapshot = trace.samples_cloned_unsorted();
    }
        }).collect()
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
            edit: Edit {
use std::string::ParseError;
    }
    Width(f64),
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
                        for line_num in start_line..end_line {
}
                        deletes_from_union
    }
/// something_expensive();
    }
        b.iter(|| {
    /// slices will be nonempty.
    a_ids.intersection(&b_ids).cloned().collect()
    }
        }
/// # Examples
                        DeltaElement::Copy(start, end),
        let d = RopeDelta_::deserialize(deserializer)?;
            trace.closure("test_samples_closure", &["test"], || {});
        last_line += if last_col > 0 { 1 } else { 0 };
    }
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
        };

            sel.add_region(new_region);
// Additional APIs custom to strings
        });

            edit: Edit {
        }

                payload: None,

        assert_eq!(0, a.lines_all().count());
    /// For safety, this will panic if any revisions have already been added to the Engine.
            enabled: AtomicBool::new(false),
        }).collect()
                engine.gc(&to_gc)
    /// assumed to be forward).
                self.highlight_find = visible;
        let mut result = json!({
        assert_eq!(TEST_STR, String::from(engine.get_head()));

                out.push((prio, inserts));
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    /// This is a `Subset` of the "union string" representing the characters
    pub fn prev_grapheme(&mut self) -> Option<usize> {
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
/// See `trace_payload` for a more complete discussion.
    out
    /// the pid or the tid depends on the name of the event
                    self.fragment = &self.fragment[i + 1 ..];
    }
    }
    #[test]
            }
                name, categories, None, start, end - start));
            "ops": ops,
/// Boundary is trailing and determined by a newline char.
            SampleEventType::ObjectCreated => 'N',
    Bytes(usize),
    #[test]
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
                    self.fragment = &self.fragment[i + 1 ..];
    }
/// Is tracing enabled.  Technically doesn't guarantee any samples will be

    fn test_cross_process_samples() {
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());

    /// The process the sample was captured in.
        }).collect();
        for _i in 0..50 {
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        all_samples.push_back(sample);
                                                        soft_breaks.as_mut(),

            Assert(2, "afc".to_owned()),
    }
}
        Merge(usize, usize),
    session_id: SessionId,
            Assert(0, "zacbd".to_owned()),
        }
        self.set_dirty(text);
}
        // ensure that when the samples are sorted by time they come out in a
        // selection state, and for scrolling it into view if needed. This choice can
            if let Edit { ref inserts, .. } = rev.edit {
        let script = vec![
                    let e = &mut self.peers[ei];
        }
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
}
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        use self::MergeTestOp::*;
//! under `Engine::edit_rev`, which is considerably simpler than the usual
/// fn something_else_expensive(value: u32) {

    fn lines_small() {
    fn consume(self) -> (Option<String>, Option<i32>) {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {

        self.tombstones = new_tombstones;
            Some(offset + len_utf8_from_first_byte(b))
            lines: 0,
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
                    inserts: ins,
    fn undo_4() {
            },
            self.mk_new_rev(priority, undo_group, base_rev, delta);

    /// Callers are expected to validate their input.
            Assert(1, "abefg".to_owned()),
        let mut a = Rope::from("hello world");
/// The visual width of the buffer for the purpose of word wrapping.
        for find in self.find.iter() {

    enum MergeTestOp {
    }
        self.deletes_from_union = deletes_from_union;
        let mut b = line_cache_shadow::Builder::new();
/// Contains replacement string and replace options.
            AssertMaxUndoSoFar(0,3),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
/// * `categories` - A static array of static strings that tags the samples in
use std::collections::HashMap;
    /// and currently in a debugging state.
    }
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
/// Get a slice of a `Rope`:
        let mut a = String::new();
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
    fn invalidate_selection(&mut self, text: &Rope) {
    }
    fn compute_transforms_2() {
        let first_line = self.line_of_offset(text, start);

        // We somewhat arbitrarily choose the last region for setting the old-style
            max_undo_so_far,
    }
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                                toggled_groups: &toggled_groups - gc_groups,
                    s = s.transform_shrink(&transformed_inserts);
    fn is_boundary(s: &String, offset: usize) -> bool {
        let mut hls = Vec::new();
    #[inline]
/// Boundary is atomic and determined by codepoint boundary.
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
use find::Find;
/// ```
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        where S: Serializer
    pub fn join(&self, sep: &str) -> String {
                if (flags & FLAG_SELECT) != 0 {
        a.edit_str(1, 9, "era");
    wrap_col: WrapWidth,
    #[cfg(feature = "benchmarks")]
        let script = vec![
        }
        }
    pub fn get_caret_offset(&self) -> Option<usize> {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
            for (i, op) in script.iter().enumerate() {
    edit: Contents,
    pub fn line_of_offset(&self, offset: usize) -> usize {
                                inserts,
fn shuffle(text: &Rope, tombstones: &Rope,
            if let Edit { priority, ref inserts, .. } = r.edit {

 //additional cursor features
                self.set_selection(text, SelRegion::caret(offset));
            name: sample_name,
        assert_eq!(1, r.line_of_offset(a.len()));
}
            if i >= max_undos {
impl RevId {
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
        if let Contents::Edit {priority, inserts, .. } = r.edit {
/// Disable tracing.  This clears all trace data (& frees the memory).
        let mut a = Rope::from("");
    fn compute_transforms_1() {
        #[derive(Serialize, Deserialize)]
                        &mut start[bi]
                let line = line.min(text.measure::<LinesMetric>() + 1);
                offset = prev;
                        hls.push((sel_start_ix, sel_end_ix));
///
            let b = self.current.unwrap().as_bytes()[self.idx];
/// # Arguments
            }
/// 2. Performance optimizations might have per-thread buffers.  Keeping all

                                           client, iv, new_len, px),
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        result

    // * Unicode codepoints
    fn lines_small() {
                        b.add_span(seg.n, 0, 0);

    trace: Option<&'a Trace>,
    }

    }
        MergeTestState::new(6).run_script(&script[..]);
        let rearranged = rearrange(&revs, &base, 7);
    #[cfg(feature = "dict_payload")]
            engine.edit_rev(1, i+1, head, d);
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
}
        trace.instant("4", &["test"]);
    }

///
}
                }
        let expand_by = compute_transforms(a_revs);
        self.find_changed = FindStatusChange::Matches;
        // todo: for now only a single search query is supported however in the future
    }
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    pub fn merge(&mut self, other: &Engine) {
    #[cfg(feature = "benchmarks")]
    fn prev(s: &String, offset: usize) -> Option<usize> {
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
                    } else if !inserts.is_empty() {
    }
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
}
    }
        assert_eq!(trace.get_samples_limit(), 0);
    pub fn enable(&self) {
        where S: Serializer
    }

        cursor.prev_grapheme()
    None,
    (1, 0)
        let b = a.slice(1, 10);
/// Revision 0 is always an Undo of the empty set of groups
                        ops.push(self.build_update_op("copy", None, seg.n));
    /// state and new offset.
    /// Front end's line cache state for this view. See the `LineCacheShadow`
                }
                self.select_line(text, offset, line, false),
    /// the text).
            let b = s.as_bytes()[offset];
        assert_eq!(utf8_offset, 9);
    }

            self.breaks = None
    FlowStart,
    #[test]
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        }
}
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
            }),

                },
                }
    /// For safety, this will panic if any revisions have already been added to the Engine.
// should make this generic, but most leaf types aren't going to be sliceable
            //if self.cursor.is_boundary::<BaseMetric>() {
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
/// assert!("hello world" == String::from(a + b));
    /// The line number is 0-based.
/// # use xi_rope::Rope;
            self.current = next_chunk;
        if let Some(edit) = contents {
}
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

                                deletes_bitxor: new_deletes_bitxor,
                None => {
        });
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                },
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        assert_eq!(Some(10), a.next_codepoint_offset(6));
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        // creation) is:

                              to_payload("test_get_samples"));
        // the front-end, but perhaps not for async edits.
    ///
        let mut a = Rope::from("hello world");
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    #[test]
impl Metric<RopeInfo> for BaseMetric {
                        undone_groups = Cow::Owned(new_undone);
/// ```

impl FromStr for Rope {
    type Err = ParseError;
}
    #[test]
        }
            let b = s.as_bytes()[offset];
#[cfg(test)]
        &self.text
                Some(Cow::from(s))


            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
// Copyright 2016 The xi-editor Authors.
        // Rust is unlikely to break the property that this hash is strongly collision-resistant

    }
/// Create an instantaneous sample with a payload.  The type the payload
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
            self.find.push(Find::new());
    }
                },
                                                        &mut line_cursor,
        }
        }

        };
    }

/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        RevId { session1: 1, session2: 0, num: i as u32 }
        assert_eq!(rope.offset_of_line(1), 3);
    // recompute the prefix up to where the history diverges, but it's not clear that's
            None => text.line_of_offset(offset)
            AssertMaxUndoSoFar(1,3),
    #[test]
    let mut last_priority: Option<usize> = None;
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    }
{
                    self.do_gesture(text, line, column, GestureType::PointSelect)

    }
    bytecount::count(s.as_bytes(), b'\n')


            return 0;
    /// Callers are expected to validate their input.
    /// The name of the event to be shown.
        let mut gc_dels = self.empty_subset_before_first_rev();
            //let prev_pos = self.cursor.pos();
        for find in self.find.iter() {
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
            }
    }
        } else {
                    }
}
            SampleEventType::Metadata => 'M'
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
            "pristine": pristine,
                        ops.push(self.build_update_op("invalidate", None, seg.n));
                    if s.ends_with('\r') {
        cursor.prev_grapheme()
            }
    use interval::Interval;

        while offset < l.len() && !l.is_char_boundary(offset) {
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
        assert_eq!(utf16_units, 9);
/// }
        assert_eq!(Some(10), a.next_codepoint_offset(6));

            self.set_dirty(text);
    /// set with this function, which will make the revisions they create not have colliding IDs.
        sel.collapse();
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
        !self.selection.regions_in_range(offset, offset).is_empty()
        // that into our actual target.
        -#-
            // I think it's a precondition that this will never be called
    /// The `pristine` argument indicates whether or not the buffer has
impl<'a> Cursor<'a, RopeInfo> {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            replace: None,
    #[test]
    fn measure(info: &RopeInfo, _: usize) -> usize {
        trace.closure_payload("x", &["test"], || {
    /// slices will be nonempty.
        }
    }
/// Create an instantaneous sample without any payload.  This is the lowest
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
    fn bench_trace_block_payload(b: &mut Bencher) {
extern crate time;
impl<'a> Iterator for Lines<'a> {

        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    }

                    self.fragment = &self.fragment[i + 1 ..];
    }
        }
#[derive(PartialEq, Debug)]

        assert_tokens(&rope, &[
///
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                        if self.undone_groups.contains(undo_group) {

            sample: None,
//     http://www.apache.org/licenses/LICENSE-2.0
    /// Selects the next find match.
    fn bench_get_tid(b: &mut Bencher) {
                    RopeDeltaElement_::Insert(s) =>
            rendered_styles.push(1);
        -> Self
        self.pending_render = pending
            tid: sys_tid::current_tid().unwrap(),
                }
            // recurse at most once; this doesn't feel great but I wrote myself into a
        };
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    pub fn collapse_selections(&mut self, text: &Rope) {
            self.push_leaf(s[..splitpoint].to_owned());
    /// concurrently it will have count `2` so that undoing one delete but not
}
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        false
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
use selection::{Affinity, Selection, SelRegion};
        let contents = Contents::Edit {
    }
        }

    /// Selects all find matches.
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        //} else {
    /// Returns a tuple of a new `Revision` representing the edit based on the
/// Internally, the implementation uses reference counting (not thread safe, though
    }
/// stored as tracing could still be enabled but set with a limit of 0.

}
        // original values this test was created/found with in the UI:
            Assert(2, "ab".to_owned()),
    use interval::Interval;

        cursor.next::<BaseMetric>()
        self.invalidate_selection(text);
use fixed_lifo_deque::FixedLifoDeque;
    /// None of the find parameters or number of matches changed.
}
        deserializer.deserialize_str(CategoriesTVisitor)
            None => return "",
            Merge(0,1),
        }
            to_payload("some description of the trace"))));
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        };

    pub fn new_instant<S, C>(name: S, categories: C,
        ];

    fn merge_idempotent() {
// you may not use this file except in compliance with the License.
        let trace = Trace::enabled(Config::default());
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        if all_samples.is_empty() {
    fn drop(&mut self) {
/// fn something_expensive() {
        }
    #[bench]

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
/// from the new revisions on the left.
///
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
impl Metric<RopeInfo> for BaseMetric {
            }),
impl Add<Rope> for Rope {
    pub thread_name: Option<StrCow>,
    }
        let trace = Trace::enabled(Config::with_limit_count(10));
/// an argument.
                CategoriesT::StaticArray(c)
impl Sample {
        }
            {
}
    // TODO: insert from keyboard or input method shouldn't break undo group,
        ---#--
    }
    scroll_to: Option<usize>,
            deletes_from_union = match rev.edit {
        let invalid = if all_caret {
        let trace = Trace::enabled(Config::with_limit_count(10));
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        selection.add_region(region);

                    "something", &["benchmark"],
#[cfg(feature = "json_payload")]
            max: offset,
        }

            Merge(0,2), Merge(1, 2),
        engine.edit_rev(1, 1, first_rev, build_delta_1());

        plan.request_lines(first_line, last_line);
    }
                      delta: &Delta<RopeInfo>, client: &Client,
                    b.add_span(seg.n, 0, 0);
            Merge(0,1), // the merge from the whiteboard scan
        // todo: this will be changed once multiple queries are supported
                    deletes: deletes.clone(),
                    let mut selection = self.selection.clone();
        #---
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();

            next_expand_by.push((trans_priority, new_trans_inserts));
/// that sorted would be prohibitively expensive.
                        &mut rest[bi - ai - 1]
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
        if !self.lc_shadow.needs_render(plan) { return; }
    session1: u64,

                name, categories, payload, SampleEventType::DurationBegin)),
        let inserts = parse_subset_list("
            Assert(0, "cbd".to_owned()),
        let first_sample_timestamp = all_samples.front()
                    let b = if bi < ai {
    #[test]
        loop {
    deletes_from_union: Subset,
        ----
        assert!(a != empty);

        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
            Assert(0, "acbd".to_owned()),
    cursor: Cursor<'a, RopeInfo>,
use xi_rope::interval::Interval;
        true
        }
            min: offset,
            if i >= max_undos {
        let snapshot = trace.samples_cloned_unsorted();
                let (ins, _) = delta.factor();
    #[cfg(feature = "benchmarks")]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        }
        ix
                        DeltaElement::Copy(start, end),
        self.revs.push(new_rev);
        // set last selection or word under current cursor as search query
}
                Contents::Undo { .. } => panic!(),
        len
        assert_eq!(utf16_units, 11);
            match *op {
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        let cursor = Cursor::new(self, offset);
                    if let Some(last_selection) = self.selection.last() {
        if self.idx <= self.current.unwrap().len() {
            self.next()
        {
    DurationEnd,
        }
    fn next(&mut self) -> Option<Cow<'a, str>> {
    }
                WrapWidth::Width(px) =>
        // This might be an over-specified test as it will
                offset = prev;
                        deletes: transformed_deletes,
    #[derive(Clone, Debug)]
            next_expand_by.push((trans_priority, new_trans_inserts));
    pub fn line_of_offset(&self, offset: usize) -> usize {
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        self.utf16_size += other.utf16_size;
    fn test_samples_closure() {
            // with offset == s.len(), but be defensive.

        CategoriesT::DynamicArray(c)
                out.push(DeltaOp {

// easily delta-compressed later.
        assert_eq!(trace.get_samples_count(), 0);
}

    #[inline]
    #[should_panic]
        }
    assert!(a[0].rev_id == b[0].rev_id);
                peers.push(peer);
    }

    /// slices will be nonempty.

        // +2 for exe & thread name
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
    fn gc_5() {

        }
                let (last, rest) = self.sel_regions().split_last().unwrap();
    fn utf16_code_units_metric() {
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
}
        trace.instant("1", &["test"]);
        assert_eq!(output, String::from(engine.get_head()));
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
                    }
            SampleGuard::new_disabled()
        let inserts = parse_subset_list("
                }
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
    pub fn lines_all(&self) -> Lines {
               a.lines_all().collect::<Vec<_>>());
        }
                    "something", &["benchmark"], || {},
/// ```
            match *op {
        self.lines_raw(0, self.len())
fn count_utf16_code_units(s: &str) -> usize {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        _ => 4

                }
// limitations under the License.
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// 96 bits which is more than sufficient for this to never happen.
            // I think it's a precondition that this will never be called
        engine.undo([1,2].iter().cloned().collect());
    /// a point that should be scrolled into view.
                engine.gc(&to_gc)
        engine.undo([3].iter().cloned().collect());
                (drag_state.min, max(offset, drag_state.max))
        });
        let mut style_map = style_map.borrow_mut();
    fn merge_simple_delete_1() {
            rev_id: self.next_rev_id(),
///
    fn line_offsets() {

        match *self {
                RenderTactic::Discard => {
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
pub struct Trace {
// See the License for the specific language governing permissions and
            cur_len_utf16 += u.len_utf16();
            SelectAll => self.select_all(text),
pub struct Replace {
            },
    TRACE.instant_payload(name, categories, payload);
    fn measure(info: &RopeInfo, _: usize) -> usize {
pub struct Trace {

            }
                Contents::Edit {inserts, ..} => inserts,

        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
#[derive(Clone, Debug)]
        engine.undo([1].iter().cloned().collect());
    /// Get next codepoint after cursor position, and advance cursor.

use self::Contents::*;
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
                    };
    }
    /// This uniquely represents the identity of this revision and it stays
    }
    #[cfg(feature = "benchmarks")]
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        d_builder.build()
        assert_eq!(snapshot[6].name, "z");
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
            match seg.tactic {
}

            self.breaks = Some(linewrap::linewrap(text, wrap_col));
// limitations under the License.
// limitations under the License.
    #[bench]
        d_builder.build()
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
    fn to_payload(value: &'static str) -> TracePayloadT {

    #[test]
    /// Select entire buffer.


    }
                            deletes_bitxor
                break;
                    }
                }
        // expand by each in expand_by
            self.categories == other.categories &&
        }
/// overhead tracing routine available.
        }

    }
        use self::MergeTestOp::*;
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))

            }
        // +2 for exe & thread name.
        enum RopeDeltaElement_ {
    /// Time complexity: O(log n)
                            rev_id: rev.rev_id,
    }
    pub fn default() -> Self {
    Bytes(usize),
        let initial_rev = engine.get_head_rev_id().token();
// limitations under the License.
            SelectAll => self.select_all(text),
    }
        let mut cursor = Cursor::new(self, offset);
        engine.edit_rev(1, 3, new_head_2, d3);

                        self.revs.push(Revision {
    #[cfg(feature = "benchmarks")]
        let mut rendered_styles = Vec::new();
        let subset_str = format!("{:#?}", expand_by[1].1);
            Assert(1, "afc".to_owned()),
            'O' => SampleEventType::ObjectSnapshot,
    DynamicArray(Vec<String>),
    /// method to be fast even when the selection is large.
                              payload: Option<TracePayloadT>,
        for region in self.selection.iter() {
        }
        use self::ViewEvent::*;

use client::Client;
        });

        assert_eq!(snapshot[3].name, "b");

    // even worth the code complexity.
    ///
    base_sel: Selection,
        Self {
    /// The line number is 0-based, thus this is equivalent to the count of newlines
        let deletes_from_union = parse_subset("-#----#");
        }
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        }
        }
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
        let head_rev = &self.revs.last().unwrap();

#[macro_use]
    }
        let thread = std::thread::current();
        } else {
        let tombstones_a = Rope::from("a");
            MetadataType::ProcessName {..} => "process_name",
            let start = self.line_of_offset(last_text, iv.start());



    /// Tracks whether this view has been scheduled to render.
        self.set_selection(text, sel);


    pub fn enabled(config: Config) -> Self {
            let horiz = None;
            1 if self.selection[0].is_caret() => {
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R

            trace.instant("test_samples_pulse", &["test"]);
}
                text.offset_of_line(line)
    fn accumulate(&mut self, other: &Self) {


        let line = line as usize;
        let mut pos = self.pos();

                         start: usize, end: usize, sel: &[(usize, usize)],
        match rev.edit {
        let offset = self.line_col_to_offset(text, line, col);
use serde_json::Value;
    use std::collections::BTreeSet;
// You may obtain a copy of the License at
/// None if an irrecoverable error occured.
/// ```

                    if let Some(new_gc_dels) = new_gc_dels {
        // a, b, y, z, c, x
            self.unset_find();
        assert_eq!(b, String::from(a));
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    #[test]
            FindAll => self.do_find_all(text),
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));


    fn bench_trace_instant_disabled(b: &mut Bencher) {
    ///
    /// The current contents of the document as would be displayed on screen
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        match symbol {
impl Serialize for Rope {
            return None;

                                        &selections, &hls, style_spans);
        // invert the changes to deletes_from_union starting in the present and working backwards

    }
use xi_rope::tree::Cursor;
        let (leaf, pos) = cursor.get_leaf().unwrap();
                            }
        assert_eq!(snapshot[1].name, "thread_name");

        memchr(b'\n', &s.as_bytes()[offset..])
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
categories_from_constant_array!(6);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },

    /// Width in px units, requiring measurement by the front-end.
        let mut a = Rope::from("");
    }

    out
    pub fn slice(&self, start: usize, end: usize) -> Rope {

    }

}
    /// from the rope.
                println!("running {:?} at index {}", op, i);
                        })
                let mut el = serializer.serialize_tuple_variant("DeltaElement",

        }
/// # Examples
            view_id: view_id,
        assert_eq!(samples[1].name, "local pid");
        }
            Some(right_str)
        ");
                if (flags & FLAG_SELECT) != 0 {
    out
        self.enabled.store(true, AtomicOrdering::Relaxed);
        let text_b = Rope::from("zpbj");

    }
                selections.push((sel_start_ix, sel_end_ix));

                    undo_group: i+1,
/// record it.

    #[bench]
    {
        }
        let expand_by = compute_transforms(revs);
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        }).unwrap_or(text.len());
        Self::with_limit_count(size / size_of::<Sample>())
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    #[test]
/// feature makes the payload a `serde_json::Value` (additionally the library
    {
    }
        self.set_dirty(text);
            rendered_styles.push((sel_start as isize) - ix);

    // TODO: don't construct transform if subsets are empty
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
                self.do_drag(text, line, column, Affinity::default()),
        Lines {
    TRACE.instant(name, categories);
    /// point. Used to optimize undo to not look further back.
    #[cfg(feature = "benchmarks")]
        let mut soln = String::from("h");
    }
                                     payload: Option<TracePayloadT>,
        first_line..(last_line + 1)
        Self::with_limit_bytes(1 * 1024 * 1024)
    use std::collections::BTreeSet;
            Assert(1, "abefg".to_owned()),
    }
///
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
impl CategoriesT {
                metadata_sort_index: None,
            // I think it's a precondition that this will never be called
        }
    /// indicates a search for the next occurrence past the end of the file.
        /// revision that were added by this revision.


            }


        }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        };
                    }
    pub fn push_str(&mut self, mut s: &str) {
        samples.sort_unstable();
                }
        b.iter(|| black_box(time::precise_time_ns()));
    }
    fn next(s: &String, offset: usize) -> Option<usize> {
impl MetadataType {
    }
            }
    1
// you may not use this file except in compliance with the License.
    {
        engine.edit_rev(1, edits+1, head2, d2);
/// See `trace_closure` for how the closure works and `trace_payload` for a
}
    /// The line ending is stripped from the resulting string. The final line ending
        let d = RopeDelta_::deserialize(deserializer)?;
    DurationEnd,
    use std::collections::BTreeSet;
    /// Storage for all the characters that have been deleted  but could
    fn merge_insert_only_whiteboard() {



    TRACE.is_enabled()
    }
    fn gc_6() {
        ];
                }
        // creation) is:

//! this central engine. It provides the ability to apply edits that depend on
        }
        b if b < 0xf0 => 3,
            Contents::Undo { .. } => panic!("can't merge undo yet"),
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
}
        self.lines(0, self.len())
    pub duration_us: Option<u64>,
categories_from_constant_array!(3);
    }
    /// vertical scroll position
            self.next::<BaseMetric>();

        }
        let a = Rope::from("a\rb\rc");
    ThreadName { name: String },
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
            // if using breaks update cursor
                self.add_selection_by_movement(text, Movement::Up),
                }
    /// Selects all find matches.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        }
        }).collect();
        self.set_dirty(text);

    fn merge_simple_delete_2() {
        let mut b = TreeBuilder::new();
                for region in find.occurrences().regions_in_range(start_pos, pos) {

        let res = find_base_index(&a, &b);
    ///
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
            // with offset == 0, but be defensive.
                self.start_drag(offset, offset, offset);
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
pub struct Engine {
/// Usage of static strings is encouraged for best performance to avoid copies.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        // x, a, y, b, z, c
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
/// Boundary is trailing and determined by a newline char.
    }
    where S: Into<StrCow>, C: Into<CategoriesT>
            // shouldn't be called with this, but be defensive
        Cow::from(b)
            Sample::new_instant("remote pid", &[], None)];
        if line > max_line {
    fn find_common_1() {
/// # Examples
            Find { chars, case_sensitive, regex, whole_words } =>
use client::Client;
            Some(region) => {
/// samples are ordered chronologically for several reasons:

            Merge(0,2), Merge(1, 2),
    }
        (self.pid, self.timestamp_us).hash(state);
                }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
pub struct Config {
        }
    #[test]
        engine.gc(&to_undo);

            cur_len_utf8 += u.len_utf8();
        {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        (Revision {
        match self.breaks {
                        }
    fn next(&mut self) -> Option<Cow<'a, str>> {
    /// The current contents of the document as would be displayed on screen
                        let start_line = seg.our_line_num;
    DynamicArray(Vec<String>),

}
        engine.edit_rev(1, 2, new_head, d2);
        let mut update = json!({
}
/// xi_trace::trace("something happened", &["rpc", "response"]);
        if offset == s.len() {
        --#-
        let replacement = match self.selection.last() {
    /// inserted, including the ones that were later deleted, in the locations

        assert_eq!(Some(2), b.next_codepoint_offset(0));
            undone_groups: BTreeSet::new(),
            }
/// ```rust
    /// the heap, counters, etc); just the data itself.
/// ```
}
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
//
        /// Just the `symmetric_difference` (XOR) of the two sets.
    #[test]
        --#--
}
                MergeTestOp::AssertAll(ref correct) => {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    /// Note: `edit` and `edit_str` may be merged, using traits.
    /// You could construct the "union string" from `text`, `tombstones` and
    /// update cycle. This should be a last resort, updates should generally cause
            SampleEventType::FlowEnd => 'f',
        while !s.is_empty() {
        Self {
        ];
pub type TracePayloadT = serde_json::Value;
/// Returns the operations in `revs` that don't have their `rev_id` in
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
                } else {

            for (i, op) in script.iter().enumerate() {
            self.start_drag(offset, offset, offset);
            match c.edit {
        let mut soln = String::from("h");
                let (nl, noffset) = self.next_leaf()?;
        });
        match cmd {
            rebased_deletes_from_union.union(to_delete)
    /// Update front-end with any changes to view since the last time sent.

        }
    fn eq_med() {
            rendered_styles.push(1);
            return self.revs.len();
    }
        let first_rev = engine.get_head_rev_id().token();


        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {

        assert_eq!(rope.line_of_offset(15), 3);
#[inline]
                // Deprecated (kept for client compatibility):
                                deletes_bitxor: new_deletes_bitxor,
        let style = style_map.merge_with_default(style);
}
        assert_eq!(Some(1), a.next_codepoint_offset(0));
            a.push('a');
    fn next(s: &String, offset: usize) -> Option<usize> {
/// ```
        let a = Rope::from("");
        }
    /// Selects an entire word and supports multi selection.
        let mut retain_revs = BTreeSet::new();


}

        match rev.edit {
impl PartialEq for CategoriesT {
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
    fn to_payload(value: &'static str) -> TracePayloadT {
pub fn count_newlines(s: &str) -> usize {
    // https://github.com/serde-rs/serde/issues/1189 is fixed.

        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
    /// storage allocated will be limit * size_of<Sample>

                        let _ = s.pop();
        self.height
    {
        first_line..(last_line + 1)
            .map(|pos| offset + pos + 1)
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
            ModifySelection(movement) => self.do_move(text, movement, true),
#[cfg(feature = "dict_payload")]
        }).unwrap_or(text.len());

                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    fn next(s: &String, offset: usize) -> Option<usize> {

    for rev in revs.iter().rev() {
                (!region.is_upstream() && c == start_pos) ||
               a.lines_all().collect::<Vec<_>>());
                    self.fragment = "";
        let mut result = String::new();
impl<'a> Iterator for ByteIter<'a> {
            // Do it the other way on the copy
        self.set_selection_raw(text, selection);
            s.as_bytes()[offset - 1] == b'\n'
        self.join(",").serialize(serializer)
/// the session ID component of a `RevId`
        assert_eq!("zcpbdj", String::from(&text_2));
    }
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        let edit_iv = Interval::new_closed_open(start, end);
    {

                            }
        }
    /// the heap, counters, etc); just the data itself.
    }
            self.first_line = line - (self.height - 1);
            self.start_drag(offset, offset, offset);
    }
    fn thread_name() -> Option<StrCow> {
                            rendered_lines.push(line);
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
            selection: SelRegion::caret(0).into(),

    //TODO: implement lines_raw using ranges and delete this
        let tombstones = Rope::from("27");
#[cfg(feature = "benchmarks")]

            let _x = trace.block("something", &[]);
/// that sorted would be prohibitively expensive.



        assert!(empty == empty);
        });
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
            let mut len = 1;
    #[test]
          F: FnOnce() -> R
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
        self.first_line = first;
    pub fn default() -> Self {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
}

            Assert(0, "acpbdj".to_owned()),
        let (ins_delta, deletes) = delta.factor();
    }
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    /// of the chunks is indeterminate but for large strings will generally be

    // this should have the same behavior, but worse performance

}
    ///

    use serde_test::{Token, assert_tokens};
        selection.add_region(region);
    {
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
                    if seg.validity == line_cache_shadow::ALL_VALID {

    }
                deletes: new_deletes,
impl Hash for Sample {
                },
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
    /// if it is non-empty. It needs to be a separate commit rather than just
            let splitpoint = if s.len() > MAX_LEAF {
        // multiple queries; select closest occurrence
                         styles: &StyleMap, style_spans: &Spans<Style>,
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
                    RopeDeltaElement_::Copy(start, end) =>
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    }
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
///
        let (leaf, pos) = cursor.get_leaf().unwrap();
    /// Invalidates the styles of the given range (start and end are offsets within
}
}
///
        }
        #[derive(Serialize, Deserialize)]
        match self.inner.next() {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
        self.find_changed = FindStatusChange::Matches;
            args: Some(SampleArgs {
categories_from_constant_array!(0);
        *self = b.build();
impl Metric<RopeInfo> for LinesMetric {
    pub payload: Option<TracePayloadT>,
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
    }
                              duration_ns: u64) -> Self
        all_samples.reset_limit(0);
/// fn something_expensive() -> u32 {
            let splitpoint = if s.len() > MAX_LEAF {
                                         self, text, modify);
                Some(filename) => {
            // Do it the other way on the copy
    /// What kind of sample this is.
                    } else {
                }
    #[serde(skip_serializing_if = "Option::is_none")]
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
    {
                    priority, inserts, deletes,
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
    }
/// supported as an optimization when only one reference exists, making the
        }
    #[serde(rename = "name")]
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        engine.edit_rev(1, 2, first_rev, d1.clone());
    }
            replace: None,
extern crate log;
        // ensure that when the samples are sorted by time they come out in a
                            }

    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
pub struct ByteIter<'a> {
    }
        let inserts = parse_subset_list("
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        b.add_span(height, 0, 0);
        where D: Deserializer<'de>,
    fn arr_eq(&self, other: &Vec<String>) -> bool {

        self.find.iter().map(|find| {

fn initial_revision_counter() -> u32 {
/// std::mem::drop(trace_guard); // finalize explicitly if
    /// terminating newline.
        inserts: Subset,
    pub fn enable_config(&self, config: Config) {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        assert_eq!(utf8_offset, 9);

        self.enabled.store(false, AtomicOrdering::Relaxed);

    fn merge_insert_only_whiteboard() {
                el.end()
/// }
            a = a + Rope::from(&c);
        AssertAll(String),
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
        let subset_str = format!("{:#?}", expand_by[0].1);
            match self.wrap_col {
            self.shrink_to_fit();
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'

        cursor.prev::<BaseMetric>()
//! info.
        // TODO: simplify this through the use of scopeguard crate
            black_box(time::precise_time_ns());
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            }

    }
        let a = Rope::from("a\nb\nc");

        } else {
        false
        RopeInfo {
            //self.cursor.set(self.end);
            edit: Edit {
        assert_eq!(Some(8), a.next_grapheme_offset(0));
/// Find a set of revisions common to both lists
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        }
        assert_eq!(trace.get_samples_count(), 5);
        ");
                }
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
                warn!("Usage of click is deprecated; use do_gesture");
                }
    }
        let plan = RenderPlan::create(height, self.first_line, self.height);
pub fn enable_tracing_with_config(config: Config) {
        cursor.next::<BaseMetric>()
            Click(MouseAction { line, column, flags, click_count }) => {
            let splitpoint = if s.len() > MAX_LEAF {
    ///
            text: Rope::default(),
}

    pub fn merge(&mut self, other: &Engine) {
    }
            event_type: event_type,
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
}
                    if seg.validity == line_cache_shadow::ALL_VALID {
    #[test]
                c.provide_context(&pl, self.pos() - poffset);
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
            thread_name: Sample::thread_name(),
        use serde::de::Visitor;
        // TODO(vlovich): optimize this path to use the Complete event type
        // probably change as the recording internals change.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    }
            Assert(1, "ab".to_owned()),
                selection.add_region(SelRegion::caret(region.max()));
/// Transform `revs`, which doesn't include information on the actual content of the operations,
            }
///
            SampleEventType::FlowEnd => 'f',

            self.event_type == other.event_type &&

    fn sample_name(&self) -> &'static str {

            for find in self.find.iter() {
/// from multiple distributed sources (i.e. you want to sort the merged result
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                continue;
        Self::with_limit_count(size / size_of::<Sample>())
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
            }
            base_len: usize
        engine.edit_rev(1, edits+1, head2, d2);
    #[test]
                Some(i) => {
                              duration_ns: u64) -> Self
                Some(Cow::from(s))
            utf16_size: 0,
        assert_eq!(1, expand_by[0].0.priority);
    /// Time complexity: technically O(n log n), but the constant factor is so
            Assert(3, "ab".to_owned()),
/// with.  By default, the type is string-like just like name.  If compiled with
            Assert(2, "ab".to_owned()),
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        assert_eq!(trace.get_samples_limit(), 20);
    }
    use super::*;
    /// Time complexity: O(log n)
        self.samples.lock().unwrap().limit()
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
    let inverse_tombstones_map = old_deletes_from_union.complement();
use self::Contents::*;
        assert_eq!(correct, res);
    pub fn next_codepoint(&mut self) -> Option<char> {
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
    #[cfg(feature = "benchmarks")]
        d_builder.delete(Interval::new_closed_open(10, 36));
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
            Merge(0,1),
                            max_undo_so_far: rev.max_undo_so_far,

use unicode_segmentation::GraphemeIncomplete;
        (line, offset - self.offset_of_line(text, line))

// Licensed under the Apache License, Version 2.0 (the "License");
            };
        if let Some(last) = self.revs.last() {
        self.enable_config(Config::default());
            }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        --#--
                    new_deletes = new_deletes.transform_expand(inserts);
        if let Some((l, offset)) = self.get_leaf() {
                Undo { toggled_groups, deletes_bitxor } => {
                true => x.end,
        -##-
        // same span exists in both sets (as when there is an active selection)
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
                self.do_gesture(text, line, col, ty),
        assert_eq!(snapshot[0].name, "process_name");
pub type RevToken = u64;
        let self_iv = Interval::new_closed_closed(0, self.len());
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
            }
    /// return if a delete is un-done or an insert is re- done.
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));

        as_vec
/// stored as tracing could still be enabled but set with a limit of 0.
    }

        }
        let mut cur_len_utf16 = 0;
/// However, anything that can be converted into a Cow string can be passed as

        let mut a = Rope::from("hello world");
        if !cursors.is_empty() {
impl Config {
}

    /// Update front-end with any changes to view since the last time sent.
                } else {
    // even worth the code complexity.
        let (first_line, _) = self.offset_to_line_col(text, region.min());
    #[test]
    type Item = &'a str;
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_eq!(2, expand_by[1].0.priority);
///
        let plan = RenderPlan::create(height, self.first_line, self.height);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    }
                priority, undo_group, deletes,

        match self.selection.len() {

    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
/// Represents a transform from one rope to another.
    fn merge_simple_delete_2() {
                while cursor.pos() < region.max() {
    let mut last_priority: Option<usize> = None;
        b.push('\n');
                        for line_num in start_line..end_line {
        if initial_contents.len() > 0 {
impl CategoriesT {
//     http://www.apache.org/licenses/LICENSE-2.0
        engine.edit_rev(1, 2, first_rev, d1.clone());
                    if invert_undos {

        let text_a = Rope::from("zcbd");
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
    /// If the cursor is at the end of the leaf, advances to the next leaf.
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
            Merge(0,2), Merge(1, 2),
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
               a.lines_all().collect::<Vec<_>>());
            .map(|pos| offset + pos + 1)
        (Revision {
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        }
            let deletes = Subset::new(inserts.len());
        };
            let b_to_merge = &other.revs[base_index..];

        /// The set of groups toggled between undone and done.
        assert_eq!(rope.offset_of_line(4), rope.len());
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
        self.deletes_from_union = deletes_from_union;
            pid: sys_pid::current_pid(),
        ---#-
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
                },
            Sample::new_instant("local pid", &[], None),
            // corner and I'm lazy -cmyr
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
    }
        -> Self
        let mut all_samples = self.samples.lock().unwrap();
    /// terminating newline.
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        where S: Into<StrCow>, C: Into<CategoriesT>

            Assert(0, "acpbdj".to_owned()),

        if !new_inserts.is_empty() {
        } else {

            } else {
                        let mut line_cursor = Cursor::new(text, offset);

        let (new_text, new_tombstones) =
        let inserted = inserts.inserted_subset();
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.

        // insert a character at the beginning
    #[bench]
    pub thread_name: Option<StrCow>,
    }
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
    }
impl FromStr for Rope {
        let line = self.line_of_offset(text, offset);
        self.set_selection(text, sel);
        ---#--
use styles::{Style, ThemeStyleMap};
    All,
    fn next(&mut self) -> Option<&'a str> {
                            }
        trace.closure_payload("x", &["test"], || {
                }
        self.selection = sel;
    1
    ///
    /// the frontend.

        where S: Serializer

        let script = vec![
    fn utf16_code_units_metric() {
        assert_eq!(0, a.lines_all().count());

/// ```
                }
        self.session = session;
            }
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
            thread_name: Sample::thread_name(),
        if let Some((l, offset)) = self.get_leaf() {
        for _ in 0..in_measured_units {
    }
        let mut ops = Vec::new();
}
    {
}
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
/// ```
                        if n_skip > 0 {
        assert_eq!(None, a.prev_grapheme_offset(0));
        self.lc_shadow = b.build();
    }
            },
                        _ => break
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        let after_first_edit = engine.get_head_rev_id().token();
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
        assert_eq!(0, r.line_of_offset(a.len() - 1));
                }
        self.invalidate_selection(text);
        assert_eq!(Some(9), b.next_codepoint_offset(5));
pub struct SampleGuard<'a> {

extern crate time;

        if self.is_enabled() {
    #[serde(rename = "dur")]
            Replace { chars, preserve_case } =>
    first_line: usize,
            duration_us: None,
categories_from_constant_array!(6);
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
    }
        }
        });
    }
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        where D: Deserializer<'de>,
        let trace = Trace::disabled();
            let after = full_priority >= trans_priority;  // should never be ==
            }
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
            Assert(0, "acrpbdzj".to_owned()),
        } else {
                   style_spans: &Spans<Style>, line_num: usize) -> Value
impl Serialize for DeltaElement<RopeInfo> {
        // todo: this will be changed once multiple queries are supported

        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    let mut out = Vec::with_capacity(revs.len());
/// assert!("hello world" == String::from(a + b));
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
        self.enabled.load(AtomicOrdering::Relaxed)
                    s = s.transform_shrink(&transformed_inserts);
            Some(Cow::Borrowed(mut s)) => {
    }
}
        let end = time::precise_time_ns();
#[inline]

// The advantage of using a session ID over random numbers is that it can be
    /// The name of the event to be shown.

                s.len()
            }
            // recurse at most once; this doesn't feel great but I wrote myself into a
        ChunkIter {
}
            Assert(1, "abc".to_owned()),
                WrapWidth::None => (),

    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
}
    }
    }
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
                    let full_path = exe_name.into_os_string();
            Merge(0,2), Merge(1, 2),
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        let (metadata_name, sort_index) = meta.consume();
        }

            let b = self.current.unwrap().as_bytes()[self.idx];


///
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        let first_rev = engine.get_head_rev_id().token();
        b.iter(|| black_box(trace.instant_payload(
        assert_eq!(2, r.line_of_offset(r.len()));
        for _ in 0..line_len {
    }
// limitations under the License.
    /// The largest undo group number of any edit in the history up to this
    }

        let mut sel = Selection::new();
            _ => None
        }
            "something", &["benchmark"],
        let a = Rope::from("\n");
        let revs = basic_insert_ops(inserts, 1);
                name, categories, Some(payload.into()), start, end - start));
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
            'n' => SampleEventType::AsyncInstant,
    }
                        let mut line_cursor = Cursor::new(text, offset);
                    ops.push(self.build_update_op("invalidate", None, seg.n));
        leaf.as_bytes()[pos]

                if !inserts.is_empty() {
                let mut sel = Selection::new();
                              to_payload("test_get_samples"));

        }
    }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            AssertMaxUndoSoFar(1,1),
        // find the lowest toggled undo group number
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
        let next_line_offset = self.offset_of_line(text, line + 1);
    pub fn with_limit_count(limit: usize) -> Self {
        debug_subsets(&rebased_inserts);
        let first_rev = engine.get_head_rev_id().token();

        engine.edit_rev(1, 1, initial_rev, d1.clone());
            Some(right_str)

    }

    }
}
    }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// All the selection regions other than the one being dragged.
            .map(|(i, _)| i)
        client.update_view(self.view_id, &params);
            pid: sys_pid::current_pid(),

        let params = json!({
    }
    inserts: InsertDelta<RopeInfo>,
    // TODO: insert from keyboard or input method shouldn't break undo group,
            Move(movement) => self.do_move(text, movement, false),
    }
        &self.selection
    }
    }
        b.set_dirty(true);

            Merge(5,4),
    }
            self.set_selection(text, sel);

impl PartialOrd for Sample {
        // a, b, y, z, c, x
        ");
                self.set_dirty(text);
}
        while let Err(incomp) = prev_boundary {
                SelectionModifier::AddRemovingCurrent => {
pub fn samples_cloned_sorted() -> Vec<Sample> {
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
            for (i,rev) in self.revs.iter().enumerate().rev() {
/// as opposed to thousands of revisions.
    /// The maximum number of samples that should be stored.
const MAX_LEAF: usize = 1024;
    // * Unicode codepoints
    #[cfg(feature = "benchmarks")]
    }
        let mut a = String::new();
///
//! conceptually represents the current text and all edit history for that

    #[test]
    // trace_block()/trace_closure
impl NodeInfo for RopeInfo {
            Assert(2, "afc".to_owned()),
        assert_eq!(trace.is_enabled(), true);
    pub pid: u64,

        let deletes_from_union = Subset::new(0);
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
                    let mut selection = self.selection.clone();
    }
        }
            GestureType::PointSelect => {
    }
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
impl View {
            Some(offset - len)
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
pub fn is_enabled() -> bool {
            Assert(0, "acpbdj".to_owned()),
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
// easily delta-compressed later.

///
        #------
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
    }
            drag_state: None,

    where S: Into<StrCow>, C: Into<CategoriesT>
    #[inline]
        let utf8_offset = 13;
        let result = closure();
    fn add(self, rhs: Rope) -> Rope {
                }
    match b {
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
    #[test]
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
            //}
use std::cmp::{min,max};
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    }
        }

        let trace = Trace::enabled(Config::with_limit_count(20));
    /// Returns a tuple of a new `Revision` representing the edit based on the
                }
                            }
    // Delta that deletes the right bits from the text
#[macro_use]
            cur_len_utf16 += u.len_utf16();
    bytecount::count(s.as_bytes(), b'\n')
        assert_eq!(1, expand_by.len());

//See ../docs/MetricsAndBoundaries.md for more information.
        assert_eq!(1, a.line_of_offset(3));
    {
            height: 10,

categories_from_constant_array!(3);

            pid: sys_pid::current_pid(),
        let closest_occurrence = self.find.iter().flat_map(|x|
        }
/// rather than just this processe's samples).
    None,

        let b = a.slice(2, 4);
                let mut cursor = Cursor::new(&text, region.min());
    pub fn get_samples_limit(&self) -> usize {
    ///

    // TODO find the maximum base revision.

                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    }
            // I think it's a precondition that this will never be called
    }
        ];
    #[cfg(feature = "benchmarks")]
        while offset < l.len() && !l.is_char_boundary(offset) {
                if !region.is_caret() {

        } else {
        let trace = Trace::disabled();
        match self.breaks {
        // current recording mechanism should see:
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            Some(ref breaks) => {
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        /// Used to order concurrent inserts, for example auto-indentation
                while cursor.pos() < region.max() {
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
                self.highlight_find = visible;
            AddSelectionBelow =>
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
    fn arr_eq(&self, other: &[&'static str]) -> bool {
            black_box(trace.block_payload(
// Licensed under the Apache License, Version 2.0 (the "License");
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
                for region in find.occurrences().regions_in_range(start_pos, pos) {
            if let Edit { ref inserts, .. } = rev.edit {
                len += 1;
            'D' => SampleEventType::ObjectDestroyed,
        assert!(r.clone().slice(0, a.len()) == a_rope);

            while !s.is_char_boundary(splitpoint) {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
            Assert(2, "ab".to_owned()),
        let r = Rope::from(&a[..MAX_LEAF]);
/// Returns all the samples collected so far ordered chronologically by
    }
                    undo_group: i+1,
pub struct Sample {
        samples.sort();
                        hls.push((sel_start_ix, sel_end_ix));
    /// Does a drag gesture, setting the selection from a combination of the drag
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    #[cfg(feature = "benchmarks")]

                if !region.is_caret() {
                Some(filename) => {
use xi_rope::interval::Interval;
        assert_eq!(0, b.line_of_offset(0));
    where S: serde::Serializer {
                self.set_selection(text, SelRegion::caret(offset));
            }
        }
        let deletes_from_union = Subset::new(0);
            Merge(1,0),

    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {

        let mut leaf_offset = pos - offset;
    /// Find what the `deletes_from_union` field in Engine would have been at the time
        assert_eq!(0, a.lines_all().count());
        // We somewhat arbitrarily choose the last region for setting the old-style
///
                if (flags & FLAG_SELECT) != 0 {
        });
            // with offset == 0, but be defensive.
    None,
        ");

            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
            Assert(1, "bdefg".to_owned()),
    fn from_chrome_id(symbol: char) -> Self {
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
    /// Returns the largest undo group ID used so far
    #[cfg(feature = "benchmarks")]
        for mut find in self.find.iter_mut() {

    }
                metadata_name: None,
        }
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    deletes_from_union: Subset,
    /// should be as unlikely to collide as two random u64s.
    // recompute the prefix up to where the history diverges, but it's not clear that's
            let mut len = 1;
        }
        }
    // Send the requested lines even if they're outside the current scroll region.
        }
#![cfg_attr(feature = "cargo-clippy", allow(
}
        (self.session1, self.session2)
            first_line: 0,
            sel.add_region(region);
    /// want to set the process name (if provided then sets the thread name).
    /// Replacement string.
            event_type: event_type,
                let mut sel = Selection::new();
#[derive(Clone, Copy)]


            }
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        trace.instant("1", &["test"]);
                // TODO create InsertDelta directly and more efficiently instead of factoring
    fn edit_rev_undo_3() {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        MergeTestState::new(3).run_script(&script[..]);
            self.set_dirty(text);
    }
#[inline]
    }
            if sel_end_ix > sel_start_ix {
        }


        // expand by each in expand_by
    where S: Into<StrCow>, C: Into<CategoriesT>
        let inserts_3 = parse_subset_list("
                }
fn find_leaf_split_for_bulk(s: &str) -> usize {

            name: name.into(),
    replace_changed: bool,
    -> SampleGuard<'a>
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();

/// Returns all the samples collected so far ordered chronologically by
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    ProcessLabels { labels: String },
                    let mut selection = self.selection.clone();
            wrap_col: WrapWidth::None,

                },
/// Returns the operations in `revs` that don't have their `rev_id` in
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let trace = Trace::enabled(Config::with_limit_count(10));

            pos
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);

    }
                }
        let deletes_from_union_a = parse_subset("-#---");
            utf16_size: count_utf16_code_units(s),
    use multiset::Subset;
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    /// For safety, this will panic if any revisions have already been added to the Engine.
pub fn enable_tracing_with_config(config: Config) {
            GestureType::MultiWordSelect =>
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        for i in ((edits-max_undos)..edits).rev() {
        assert_eq!(trace.get_samples_count(), 0);
impl TreeBuilder<RopeInfo> {
        }
            min: offset,


            Gesture { line, col, ty } =>
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
/// Then offset=1 is invalid.
        assert_eq!(utf16_units, 9);
        ids.iter().cloned().map(|i| {
        let mut cur_len_utf8 = 0;
/// the session ID component of a `RevId`
                        let mut rendered_lines = Vec::new();
impl<'a> Iterator for ChunkIter<'a> {

            trace.instant("c", &["test"]);
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
/// patterns. Any large runs of typing in the same place by the same user (e.g
        for &(sel_start, sel_end) in sel {
            find: Vec::new(),
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {

    pub fn select_range(&mut self, text: &Rope, offset: usize) {
//! CRDT implementation techniques, because all operations are serialized in
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    /// that are currently deleted, and thus in `tombstones` rather than
        let mut all_samples = self.samples.lock().unwrap();
            inner: self.iter_chunks(start, end),
/// from the new revisions on the left.
        }).collect::<Vec<FindStatus>>()
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    let mut selection = self.selection.clone();
    // of the union string length *before* the first revision.
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
    let inverse_tombstones_map = old_deletes_from_union.complement();
}
#[cfg(test)]
                    }
                        let offset = self.offset_of_line(text, start_line);
        d_builder.delete(Interval::new_closed_open(58, 61));

        let subset_str = format!("{:#?}", expand_by[0].1);
        let mut selection = self.selection.clone();
}
            sample: Some(Sample::new_duration_marker(
        let mut line_num = 0;  // tracks old line cache
    #[bench]

        let undone = self.undone_groups.contains(&undo_group);
    /// An arbitrary payload to associate with the sample.  The type is

    pub thread_name: Option<StrCow>,
            engine.undo(undos);

                        first_sample_timestamp,
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

    }
    fn bench_trace_instant(b: &mut Bencher) {
    fn merge_insert_only_whiteboard() {
    fn can_fragment() -> bool { false }
    pub fn iter_chunks_all(&self) -> ChunkIter {
        let d = RopeDelta_::deserialize(deserializer)?;

    //
    // this is the cost contributed by the timestamp to
                        let (inserts, deletes) = if gc_dels.is_empty() {
                    // TODO: update (rather than re-render) in cases of text valid

                    result = cow_append(result, self.fragment);
        #[derive(Serialize, Deserialize)]
pub struct Config {
    ThreadName { name: String },
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                                  style_spans, &plan, pristine);
                             client: &Client, style_spans: &Spans<Style>)
        CategoriesT::DynamicArray(c)
        assert_eq!(1, expand_by.len());
                    to_payload(("some description of the closure")))));
}
    // this should have the same behavior, but worse performance
            MetadataType::ThreadName {..} => "thread_name",
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            {
                return None;
            word_cursor.select_word()
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
                c.provide_context(&pl, self.pos() - poffset);
    fn arr_eq(&self, other: &Vec<String>) -> bool {
    }
            AssertMaxUndoSoFar(0,3),
        self.scroll_to_cursor(text);
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {

    /// height of visible portion
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
                (drag_state.min, max(offset, drag_state.max))
        // Any edit cancels a drag. This is good behavior for edits initiated through

                if !region.is_caret() {
            self.set_dirty(text);
        let res = find_base_index(&a, &b);
/// # Performance

        // the smallest values with which it still fails:
    {
                if self.fragment.is_empty() {

    /// unsaved changes.
}
        ---#--
    /// return if a delete is un-done or an insert is re- done.
/// first can make it ~1.7x slower than a regular trace.
    fn next(s: &String, offset: usize) -> Option<usize> {

        self.height = last - first;
        ix
    #[serde(rename = "xi_payload")]
    /// Return the line number corresponding to the byte index `offset`.

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    Matches
/// # Examples
        for u in s.chars() {
        self.sample_limit_count * size_of::<Sample>()
                                deletes,
            SampleEventType::ObjectCreated => 'N',
        &leaf[offset..end]
        let rev = Revision {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
                (region.is_upstream() && c == pos) ||
/// A static string has the lowest overhead as no copies are necessary, roughly
}
            rebased_deletes_from_union.union(to_delete)
        let (start, end) = iv.start_end();
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
            timestamp_us: ns_to_us(timestamp_ns),
        a.push('\n');
            Assert(0, "zacbd".to_owned()),
                }

        assert_eq!("zcpbdj", String::from(&text_2));
    if a.is_empty() {
#[inline]
    ObjectDestroyed,
    /// Sorting priority between processes/threads in the view.
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
            next_expand_by.push((trans_priority, new_trans_inserts));
        offset
        }
    }
            find.find_status(matches_only)
        //};
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
            SampleEventType::Instant => 'i',
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    fn invalidate_selection(&mut self, text: &Rope) {
            let _ = trace.block("test_samples_block", &["test"]);
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
//
    end: usize,
///
        let mut d = TracePayloadT::with_capacity(1);
                    text.slice_to_string(region.min(), region.max())
        }
            SelectionIntoLines => self.do_split_selection_into_lines(text),
        ];
    }
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))

    /// End of the region selected when drag was started.
        String::from(&r)
        // This might be an over-specified test as it will
//! There is also a full CRDT merge operation implemented under
#[derive(Clone, Copy)]
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Merge(0,2), Merge(1, 2),
use linewrap;
    /// set with this function, which will make the revisions they create not have colliding IDs.
        info.lines
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));

        // and it only needs to be consistent over one execution.
            self.next::<BaseMetric>();
        });
            let sel = {
            );
#[macro_use]
    /// want to set the process name (if provided then sets the thread name).
    /// 96 bits which is more than sufficient for this to never happen.
            args: Some(SampleArgs {
                    a.merge(b);
        b.iter(|| black_box(sys_tid::current_tid()));

        // and it only needs to be consistent over one execution.

    #[cfg(feature = "benchmarks")]
    1
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            Assert(1, "acb".to_owned()),
            Assert(0, "cbd".to_owned()),
                peers.push(peer);
                self.start_drag(offset, offset, offset);
    let mut out = Vec::new();
            name: name.into(),
}
                    to_payload(("some payload for the block"))));
        assert_eq!(snapshot[2].name, "a");
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
            drag_state: None,

        let mut revs_3 = basic_insert_ops(inserts_3, 2);
            'D' => SampleEventType::ObjectDestroyed,
        assert_eq!(snapshot[1].name, "thread_name");
                        DeltaElement::Insert(Rope::from(s)),
            'N' => SampleEventType::ObjectCreated,
    ///
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            's' => SampleEventType::FlowStart,
use std::borrow::Cow;
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();

                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
        let height = self.line_of_offset(text, text.len()) + 1;
///
impl<T: AsRef<str>> From<T> for Rope {
    }
        if let Some(edit) = contents {
pub fn samples_cloned_sorted() -> Vec<Sample> {
    pub fn next_grapheme(&mut self) -> Option<usize> {
        assert_eq!(trace.get_samples_count(), 0);
        assert_eq!(snapshot[3].name, "a");
        assert_eq!(Some(9), a.next_grapheme_offset(3));
        self.scroll_to_cursor(text);
                first_sample_timestamp,
        if self.replace_changed {
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            let next_chunk = self.inner.next();
            priority: 0,
        fn run_op(&mut self, op: &MergeTestOp) {
        if self.is_enabled() {
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
                Delta {
        assert_eq!(5, a.offset_of_line(3));
/// Represents the current state of a document and all of its history
        r.slice_to_string(0, r.len())
          F: FnOnce() -> R
        b.iter(|| black_box(time::precise_time_ns()));
    revs: Vec<Revision>,
                            deletes_bitxor
    sample_limit_count: usize
        self.set_selection(text, SelRegion::caret(offset));
                    let transformed_inserts = inserts.transform_expand(&s);
        let style = style_map.merge_with_default(style);
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        self.text = new_text;
    }
    fn delta_rev_head() {
        samples[0].pid = 1;
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        let mut cursor = Cursor::new(self, offset);
            let horiz = None;
                selections.push((sel_start_ix, sel_end_ix));
    }
//!
                last_priority = Some(priority);
            }

pub struct Trace {
        let last = max(last, 0) as usize;
    selection: Selection,
use find::Find;
    }
    ///

                        sample.tid));

                            warn!("Failed to get string representation: {:?}", e);
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    AsyncInstant,
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    if x < min {
        let text_b = Rope::from("zpbj");
use selection::{Affinity, Selection, SelRegion};
            match seg.tactic {
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        self.set_selection_for_edit(text, new_sel);

        ---#--
            black_box(time::precise_time_ns());
        assert_eq!(rope.line_of_offset(1), 0);
        for find in &mut self.find {

            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
                continue;
    }
}
        engine.undo([3].iter().cloned().collect());
            self.set_selection(text, selection);

extern crate serde;
            }
    #[test]
                undo_group,
}

            thread_name: Sample::thread_name(),
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    TRACE.enable();
            //if self.cursor.is_boundary::<BaseMetric>() {
/// an argument.
        let text = Rope::from("13456");
use multiset::{Subset, CountMatcher};
            let inserted = inserts.inserted_subset();
                    if let Some(new_gc_dels) = new_gc_dels {

                        let new_deletes_bitxor = if gc_dels.is_empty() {
    ns / 1000
        }
        all_samples.reset_limit(0);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {

}
        let initial_rev = engine.get_head_rev_id().token();
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    #[test]
        let inserts = parse_subset_list("
    }
        }
    }
            }
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        // and it only needs to be consistent over one execution.
        let styles = self.render_styles(client, styles, start_pos, pos,
        assert_eq!(snapshot[0].name, "process_name");
    }
        assert_eq!(0, a.line_of_offset(1));

        self.samples.lock().unwrap().limit()
    }
                },

        use std::hash::{Hash, Hasher};
        let mut sel = Selection::new();
}
    ///
        s.is_char_boundary(offset)
/// 3. You may not care about them always being sorted if you're merging samples
        delta.serialize_field("base_len", &self.base_len)?;
                Rope::from(s1.clone()),
        
                    self.fragment = "";
    }
    // trace_block()/trace_closure
            args: Some(SampleArgs {
            tid: sys_tid::current_tid().unwrap(),
                                priority,
///
                self.set(pos);
    pub fn enable_config(&self, config: Config) {
                    let mut e = &mut self.peers[ei];
    sample_limit_count: usize

    #[test]
                                                    self.size.width));
    #[test]
categories_from_constant_array!(3);
            };
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos

            self.next::<BaseMetric>();
pub type TracePayloadT = StrCow;


    fn offset_of_line_small() {

        in_base_units
            }
        let mut update = json!({
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
}

        }
mod tests {
            self.wrap_col = WrapWidth::Bytes(wrap_col);
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
    use test::black_box;
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
/// the `base_revs`. This allows the rest of the merge to operate on only
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                    text.slice_to_string(region.min(), region.max())
        engine.edit_rev(0, 2, first_rev, build_delta_2());

            Assert(0, "acbd".to_owned()),
        let a_rope = Rope::from(&a);
        (Revision {
    }

        let mut engine = Engine::new(Rope::from(TEST_STR));
                break;
    /// fine-grained in the case of multiple cursors, but we also want this
    fn identity() -> Self {
        let utf8_offset = 13;
        }
        // if self.end is inside this chunk, verify that it is a codepoint boundary
                        word_cursor.select_word()
    }
    }
    pub fn with_limit_count(limit: usize) -> Self {
        let mut cursors = Vec::new();
                        if self.undone_groups.contains(undo_group) {
                }
        // interior of first line should be first line
    /// should be as unlikely to collide as two random u64s.
    let inverse_tombstones_map = old_deletes_from_union.complement();
        loop {

    pub fn with_limit_bytes(size: usize) -> Self {
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
        let trace = Trace::enabled(Config::with_limit_count(10));
    /// storage allocated will be limit * size_of<Sample>
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
            Assert(1, "cb".to_owned()),
        if !self.lc_shadow.needs_render(plan) { return; }
            return self.revs.len();
            } else {
            None
                    }
use fixed_lifo_deque::FixedLifoDeque;
    size: Size,

pub struct LinesMetric(usize);  // number of lines
        self.first_line = first;
    None,
                        Cow::Owned(un_deleted.transform_shrink(inserts))
                    e.edit_rev(p, u, head, delta.clone());
                //// if we aren't on a boundary we can't be at the end of the chunk
        inserts.into_iter().enumerate().map(|(i, inserts)| {

    #[test]
        self.wrap_col = WrapWidth::Width(self.size.width);
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        }
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
    }
        }
    pub fn get_caret_offset(&self) -> Option<usize> {
    rev_id: RevId,
    #[test]
        #[serde(rename_all = "snake_case")]
        MergeTestState::new(3).run_script(&script[..]);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        let trace = Trace::enabled(Config::default());
        if let Some(last) = self.revs.last() {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        MergeTestState::new(2).run_script(&script[..]);

            // Do the merge one direction
    /// borrowed from the rope.
        match self {
    if a.is_empty() {
#[inline]
        a.lines_all().collect::<Vec<_>>());
//     http://www.apache.org/licenses/LICENSE-2.0
impl From<Rope> for String {
                    }
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        assert_eq!(1, expand_by[0].0.priority);
/// Stores the relevant data about a sample for later serialization.
    /// Tests that priorities are used to break ties correctly
            tombstones: Rope::default(),
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    pub(crate) fn get_view_id(&self) -> ViewId {
        // We somewhat arbitrarily choose the last region for setting the old-style


        self.utf16_size += other.utf16_size;
    /// The empty string will yield a single empty slice. In all other cases, the
pub type StrCow = Cow<'static, str>;

    size: Size,
    fn next(s: &String, offset: usize) -> Option<usize> {
        let mut leaf_offset = pos - offset;
/// that sorted would be prohibitively expensive.
/// * `name` - A string that provides some meaningful name to this sample.
}
use xi_rope::delta::Delta;

}

    pub(crate) fn get_view_id(&self) -> ViewId {
        --#--
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    }
        where D: Deserializer<'de>,
        }
                }
            },
        let start = time::precise_time_ns();
            //}
    /// Selects the given region and supports multi selection.
        }
        assert_eq!(None, b.next_codepoint_offset(9));
        ];
                                  _allow_same: bool, modify_selection: &SelectionModifier) {

        assert_eq!(snapshot[5].name, "b");
            rendered_styles.push((sel_start as isize) - ix);
        let self_iv = Interval::new_closed_closed(0, self.len());
        samples[1].timestamp_us = 5;
    #[test]
                    if seg.validity == line_cache_shadow::ALL_VALID {
    /// in the slice up to `offset`.

            rendered_styles.push((sel_start as isize) - ix);
            return ix;
    fn drop(&mut self) {
        Err(ref e) => {
            Replace { chars, preserve_case } =>
#[inline]
        assert_eq!(rope.line_of_offset(1), 0);

        }
    }
    // Send the requested lines even if they're outside the current scroll region.

    // * Unicode width (so CJK counts as 2)
        assert_eq!(snapshot[5].name, "b");
        for _ in 0..line_len {

/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {

        }
            self.idx += 1;

    ObjectDestroyed,
            Some((l, off)) => (l, off),
        assert_eq!(1, expand_by[0].0.priority);
            'b' => SampleEventType::AsyncStart,
    /// part of the initial contents since any two `Engine`s need a common
        }
            Assert(0, "acrbd".to_owned()),
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        ");
{
        let first_line = self.line_of_offset(text, start);
        self.set_selection(text, sel);
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
impl MetadataType {
use std::mem::size_of;
    /// terminating newline.
            b.push('b');
        engine.edit_rev(1, 2, first_rev, d1.clone());
            Assert(1, "ab".to_owned()),


            FindAll => self.do_find_all(text),
            max_undo_so_far,
    fn from(r: Rope) -> String {
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
                    let full_path = exe_name.into_os_string();
            }
    }


        for mut find in self.find.iter_mut() {

    }
    new_without_default_derive,
            self.record(Sample::new_duration(
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        result
    }
    /// indicates a search for the next occurrence past the end of the file.
        assert_eq!(correct, rearranged_inserts);
            Some(ref breaks) => {
        }).collect()
        let mut cursors = Vec::new();
    fn utf16_code_units_metric() {
                for &region in rest {
    }
        for &(sel_start, sel_end) in hls {
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);


/// Revision will be used, which means only the (small) set of concurrent edits
            GestureType::RangeSelect => self.select_range(text, offset),
                        },
        use self::MergeTestOp::*;
        count_newlines(&s[..in_base_units])
        assert_eq!(1, a.line_of_offset(2));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
}
                                priority,
}
    fn find_base_1() {

    #[cfg(feature = "benchmarks")]
            categories: None,
            Scroll(range) => self.set_scroll(range.first, range.last),

        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        d_builder.delete(Interval::new_closed_open(10, 36));
            Assert(0, "ab".to_owned()),
            Assert(0, "ab".to_owned()),
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    pub thread_name: Option<StrCow>,
            }
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        let (start, end) = {
        let tombstones_a = Rope::from("a");
            }),
                },
            }
            edit: Undo { toggled_groups, deletes_bitxor }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        }
    #[cfg(feature = "benchmarks")]

    // TODO make this faster somehow?
}
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    utf16_size: usize,
}
// distributed under the License is distributed on an "AS IS" BASIS,
    fn find_common_1() {
use xi_trace::trace_block;
    fn to_payload(value: &'static str) -> &'static str {
/// ```

    #[serde(default = "default_session", skip_serializing)]
        ]);
    /// The state for finding text for this view.

        text = new_text;
        }
    /// Splits current selections into lines.
        // since character was inserted after gc, editor gcs all undone things
        }
    #[derive(Debug)]
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

        self.prev::<BaseMetric>();
        self.height = last - first;
    /// Each instance represents a separate search query.
}
            let pos = bc.next::<BreaksMetric>();
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
    None,
                    let _ = s.pop();
        where S: Into<StrCow>, C: Into<CategoriesT>
                self.do_selection_for_find(text, case_sensitive),
            let mut sample = self.sample.take().unwrap();

    fn test_samples_pulse() {
                self.add_selection_by_movement(text, Movement::Down),
    }
impl From<Rope> for String {
                                            closure: F, payload: P) -> R
                Contents::Edit {inserts, ..} => inserts,
        let params = json!({
    }
    deletes: Subset,
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
/// Replace part of a `Rope`:
enum FindStatusChange {
        // TODO: want to let caller retain more rev_id's.

        let inserts = parse_subset_list("
            std::thread::sleep(std::time::Duration::new(0, 1000));
            drag_state: None,
        match self.breaks {
                WrapWidth::Width(px) =>
                    if !inserts.is_empty() {
                                          closure: F, payload: P)
    }
    {
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    /// Returns a slice of the string from the byte range [`start`..`end`).
            tid: tid,
/// Represents the current state of a document and all of its history
//!
                Ok(CategoriesT::DynamicArray(categories))
    /// Returns the regions of the current selection.
    // encourage callers to use Cursor instead?
    /// ancestor in order to be mergeable.
            SampleEventType::ObjectDestroyed => 'D',
            if let Some(ref thread_name) = sample.thread_name {

        trace.instant("4", &["test"]);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        self.revs.reverse();
        let mut update = json!({
        assert_eq!(2, expand_by.len());
        }
#[derive(Clone, Debug, PartialEq, Eq)]
    }
        for r in &self.revs[ix + 1..] {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                              to_payload("test_get_samples"));
    /// Create a new Engine with a single edit that inserts `initial_contents`
            if self.line_of_offset(text, offset) <= line {
        self.scroll_to_cursor(text);
    }
                return;
    /// set with this function, which will make the revisions they create not have colliding IDs.
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            args: Some(SampleArgs {
            max_undo_so_far,
            "pristine": pristine,
            last_line -= 1;
fn exe_name() -> Option<String> {
                metadata_name: None,
    }
        // we add the special find highlights (1) and selection (0) styles first.
            args: Some(SampleArgs {
    ///
    type Item = Cow<'a, str>;
    // TODO make this faster somehow?
        trace.closure_payload("x", &["test"], || {
    #[serde(rename = "name")]

            Assert(0, "acbd".to_owned()),
    }
    /// Set the selection to a new value.
            sel
        Some(&leaf[start_pos .. end])
    }
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        self.drag_state = None;
}

        where D: serde::Deserializer<'de>

                match elem {
    pub fn is_enabled(&self) -> bool {
// See the License for the specific language governing permissions and

                name, categories, payload, SampleEventType::DurationBegin)),
        d_builder.delete(Interval::new_closed_open(10, 36));
/// });
    pub fn disable(&self) {
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    #[allow(dead_code)]
// Copyright 2016 The xi-editor Authors.
                        inserts: transformed_inserts,
            thread_name: Sample::thread_name(),
}
    impl MergeTestState {
            Merge(1,0),
        ids.iter().cloned().map(|i| {
    samples: Mutex<FixedLifoDeque<Sample>>,
        let (start, end) = iv.start_end();
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        d_builder.delete(Interval::new_closed_open(58, 61));
        match *self {
        let mut rendered_styles = Vec::new();
    replace: Option<Replace>,
/// fn something_else_expensive(value: u32) {
        assert_eq!(snapshot.len(), 5);
        let mut r = Rope::from("27");
                },

        }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
/// some way.
    /// than this will panic.
    fn accumulate(&mut self, other: &Self) {
    }
                if !region.is_caret() {
}
    /// Tracks whether there has been changes in find results or find parameters.
        }
        let a2 = Rope::from("a");
                if !region.is_caret() {
    #[cfg(feature = "benchmarks")]
            None
            Merge(1,2),
        }
/// ```
impl<'a> Iterator for ChunkIter<'a> {
        match self.inner.next() {
            _ => return
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
    }
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
            Merge(0,2), Merge(1, 2),

        // rebase the deletion to be after the inserts instead of directly on the head union
        if offset == 0 {
            ix = sel_end as isize;

                            }
    #[derive(Clone, Debug)]
                } else {
    }
        let end = time::precise_time_ns();
                    if sel_end_ix > sel_start_ix {
    }


            Merge(3,1), Merge(5,3),
        let a_revs = basic_insert_ops(inserts.clone(), 1);
            duration_us: None,
            if let Some(replace) = self.get_replace() {
            true => self.selection.clone(),

    /// The maximum number of bytes the tracing data should take up.  This limit
///
/// Enable tracing with a specific configuration. Tracing is disabled initially
    /// You could construct the "union string" from `text`, `tombstones` and
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
        match self.breaks {
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
///

        b.push(rhs);
        self.cursor.next_leaf();
        true
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
        let a = Rope::from("a\rb\rc");
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    /// the pid or the tid depends on the name of the event
}
                    // we don't want new revisions before this to be transformed after us

}
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            black_box(trace.block_payload(
categories_from_constant_array!(10);
    }
            Assert(2, "ab".to_owned()),
        }
        MergeTestState::new(2).run_script(&script[..]);
impl Serialize for DeltaElement<RopeInfo> {
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    fn from(s: T) -> Rope {
/// supported as an optimization when only one reference exists, making the
        // since character was inserted after gc, editor gcs all undone things
        let snapshot = trace.samples_cloned_unsorted();
            Move(movement) => self.do_move(text, movement, false),

        let d = engine.delta_rev_head(first_rev);
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        match *self {
            "something", &["benchmark"],
    }
        next_expand_by = Vec::with_capacity(expand_by.len());
        let expand_by = compute_transforms(a_revs);
#[derive(PartialEq, Debug)]
            if self[i] != other[i] {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        Some(self.cmp(other))
        let (mut new_revs, text, tombstones, deletes_from_union) = {
/// ```rust
               a.lines_all().collect::<Vec<_>>());

}
}
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
        Merge(usize, usize),
        let tombstones_a = Rope::from("a");
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
                self.add_selection_by_movement(text, Movement::Down),
/// some way.

            Sample::new_instant("local pid", &[], None),
    /// that are currently deleted, and thus in `tombstones` rather than
    }
pub struct SampleGuard<'a> {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
pub struct SampleArgs {
    #[test]
        assert_eq!(None, a.next_codepoint_offset(10));
// Licensed under the Apache License, Version 2.0 (the "License");
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        } else {

        assert_eq!(Some(6), a.prev_codepoint_offset(10));

    FlowStart,

    pub fn set_session_id(&mut self, session: SessionId) {
impl PartialOrd for Sample {
    enabled: AtomicBool,
    // partly because the reachability calculation would become more complicated (a
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
    type Item = u8;
            match self.wrap_col {
                name, categories, None, start, end - start));
    fn prev_codepoint_offset_small() {
        #[derive(Serialize, Deserialize)]
pub struct BaseMetric(());
            // These two will be different without using session IDs
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    use test::black_box;
        },
/// # Examples
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        }

    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
    use super::*;
        };
            utf16_count += 1;

        self.pending_render = pending
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
            Merge(1,0),
                        }
///
}
        let b = a.slice(1, 10);
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        self.set(new_pos);

}
                            warn!("Failed to get string representation: {:?}", e);
        let new_head_2 = engine.get_head_rev_id().token();
    /// Sets the selection to a new value, invalidating the line cache as needed.
        let trace = Trace::enabled(Config::default());
        all_samples.reset_limit(0);

        } else if line == max_line {
    }
        let d = RopeDelta_::deserialize(deserializer)?;
    fn render_line(&self, client: &Client, styles: &StyleMap,
        use self::MergeTestOp::*;
            sel
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
                                        &selections, &hls, style_spans);
        };
            if self.line_of_offset(text, offset) <= line {
        Cow::from(b)
/// The result of the closure.

            _ => None
        }
    }
/// for strings, specialized for incremental editing operations. Most operations
        assert_eq!(Some(9), b.next_codepoint_offset(5));

        let d = engine.delta_rev_head(first_rev);

        // todo: this will be changed once multiple queries are supported
    #[cfg(feature = "benchmarks")]
    fn edit_rev_undo() {
        self.set(new_pos);
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    #[test]
        }
        }
    }

    fn arr_eq(&self, other: &[&'static str]) -> bool {

pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
    /// The name to associate with the pid/tid.  Whether it's associated with
        }
    // encourage callers to use Cursor instead?
                MergeTestOp::Merge(ai, bi) => {
        let new_inserts = union_ins_delta.inserted_subset();
        b.push(self);
            Some((l, off)) => (l, off),
            Merge(0,1),
    /// Only number of matches changed
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);


        assert_eq!(2, expand_by[1].0.priority);
/// Computes a series of priorities and transforms for the deltas on the right

    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            let max_undo = self.max_undo_group_id();
        self.timestamp_us == other.timestamp_us &&
        assert_eq!(1, expand_by.len());
    #[test]
        } else {
#[derive(Clone, Copy)]
            edit: Edit {

        } else {
    }
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
                },
                        let offset = self.offset_of_line(text, start_line);
    where S: Into<StrCow>, C: Into<CategoriesT>
        self.deletes_from_union = new_deletes_from_union;
}
                    }
        Self {
use std::borrow::Cow;

        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
                }
        }
            // corner and I'm lazy -cmyr
#[cfg(test)]
            CategoriesT::StaticArray(ref self_arr) => {
                Ok(CategoriesT::DynamicArray(categories))
use std::borrow::Cow;
impl Eq for CategoriesT {}
                },
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
/// ```rust
        MergeTestState::new(3).run_script(&script[..]);
            self.record(Sample::new_instant(name, categories, None));
}
            deletes_from_union,
                });
    }
            return None;
                    self.fragment = "";
                    let sel_start = cursor.pos();
    /// Get the line range of a selected region.
    }

/// Contains replacement string and replace options.
    /// vertical scroll position
    /// Selects an entire line and supports multi selection.
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
        a.lines_all().collect::<Vec<_>>());
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// Does a drag gesture, setting the selection from a combination of the drag
pub enum SampleEventType {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            DeltaElement::Insert(ref node) =>
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        let replacement = match self.selection.last() {
    #[cfg(feature = "dict_payload")]
        if all_samples.is_empty() {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        let subset_str = format!("{:#?}", expand_by[0].1);
            }
            sel
fn find_leaf_split_for_merge(s: &str) -> usize {
        }
    /// The semantics are intended to match `str::lines()`.

            HighlightFind { visible } => {
/// ```

        }
        assert_eq!(0, b.line_of_offset(1));

/// some way.
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    /// Returns a tuple of a new `Revision` representing the edit based on the
            Assert(0, "abc".to_owned()),
                    self.do_gesture(text, line, column, GestureType::WordSelect)
// You may obtain a copy of the License at
    /// indicates a search for the next occurrence past the end of the file.
                                gc_dels = gc_dels.union(deletes);
                if !region.is_caret() {
            pos
            self.set_selection(text, selection);

        // We could probably reduce the cloning of selections by being clever.
            }
            Assert(1, "afc".to_owned()),
    }
                    let head = e.get_head_rev_id().token();
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
    fn line_of_offset_panic() {
        Engine {
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
            to_payload("some description of the trace"))));
    inner: LinesRaw<'a>
    fn undo() {
use tabs::{ViewId, BufferId};
        assert_eq!(utf8_offset, 19);
    #[serde(skip_serializing_if = "Option::is_none")]
            inserts: Subset::new(0),
// Licensed under the Apache License, Version 2.0 (the "License");
        deletes_from_union
            None
    /// Time complexity: O(log n)
                self.set(pos);
        soln.push('f');
    }
        // selection state, and for scrolling it into view if needed. This choice can
        self.scroll_to_cursor(text);
    }
        self.enabled.store(true, AtomicOrdering::Relaxed);
    }

        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        engine.undo([1,2].iter().cloned().collect());
        info.utf16_size
        };
// You may obtain a copy of the License at
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
impl Metric<RopeInfo> for BaseMetric {
            }, to_payload("test_get_sorted_samples"));
/// ```
    fn deserialize<D>(deserializer: D)
        let first_sample_timestamp = all_samples.front()
#[inline]
        if line > max_line {

    #[test]
    }
    undo_group: usize,
#[inline]
    /// Determines the current number of find results and search parameters to send them to
        for rev in &self.revs[rev_index + 1..] {
/// However, anything that can be converted into a Cow string can be passed as
        println!("{:#?}", delta_ops);

                },
        }
        self.find.clear();
                self.highlight_find = visible;

                return false;
        ----#
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
/// # Examples
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
                },
            let _x = trace.block("something", &[]);
            next_boundary = c.next_boundary(&l, leaf_offset);
        }
                    "something", &["benchmark"], || {},
// See the License for the specific language governing permissions and
        peers: Vec<Engine>,
        }
{
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
    }
               a.lines_all().collect::<Vec<_>>());
    #[test]
                None => {
    }
        self.sample_limit_count * size_of::<Sample>()
/// }
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        assert_eq!(snapshot[2].name, "x");


        // is the new edit in an undo group that was already undone due to concurrency?
            }
        let mut leaf_offset = pos - offset;
        self.enabled.load(AtomicOrdering::Relaxed)
        assert_eq!(snapshot.len(), 5);
        if self.cursor.pos() >= self.end {
    }
        assert!(r.clone().slice(0, a.len()) == a_rope);
                }
            find: Vec::new(),
            Assert(1, "zapbj".to_owned()),
//
    /// Returns the regions of the current selection.
        let res = find_common(&a, &b);
/// on program launch.
            engine.undo(to_undo.clone());
                client.replace_status(self.view_id, &json!(replace))
        // x, a, y, b, z, c
    }

    }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                metadata_sort_index: None,
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    /// When was the sample started.
        assert_eq!(snapshot.len(), 9);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
            FindNext { wrap_around, allow_same, modify_selection } =>
        &leaf[offset..end]
    fn prev_grapheme_offset() {
}
    }
    }
        assert_eq!(Some(9), b.next_codepoint_offset(5));
            SelectAll => self.select_all(text),
                    RopeDeltaElement_::Insert(s) =>

    /// revision, and so needs a way to get the deletion set before then.
        -#-
    }
                }
    }
        if self.is_enabled() {

        -##-
        if offset == 0 {
    }
                text.offset_of_line(line)
    type Item = u8;
        assert_eq!("-###-", &subset_str);
            },
    fn utf16_code_units_metric() {
///
}
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
    /// When was the sample started.
        ----#

            self.breaks = None
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        let b = a.slice(1, 10);
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
            if let GraphemeIncomplete::PreContext(_) = incomp {
    {
    ///
                    text.slice_to_string(start, end)
    /// The session ID used to create new `RevId`s for edits made on this device
        assert_eq!(Some(2), b.next_codepoint_offset(0));
        let mut engine = Engine::empty();
        for sample in all_samples.iter() {
        samples[0].timestamp_us = 10;
                el.serialize_field(end)?;
                // Deprecated (kept for client compatibility):
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        }
        self.tombstones = new_tombstones;
/// Indicates what changed in the find state.
            self.current = None;
use std::collections::BTreeSet;
/// }


    let mut utf16_count = 0;
}
        memchr(b'\n', &s.as_bytes()[offset..])
    pub fn set_session_id(&mut self, session: SessionId) {
#[inline]
    fn to_payload(value: &'static str) -> TracePayloadT {
        let line_len = MAX_LEAF + MIN_LEAF - 1;
/// std::mem::drop(trace_guard); // finalize explicitly if
            rev_id: self.next_rev_id(),

            soln.push('b');

            Assert(0, "zacpb".to_owned()),
                                     payload: Option<TracePayloadT>,

                        if self.undone_groups.contains(undo_group) {
/// let b = a.slice(1, 9);
            args: Some(SampleArgs {
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    // A colliding session will break merge invariants and the document will start crashing Xi.
        // additional tests for line indexing
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        let a = Rope::from("a\r\nb\r\nc");
    }
    /// Only number of matches changed
    pub metadata_name: Option<StrCow>,
trait StringArrayEq<Rhs: ?Sized = Self> {
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
/// bytes required to represent the codepoint.
    /// Highlights are only rendered when search dialog is open.
        assert!(self.current.is_some());
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
//! There is also a full CRDT merge operation implemented under
        let plan = RenderPlan::create(height, self.first_line, self.height);
    #[test]
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            }


/// something_expensive();
}
        ---#--
impl Serialize for Delta<RopeInfo> {
/// conversions in both directions.
    }

    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    }
        let head_rev = &self.revs.last().unwrap();
    }
            end,
    fn gc_2() {
        #---

    }

    }
}
                return offset;
    where D: serde::Deserializer<'de> {
            Assert(1, "zpbj".to_owned()),
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))

pub enum CategoriesT {

            rev_id, max_undo_so_far,
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
        let trace = Trace::enabled(Config::default());

// See the License for the specific language governing permissions and
}
    fn into_chrome_id(&self) -> char {
pub struct Sample {
        trace.instant("5", &["test"]);
    /// Highlights are only rendered when search dialog is open.
        #------
        let guard = Self {
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
    }
    pending_render: bool,
        let a = Rope::from("a\nb\nc");
            'n' => SampleEventType::AsyncInstant,
mod tests {
        let script = vec![
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    self.fragment = "";
        assert_eq!(trace.is_enabled(), true);
        let (iv, new_len) = delta.summary();
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
        assert_eq!(rope.line_of_offset(15), 3);
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        ChunkIter {
            let head = engine.get_head_rev_id().token();
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            },
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
                },
                        let end_line = start_line + seg.n;
    /// Get the line range of a selected region.
    // Delta that deletes the right bits from the text

        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        ---#-
            self.idx += 1;

            }
}
    #[bench]
                    // can only happen on empty input
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
        ---#--
    /// Width in bytes (utf-8 code units).
    #[test]
            sample_limit_count: limit
use client::Client;
        self.lc_shadow = b.build();
    /// Return the offset of the codepoint after `offset`.
    out.as_mut_slice().reverse();
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
    #[serde(skip_serializing)]
#[derive(Serialize, Deserialize, Clone, Debug)]
        assert_eq!(5, a.offset_of_line(3));
                    for (ei, e) in self.peers.iter().enumerate() {
                }
pub fn disable_tracing() {
    fn scroll_to_cursor(&mut self, text: &Rope) {
        a.lines_all().collect::<Vec<_>>());
        AssertMaxUndoSoFar(usize, usize),
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
pub fn samples_cloned_unsorted() -> Vec<Sample> {
}
    pending_render: bool,
                          payload: Option<TracePayloadT>) -> Self
impl Serialize for DeltaElement<RopeInfo> {
/// an argument.
            }
    #[test]
            Assert(1, "afc".to_owned()),
            if i >= max_undos {
    }
    /// via process_name/thread_name respectively.
use std::collections::HashMap;
            None
                } else {
            Merge(2,3),
            .map(|pos| pos + 1)
                Undo { toggled_groups, deletes_bitxor } => {
    }
                break;
                }
            SampleEventType::CompleteDuration => 'X',
    {
        if self.find.is_empty() {
    }
                self.run_op(op);
            }

/// * `categories` - A static array of static strings that tags the samples in
    }
    TRACE.get_samples_count()
    #[serde(default = "initial_revision_counter", skip_serializing)]

    /// Updates the view after the text has been modified by the given `delta`.
    /// Returns a u64 that will be equal for equivalent revision IDs and
    DurationBegin,
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),

        let invalid = if all_caret {
                                priority,
    ///

        guard
    }
    /// The line number is 0-based, thus this is equivalent to the count of newlines
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
        let mut selection = Selection::new();
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
// Unless required by applicable law or agreed to in writing, software

// Additional APIs custom to strings
    assert!(a[0].rev_id == b[0].rev_id);

            // TODO: finer grain invalidation for the line wrapping, needs info
        a.lines_all().collect::<Vec<_>>());
    ObjectSnapshot,
                }
        assert_eq!(1, expand_by.len());
        let mut hasher = DefaultHasher::new();
                        if n_skip > 0 {
                Contents::Undo { .. } => panic!(),
        assert_eq!(None, a.prev_grapheme_offset(0));
        use serde::de::Visitor;
        cursor.next_grapheme()
            "n": n,
    /// Collapse all selections in this view into a single caret
        assert_eq!(None, b.next_codepoint_offset(9));
/// Measured unit is newline amount.
        assert_eq!(trace.is_enabled(), true);

    }
                   r.lines_all().collect::<Vec<_>>());
                        MetadataType::ThreadName { name: thread_name.to_string() },
    /// the text).
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        }
/// Usage of static strings is encouraged for best performance to avoid copies.
    inner: ChunkIter<'a>,
        ];
        if let Some(exe_name) = exe_name() {
        rope.offset_of_line(5);
        deletes_from_union
        let trace = Trace::enabled(Config::default());
    #[test]
            sample_limit_count: limit
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    sample_limit_count: usize
    }
        self.session = session;
        if !self.is_enabled() {
            Merge(2,0),
    }

trait StringArrayEq<Rhs: ?Sized = Self> {
            duration_us: None,
        while offset < l.len() && !l.is_char_boundary(offset) {

        let invalid = if all_caret {
    /// how many times it has been deleted, so if a character is deleted twice
    }
        let delta = Delta::synthesize(&self.tombstones,
                None => {
/// an argument.
        Ok(exe_name) => {
    #[cfg(feature = "benchmarks")]
        self.set_selection_raw(text, selection);
            }
    }
                (drag_state.max, min(offset, drag_state.min))
        trace.closure_payload("x", &["test"], || {
            as_vec.push(Sample::new_metadata(

        assert_eq!(None, a.prev_grapheme_offset(0));
    }
        samples[1].pid = 2;
            'D' => SampleEventType::ObjectDestroyed,
                    as_vec.push(Sample::new_metadata(
    }
#[derive(Copy, Clone)]
        }
            'e' => SampleEventType::AsyncEnd,


/// ```

            // with offset == s.len(), but be defensive.
            self.current = next_chunk;
                                                          new_len, col),
            }
                Contents::Undo { .. } => panic!(),
}
    }
                    if invert_undos {
        }
    }
        if offset >= next_line_offset {

    }
                        deletes: transformed_deletes,
        engine.undo([1].iter().cloned().collect());
#[inline]
        ---#--
            }

    #[serde(skip_serializing_if = "Option::is_none")]
    TRACE.samples_cloned_unsorted()
        /// along with the newline that triggered it.
            timestamp_us: ns_to_us(start_ns),
            }
        ];

        let mut cursors = Vec::new();
            let matches_only = self.find_changed == FindStatusChange::Matches;
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
//!


        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
        Self {
        base_subset.is_some() && base_subset == other_subset
            Some(offset - len)
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        let revs = basic_insert_ops(inserts, 1);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                              payload: Option<TracePayloadT>,
#[inline]
        let a_rope = Rope::from(&a);
            None

                         first_line: usize, last_line: usize, pristine: bool) {

#[inline]
        let sample_name = to_cow_str(meta.sample_name());
                }
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
            let mut word_cursor = WordCursor::new(text, offset);
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

enum MetadataType {
        ");
                    if s.ends_with('\r') {
/// some way.
        }
        struct RopeDelta_ {

            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        let mut hls = Vec::new();
        self.revs.iter().enumerate().rev()
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            write!(f, "{}", String::from(self))
                selections.push((sel_start_ix, sel_end_ix));
        // and it only needs to be consistent over one execution.
            Revision {
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
// You may obtain a copy of the License at
                    };
        engine.undo([1].iter().cloned().collect());
    for op in b_new {
        };
        }
        let snapshot = trace.samples_cloned_unsorted();

    }
            categories: Some(categories.into()),
        self.iter_chunks(0, self.len())
        assert_eq!(correct, rearranged_inserts);

pub struct Utf16CodeUnitsMetric(usize);
        impl From<RopeDelta_> for Delta<RopeInfo> {
    /// The semantics are intended to match `str::lines()`.
    ObjectSnapshot,
                    let full_path_str = full_path.into_string();
    /// Returns the byte offset corresponding to the line `line`.
        // rather than emitting an explicit start/stop to reduce the size of
    move_delta.apply(tombstones)

    #[test]
    #[test]
// See the License for the specific language governing permissions and
                    e.edit_rev(p, u, head, delta.clone());
    fn to_payload(value: &'static str) -> TracePayloadT {

        },
categories_from_constant_array!(8);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    }
use interval::Interval;
/// Revision 0 is always an Undo of the empty set of groups
                        sample.tid));
            }
    }
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        LinesRaw {
        assert_eq!(trace.get_samples_count(), 0);
                        line_num = seg.their_line_num + seg.n;
    pub fn enabled(config: Config) -> Self {
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
                (!region.is_upstream() && c == start_pos) ||
        }
    pub fn get_caret_offset(&self) -> Option<usize> {

                    }
    fn measure(info: &RopeInfo, _: usize) -> usize {
mod fixed_lifo_deque;
    undo_group: usize,
            new_deletes = new_deletes.transform_expand(&new_inserts);
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
    {
            },
            Assert(3, "ab".to_owned()),
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

    fn basic_rev(i: usize) -> RevId {
        }).collect::<Vec<FindStatus>>()
            Merge(0,2),
        for r in &self.revs[ix + 1..] {
                    text.slice_to_string(region.min(), region.max())
    inner: ChunkIter<'a>,
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
                         styles: &StyleMap, style_spans: &Spans<Style>,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

            undone_groups: BTreeSet::new(),
    fn is_boundary(s: &String, offset: usize) -> bool {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    }
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        }
               a.lines_all().collect::<Vec<_>>());
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
                self.do_set_replace(chars, preserve_case),
            Assert(0, "acbd".to_owned()),
        engine.edit_rev(1, 1, initial_rev, d1.clone());

        self.timestamp_us.cmp(&other.timestamp_us)
        /// should go before typed text.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                        let n_skip = seg.their_line_num - line_num;
            DeltaElement::Copy(ref start, ref end) => {
        let mut all_samples = self.samples.lock().unwrap();
    // TODO: insert from keyboard or input method shouldn't break undo group,
        // the smallest values with which it still fails:
    }
                    as_vec.push(Sample::new_metadata(
        let first_rev = engine.get_head_rev_id().token();
/// Usage of static strings is encouraged for best performance to avoid copies.
        engine.edit_rev(0, 1, first_rev, build_delta_1());
                    RopeDeltaElement_::Copy(start, end) =>
            self.next()
        deletes: Subset,
                return None;
            "pristine": pristine,
                              to_payload("test_get_samples"));
/// monotonically increasing single global integer (when tracing) per creation
        engine.undo([1].iter().cloned().collect());
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let mut offset = 0;
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        value
// Unless required by applicable law or agreed to in writing, software
    }
use xi_rope::spans::Spans;
        let revs = basic_insert_ops(inserts, 1);
        revs.append(&mut revs_2);
    fn basic_rev(i: usize) -> RevId {
        }

        if self.cursor.pos() >= self.end {
    find_changed: FindStatusChange,
        struct CategoriesTVisitor;
        while let Err(incomp) = next_boundary {
///
                (drag_state.max, min(offset, drag_state.min))
        ];
                name, categories, payload, SampleEventType::DurationBegin)),
///
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
use rope::{Rope, RopeInfo};
        if last_col == 0 && last_line > first_line {
}
        prev_boundary.unwrap_or(None)
use std::cmp;
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]

        // a, b, y, z, c, x
        }
                priority: new_priority,
    }
        // expand by each in expand_by
        let mut offset = 0;
/// Computes a series of priorities and transforms for the deltas on the right

impl Serialize for DeltaElement<RopeInfo> {
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
                rev_id: basic_rev(i+1),
            Scroll(range) => self.set_scroll(range.first, range.last),
        trace.instant("3", &["test"]);
    }
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.


}
    /// not account for any overhead of storing the data itself (i.e. pointer to
        self.len() >= MIN_LEAF
        let height = self.line_of_offset(text, text.len()) + 1;
        let mut rendered_styles = Vec::new();
/// some way.
            } else {
        let result = closure();
        for op in &delta_ops {
            Sample::new_instant("remote pid", &[], None)];
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        // send updated replace status if changed
    /// Returns the byte offset corresponding to the line `line`.
/// bytes required to represent the codepoint.
extern crate serde_json;
    /// description for the invariant.
    #[serde(rename = "xi_payload")]
    }
        let new_head_2 = engine.get_head_rev_id().token();
                while cursor.pos() < region.max() {
        }

            'E' => SampleEventType::DurationEnd,
                    }
    {
    /// Get next codepoint after cursor position, and advance cursor.

        assert_eq!(5, a.offset_of_line(3));

//
            timestamp_us: ns_to_us(timestamp_ns),
/// # Examples
            Assert(0, "acbd".to_owned()),
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
                                          closure: F, payload: P)
        let mut retain_revs = BTreeSet::new();

                RenderTactic::Preserve => {
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
/// record it.
            Assert(2, "afc".to_owned()),
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);

        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
                    text.slice_to_string(start, end)
//
                        gc_dels = gc_dels.transform_expand(inserts);

        // NOTE: 1 us sleeps are inserted as the first line of a closure to

    }
    out
///
            GestureType::RangeSelect => self.select_range(text, offset),
    {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        ");
            let start = self.line_of_offset(last_text, iv.start());
            event_type: SampleEventType::Instant,

        View {
        // set last selection or word under current cursor as replacement string


}

        a.edit_str(1, 9, "era");
            let mut len = 1;
    }
                    self.fragment = &self.fragment[i + 1 ..];
    }
    /// fine-grained in the case of multiple cursors, but we also want this
fn find_leaf_split_for_merge(s: &str) -> usize {
    fn gc_2() {

            Contents::Undo { .. } => panic!("can't merge undo yet"),
/// supported as an optimization when only one reference exists, making the
    pub fn lines_raw_all(&self) -> LinesRaw {
        if initial_contents.len() > 0 {
                });
            }
        }
            if region.is_caret() {
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
}
        }
                Some(pos) => offset += pos + 1,
            Assert(1, "acpbdj".to_owned()),
        inserts.into_iter().enumerate().map(|(i, inserts)| {
    /// Get the contents of the document at a given revision number
                                         self, text, modify);
    // of the union string length *before* the first revision.
    /// should be constructed via SampleGuard.
        }
    use multiset::Subset;
                                undo_group,
            find_changed: FindStatusChange::None,
// You may obtain a copy of the License at

        }

        trace.closure_payload("y", &["test"], || {},
            }
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
        let d = engine.delta_rev_head(first_rev);
        assert_eq!(Some(2), b.next_codepoint_offset(0));
        -##-
/// Atomicity is implicit, putting the offset
        let utf8_offset = 19;

        }
///
        assert_tokens(&rope, &[
    }
    }
        // This might be an over-specified test as it will
    fn undo_4() {
            Merge(0,2), Merge(1, 2),
            panic!("line number {} beyond last line {}", line, max_line);
                self.set_selection_raw(text, selection);
        assert_eq!(Some(3), a.next_grapheme_offset(0));
        if !self.is_point_in_selection(offset) {
// Copyright 2016 The xi-editor Authors.
#[derive(Clone, Debug, PartialEq, Eq)]
                let mut sel = Selection::new();
        let (mut l, mut offset) = self.get_leaf()?;
    pub fn session_id(&self) -> SessionId {
        let mut selection = Selection::new();
            None
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {

    }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        d

                self.do_drag(text, line, column, Affinity::default()),
        enum RopeDeltaElement_ {
    /// this returns the offset of the end of the rope. Arguments higher
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {

/// 1. Samples that span sections of code may be inserted on end instead of
            "n": n,
        assert_eq!(samples[1].name, "local pid");
        }
        let mut samples = self.samples_cloned_unsorted();

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

            size: Size::default(),
            trace.closure("test_samples_closure", &["test"], || {});
        assert_eq!(Some(9), a.next_grapheme_offset(3));
                    e.edit_rev(p, u, head, delta.clone());
/// Stores the tracing data.
    TRACE.instant(name, categories);
            "op": op,
    fn undo_4() {
                    };
    fragment: &'a str
        let first_rev = engine.get_head_rev_id().token();
        if let Some(occ) = closest_occurrence {
            }
                    // we don't want new revisions before this to be transformed after us
        #------
    // A colliding session will break merge invariants and the document will start crashing Xi.
    fn find_base_1() {

            Assert(0, "adfc".to_owned()),
            l[offset..].chars().next()
    #[test]
            inner: self.lines_raw(start, end)
    #[should_panic]
    // TODO: switch to a persistent Set representation to avoid O(n) copying
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
        let snapshot = trace.samples_cloned_sorted();

        for find in &mut self.find {
            SelectAll => self.select_all(text),
            }
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
                }
                    if invert_undos {
                payload: payload,
        self.set_selection_raw(text, sel.into());
    /// Tests that priorities are used to break ties correctly
/// # use xi_rope::Rope;
/// # Returns
            deletes = deletes.transform_expand(&new_trans_inserts);
    scroll_to: Option<usize>,
        }
        self.find_changed = FindStatusChange::None;
                        Some(end) => max(0, end - 1),
/// typing a paragraph) will be combined into a single segment in a transform
                selections.push((sel_start_ix, sel_end_ix));
    ns / 1000
            rendered_styles.push((sel_start as isize) - ix);
// you may not use this file except in compliance with the License.
    }
///
                    if let Some(new_gc_dels) = new_gc_dels {
        if let Some(new_scroll_pos) = self.scroll_to.take() {

    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
#[inline]
}
        ");
        for &(trans_priority, ref trans_inserts) in &expand_by {
    /// part of the initial contents since any two `Engine`s need a common
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
impl Metric<RopeInfo> for LinesMetric {
                        let end_line = start_line + seg.n;
    #[inline]

    // TODO: don't construct transform if subsets are empty
        assert_eq!(Some(8), a.next_grapheme_offset(0));
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
#[inline]
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let d = engine.delta_rev_head(first_rev);
    // encourage callers to use Cursor instead?
        s.is_char_boundary(offset)
                    self.do_gesture(text, line, column, GestureType::RangeSelect)

        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
            Merge(0,1),
        // we add the special find highlights (1) and selection (0) styles first.
        assert_tokens(&rope, &[

        }
            Some(ref breaks) => {
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    type Item = Cow<'a, str>;
                                             &text, false);
        for _i in 0..50 {
    #[cfg(feature = "dict_payload")]
        let inserts_2 = parse_subset_list("
    #[test]
        // insert character at end, when this test was added, it panic'd here
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
    /// height of visible portion
    fn test_trace_disabled() {
                warn!("Usage of click is deprecated; use do_gesture");
    }

                peer.set_session_id(((i*1000) as u64, 0));
                    }
                }
/// ```

    /// `text`. The count of a character in `deletes_from_union` represents
        rope.line_of_offset(20);

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
        let b = a.slice(2, 4);
        // +2 for exe & thread name.
    }
    }
    fn test_ser_de() {

    fn prev(s: &String, offset: usize) -> Option<usize> {
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
use std::fmt;
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
    replace: Option<Replace>,
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    /// validate their input.
    /// Return the offset of the codepoint before `offset`.

        all_samples.reset_limit(config.max_samples());

            //self.cursor.set(self.end);
        b.push('\n');
        if initial_contents.len() > 0 {
        }
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        let a = Rope::from("\n");
    }
        // set last selection or word under current cursor as replacement string
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    pub metadata_sort_index: Option<i32>,
            Merge(0,2), Merge(1, 2),
                    let new_gc_dels = if inserts.is_empty() {
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        }
        // even though the actual sampling order (from timestamp of
            fragment: ""
    /// set with this function, which will make the revisions they create not have colliding IDs.
            Click(MouseAction { line, column, flags, click_count }) => {
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            let to_delete = if undone { &new_inserts } else { &new_deletes };
    /// inserted, including the ones that were later deleted, in the locations

pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
                        _ => break
///
            Assert(2, "ab".to_owned()),
        if self.replace_changed {
        where S: Into<StrCow>, C: Into<CategoriesT>
            'D' => SampleEventType::ObjectDestroyed,
                Some(Cow::from(s))
                }
    #[test]
        engine.gc(&gc);
        engine.edit_rev(1, 2, initial_rev, d1.clone());

            Assert(0, "acbd".to_owned()),
/// Base unit is utf8 code unit.
    #[test]


    FlowStart,
            ),
    // TODO: a case can be made to hang this on Cursor instead
        Subset::new(len)

    enum MergeTestOp {
        }
                pos = leaf_offset + pl.len();
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        --#--
        trace.closure_payload("x", &["test"], || {
    fn arr_eq(&self, other: &[&'static str]) -> bool {
            offset -= 1;
pub struct Lines<'a> {
        assert_eq!(Some(2), b.next_codepoint_offset(0));
    }
        for find in self.find.iter() {
/// Base unit is utf8 code unit.
                    self.do_gesture(text, line, column, GestureType::WordSelect)
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        let trace = Trace::disabled();
            AssertMaxUndoSoFar(0,2),
    fn bench_trace_block_disabled(b: &mut Bencher) {
        use self::ViewEvent::*;
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
            retain_revs.insert(last.rev_id);
        r.slice_to_string(0, r.len())
        -> R
/// `base_revs`, but modified so that they are in the same order but based on
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        assert_eq!(Some(17), a.next_grapheme_offset(9));
            self.idx = 0;
/// Given the inital byte of a UTF-8 codepoint, returns the number of
        assert_eq!(None, b.prev_codepoint_offset(0));
        assert_eq!(snapshot[1].name, "thread_name");
            }
            event_type: SampleEventType::Metadata,

        assert_eq!(1, r.line_of_offset(r.len() - 1));

        trace.instant("5", &["test"]);
    pub categories: Option<CategoriesT>,


    }

    }
/// for strings, specialized for incremental editing operations. Most operations
}

                        Cow::Owned(deletes_from_union.transform_shrink(inserts))

    }
    scroll_to: Option<usize>,
    pub fn prev_grapheme(&mut self) -> Option<usize> {
        plan.request_lines(first_line, last_line);
                    } else {
                    s = s.transform_shrink(&transformed_inserts);
    #[cfg(feature = "benchmarks")]
        for _ in 0..in_measured_units {
}
        debug_subsets(&rearranged_inserts);
    /// and currently in a debugging state.
                            edit: Edit {
            }

///
#[inline]
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        }
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
                        DeltaElement::Insert(Rope::from(s)),
        -##-
        Self {



            return false;
        let initial_rev = engine.get_head_rev_id().token();

        }
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let a = Rope::from("a\nb\nc");
    sample_limit_count: usize
    /// Returns an iterator over chunks of the rope.
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        self.do_set_replace(replacement, false);
        let chars_left = (edits-max_undos)+1;
    TRACE.samples_cloned_unsorted()

#[inline]
        let height = self.line_of_offset(text, text.len()) + 1;
    }
// Unless required by applicable law or agreed to in writing, software
        self.text = new_text;
    }
                } else {
            selection: SelRegion::caret(0).into(),
    fn next_grapheme_offset() {
    #[test]
            Assert(5, "zacpb".to_owned()),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                    if seg.validity == line_cache_shadow::ALL_VALID {
    enum MergeTestOp {
    #[test]
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
pub struct ChunkIter<'a> {
    use super::*;
}
    }

        trace.disable();
        assert_eq!(trace.get_samples_count(), 0);

    #[cfg(feature = "benchmarks")]
            breaks: None,
            }
        self.hash(&mut hasher);
            edit: Undo { toggled_groups, deletes_bitxor }
        }
        if offset >= next_line_offset {
        Rope::from_str(s.as_ref()).unwrap()
                (!region.is_upstream() && c == start_pos) ||
    #[inline]
/// # Arguments
        for u in s.chars() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
            let base_index = find_base_index(&self.revs, &other.revs);
    #[test]
                inserts: new_inserts,

            SelectionForFind { case_sensitive } =>
    fn merge_insert_only_whiteboard() {
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        self.find.clear();
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
    num: u32,
        ");
    ///

        engine.edit_rev(1, 1, first_rev, d1);
    /// Get text of a given revision, if it can be found.

}
    /// Each instance represents a separate search query.
// You may obtain a copy of the License at
    fn merge_simple_delete_1() {

/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    /// Note: `edit` and `edit_str` may be merged, using traits.
            GestureType::MultiLineSelect =>
        }
                    };
        };
                    s = &s[..s.len() - 1];
        let len = match first_rev.edit {
    fn delta_rev_head_3() {
    /// Update front-end with any changes to view since the last time sent.
    enabled: AtomicBool,
    /// Highlights are only rendered when search dialog is open.
        // TODO: refine for upstream (caret appears on prev line)
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
            Merge(2,1),
            Replace { chars, preserve_case } =>
        ");
                    let (start, end) = {

            let mut len = 1;

        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        -----#
    fn add(self, rhs: Rope) -> Rope {
///
        if last_col == 0 && last_line > first_line {
    #[inline]

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
        }
                (region.is_upstream() && c == pos) ||

        loop {
    }
        if !selection.regions_in_range(offset, offset).is_empty() {
                    self.set_selection(text, selection);
        // a, b, y, z, c, x
    fn thread_name() -> Option<StrCow> {
        self.set_selection_raw(text, sel.into());

        undo_group: usize,
        let line_len = MAX_LEAF + MIN_LEAF - 1;
                    text.slice_to_string(start, end)
        let new_inserts = union_ins_delta.inserted_subset();
        self.send_update_for_plan(text, client, styles,
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
            panic!("line number {} beyond last line {}", line, max_line);
        let plan = RenderPlan::create(height, self.first_line, self.height);
            samples: Mutex::new(FixedLifoDeque::new())
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));

        let start_pos = start_of_line.pos();
        });
    /// The line ending is stripped from the resulting string. The final line ending

                    if sel_end_ix > sel_start_ix {
    /// the pid or the tid depends on the name of the event
        self.set_selection_raw(text, selection);
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
                }
        a.push('\n');
        match *self {
/// conforms to is currently determined by the feature this library is compiled
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,

    /// point. Used to optimize undo to not look further back.
    trace: Option<&'a Trace>,
            let c = i.to_string() + "\n";
        }
        rendered_styles
            AssertMaxUndoSoFar(0,2),
        ---#--
        let mut d = TracePayloadT::with_capacity(1);
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        /// along with the newline that triggered it.
        } else {
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    fn offset_of_line_panic() {
            self.next()
            &self.deletes_from_union, &old_deletes_from_union);
        let subset_str = format!("{:#?}", expand_by[0].1);
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
    ObjectSnapshot,
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
    #[test]

            None
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);


            }

    pub fn join(&self, sep: &str) -> String {

        // TODO: refine for upstream (caret appears on prev line)
    /// of individual region movements become carets.
        }
                            plan: &RenderPlan, pristine: bool)
    }
            None
            CategoriesT::DynamicArray(ref self_arr) => {
            Assert(2, "ab".to_owned()),
{
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        }
            trace: Some(&trace),

                }
        }, to_payload("test_get_samples_nested_trace"));
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    {
            height: 10,
        if self.len() != other.len() {
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        // We somewhat arbitrarily choose the last region for setting the old-style
                            }
                        }
            let mut sel = drag_state.base_sel.clone();
            return;
    // Render a single line, and advance cursors to next line.
    }
/// overhead tracing routine available.
                            rendered_lines.push(line);
                                  style_spans, &plan, pristine);
    } else {
    fn drop(&mut self) {
use bytecount;
        };
    FlowInstant,
    // Delta that deletes the right bits from the text
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {

        where S: Serializer
                find_leaf_split_for_bulk(s)
    /// This is a `Subset` of the "union string" representing the characters
            Merge(0,2),
    }
        let mut selection = self.selection.clone();
    }
use unicode_segmentation::GraphemeCursor;
impl Trace {
    /// Merge the new content from another Engine into this one with a CRDT merge

    // partly because the reachability calculation would become more complicated (a
/// ```
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            categories: Some(categories.into()),
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
        json!({"test": value})

        ]);
                // Deprecated (kept for client compatibility):
    {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
///
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        } else {
                el.end()
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// Imagine a "union string" that contained all the characters ever
}
            undo_group: 0,
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
}
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
            engine.edit_rev(1, i+1, head, d);

/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
                        });
        let region = SelRegion::caret(offset);
            Merge(1,0),
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
    inner: ChunkIter<'a>,
    pub payload: Option<TracePayloadT>,
        let all_samples = self.samples.lock().unwrap();
        assert_eq!(1, expand_by.len());
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
/// Transform `revs`, which doesn't include information on the actual content of the operations,
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
        for &region in self.sel_regions() {
            wrap_col: WrapWidth::None,
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
                Some(i) => {
    /// Find parameters and number of matches changed.
                    self.do_gesture(text, line, column, GestureType::RangeSelect)

        use self::MergeTestOp::*;
        let b = a.slice(2, 4);
            Assert(0, "zacbd".to_owned()),
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        let a = Rope::from("a\nb\nc");
            Assert(0, "zacpb".to_owned()),
    }
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
    #[test]
}
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        // send updated replace status if changed
    /// recomputing line wraps.
}
        self.len()
        ------#
            rev_id_counter: 1,
            .map_or(0, |ref s| s.timestamp_us);
impl Ord for Sample {
            SelectionForReplace => self.do_selection_for_replace(text),
            timestamp_us: ns_to_us(time::precise_time_ns()),
        });
            "op": op,
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
/// patterns. Any large runs of typing in the same place by the same user (e.g
    #[serde(skip_serializing_if = "Option::is_none")]
/// Disable tracing.  This clears all trace data (& frees the memory).
#[inline]
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
    }
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
        // rebase delta to be on the base_rev union instead of the text
        let subset_str = format!("{:#?}", expand_by[1].1);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        }
}

        let height = self.line_of_offset(text, text.len()) + 1;
    fn line_offsets() {
        b.iter(|| black_box(time::precise_time_ns()));
/// });
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        let mut engine = Engine::new(Rope::from(TEST_STR));
                           styles: &StyleMap, style_spans: &Spans<Style>,
#[must_use]
    #[test]
        // A with ring, hangul, regional indicator "US"
    fn offset_of_line_small() {
            Move(movement) => self.do_move(text, movement, false),
    }
            }
                if s.ends_with('\n') {
    }
                            deletes_bitxor
    }
                metadata_sort_index: None,
            Some((l, off)) => (l, off),
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        assert_eq!(None, a.prev_codepoint_offset(0));

}
}
/// feature makes the payload a `serde_json::Value` (additionally the library
    fn next_rev_id(&self) -> RevId {
    }
        // the generated JSON.
        last_line += if last_col > 0 { 1 } else { 0 };

        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))

    }
///
use find::Find;
const MAX_LEAF: usize = 1024;
    fn from_str(s: &str) -> Result<Rope, Self::Err> {

    fn test_ser_de() {

use serde::de::{Deserialize, Deserializer};
        samples[1].pid = 2;
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
            last_line -= 1;
    ProcessLabels { labels: String },
                    let transformed_deletes = deletes.transform_expand(&s);
/// samples are ordered chronologically for several reasons:
        // interior of first line should be first line


/// Usage of static strings is encouraged for best performance to avoid copies.
    #[test]

            ix = sel_end as isize;

        if let Some(exe_name) = exe_name() {

            cur_len_utf8 += u.len_utf8();
                            ops.push(self.build_update_op("skip", None, n_skip));
    fn bench_two_timestamps(b: &mut Bencher) {
            Some(offset - len)
/// for strings, specialized for incremental editing operations. Most operations
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let revs = basic_insert_ops(inserts, 1);
                        word_cursor.select_word()
                    b.add_span(seg.n, 0, 0);
                              payload: Option<TracePayloadT>,

        if self.len() <= MAX_LEAF {
        let mut all_samples = self.samples.lock().unwrap();
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
    /// Select entire buffer.
//
        // creation) is:
        // We somewhat arbitrarily choose the last region for setting the old-style
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {

    fn add(self, rhs: Rope) -> Rope {
        self.scroll_to = Some(end);
    TRACE.disable();
        if !selection.regions_in_range(offset, offset).is_empty() {

                tid));
        engine.undo([].iter().cloned().collect());
        let rope = Rope::from("hi\ni'm\nfour\nlines");
/// * `categories` - A static array of static strings that tags the samples in
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            Assert(1, "arpbzj".to_owned()),
            };
                                gc_dels = gc_dels.transform_union(inserts);
        let first_rev = &self.revs.first().unwrap();
            Assert(3, "ab".to_owned()),
    fn next_rev_id(&self) -> RevId {
                    if !inserts.is_empty() {
    fn undo_5() {
            b.push_str(&c);
        if f.alternate() {

                                gc_dels = gc_dels.transform_expand(inserts);
        assert_eq!(4, a.offset_of_line(2));
    /// End of the region selected when drag was started.
            args: Some(SampleArgs {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
/// }
        let first_rev = engine.get_head_rev_id().token();
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

// limitations under the License.
        assert_eq!(0, a.line_of_offset(1));
                                     payload: Option<TracePayloadT>,
                        &mut rest[bi - ai - 1]
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        ---#-
        info.lines

        },
        self.text = text;
/// ```
        self.session = session;
        for i in 0..5_000 {
use std::cell::RefCell;
        if let Some(exe_name) = exe_name() {
        let inserts = parse_subset_list("
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            self.first_line = line - (self.height - 1);
}
    }
        assert!(a == a2);
        trace.closure_payload("x", &["test"], || (),
            MetadataType::ThreadName {name} => (Some(name), None),
                    let full_path = exe_name.into_os_string();
            thread_name: Sample::thread_name(),
        self.height
        assert_eq!(snapshot[2].name, "x");
    TRACE.samples_cloned_sorted()
    pub fn get_samples_limit(&self) -> usize {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
// Copyright 2018 The xi-editor Authors.
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        // todo: the correct Find instance needs to be updated with the new parameters
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
            }),
    fn bench_trace_instant_disabled(b: &mut Bencher) {
        where D: Deserializer<'de>,
}
        let b = a.slice(2, 4);
}
        // +2 for exe & thread name
}

    /// Invalidate the current selection. Note that we could be even more
        let start_pos = start_of_line.pos();
    #[cfg(feature = "benchmarks")]

    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
            Merge(0,1),


    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    pub fn disable(&self) {
    #[inline]
        let r = r + Rope::from(&b[MIN_LEAF..]);
            Merge(2,3),
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
        let d = engine.delta_rev_head(after_first_edit);
use multiset::{Subset, CountMatcher};
        });
        fn run_script(&mut self, script: &[MergeTestOp]) {
        let trace = Trace::disabled();
        } else {
    #[test]
    pub fn is_point_in_selection(&self, offset: usize) -> bool {

    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
        self.samples.lock().unwrap().len()
    }
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
use std::mem::size_of;
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
    fn next(&mut self) -> Option<Cow<'a, str>> {
        let subset_str = format!("{:#?}", expand_by[0].1);
    {
    fn next(&mut self) -> Option<Cow<'a, str>> {

            height: 10,
        // even though the actual sampling order (from timestamp of
    ObjectCreated,
        Some(self.cmp(other))
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        }
    fn eq_med() {
#[inline]

        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
                    if s.ends_with('\r') {
#[derive(Copy, Clone)]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        CategoriesT::DynamicArray(c)
        assert_eq!(1, a.line_of_offset(3));
    }

        /// along with the newline that triggered it.
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
/// ```
        assert_eq!(rope.line_of_offset(0), 0);
    #[serde(rename = "ts")]
        let trace = Trace::enabled(Config::with_limit_count(10));
    }
    }
                              start_ns: u64,
    }
    pub fn set_size(&mut self, size: Size) {
// line iterators

        let (mut l, mut offset) = self.get_leaf()?;
/// Applies an optimization where it combines sequential revisions with the
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    {
            utf16_size: count_utf16_code_units(s),
                              to_payload("test_get_samples"));
        assert_eq!(Some(8), a.next_grapheme_offset(0));
/// Given the inital byte of a UTF-8 codepoint, returns the number of
        } else {
    }
    /// Start of the region selected when drag was started (region is
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        }
                              to_payload("test_get_samples"));

            self.truncate(splitpoint);

        for region in self.selection.regions_in_range(start_pos, pos) {
        self.drag_state = None;

        let end = time::precise_time_ns();
        match *self {
            Assert(1, "apbj".to_owned()),
            }
}
use unicode_segmentation::GraphemeCursor;
        // send updated replace status if changed
        let expand_by = compute_transforms(revs);

        self.sample_limit_count

    /// Return the byte offset corresponding to the line number `line`.
    /// The current contents of the document as would be displayed on screen
        result
    fn lines_small() {
            deletes = deletes.transform_expand(&new_trans_inserts);
        // creation) is:
                //self.end - prev_pos

        }
            return ix;
    /// What kind of sample this is.
                    // are empty, could send update removing the cursor.
            None
/// Revision will be used, which means only the (small) set of concurrent edits
    }

        ];
                                     payload: Option<TracePayloadT>,
                return;
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
    }
    /// of individual region movements become carets.
            Replace { chars, preserve_case } =>
fn find_leaf_split_for_bulk(s: &str) -> usize {
    pub duration_us: Option<u64>,
            Assert(0, "ab".to_owned()),
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
            }
}
        if let Some(new_scroll_pos) = self.scroll_to.take() {
    /// vertical scroll position
/// # use xi_rope::Rope;
    }
            text: Rope::default(),
            "styles": styles,
        let mut leaf_offset = pos - offset;
        assert_eq!(trace.get_samples_count(), 0);
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
}
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
            self.set_selection(text, sel);
                            }
    #[allow(dead_code)]
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
impl<'a> Cursor<'a, RopeInfo> {
            rebased_deletes_from_union.union(to_delete)
    #[test]
                    if let Some(last_selection) = self.selection.last() {
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
enum Contents {
            Merge(0,2), Merge(1, 2),
use std::collections::BTreeSet;
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,


    /// this returns the offset of the end of the rope. Arguments higher
categories_from_constant_array!(3);
impl Add<Rope> for Rope {
            height: 10,
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        let trace = Trace::disabled();

            return self.len();
            }
            Assert(0, "abc".to_owned()),

        }
                el.end()
/// ```
/// rather than just this processe's samples).
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        len
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        // 1 MB
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
    }
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    #[test]

        assert_eq!(utf16_units, 17);
    ///
    DynamicArray(Vec<String>),
/// * `categories` - A static array of static strings that tags the samples in
                    sel.add_region(region);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
                pos = leaf_offset + pl.len();
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    /// borrowed from the rope.
/// * `categories` - A static array of static strings that tags the samples in
/// stored as tracing could still be enabled but set with a limit of 0.

    /// the text).
            let b_to_merge = &other.revs[base_index..];
    }
            deletes_from_union,
/// * `categories` - A static array of static strings that tags the samples in
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
/// ```
                    if let Some(last_selection) = self.selection.last() {
        match *self {
                        let mut word_cursor = WordCursor::new(text, region.max());
    TRACE.closure(name, categories, closure)

categories_from_constant_array!(2);
        assert!(self.current.is_some());
            Assert(1, "acb".to_owned()),
/// from multiple distributed sources (i.e. you want to sort the merged result
        ##
        a.lines_all().collect::<Vec<_>>());
                    };
}
    pub fn session_id(&self) -> SessionId {
        if self.is_enabled() {
        let snapshot = trace.samples_cloned_unsorted();

        assert_eq!(snapshot.len(), 9);
            Merge(0,2), Merge(1, 2),
        RopeInfo {
                formatter.write_str("comma-separated strings")
            Assert(0, "acpbdj".to_owned()),
            rendered_styles.push(1);
        self.selection = sel;
            }
            categories: Some(categories.into()),
        assert_eq!(0, b.line_of_offset(0));

        guard
            Assert(1, "acpbdj".to_owned()),
                    }
        let mut sel = Selection::new();
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
            utf16_count += 1;
    /// The name to associate with the pid/tid.  Whether it's associated with
impl Engine {
///
    /// If `line` is equal to one plus the current number of lines,
pub struct LinesRaw<'a> {
//     http://www.apache.org/licenses/LICENSE-2.0
            event_type: SampleEventType::Metadata,
use std::string::ParseError;
        Ok(b.build())
        // of the delta so we can set the cursor before or after the edit, as needed.
        match *self {
/// * `name` - A string that provides some meaningful name to this sample.
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    {
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
enum Contents {
    }
        }
                    };
            sel
        AssertMaxUndoSoFar(usize, usize),
// Unless required by applicable law or agreed to in writing, software
    fn next(&mut self) -> Option<Cow<'a, str>> {
        engine.undo([3].iter().cloned().collect());
        }
        let mut ix = 0;
        // We somewhat arbitrarily choose the last region for setting the old-style
/// Usage of static strings is encouraged for best performance to avoid copies.
                    if !inserts.is_empty() {



        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        if self.is_enabled() {
///
                Some(pos) => offset += pos + 1,

            Rope::concat(
use movement::{Movement, region_movement, selection_movement};
                            warn!("Failed to get string representation: {:?}", e);
        /// Used to store a reversible difference between the old
    #[test]


mod fixed_lifo_deque;

            'E' => SampleEventType::DurationEnd,
        a.lines_all().collect::<Vec<_>>());

///     something_else_expensive();
                    // can only happen on empty input

    /// If the cursor is at the end of the rope, returns the empty string.
#[derive(PartialEq, Debug)]
        let text_with_inserts = text_inserts.apply(&text);
        let contents = match rev.edit {
                } else {

    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
        } else {
    }
        self.find_changed = FindStatusChange::Matches;
            Some(offset - len)
use xi_rope::interval::Interval;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(utf16_units, 17);

    }
    }
        assert_eq!(1, expand_by[0].0.priority);
            if self[i] != other[i] {
                    inserts: ins,
        if !self.lc_shadow.needs_render(plan) { return; }
            r = op.inserts.apply(&r);
    // this is the cost contributed by the timestamp to

        // creation) is:
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
                } else {
        assert_eq!(Some(10), a.next_codepoint_offset(6));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            //} else {
//! a previously committed version of the text rather than the current text,
    fn test_disable_drops_all_samples() {
        },
            Assert(0, "zacbd".to_owned()),
        let mut update = json!({
                }
    // Render a single line, and advance cursors to next line.
    type Item = Cow<'a, str>;
        }
                sel.add_region(SelRegion::new(last.start, offset));
        self.deletes_from_union = new_deletes_from_union;
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
                println!("running {:?} at index {}", op, i);
    #[test]
        let snapshot = trace.samples_cloned_sorted();

#[inline]
        engine.undo([1,3].iter().cloned().collect());
        self.size = size;
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        /// revision that were deleted by this revision.
    pub fn with_limit_count(limit: usize) -> Self {
    // Delta that deletes the right bits from the text
                match elem {
    fn hash<H: Hasher>(&self, state: &mut H) {
                            }
    fn edit_rev_undo() {
        engine.undo([1,2].iter().cloned().collect());

        assert_tokens(&rope, &[
        assert_eq!(rope.line_of_offset(0), 0);
        Self {
    pub fn lines_all(&self) -> Lines {

}

        let mut end = start_pos + len;

                              payload: Option<TracePayloadT>,
            Rope::from(s1.clone()),
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    }
}
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
}
}

        /// Just the `symmetric_difference` (XOR) of the two sets.
        if self.len() <= MAX_LEAF {
                }
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
            args: Some(SampleArgs {
}
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        let line_len = MAX_LEAF + MIN_LEAF - 1;
                    result = cow_append(result, &self.fragment[.. i + 1]);
}
    #[cfg(feature = "json_payload")]
        }
    }
    // TODO: replace this with a version of `lines` that accepts a range
                len += 1;
                    } else {
        MergeTestState::new(3).run_script(&script[..]);
    /// in the slice up to `offset`.
            black_box(time::precise_time_ns());
            self.event_type == other.event_type &&
        self.lines(0, self.len())
            }
                if is_base {
impl<'a> Iterator for LinesRaw<'a> {
    // revision might hold content from an undo group that would otherwise be gc'ed),
    #[test]
                        deletes_from_union = deletes_from_union.transform_expand(inserts);

// Copyright 2018 The xi-editor Authors.
    #[test]
}
    struct MergeTestState {
        match *self {

        };
                            let line = self.render_line(client, styles, text,
        assert_eq!(correct, res);
            Merge(2,0),

pub type RopeDelta = Delta<RopeInfo>;
    use rope::{Rope, RopeInfo};
            let mut sel = drag_state.base_sel.clone();
        &self.text
// limitations under the License.

        self.drag_state = None;
        let mut engine = Engine::new(Rope::from(TEST_STR));
    ProcessLabels { labels: String },
    Metadata
            trace.instant("c", &["test"]);
    match std::env::current_exe() {
/// See `trace_payload` for a more complete discussion.
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
                MergeTestOp::Merge(ai, bi) => {
        let mut leaf_offset = pos - offset;
    }
}
    /// Does a drag gesture, setting the selection from a combination of the drag
            Some(offset + len_utf8_from_first_byte(b))
            sample: Some(Sample::new_duration_marker(
        }
        }

    session: SessionId,
        let new_head_2 = engine.get_head_rev_id().token();
    }
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
        MergeTestState::new(2).run_script(&script[..]);
//! It enables support for full asynchronous and even peer-to-peer editing.
    {
                if !inserts.is_empty() {

            Merge(0,2), Merge(1, 2),
impl Eq for CategoriesT {}
            if cur_len_utf16 >= in_measured_units {
    if x < min {
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        trace.disable();
    {
                MergeTestOp::AssertAll(ref correct) => {

/// Stores the relevant data about a sample for later serialization.
    // transform representing the characters added by common revisions after a point.

        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
                        Some(gc_dels.transform_shrink(&inserts))
    None,
            Assert(0, "ab".to_owned()),
        if !self.is_enabled() {
        assert_eq!(2, a.offset_of_line(1));
    /// The maximum number of entries the tracing data should allow.  Total
        trace.closure_payload("x", &["test"], || {
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
    fn is_boundary(s: &String, offset: usize) -> bool {
            splitpoint
    fn prev_grapheme_offset() {
        //};
        samples.sort_unstable();

            self.current = next_chunk;
///
    pub fn instant<S, C>(&self, name: S, categories: C)
        // of the delta so we can set the cursor before or after the edit, as needed.
{
                Some(Cow::from(s))

            Assert(0, "acpbdj".to_owned()),
use std::fmt;
    }
            Merge(5,4),
///

        if !before {
/// Contains replacement string and replace options.
/// creation.  Roughly corresponds to start_ns but instead there's a
                    // We're super-aggressive about dropping these; after gc, the history
        let a = Rope::from("");
        } else {
    deletes_from_union: Subset,

            engine.undo(undos);
        for sample in all_samples.iter() {
/// have to be considered in `rebase` substantially for normal editing
        assert_eq!(Some(1), a.next_codepoint_offset(0));
    }
    }
/// could trigger incorrect behavior if they collide, so u64 is safe.

        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
    fn edit_rev_undo_2() {
        };

#[macro_use]
        // TODO: want to let caller retain more rev_id's.
}
    fn undo_5() {
    TRACE.block_payload(name, categories, payload)
            Assert(1, "ab".to_owned()),
    ///
    #[test]
            }
    /// Returns a u64 that will be equal for equivalent revision IDs and
        for find in &mut self.find {

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        engine.undo([1].iter().cloned().collect());
        }
            SampleGuard::new_disabled()
        b.push_str(s);
            let mut sample = self.sample.take().unwrap();

            }
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        -> Self
        // the generated JSON.
                    .with_affinity(affinity)
    }
        }
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
        assert_eq!(2, a.line_of_offset(4));
mod sys_tid;
        let mut update = json!({
}
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    /// The line ending is stripped from the resulting string. The final line ending
    pub fn new_duration_marker<S, C>(name: S,
        let inserts_3 = parse_subset_list("
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
// Copyright 2016 The xi-editor Authors.
            //self.cursor.set(self.end);
        use self::MergeTestOp::*;
    fn bench_trace_closure(b: &mut Bencher) {
            }
#[cfg(feature = "dict_payload")]
    }
    // Note: this function would need some work to handle retaining arbitrary revisions,
        }
    }
    pub fn set_size(&mut self, size: Size) {
            // Go crazy


        result
    /// recomputing line wraps.
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));

                if groups.contains(undo_group) {
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    }
        for i in 1..(s1.len() * 3) {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    fn is_boundary(s: &String, offset: usize) -> bool {
        AssertAll(String),
            SampleEventType::FlowStart => 's',
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
    }


        MergeTestState::new(3).run_script(&script[..]);
                    }
        assert_eq!(snapshot[4].name, "z");
            word_cursor.select_word()
        let (first_line, _) = self.offset_to_line_col(text, region.min());
            }
    ///
    }

        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        trace.closure_payload("x", &["test"], || (),


            Assert(2, "ab".to_owned()),
    }
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
            }
        });
                    els: delta.els.drain(..)
    }

        }
/// equivalent performance to a regular trace.  A string that needs to be copied
        assert_eq!(trace.get_samples_count(), 1);
    }
        };
                match elem {
    impl MergeTestState {
        let mut update = json!({
    /// Find parameters and number of matches changed.
pub fn count_newlines(s: &str) -> usize {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        b if b < 0x80 => 1,
            .map(|pos| pos + 1)
                peer.set_session_id(((i*1000) as u64, 0));
        match self.selection.len() {
                        };
use std::ops::Range;
            Assert(1, "apbj".to_owned()),
        let first = max(first, 0) as usize;
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        }
        let script = vec![

/// A guard that when dropped will update the Sample with the timestamp & then

        let end = time::precise_time_ns();
    AsyncStart,
/// patterns. Any large runs of typing in the same place by the same user (e.g
            // with offset == 0, but be defensive.
        }
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
                    };
            rendered_styles.push((sel_start as isize) - ix);
        if self.is_enabled() {
/// patterns. Any large runs of typing in the same place by the same user (e.g
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            args: Some(SampleArgs {
    fn test_get_sorted_samples() {

                    }
    }
#[inline]
    fn eq_med() {
            rev_id_counter: 1,
            }
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            Merge(0,1),



/// # use xi_rope::Rope;
            Some(offset - len)
// Copyright 2016 The xi-editor Authors.
    }
    #[cfg(feature = "benchmarks")]
            },

    DynamicArray(Vec<String>),
/// ```
    /// indicates a search for the next occurrence past the end of the file.
            tid: sys_tid::current_tid().unwrap(),

            end,
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
        }

        MergeTestState::new(3).run_script(&script[..]);
            _ => return
            let style_id = self.get_or_def_style_id(client, styles, &style);
    fn merge_insert_only_whiteboard() {
        }
    s.serialize_char(ph.into_chrome_id())
            enabled: AtomicBool::new(true),
        RopeInfo {
            let common = find_common(a_to_merge, b_to_merge);
    fn test_samples_block() {

            Assert(1, "afc".to_owned()),
    Metadata
            GestureType::LineSelect =>

    out.as_mut_slice().reverse();
///
        --#-
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        selection.add_region(region);
            Some(right_str)
        };
    /// should be constructed via SampleGuard.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            Merge(0,1),
            Assert(1, "cb".to_owned()),
        where D: Deserializer<'de>,
        assert_eq!(1, expand_by[0].0.priority);
            't' => SampleEventType::FlowInstant,
        fn run_op(&mut self, op: &MergeTestOp) {
extern crate lazy_static;

    // TODO: insert from keyboard or input method shouldn't break undo group,
        }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            }
    FlowInstant,
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
        /// The set of groups toggled between undone and done.
    /// The name of the event to be shown.
            a.push('a');
        --#--
                    let e = &mut self.peers[ei];
    }
    a_ids.intersection(&b_ids).cloned().collect()

        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
pub type TracePayloadT = serde_json::Value;
                                                        soft_breaks.as_mut(),
        };
    }
        false
    #[test]
            },
            Some(region) => {
                let (pl, poffset) = self.prev_leaf()?;

fn shuffle(text: &Rope, tombstones: &Rope,
    /// Selects the given region and supports multi selection.
#[derive(Serialize, Deserialize, Debug, Clone)]
    }
    #[test]

    pub fn set_dirty(&mut self, text: &Rope) {
        RopeInfo {
        b.iter(|| {

use client::Client;
                offset = prev;
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
    fn do_cancel(&mut self, text: &Rope) {
        max
    // This computes undo all the way from the beginning. An optimization would be to not
    // Render a single line, and advance cursors to next line.
            name: sample_name,
/// ```
    }
    /// tiny it is effectively O(n). This iterator does not allocate.
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        assert_eq!(Some(3), a.next_grapheme_offset(0));
            // with offset == 0, but be defensive.
        assert!(r != a_rope);
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        MergeTestState::new(3).run_script(&script[..]);
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        engine.edit_rev(1, 1, first_rev, d1);
            Assert(1, "pb".to_owned()),
        assert_eq!(trace.get_samples_count(), 0);
            let b = s.as_bytes()[offset];
    fn edit_rev_simple() {


        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
            offset -= 1;
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
                l = nl;
    }
        assert_eq!("zcpbdj", String::from(&text_2));
            Assert(0, "acbd".to_owned()),
    }
/// assert_eq!("herald", String::from(a));
            Merge(2,1),
        let mut cursor = Cursor::new(self, offset);
    }
    /// This is used to determined whether FindStatus should be sent to the frontend.
        use self::ViewEvent::*;
    #[test]
                // TODO: small nit, merged region should be backward if end < start.

/// discussion on payload.
    where D: serde::Deserializer<'de> {
    fn prev_grapheme_offset() {
                        } else {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
            self.args == other.args
    /// Return the line number corresponding to the byte index `offset`.
// limitations under the License.
use std::hash::{Hash, Hasher};
        }

    }
                }
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,

        trace.instant("5", &["test"]);
        let line = self.line_of_offset(text, offset);


use std::sync::Mutex;
        Ok(Delta::from(d))
            SampleEventType::AsyncEnd => 'e',
/// {
                    let mut selection = self.selection.clone();
        if self.len() != other.len() {
    fn rearrange_1() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        let mut line_num = 0;  // tracks old line cache
/// creation.  Roughly corresponds to start_ns but instead there's a
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(1, b.line_of_offset(2));
trait StringArrayEq<Rhs: ?Sized = Self> {
    {
    }
        }
}
            self.find.push(Find::new());
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    }
        // since one of the two deletes was gc'd this should re-do the one that wasn't

        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
            Some((l, off)) => (l, off),
        memrchr(b'\n', &s.as_bytes()[..offset])
                } else if click_count == Some(2) {
    }
        samples.sort_unstable();
        engine.gc(&gc);
}
    ($num_args: expr) => {
        }
                   r.lines_all().collect::<Vec<_>>());
        assert_eq!(trace.get_samples_count(), 5);
                    }
        self.first_line = first;
    }
        assert_eq!(None, a.prev_codepoint_offset(0));

        for i in 1..(s1.len() * 3) {
        self.sample_limit_count * size_of::<Sample>()
    }
        self.deletes_from_union = deletes_from_union;

    }
}
}
    Bytes(usize),
/// Replace part of a `Rope`:
    }
    /// This is used to determined whether FindStatus should be sent to the frontend.
            rendered_styles.push((iv.start() as isize) - ix);
        assert_eq!(snapshot[3].name, "y");

/// Returns the file name of the EXE if possible, otherwise the full path, or
    }
}
            None
                    base_len: delta.base_len

                    match full_path_str {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
    }
    #[serde(rename = "ph")]
        in_base_units
    }
            }

        }
    }
/// from multiple distributed sources (i.e. you want to sort the merged result
    }
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    }
#[derive(Clone, Debug)]
        let delta = Delta::synthesize(&self.tombstones,

                priority, undo_group, deletes,
                           style: &Style) -> usize {

use interval::Interval;

    }
    /// Find what the `deletes_from_union` field in Engine would have been at the time
    }
    ///
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
                first_sample_timestamp,

    #[test]
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
// You may obtain a copy of the License at
        let invalid = if all_caret {
    fn next(&mut self) -> Option<Cow<'a, str>> {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
                _ => { }
//
        offset
                },
/// With `json_payload` feature:
                            styles: &StyleMap, style_spans: &Spans<Style>,
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
            let c = i.to_string() + "\n";
trait StringArrayEq<Rhs: ?Sized = Self> {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
///
                let offset = self.selection[0].start;
        let mut ops = Vec::new();
                    text.slice_to_string(start, end)
    type Item = Cow<'a, str>;
            self.set_selection(text, sel);
    #[test]
    }
            self.find.push(Find::new());
        }
    pub fn do_find_all(&mut self, text: &Rope) {


/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    }
    /// # Panics
                c.provide_context(&pl, self.pos() - poffset);
        Self {
        ];

    fn lines_med() {
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
// Copyright 2016 The xi-editor Authors.


    enum MergeTestOp {

    text: Rope,
        let expand_by = compute_transforms(revs);
        -----#
    // allowing us to use the same method to insert the text into the tombstones.
        // probably change as the recording internals change.
    /// The current contents of the document as would be displayed on screen
        use serde::de::Visitor;
        let cur_deletes_from_union = &self.deletes_from_union;
        assert_eq!(Some(9), b.next_codepoint_offset(5));
    }
        ).min_by_key(|x| {
            } else {
                            Cursor::new(breaks, offset));
        fn new(count: usize) -> MergeTestState {
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
/// ```rust
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
    }
/// Enable tracing with a specific configuration. Tracing is disabled initially

        self.enable_config(Config::default());
        let (new_text, new_tombstones) =
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        if last_col == 0 && last_line > first_line {
/// assert_eq!("llo wo", String::from(c));
                    // are empty, could send update removing the cursor.
    }
                Contents::Undo { .. } => panic!(),
                match elem {
        assert!(leaf.is_char_boundary(end));
        let result = closure();

                              to_payload("test_get_samples"));
        assert_eq!(None, a.prev_grapheme_offset(0));



        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// # Performance

        AssertMaxUndoSoFar(usize, usize),
            }),
fn ns_to_us(ns: u64) -> u64 {
                // sanitize input
            SampleEventType::FlowStart => 's',
#[derive(Serialize, Deserialize, Debug, Clone)]
        let head2 = engine.get_head_rev_id().token();

    #[test]

        }
        let edit_iv = Interval::new_closed_open(start, end);
        let self_iv = Interval::new_closed_closed(0, self.len());
    ///
}
    }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        let a = Rope::from("a\nb\nc");
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
            }
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
                // TODO create InsertDelta directly and more efficiently instead of factoring
        a.lines_all().collect::<Vec<_>>());
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            Sample::new_instant("remote pid", &[], None)];
        ---#--
                self.run_op(op);
                _ => { }
        for find in &mut self.find {
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        // Note: for committing plugin edits, we probably want to know the priority
/// than a string that needs to be copied (or ~4.5x slower than a static string)
    TRACE.block_payload(name, categories, payload)
        let new_head_2 = engine.get_head_rev_id().token();
        let mut sel = Selection::new();
            }
///
            "n": n,
            }
            'N' => SampleEventType::ObjectCreated,
        self.set_selection_raw(text, selection);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            Assert(0, "acrbdz".to_owned()),

    fn gc_2() {
    /// This is a `Subset` of the "union string" representing the characters
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
    {
    fn measure(info: &RopeInfo, _: usize) -> usize {
            Merge(0,2), Merge(1, 2),
        let mut line_num = 0;  // tracks old line cache
        }
    }

            a.push('a');
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
            {
        engine.gc(&gc);
    CompleteDuration,
                MergeTestOp::Assert(ei, ref correct) => {
        let deletes_from_union = parse_subset("-#----#");
            }
            r = op.inserts.apply(&r);
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
        let trace = Trace::enabled(Config::default());

        match *self {
    {
                self.do_set_replace(chars, preserve_case),
// You may obtain a copy of the License at
impl Ord for Sample {
                            edit: Edit {
}
        // todo: the correct Find instance needs to be updated with the new parameters
        }
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        }
    }
            tid: sys_tid::current_tid().unwrap(),
    out.as_mut_slice().reverse();
    /// Exposed for unit tests.
                    }
        ---#--
            }
        assert_eq!("-###-", &subset_str);
        self.drag_state = None;
        self.subseq(iv)
    tombstones: Rope,
}
                continue;

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
    /// tiny it is effectively O(n). This iterator does not allocate.
            while !s.is_char_boundary(offset - len) {
            let head = engine.get_head_rev_id().token();
            None => None
    fn prev(s: &String, offset: usize) -> Option<usize> {

        if self.highlight_find {
                    }
                // Deprecated (kept for client compatibility):

        assert_tokens(&rope, &[
        all_samples.push_back(sample);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
}
        /// should go before typed text.
        LinesRaw {
            Merge(0,2), Merge(1, 2),
        self.text = text;
            Assert(0, "cbd".to_owned()),
    /// Only number of matches changed
        let end = self.line_col_to_offset(text, line + 1, 0);
    a_ids.intersection(&b_ids).cloned().collect()
                    filename.to_str().map(|s| s.to_string())
pub fn len_utf8_from_first_byte(b: u8) -> usize {
        let (start, end) = {
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        let start = time::precise_time_ns();
            ),

            // Go crazy
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
// Copyright 2016 The xi-editor Authors.

        self.revs.last().unwrap().rev_id
/// conforms to is currently determined by the feature this library is compiled
    pub fn get_head_rev_id(&self) -> RevId {
    #[allow(dead_code)]
        }
use interval::Interval;
        }
        assert_eq!(None, a.prev_grapheme_offset(0));
        for i in 0..5_000 {
    // TODO: switch to a persistent Set representation to avoid O(n) copying
    /// The maximum amount of space the tracing data will take up.  This does
    /// 96 bits which is more than sufficient for this to never happen.

    }
        }
        ");
                                        &selections, &hls, style_spans);
    }
        engine.undo([1,2].iter().cloned().collect());
                    .with_horiz(horiz)
    pub fn line_of_offset(&self, offset: usize) -> usize {
    fn goto_line(&mut self, text: &Rope, line: u64) {
        assert_eq!(trace.is_enabled(), true);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),

        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
/// monotonically increasing single global integer (when tracing) per creation
                    }
            Merge(2,0),
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        // if self.end is inside this chunk, verify that it is a codepoint boundary
enum MetadataType {
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.

        engine.edit_rev(1, 3, new_head_2, d3);

    DurationBegin,
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        let mut result = String::new();
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
                WrapWidth::None => (),
    /// None of the find parameters or number of matches changed.
            }
}
        assert_eq!(trace.get_samples_count(), 0);
    fn from(r: Rope) -> String {
                                priority,
    /// slices will be nonempty.
    #[allow(dead_code)]
    offset: usize,
                Contents::Undo { .. } => panic!(),
struct DragState {
        assert_eq!(0, a.offset_of_line(0));
    }
            }

            thread_name: Sample::thread_name(),
    fn measure(_: &RopeInfo, len: usize) -> usize {

///
            SampleEventType::FlowStart => 's',
        for i in ((edits-max_undos)..edits).rev() {
    fn identity() -> Self {
            Merge(0,2), Merge(1, 2),
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    ///
}

        let r = r + Rope::from(&b[MIN_LEAF..]);
            self.tid == other.tid &&
    }
            utf16_size: count_utf16_code_units(s),
        if !self.is_enabled() {


        }
/// stored as tracing could still be enabled but set with a limit of 0.
                let (last, rest) = self.sel_regions().split_last().unwrap();
//! pending edit in flight each.
    }

            thread_name: None,
            // shouldn't be called with this, but be defensive
/// ```rust
            rendered_styles.push((sel_start as isize) - ix);
}
))]
        // if we have active find highlights, we don't collapse selections
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));

/// acquires a dependency on the `serde_json` crate.
// distributed under the License is distributed on an "AS IS" BASIS,
#[macro_use]

            Merge(0,1), // the merge from the whiteboard scan
    fn next_rev_id(&self) -> RevId {
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    Bytes(usize),
///
            'N' => SampleEventType::ObjectCreated,
        assert_eq!(trace.get_samples_limit(), 0);
            }
/// fn something_else_expensive(value: u32) {
use interval::Interval;

        let head_rev = &self.revs.last().unwrap();
        let mut engine = Engine::new(Rope::from(TEST_STR));
///

extern crate serde;
        deletes_from_union
    /// Note: unlike movement based selection, this does not scroll.
categories_from_constant_array!(1);
        let revs = basic_insert_ops(inserts, 1);
        assert_tokens(&rope, &[
                false => x.start
                MetadataType::ProcessName {name: exe_name},
        in_base_units
fn ns_to_us(ns: u64) -> u64 {
        ids.iter().cloned().map(|i| {
        // todo: this will be changed once multiple queries are supported
// line iterators

    #[test]

        // move deleted or undone-inserted things from text to tombstones
        let utf8_offset = 9;
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));

    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
    // TODO make this faster somehow?
    /// Returns the regions of the current selection.
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        self.subseq(iv)
            Some(offset - len)
    }

}
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
fn exe_name() -> Option<String> {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    #[test]
        // rather than emitting an explicit start/stop to reduce the size of
        assert!(r != b_rope + a_rope);
    a_ids.intersection(&b_ids).cloned().collect()
    }
        engine.edit_rev(1, edits+1, head, d1);
        -> SampleGuard
            let end = self.line_of_offset(last_text, iv.end()) + 1;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
                    s = inserts.transform_union(&s);
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        let a = Rope::concat(
                });
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {

        }
                Delta {
        } else {
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
/// }
    /// recomputing line wraps.
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
/// # Examples
        where S: Into<StrCow>, C: Into<CategoriesT>
        match self.breaks {
    /// The largest undo group number of any edit in the history up to this
        let mut delta = serializer.serialize_struct("Delta", 2)?;

            // Snap to grapheme cluster boundary
        }
        trace.closure_payload("y", &["test"], || {},
        let offset = self.line_col_to_offset(text, line as usize, 0);

            self.find.push(Find::new());
    }
    #[test]
            'M' => SampleEventType::Metadata,
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    // * Code units in some encoding
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
//! this central engine. It provides the ability to apply edits that depend on
    }
impl<'a> SampleGuard<'a> {
            Assert(2, "ab".to_owned()),
        self.deletes_from_union = new_deletes_from_union;

        let result = closure();
        ix
    }
            "something", &["benchmark"],
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        assert_eq!(samples[1].name, "local pid");
        expand_by = next_expand_by;
#[derive(Clone, Copy)]
// You may obtain a copy of the License at
    }
        if let Some(ix) = style_map.lookup(style) {
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
extern crate serde_derive;
            Some(ref breaks) => {
        as_vec
        assert_eq!(Some(17), a.next_grapheme_offset(9));
        use self::MergeTestOp::*;
        // multiple queries; select closest occurrence
        let all_samples = self.samples.lock().unwrap();
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
                        let mut word_cursor = WordCursor::new(text, region.max());
            MetadataType::ProcessName {name} => (Some(name), None),
        assert_eq!(snapshot[7].name, "z");
            self.shrink_to_fit();
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                self.find_changed = FindStatusChange::All;

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        assert_eq!(snapshot.len(), 9);
    fn build_delta_2() -> Delta<RopeInfo> {
        let head2 = engine.get_head_rev_id().token();
        ]);
                    self.fragment = &self.fragment[i + 1 ..];
    fn edit_rev_undo() {
        struct CategoriesTVisitor;
    }
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
    /// None of the find parameters or number of matches changed.
                    self.set_selection(text, selection);
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    fn test_get_sorted_samples() {
    max_undo_so_far: usize,
    // this should have the same behavior, but worse performance
        engine.gc(&gc);
        let (iv, new_len) = delta.summary();
        ");
    pub fn slice(&self, start: usize, end: usize) -> Rope {
        while let Err(incomp) = next_boundary {
    fn compute_info(s: &String) -> Self {
///
        assert_eq!(1, expand_by.len());
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
    }
            tid: tid,
        ");
        // the generated JSON.
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
                priority: new_priority,
    }
    TRACE.enable_config(config);
        }

            return Vec::with_capacity(0);
        assert_eq!(Some(1), a.next_codepoint_offset(0));
                            ops.push(self.build_update_op("skip", None, n_skip));
                last_priority = Some(priority);
                            if !deletes.is_empty() {
            self.idx += 1;
    }
    #[test]
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        let mut hls = Vec::new();

    replace_changed: bool,
        a.lines_all().collect::<Vec<_>>());
    #[cfg(feature = "benchmarks")]
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    }
            match memchr(b'\n', &s.as_bytes()[offset..]) {
    {
            }
    /// The incrementing revision number counter for this session used for `RevId`s
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>

    #[cfg(feature = "benchmarks")]
/// * `name` - A string that provides some meaningful name to this sample.
    out.as_mut_slice().reverse();
#[derive(Clone, Copy)]
}
    fn eq(&self, other: &Sample) -> bool {
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
    }
            r = op.inserts.apply(&r);
            "op": op,
        for sample in all_samples.iter() {
    /// Each instance represents a separate search query.

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    /// indicates a search for the next occurrence past the end of the file.

    /// Offset of the point where the drag started.
    }
/// let mut a = Rope::from("hello world");

                                gc_dels = gc_dels.transform_union(inserts);
                        Some(gc_dels.transform_shrink(&inserts))
/// Returns the operations in `revs` that don't have their `rev_id` in
        assert_eq!("a", String::from(&tombstones_2));
                Some(i) => {
            SelectionIntoLines => self.do_split_selection_into_lines(text),
        }
        for mut find in self.find.iter_mut() {
    /// Generate line breaks based on width measurement. Currently batch-mode,

    }
        }
categories_from_constant_array!(5);
//! This module actually implements a mini Conflict-free Replicated Data Type
            FindNext { wrap_around, allow_same, modify_selection } =>
extern crate log;
                    els: delta.els.drain(..)

                if groups.contains(undo_group) {
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the

    #[test]

            // cursor

    /// It does undos and gcs in a pattern that can actually happen when using the editor.
            1 if self.selection[0].is_caret() => {

            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
    fn gc_scenario(edits: usize, max_undos: usize) {
            "styles": styles,
                (drag_state.max, min(offset, drag_state.min))
    /// Select entire buffer.
#[derive(Clone, Copy)]
                                                        soft_breaks.as_mut(),
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    // A colliding session will break merge invariants and the document will start crashing Xi.
            }

        cur_len_utf8
        self.set_selection_raw(text, selection);
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            client.scroll_to(self.view_id, line, col);
    #[allow(dead_code)]
/// ```
}
            Assert(0, "ab".to_owned()),
    /// Select entire buffer.

            _ => panic!("Unexpected chrome sample type '{}'", symbol)
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
    /// Determine whether `offset` lies on a codepoint boundary.
        count_utf16_code_units(&s[..in_base_units])
        use self::MergeTestOp::*;
        let new_inserts = union_ins_delta.inserted_subset();
    ///
        assert_eq!(Some(6), a.next_codepoint_offset(3));
                el.serialize_field(start)?;

        Subset::new(len)
            } else {
    num: u32,
///
                    }

        /// Used to order concurrent inserts, for example auto-indentation
{
        let deletes_from_union = Subset::new(0);
    }
            // Do the merge one direction

            pending_render: false,
            base_len: usize
                }
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
                    b.add_span(seg.n, 0, 0);
                    inserts: ins,
// Low level functions
            edit: Edit {
/// conversions in both directions.
            Assert(0, "bdc".to_owned()),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        info.utf16_size
    /// Create a new Engine with a single edit that inserts `initial_contents`
            pos += 1;
pub struct RopeInfo {

    match std::env::current_exe() {

        }
        if let Some(sel) = new_sel {
    }
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let script = vec![
    None,
        assert_eq!(samples[0].name, "remote pid");
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    #[cfg(feature = "benchmarks")]
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    }
        assert_eq!(5, a.offset_of_line(3));
        tombstones = new_tombstones;
}

/// Enable tracing with the default configuration.  See Config::default.
            Merge(1,2),

    find_leaf_split(s, MIN_LEAF)

        Some(&leaf[start_pos .. end])


                        _ => break
                        Ok(s) => Some(s),
            let next_chunk = self.inner.next();
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
/// A static string has the lowest overhead as no copies are necessary, roughly
}
    }
    /// Returns a slice of the string from the byte range [`start`..`end`).
            for find in self.find.iter() {

    }
        self.enabled.load(AtomicOrdering::Relaxed)
        assert_eq!(rope.line_of_offset(3), 1);
            }
        let first_rev = engine.get_head_rev_id().token();
                                gc_dels = gc_dels.transform_union(inserts);
                    }
        self.view_id
    session_id: SessionId,
    ///
/// for strings, specialized for incremental editing operations. Most operations
                        let un_deleted = deletes_from_union.subtract(deletes);
                    base_len: delta.base_len
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
            args: Some(SampleArgs {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            Merge(2,0),
        engine.edit_rev(1, 1, first_rev, d1.clone());
            }
    /// The session ID used to create new `RevId`s for edits made on this device
    ThreadSortIndex { sort_index: i32 },
    wrap_col: WrapWidth,
            match c.edit {
    // recompute the prefix up to where the history diverges, but it's not clear that's
                let (pl, poffset) = self.prev_leaf()?;
                    } else {
        }
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
    /// Generate line breaks based on width measurement. Currently batch-mode,

    let mut next_expand_by = Vec::with_capacity(expand_by.len());
                el.end()
    #[cfg(feature = "benchmarks")]
            if let Some(replace) = self.get_replace() {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        if offset >= text.len() {
use std::string::ParseError;
    #[test]
    #[cfg(feature = "dict_payload")]
        let mut b = String::new();
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    fn delta_rev_head_2() {
        let a = Rope::from("a\nb\nc");

            }
    /// in the range of 511-1024 bytes.
    /// Note: unlike movement based selection, this does not scroll.
        };

    /// An arbitrary payload to associate with the sample.  The type is
    ///

use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};


    pub timestamp_us: u64,
    }
            }
        let b = a.slice(1, 10);
#[inline]
/// Find a set of revisions common to both lists
    /// # Panics
        assert_eq!(snapshot[8].name, "x");
    TRACE.enable_config(config);

            rendered_styles.push(sel_end as isize - sel_start as isize);
        }

                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        if let Some((l, offset)) = self.get_leaf() {
    }
    /// Time complexity: O(log n)

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
                            }
        let height = self.line_of_offset(text, text.len()) + 1;

pub struct View {
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
            tid: tid,
    }
    pub fn enable_config(&self, config: Config) {

    pub fn is_point_in_selection(&self, offset: usize) -> bool {
                }
pub fn count_newlines(s: &str) -> usize {
struct DragState {
    }
            None
pub type TracePayloadT = serde_json::Value;
    }
            Merge(1,0),
    /// set with this function, which will make the revisions they create not have colliding IDs.

        if let Contents::Edit {priority, inserts, .. } = r.edit {
    fn edit_rev_undo_2() {

        assert!(r == a_rope.clone() + b_rope.clone());
        where S: Serializer
        // a, b, y, z, c, x
        }
    /// Only works well for ASCII, will probably not be maintained long-term.
                SelectionModifier::Add => {
            CategoriesT::StaticArray(ref self_arr) => {
            if inserts.is_empty() {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        assert_eq!(0, a.line_of_offset(1));
        where S: Into<StrCow>, C: Into<CategoriesT>
{
        self.samples.lock().unwrap().len()
                peers.push(peer);
        }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
            .map(|pos| pos + 1)
            Assert(0, "zcpbdj".to_owned()),
            // cursor
        while let Err(incomp) = prev_boundary {
        let b = Rope::from("b");
        self.set_selection(text, sel);
            let after = full_priority >= trans_priority;  // should never be ==
        }
    }
        }
        });
    }


        use self::MergeTestOp::*;
    #[bench]
            Assert(1, "ab".to_owned()),
    fn merge_whiteboard() {
    }
    }
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
}

                payload: payload,
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
        ]);
        let (mut l, mut offset) = self.get_leaf()?;
            // On the next step we want things in expand_by to have op in the context
    #[cfg(feature = "benchmarks")]
// Copyright 2018 The xi-editor Authors.
        if let Some(occ) = closest_occurrence {
    }
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    ///
        rope.offset_of_line(5);

            Assert(0, "acrpbdzj".to_owned()),
// easily delta-compressed later.
///
        // insert a character at the beginning
        let trace = Trace::enabled(Config::default());
    #[inline]
/// * `categories` - A static array of static strings that tags the samples in
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
                    filename.to_str().map(|s| s.to_string())
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        assert_eq!("1234567", String::from(r));
    #[serde(skip_serializing_if = "Option::is_none")]
}
        let mut a = String::new();
    /// the heap, counters, etc); just the data itself.
    /// set with this function, which will make the revisions they create not have colliding IDs.
    }
    //
        assert_eq!(1, expand_by.len());
    fn from(c: Vec<String>) -> CategoriesT {
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
            new_deletes = new_deletes.transform_expand(&new_inserts);
        if !cursors.is_empty() {
        for &(sel_start, sel_end) in sel {

                find_leaf_split_for_bulk(s)

            Assert(2, "ab".to_owned()),
        assert_eq!(Some(6), a.prev_codepoint_offset(10));

    pub fn disabled() -> Self {
            // Snap to grapheme cluster boundary

    type Item = &'a str;
        ");
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
            match memchr(b'\n', self.fragment.as_bytes()) {
        let mut soln = String::from("h");

    }
        self.timestamp_us.cmp(&other.timestamp_us)

            GestureType::ToggleSel => self.toggle_sel(text, offset),
/// However, anything that can be converted into a Cow string can be passed as
            for rev in &self.revs {
                }
        }
                leaf_offset = self.pos() - poffset;
    bytecount::count(s.as_bytes(), b'\n')
                      delta: &Delta<RopeInfo>, client: &Client,
use std::ops::Add;
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
//! CRDT implementation techniques, because all operations are serialized in
        }


                    }
        match ty {
    fn arr_eq(&self, other: &Rhs) -> bool;
        // the front-end, but perhaps not for async edits.
//
        }
    }
        let mut d = TracePayloadT::with_capacity(1);
        Ok(exe_name) => {


        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

                    linewrap::rewrap_width(breaks, text, width_cache,
        b.iter(|| sys_pid::current_pid());
    }
    current: Option<&'a str>,
            rendered_styles.push((iv.start() as isize) - ix);

    // * Actual measurement in text layout
    Undo {

}
/// with.  By default, the type is string-like just like name.  If compiled with
            Some(ref breaks) => {
    fn bench_trace_block_disabled(b: &mut Bencher) {
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
                len += 1;
///
    }

            } else {
        use self::MergeTestOp::*;
    }

                return None;
        let first_rev = engine.get_head_rev_id().token();
        Cow::from(b)
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
    fn test_get_samples_nested_trace() {
                        DeltaElement::Insert(Rope::from(s)),
                    RopeDeltaElement_::Insert(s) =>
        RopeInfo {
    }
        let mut a = String::new();
            }
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    // Render a single line, and advance cursors to next line.

            offset,
/// {
}
impl<'a> Drop for SampleGuard<'a> {
    for r in revs {
    Edit {
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
    fn rebase_1() {
        d_builder.delete(Interval::new_closed_open(10, 36));
        // creation) is:
    }
            if self[i] != other[i] {

        };
    /// Find the first revision that could be affected by toggling a set of undo groups
}
    /// Front end's line cache state for this view. See the `LineCacheShadow`
                    let e = &mut self.peers[ei];
/// conversions in both directions.
    pub preserve_case: bool
// Copyright 2016 The xi-editor Authors.
                Some(i) => {
                        let offset = self.offset_of_line(text, start_line);

    // recompute the prefix up to where the history diverges, but it's not clear that's
    session_id: SessionId,
extern crate serde_json;
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
                let (pl, poffset) = self.prev_leaf()?;

    }

        }
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {

        let trace = Trace::enabled(Config::with_limit_count(20));
    }
//
                }
        let mut cursors = Vec::new();
    #[cfg(feature = "benchmarks")]
        }
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
}
    find_changed: FindStatusChange,
        for i in 0..self.len() {
    inserts: InsertDelta<RopeInfo>,
impl<'de> serde::Deserialize<'de> for CategoriesT {
}
        // even though the actual sampling order (from timestamp of
    }
            Cancel => self.do_cancel(text),
        let a = Rope::from("a\nb\n");
    /// If the cursor is at the end of the leaf, advances to the next leaf.
            Revision {
        if !self.is_enabled() {
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
// Additional APIs custom to strings
                    if !deletes.is_empty() {
// The advantage of using a session ID over random numbers is that it can be


            "something", &["benchmark"],
/// Returns all the samples collected so far ordered chronologically by
        }
    TRACE.instant(name, categories);
    ///
                leaf_offset = self.pos() - poffset;
            None => return "",
            }
            Assert(1, "arpb".to_owned()),
///
// You may obtain a copy of the License at
                      width_cache: &mut WidthCache, keep_selections: bool)
            1 if self.selection[0].is_caret() => {

            Some(Cow::Borrowed(mut s)) => {
            let first_rev = engine.get_head_rev_id().token();
        let mut a = Rope::from("hello world");
                         first_line: usize, last_line: usize, pristine: bool) {


            self.truncate(splitpoint);
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        LinesRaw {

    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
/// are shared.
#![cfg_attr(feature = "cargo-clippy", allow(
    }
    /// Note: `edit` and `edit_str` may be merged, using traits.
            }
        let params = json!({
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
///     something_expensive()
                        &mut start[bi]
    /// Time complexity: O(log n)
// Unless required by applicable law or agreed to in writing, software
                let (pl, poffset) = self.prev_leaf()?;
/// * `categories` - A static array of static strings that tags the samples in
            thread_name: Sample::thread_name(),
            let b = s.as_bytes()[offset];
        assert!(r != b_rope + a_rope);
        b.iter(|| sys_pid::current_pid());
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
            },
                payload: None,
        let max_line = self.measure::<LinesMetric>() + 1;
                while cursor.pos() < region.max() {
/// ```
        MergeTestState::new(4).run_script(&script[..]);
    fn lines_med() {
        let inserts = parse_subset_list("

                leaf_offset = self.pos() - poffset;
    }
use width_cache::WidthCache;

            self.idx = 0;
    #[serde(rename = "sort_index")]
            s.as_bytes()[offset - 1] == b'\n'
    fn accumulate(&mut self, other: &Self) {
        }
    }
        assert_eq!(utf8_offset, 9);
        use self::MergeTestOp::*;
            Merge(1,0),
    }
pub struct RevId {
/// than a string that needs to be copied (or ~4.5x slower than a static string)
    #[test]
    pub fn next_codepoint(&mut self) -> Option<char> {
    /// the frontend.
    #[cfg(feature = "benchmarks")]
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
    }

        let first_rev = engine.get_head_rev_id().token();
                    }
#[inline]
        assert_eq!("#-####-", &subset_str);
                    return None;
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
use xi_rope::tree::Cursor;
/// Replace part of a `Rope`:
    #[test]
/// associated performance hit across the board for turning it on).
/// as opposed to thousands of revisions.
    }

        if f.alternate() {
        in_measured_units
        }
/// });
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    find: Vec<Find>,
        }
        }
    ThreadName { name: String },
        let mut sel = Selection::new();
            Merge(2,3),
                            let line = self.render_line(client, styles, text,
                        Cow::Owned(un_deleted.transform_shrink(inserts))
        Ok(Delta::from(d))
#[inline]

            _ => return
pub struct RopeInfo {
            'D' => SampleEventType::ObjectDestroyed,
                client.replace_status(self.view_id, &json!(replace))
        }
    /// after an edit is applied, to allow batching with any plugin updates.
        trace.instant("2", &["test"]);
            Merge(0,1),
    pub metadata_name: Option<StrCow>,

                    }
}
use std::cell::RefCell;
        &self.text
                }
        self.enabled.store(false, AtomicOrdering::Relaxed);
#[derive(Serialize, Deserialize, Clone, Debug)]
        d_builder.delete(Interval::new_closed_open(10, 36));
        assert_eq!(5, a.offset_of_line(3));
        let mut end = start_pos + len;
    pub fn lines_all(&self) -> Lines {
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
    } else {
        // todo: for now only a single search query is supported however in the future
            SampleEventType::CompleteDuration => 'X',
use multiset::{Subset, CountMatcher};
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
    /// controlled by features (default string).
        // position after 'f' in four
            black_box(time::precise_time_ns());
            rev_id: self.next_rev_id(),
            Assert(2, "adfc".to_owned()),
            sel
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
//



use find::Find;
    }
    fn prev_grapheme_offset() {
        // probably change as the recording internals change.
            },
        let thread = std::thread::current();
    {
                }
    /// Selects the given region and supports multi selection.
            l[offset..].chars().next()
                    let e = &mut self.peers[ei];

    }
        let first_rev = engine.get_head_rev_id().token();
                return false;
// Additional APIs custom to strings
pub struct Trace {
    fn compute_transforms_2() {
            Assert(2, "ab".to_owned()),
        let first_rev = engine.get_head_rev_id().token();
        /// revision that were deleted by this revision.
        }
        let mut line_num = 0;  // tracks old line cache
impl<'a> Drop for SampleGuard<'a> {
            let base_index = find_base_index(&self.revs, &other.revs);
    /// a point that should be scrolled into view.
    }
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.


    }
    fn identity() -> Self {



            Rope::from(s1.clone()),
use rpc::{GestureType, MouseAction, SelectionModifier};
            let max_undo = self.max_undo_group_id();
    fn utf16_code_units_metric() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        });
    }



                metadata_sort_index: None,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        for rev in &self.revs[first_candidate..] {
        samples
}
        let trace = Trace::enabled(Config::with_limit_count(10));
        if s.len() <= MAX_LEAF {
        let a_rope = Rope::from(&a);
        true

            CategoriesT::StaticArray(ref self_arr) => {
pub fn count_newlines(s: &str) -> usize {
        let ix = style_map.add(style);
    /// Invalidate the current selection. Note that we could be even more
pub struct Size {
    #[bench]
            find_changed: FindStatusChange::None,
                                  style_spans, &plan, pristine);
        }
categories_from_constant_array!(2);
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        // NOTE 2: from_micros is currently in unstable so using new
    fn arr_eq(&self, other: &Rhs) -> bool;
        assert_eq!(0, a.lines_raw_all().count());
                cursors.push(c - start_pos);
        ----
                undo_group,
            args: Some(SampleArgs {
        cursor.next::<BaseMetric>()
    /// Width in px units, requiring measurement by the front-end.
impl<'a> Iterator for ByteIter<'a> {
            categories: Some(categories.into()),
    fn to_payload(value: &'static str) -> TracePayloadT {
            'X' => SampleEventType::CompleteDuration,
    //TODO: implement iter_chunks using ranges and delete this
        let script = vec![
        assert_eq!("#-####-", &subset_str);

                         hls: &[(usize, usize)],
///
            Merge(0,1),
            CategoriesT::StaticArray(ref self_arr) => {
    fn is_ok_child(&self) -> bool {
                    RopeDeltaElement_::Copy(start, end) =>
                std::thread::sleep(std::time::Duration::new(0, 1000));
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// Atomicity is implicit, putting the offset
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    // transform representing the characters added by common revisions after a point.
    use serde_test::{Token, assert_tokens};
    /// End of the region selected when drag was started.
//! pending edit in flight each.
    }
            }

                }
                    for (ei, e) in self.peers.iter().enumerate() {
            let right_str = self[splitpoint..].to_owned();
    let mut last_priority: Option<usize> = None;
    }
        let mut all_samples = self.samples.lock().unwrap();
        /// should go before typed text.
        engine.undo([1].iter().cloned().collect());
    wrap_col: WrapWidth,
        }
    }
        // rather than emitting an explicit start/stop to reduce the size of

}
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        for u in s.chars() {
        MergeTestState::new(2).run_script(&script[..]);
        let mut cursor = Cursor::new(self, offset);
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {

    #[cfg(feature = "benchmarks")]
            self.name == other.name &&
    }
                    let after = new_full_priority >= full_priority;  // should never be ==
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);

        // interior of last line should be last line
/// supported as an optimization when only one reference exists, making the
    #[test]
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
            if sel_end_ix > sel_start_ix {
        };
    }
    // * Unicode codepoints
            match modify_selection {
        where S: Into<StrCow>, C: Into<CategoriesT>
                            }
                if !inserts.is_empty() {
/// let a = Rope::from("hello world");
        }
                    }
    fn prev(s: &String, offset: usize) -> Option<usize> {
            GestureType::RangeSelect => self.select_range(text, offset),
    #[serde(rename = "ts")]
    }
        Some(&leaf[start_pos .. end])
        samples.sort_unstable();
    // and partly because you need to retain more undo history, to supply input to the


        assert_eq!(1, b.line_of_offset(2));
                len += 1;
impl Metric<RopeInfo> for BaseMetric {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    fn merge_associative() {
                formatter.write_str("comma-separated strings")

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
///
/// the `base_revs`. This allows the rest of the merge to operate on only
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        let a = Rope::from("a\r\nb\r\nc");
    } else {
        let mut r = Rope::from("27");
                s.len()
            Assert(0, "zcbd".to_owned()),
    }
            let mut len = 1;
 //additional cursor features
        (self.pid, self.timestamp_us).hash(state);
    fn test_cross_process_samples() {
                    return i + 1; // +1 since we know the one we just found doesn't have it
    /// vertical scroll position

        }
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        self.set_selection_raw(text, selection);
/// See `trace_payload` for a more complete discussion.
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
        }
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
            'e' => SampleEventType::AsyncEnd,
        // TODO: simplify this through the use of scopeguard crate
        use self::MergeTestOp::*;
}
    }
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
use unicode_segmentation::GraphemeIncomplete;
    }
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
        // spam cmd+z until the available undo history is exhausted
        Some(self.cmp(other))
    #[test]
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
    /// slices will be nonempty.
        let mut d_builder = Builder::new(TEST_STR.len());
    // https://github.com/serde-rs/serde/issues/1189 is fixed.

    replace: Option<Replace>,
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
pub type Rope = Node<RopeInfo>;
    }
    },
    ProcessLabels { labels: String },
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
    #[test]

                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        }
        self.wrap_col = WrapWidth::Width(self.size.width);
        assert_eq!(rope.line_of_offset(1), 0);
/// Boundary is atomic and determined by codepoint boundary.
                if is_base {
    lc_shadow: LineCacheShadow,
        let trace = Trace::enabled(Config::with_limit_count(10));
            deletes_from_union = match rev.edit {


                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        offset
    /// of the chunks is indeterminate but for large strings will generally be
    type Err = ParseError;


        assert_eq!(snapshot[8].name, "x");
const MAX_LEAF: usize = 1024;
        }

}
    /// List of categories the event applies to.
    fn basic_rev(i: usize) -> RevId {
            Assert(1, "ab".to_owned()),
    }
#[derive(PartialEq, Debug)]
            }
        prev_boundary.unwrap_or(None)
        engine.edit_rev(1, 2, initial_rev, d1.clone());
            return ix;

            Assert(2, "ab".to_owned()),
        let mut leaf_offset = pos - offset;
    }
    #[test]
        let mut b = String::new();
//
        --#-
    }
            if i >= max_undos {
    /// Get revision id of head revision.
        let mut engine = Engine::new(Rope::from(""));
    }

        }
//
            samples: Mutex::new(FixedLifoDeque::new())
            sel.add_region(region);
        // interior of last line should be last line
    fn undo() {
#[inline]
            Some(Cow::Owned(mut s)) => {

            new_deletes = new_deletes.transform_expand(&new_inserts);
impl View {
        -##-
            Move(movement) => self.do_move(text, movement, false),
            "ops": ops,
        }
        Merge(usize, usize),
use memchr::{memrchr, memchr};
    sample_limit_count: usize
impl PartialEq for Sample {

    fn edit_rev_simple() {
    }
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
            GestureType::MultiLineSelect =>

    undo_group: usize,
/// from the new revisions on the left.
            SampleEventType::AsyncInstant => 'n',
use internal::find::FindStatus;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            match exe_name.clone().file_name() {
        // todo: this will be changed once multiple queries are supported
            els: Vec<RopeDeltaElement_>,
        a.lines_all().collect::<Vec<_>>());
/// # Arguments
                    None
    }
    /// concurrently it will have count `2` so that undoing one delete but not
/// equivalent performance to a regular trace.  A string that needs to be copied
    }
        MergeTestState::new(3).run_script(&script[..]);
            Merge(1,2),
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    /// part of the initial contents since any two `Engine`s need a common
        (self.session1, self.session2)
        assert_eq!(Some(5), b.next_codepoint_offset(2));
            b.push('b');
        let line = line as usize;
}
        }
        }

        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
#[inline]
                    let after = new_full_priority >= full_priority;  // should never be ==

        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        for (iv, style) in style_spans.iter() {
    pub fn get_samples_limit(&self) -> usize {
    wrap_col: WrapWidth,
/// discussion on payload.
        false
        assert_eq!(0, a.lines_all().count());
        let plan = RenderPlan::create(height, self.first_line, self.height);
        assert_eq!(snapshot.len(), 9);
    /// You could construct the "union string" from `text`, `tombstones` and
        }

            wrap_col: WrapWidth::None,
    #[test]
        use self::MergeTestOp::*;
        enum RopeDeltaElement_ {
    #[bench]
    }
                engine.gc(&to_gc)
        where D: serde::Deserializer<'de>
            },
                        .map(DeltaElement::from).collect(),
        self.deletes_from_union = new_deletes_from_union;

        assert_eq!(Some(2), b.next_codepoint_offset(0));
        ----#
                Edit { priority, undo_group, inserts, deletes } => {
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
use std::mem::size_of;
}
}
    } else {
}
                        deletes_from_union
    ///
    #[test]
use std;
            Replace { chars, preserve_case } =>
    #[bench]
            //}
                }
        engine.undo([].iter().cloned().collect());

        MergeTestState::new(6).run_script(&script[..]);
        let subset_str = format!("{:#?}", expand_by[1].1);
    fn bench_trace_instant(b: &mut Bencher) {

    /// recomputing line wraps.
    pub fn byte_at(&self, offset: usize) -> u8 {

            if let Some(replace) = self.get_replace() {
    identity_op,
            Assert(0, "acbd".to_owned()),
        let line = self.line_of_offset(text, end);
    pub fn is_enabled(&self) -> bool {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
        if all_samples.is_empty() {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        if offset >= next_line_offset {
                for &region in rest {
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
/// A guard that when dropped will update the Sample with the timestamp & then
            if let GraphemeIncomplete::PreContext(_) = incomp {
            // to replicate whiteboard, z must be before a tombstone
    // possible to fix it so that's not necessary.
#[cfg(test)]
                SelectionModifier::Set => self.set_selection(text, occ),
            SampleGuard::new_disabled()
impl<'a> Iterator for Lines<'a> {
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
        self.sample_limit_count * size_of::<Sample>()
            self.idx = 0;
            pid: sys_pid::current_pid(),

        }
        cur_len_utf8
        self.drag_state = Some(DragState { base_sel, offset, min, max });
        min
        deletes_from_union


                        } else {
    /// The `pristine` argument indicates whether or not the buffer has
        // we add the special find highlights (1) and selection (0) styles first.
        let utf8_offset = 13;



        for seg in self.lc_shadow.iter_with_plan(plan) {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
// Copyright 2016 The xi-editor Authors.
        let mut result = json!({
    #[test]

                                     categories: C,
        self.lines_raw(0, self.len())
        let trace = Trace::enabled(Config::default());
                while cursor.pos() < region.max() {
        // expand by each in expand_by
            Sample::new_instant("remote pid", &[], None)];
/// Usage of static strings is encouraged for best performance to avoid copies.

        serializer.serialize_str(&String::from(self))
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
        let r = r + Rope::from(&b[MIN_LEAF..]);
    }

        });

pub struct Lines<'a> {
            self.collapse_selections(text);
            while !s.is_char_boundary(splitpoint) {
    }
        assert_eq!(trace.is_enabled(), true);
        assert_eq!(snapshot[4].name, "y");
        });
        }
        fn run_script(&mut self, script: &[MergeTestOp]) {
        }
                    let after = new_full_priority >= full_priority;  // should never be ==
                }
                    if seg.validity == line_cache_shadow::ALL_VALID {
        }
                warn!("Usage of click is deprecated; use do_gesture");
    {
    /// Time complexity: O(log n)

        match self.selection.len() {

    /// concurrently it will have count `2` so that undoing one delete but not
            samples: Mutex::new(FixedLifoDeque::new())

        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
                self.set_selection(text, SelRegion::caret(offset));
                        if !last_selection.is_caret() {
                        self.revs.push(Revision {

    // TODO: this should be a Cow
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
    }
    }
    }
        assert_eq!(1, expand_by[0].0.priority);
    #[allow(dead_code)]
            Some(Cow::Borrowed(mut s)) => {
            utf16_size: 0,
#[cfg(feature = "benchmarks")]

        while offset < l.len() && !l.is_char_boundary(offset) {
            Assert(1, "bdefg".to_owned()),
                    text.slice_to_string(start, end)
/// }
        let cur_deletes_from_union = &self.deletes_from_union;
        } else {
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
                                undo_group,
            Some(region) => {
    #[cfg(feature = "benchmarks")]
/// Base unit is utf8 code unit.
use std::cmp::{min,max};
    /// Get text of head revision.
        engine.edit_rev(1, 1, first_rev, d1.clone());


                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
        ----#
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        assert_eq!(1, b.line_of_offset(2));
}
        // todo: the correct Find instance needs to be updated with the new parameters
            enabled: AtomicBool::new(false),
                    if seg.validity == line_cache_shadow::ALL_VALID {
        peers: Vec<Engine>,
        let (start, end) = iv.start_end();
        self.revs.push(new_rev);
            false
        }
                where E: serde::de::Error
        }).collect::<Vec<FindStatus>>()
    }
    // * Code units in some encoding
        #------
    /// Returns an iterator over chunks of the rope.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        MergeTestState::new(3).run_script(&script[..]);
            thread_name: None,
        assert!(a.slice(0, 0) == empty);
                        Some(gc_dels.transform_shrink(&inserts))
            categories: Some(categories.into()),
/// The payload associated with any sample is by default a string but may be
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let a = Rope::from("a\nb\nc");
}
    /// Get text of head revision.
    /// The incrementing revision number counter for this session used for `RevId`s
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
            None
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                self.push_leaf(s.to_owned());
                }
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
}
/// ```
            self.tid == other.tid &&
            Merge(0,2), Merge(1, 2),

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
    fn replace_small() {

    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        engine.edit_rev(1, 1, initial_rev, d1.clone());
            scroll_to: Some(0),
    }
        let is_base = base_revs.contains(&rev.rev_id);
        assert_eq!(5, a.offset_of_line(3));
        cursor.is_boundary::<BaseMetric>()

        }
    #[serde(serialize_with = "serialize_event_type")]
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
                        self.revs.push(Revision {
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
    Bytes(usize),
        rope.line_of_offset(20);
        client.def_style(&style.to_json(ix));
mod tests {
        for rev in &self.revs[first_candidate..] {
    fn len(&self) -> usize {
            args: Some(SampleArgs {
            "op": op,
    #[bench]
        MergeTestState::new(2).run_script(&script[..]);
    }
// Licensed under the Apache License, Version 2.0 (the "License");
    #[inline]
        }
        debug_subsets(&rearranged_inserts);
        assert_eq!(samples[0].name, "remote pid");
    }
    }
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        true
        }).collect::<Vec<FindStatus>>()
    /// Does a drag gesture, setting the selection from a combination of the drag
        match *self {
            cur_len_utf16 += u.len_utf16();

            duration_us: None,

    }
    }
            MetadataType::ThreadName {name} => (Some(name), None),
        }
                inserts: new_inserts,
    #[test]
    } else {
            tombstones: Rope::default(),
    }
                        }
    fn merge_whiteboard() {
            }
            tombstones: Rope::default(),
    fn is_ok_child(&self) -> bool {
        next_expand_by = Vec::with_capacity(expand_by.len());
impl From<Rope> for String {
        for i in 0..5_000 {
/// }
    #[test]
    #[test]
        }).collect::<Vec<FindStatus>>()
        if let Some(new_scroll_pos) = self.scroll_to.take() {
                        gc_dels = new_gc_dels;
            self.next::<BaseMetric>();
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
use unicode_segmentation::GraphemeIncomplete;
impl RevId {
pub struct ByteIter<'a> {
    pub fn session_id(&self) -> SessionId {
        // TODO: simplify this through the use of scopeguard crate
                        line_num = seg.their_line_num + seg.n;
    fn len(&self) -> usize {
            els: Vec<RopeDeltaElement_>,
                        Err(e) => {
        assert!(a.slice(0, 0) == empty);
        assert_eq!(4, a.offset_of_line(2));
/// Enable tracing with a specific configuration. Tracing is disabled initially
            .map(|(i, _)| i)
        self.enable_config(Config::default());
        let end = self.line_col_to_offset(text, line + 1, 0);
    /// in the slice up to `offset`.
/// The visual width of the buffer for the purpose of word wrapping.
        assert_eq!(Some(17), a.next_grapheme_offset(9));
        // same span exists in both sets (as when there is an active selection)
    lines: usize,
        max

    }
        assert_eq!(b, String::from(a));
        // move deleted or undone-inserted things from text to tombstones
    TRACE.block(name, categories)
    fn to_payload(value: &'static str) -> TracePayloadT {


        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
                MergeTestOp::Merge(ai, bi) => {
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        a.push('\n');

            Assert(1, "ab".to_owned()),
        if self.find_changed != FindStatusChange::None {
        // set last selection or word under current cursor as search query
        delta.apply(&self.text)
                    self.fragment = &self.fragment[i + 1 ..];
    /// Tracks whether there has been changes in find results or find parameters.

                              duration_ns: u64) -> Self
struct FullPriority {
    view_id: ViewId,
            }
            engine.undo(undos);
    }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let text_b = Rope::from("zpbj");

/// assert_eq!("llo wo", String::from(c));
/// # Performance
    }
        self.enabled.load(AtomicOrdering::Relaxed)
    }
        engine.edit_rev(1, edits+1, head, d1);
    }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);


    fn bench_get_pid(b: &mut Bencher) {
        assert_eq!(snapshot[7].name, "c");

                            deletes_bitxor
            while !s.is_char_boundary(splitpoint) {
        /// revision that were added by this revision.
    }
/// are shared.
        }
        assert_eq!(snapshot[1].name, "thread_name");
        let selection = SelRegion::new(0, text.len()).into();
            );
                    None => return if result.is_empty() { None } else { Some(result) }
extern crate serde_derive;
        let mut b = line_cache_shadow::Builder::new();
        if b >= 0xf0 {
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
        d_builder.build()
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// Get a slice of a `Rope`:
    /// Generate line breaks based on width measurement. Currently batch-mode,
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// See `trace_block` for how the block works and `trace_payload` for a

        let revs = basic_insert_ops(inserts, 1);
                if self.fragment.is_empty() {
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
}
            Merge(1,0), Merge(2,0),

        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
    inner: ChunkIter<'a>,
        assert_eq!(rope.offset_of_line(4), rope.len());
    fn to_payload(value: &'static str) -> TracePayloadT {
        for _i in 0..50 {
    1
    pub fn do_find_all(&mut self, text: &Rope) {
/// Represents a transform from one rope to another.
        self.set_dirty(text);
        self.lines += other.lines;

            word_cursor.select_word()
    }
                _ => { }
                                           client, iv, new_len, px),
            } else {
    }
        assert_eq!(trace.is_enabled(), true);
                    inserts: ins,
            Insert(String),
        info.utf16_size
        impl From<RopeDelta_> for Delta<RopeInfo> {
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
pub fn len_utf8_from_first_byte(b: u8) -> usize {
use self::Contents::*;

    {

        let (start, end) = {


            }

/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        // only one of the deletes was gc'd, the other should still be in effect
        self.revs.iter().enumerate().rev()
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
    /// Determines the current number of find results and search parameters to send them to
use edit_types::ViewEvent;
            let end = self.line_of_offset(last_text, iv.end()) + 1;
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        }
    current: Option<&'a str>,
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.

/// Base unit is utf8 code unit.
        } else {
    }
    #[test]
        if self.find_changed != FindStatusChange::None {

        ");
            Some((l, off)) => (l, off),
    use super::*;
            // with offset == s.len(), but be defensive.
        // original values this test was created/found with in the UI:
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
        }
                }
            sel.add_region(
            },
///
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    /// the pid or the tid depends on the name of the event
}
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
    }
                                     payload: Option<TracePayloadT>,
/// # Examples

            }
    }
use std::collections::hash_map::DefaultHasher;
    /// Storage for all the characters that have been deleted  but could

                            }
        // current recording mechanism should see:
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
                    for (ei, e) in self.peers.iter().enumerate() {
        out.push(Revision {
        self.lc_shadow = b.build();
    rev_id: RevId,
        }
        Some(pos) => minsplit + pos,
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    ///

    }
    //TODO: implement lines_raw using ranges and delete this
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        Self {

        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    {
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
///
        }, new_text, new_tombstones, new_deletes_from_union)

            if let Edit { priority, ref inserts, .. } = r.edit {

    #[serde(skip_serializing_if = "Option::is_none")]
    fn undo_5() {
            }
        let (metadata_name, sort_index) = meta.consume();
    /// if it is non-empty. It needs to be a separate commit rather than just
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
        }
        }

            let base_index = find_base_index(&self.revs, &other.revs);


            deletes_from_union = match rev.edit {
    bytecount::count(s.as_bytes(), b'\n')
/// # Examples
// Licensed under the Apache License, Version 2.0 (the "License");

    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        // NOTE 2: from_micros is currently in unstable so using new
/// Get a slice of a `Rope`:
    #[test]
    /// Returns a slice of the string from the byte range [`start`..`end`).
                        word_cursor.select_word()
mod tests {
//
            to_undo.insert(i+1);
        }
            trace: None,
            priority: 0,
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

                            edit: Undo {
        let mut b = TreeBuilder::new();
        }
                    return Some(result);

    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
//! a previously committed version of the text rather than the current text,
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
        /// Used to order concurrent inserts, for example auto-indentation
///
/// have to be considered in `rebase` substantially for normal editing
    session: SessionId,
        // rebase the delta to be on the head union instead of the base_rev union
}
        last_line += if last_col > 0 { 1 } else { 0 };
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    pub fn enabled(config: Config) -> Self {
            }
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    }

    /// This function will panic if `offset > self.len()`. Callers are expected to
    #[test]
        assert_eq!(None, b.prev_codepoint_offset(0));
        guard
    }
    }
            SampleEventType::Metadata => 'M'

        let a = Rope::from("a\r\nb\r\nc");
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};

/// However, anything that can be converted into a Cow string can be passed as
                        deletes_from_union = deletes_from_union.union(deletes);
    {

// You may obtain a copy of the License at
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(snapshot[0].name, "process_name");
    #[test]
struct DragState {
    pub fn line_of_offset(&self, offset: usize) -> usize {
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                }
                MergeTestOp::Assert(ei, ref correct) => {
    {
            categories: Some(categories.into()),
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
// distributed under the License is distributed on an "AS IS" BASIS,
    trace: Option<&'a Trace>,
    {
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
// distributed under the License is distributed on an "AS IS" BASIS,
    }
        assert!(a.slice(0, 0) == empty);
// ======== Merge helpers

        self.samples.lock().unwrap().len()
    // in a single session.
        assert_eq!(snapshot[8].name, "x");
        } else if self.first_line + self.height <= line {
            enabled: AtomicBool::new(true),
        let b_rope = Rope::from(&b);
                }
    }
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
                            rendered_lines.push(line);
    }
            "pristine": pristine,

            // which we can do with another peer that inserts before a and merges.
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
}
        let trace = Trace::enabled(Config::with_limit_count(20));
/// # Examples
            }
        };
        let first_rev = &self.revs.first().unwrap();
    // There will probably never be a document with more than 4 billion edits
        let script = vec![
            Merge(1,0), Merge(2,0),

        let end = time::precise_time_ns();
        if self.find.is_empty() {
//!
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
//! CRDT implementation techniques, because all operations are serialized in

impl Metric<RopeInfo> for LinesMetric {
            {

            // Go crazy
    }
    replace_changed: bool,
            CategoriesT::DynamicArray(ref self_arr) => {
            },
            let splitpoint = find_leaf_split_for_merge(self);

        let text_a = Rope::from("zcbd");
        let mut a = Rope::from("");
        let b = a.slice(2, 4);

        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
        /// revision that were added by this revision.
            }
                MergeTestOp::Merge(ai, bi) => {
    #[cfg(feature = "benchmarks")]
                cursors.push(c - start_pos);

                l = pl;
    /// List of categories the event applies to.
            'f' => SampleEventType::FlowEnd,
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    pub height: f64,
}
    fn prev(s: &String, offset: usize) -> Option<usize> {
    fn merge_session_priorities() {
            }
                name, categories, Some(payload.into()), start, end - start));
            "text": &l_str,
                self.find_changed = FindStatusChange::All;

///
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
            MetadataType::ProcessLabels {..} => (None, None)

        });
//
/// for single user cases, used by serde and ::empty
///
                            plan: &RenderPlan, pristine: bool)
///     something_else_expensive(result);

        let first_rev = engine.get_head_rev_id().token();

        assert!(a.slice(0, 0) == empty);
                name, categories, payload, SampleEventType::DurationBegin)),
///
    // ============== Merge script tests

// easily delta-compressed later.
                }
    #[test]
            // about what wrapped.
    impl MergeTestState {
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
            if self.fragment.is_empty() {
            pid: sys_pid::current_pid(),
        assert_eq!(trace.get_samples_count(), 0);
                }
        // we add the special find highlights (1) and selection (0) styles first.
                self.set_selection(text, SelRegion::caret(offset));
            self.unset_find();
//!
            Assert(0, "adc".to_owned()),
use std::ops::Add;
            "n": n,
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// Creates a duration sample that measures how long the closure took to execute.
        // invert the changes to deletes_from_union starting in the present and working backwards
    fn to_payload(value: &'static str) -> TracePayloadT {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                        deletes_from_union = deletes_from_union.union(deletes);
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
}
impl Metric<RopeInfo> for LinesMetric {
    } else {
enum MetadataType {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Some((l, off)) => (l, off),
/// See `trace_closure` for how the closure works and `trace_payload` for a
    undo_group: usize,
}
            self.record(Sample::new_instant(name, categories, None));
categories_from_constant_array!(4);
        }
            let b_to_merge = &other.revs[base_index..];
        }
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
            Assert(1, "zapbj".to_owned()),
    /// Width in px units, requiring measurement by the front-end.
                                deletes.transform_shrink(&gc_dels))
            Sample::new_instant("remote pid", &[], None)];
/// * `name` - A string that provides some meaningful name to this sample.
    /// Returns the largest undo group ID used so far
/// of Sample that determines order.

//!
            SampleEventType::ObjectSnapshot => 'O',
                        if self.undone_groups.contains(undo_group) {
// Licensed under the Apache License, Version 2.0 (the "License");
    }
        let mut cursor = Cursor::new(self, offset);
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

        self.replace.clone()
                    e.edit_rev(p, u, head, delta.clone());
                    if undone_groups.contains(undo_group) {

use edit_types::ViewEvent;
    /// Determines whether the offset is in any selection (counting carets and
    #[test]
    /// Selects a specific range (eg. when the user performs SHIFT + click).
    // There will probably never be a document with more than 4 billion edits
    /// method to be fast even when the selection is large.



}
        let trace = Trace::enabled(Config::default());
                        }

}
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    {
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    /// Get text of head revision.
        let mut d_builder = Builder::new(TEST_STR.len());
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
                    Some(chunk) => self.fragment = chunk,
}
                inserts: inserted,

            }
        self.set_selection_raw(text, selection);
        Ok(exe_name) => {
        self.find.clear();
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                Contents::Undo { .. } => panic!(),
    pub fn sel_regions(&self) -> &[SelRegion] {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    /// End of the region selected when drag was started.
            a.push('a');
    fn drop(&mut self) {
categories_from_constant_array!(10);
// Licensed under the Apache License, Version 2.0 (the "License");
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
    pub fn iter_chunks_all(&self) -> ChunkIter {
        let trace = Trace::disabled();
                        hls.push((sel_start_ix, sel_end_ix));
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        ------#
        let text_a = Rope::from("zcbd");

        let a = Rope::from("a\nb\nc");
            };
                    };
        -----#
        let mut a = String::new();
        let a = Rope::from("a\nb\n");
    }
        assert_eq!(snapshot[2].name, "x");
        d.insert(StrCow::from("test"), StrCow::from(value));
    /// The name of the event to be shown.
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        result
                std::thread::sleep(std::time::Duration::new(0, 1000));

    /// The thread the sample was captured on.  Omitted for Metadata events that
    }

    /// borrowed from the rope.
            replace_changed: false,
}
        ----#
        let edit_iv = Interval::new_closed_open(start, end);
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
            1 if self.selection[0].is_caret() => {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
        trace.instant("5", &["test"]);
        MergeTestState::new(3).run_script(&script[..]);
        for sample in all_samples.iter() {
    fn test_get_samples_nested_trace() {
            Merge(1,0),
            Assert(2, "afc".to_owned()),
            if let GraphemeIncomplete::PreContext(_) = incomp {
        assert_eq!(snapshot[7].name, "c");
        ]);
                    .with_affinity(affinity)
                    }
        assert_eq!(trace.is_enabled(), true);
                            edit: Undo {
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
    /// If the cursor is at the end of the leaf, advances to the next leaf.
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        let mut cursor = Cursor::new(self, offset);
        if b >= 0xf0 {
            "n": n,
            breaks: None,
        b.add_span(height, 0, 0);
    /// For safety, this will panic if any revisions have already been added to the Engine.
    pub fn session_id(&self) -> SessionId {
        // if self.end is inside this chunk, verify that it is a codepoint boundary
        self.len() >= MIN_LEAF
    inner: ChunkIter<'a>,
}

impl<'de> Deserialize<'de> for Rope {
        self.rev_id_counter += 1;
/// }
    /// # Panics
            Merge(5,4),
                peer.set_session_id(((i*1000) as u64, 0));
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
///
            _ => return
{

                    let mut selection = self.selection.clone();
            Assert(0, "acbd".to_owned()),

        let subset_str = format!("{:#?}", expand_by[1].1);
                WrapWidth::Width(px) =>
        self.revs.iter().enumerate().rev()
        assert_eq!(utf8_offset, 9);
    #[test]
/// some way.
    }
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
            let new_region = region_movement(movement, region, self,
                    priority, undo_group,
    }
        memchr(b'\n', &s.as_bytes()[offset..])
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
            x.next_occurrence(text, reverse, wrapped, &self.selection)
            // These two will be different without using session IDs
        rope.offset_of_line(5);
    }
                }
                    .with_horiz(horiz)

            edit: Edit {
        }
            }

                    // we don't want new revisions before this to be transformed after us
        let mut delta = serializer.serialize_struct("Delta", 2)?;
        let new_sel = selection_movement(movement, &self.selection,
}
    session_id: SessionId,
/// Creates a duration sample that measures how long the closure took to execute.
    #[serde(rename = "cat")]
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    sample: Option<Sample>,
        -##-
/// Represents a transform from one rope to another.
        selection.add_region(region);
                    let (start, end) = {
pub struct LinesMetric(usize);  // number of lines
        --#--
    sample_limit_count: usize
    }
                }
        gc_scenario(4,3);
            Some(Cow::Owned(mut s)) => {
            }, to_payload("test_get_samples_nested_trace"));
    pub(crate) fn unset_find(&mut self) {
    }
}
                   whole_words: bool) {
        self.tombstones = new_tombstones;
        }
/// Indicates what changed in the find state.

}

        let tombstones_b = Rope::from("a");
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
        // TODO: simplify this through the use of scopeguard crate
        // x, a, y, b, z, c
    fn bench_get_pid(b: &mut Bencher) {
/// ```
    pub fn join(&self, sep: &str) -> String {
    fn from(r: &Rope) -> String {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        );
        let first_sample_timestamp = all_samples.front()

        engine.edit_rev(1, 2, first_rev, d1.clone());

extern crate test;
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
            engine.undo(to_undo.clone());

                // This could be done by explicitly overriding, or by tweaking the
    /// Returns a u64 that will be equal for equivalent revision IDs and
/// # Examples
extern crate lazy_static;
        self.scroll_to_cursor(text);
        }
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
        match rev.edit {

        if let Contents::Edit {priority, inserts, .. } = r.edit {
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
}

            Assert(0, "zcbd".to_owned()),
#[derive(Serialize, Deserialize, Debug)]
        }
        if line > max_line {
/// The payload associated with any sample is by default a string but may be
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
            if let Edit { ref inserts, .. } = rev.edit {
            'O' => SampleEventType::ObjectSnapshot,
        }
    #[test]
    pub fn set_dirty(&mut self, text: &Rope) {

    fn test_get_sorted_samples() {
pub struct Utf16CodeUnitsMetric(usize);
        self.enabled.store(false, AtomicOrdering::Relaxed);
    }
    ///
    /// the pid or the tid depends on the name of the event
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
            Some(offset + len_utf8_from_first_byte(b))
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    fn goto_line(&mut self, text: &Rope, line: u64) {
            let not_in_tombstones = self.deletes_from_union.complement();
                return offset;
use tabs::{ViewId, BufferId};

        engine.undo([1].iter().cloned().collect());
            last_line -= 1;

const MIN_LEAF: usize = 511;
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    pub fn next_codepoint(&mut self) -> Option<char> {

        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            priority: 0,
        None => {
/// some way.
            deletes: Subset::new(0),

    }
///

            Assert(0, "ab".to_owned()),
        }
            self.set_selection(text, selection);
        let start = time::precise_time_ns();
        // TODO: refine for upstream (caret appears on prev line)

    TRACE.samples_cloned_sorted()
extern crate time;
                deletes: new_deletes,
// limitations under the License.
            rev_id: self.next_rev_id(),
    {


        self.rev_id_counter += 1;
        Err(ref e) => {
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            SampleEventType::DurationBegin => 'B',
            let base_index = find_base_index(&self.revs, &other.revs);
    fn delta_rev_head_3() {
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units

            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {

        assert_eq!(snapshot[5].name, "z");
        // todo: the correct Find instance needs to be updated with the new parameters

    }
        assert_eq!(snapshot[1].name, "thread_name");

}
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        if last_col == 0 && last_line > first_line {
        ---#--
    max: usize,

    }
                    .with_horiz(horiz)
fn find_leaf_split_for_merge(s: &str) -> usize {
    /// Get text of head revision.
categories_from_constant_array!(2);
                    s = s.transform_shrink(&transformed_inserts);
            false
        let (start, end) = iv.start_end();
        let script = vec![
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
/// }
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
            let new_region = region_movement(movement, region, self,
        assert!(r != b_rope + a_rope);
        // TODO: refine for upstream (caret appears on prev line)
                }
        ];
                engine.gc(&to_gc)
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
        let mut revs_3 = basic_insert_ops(inserts_3, 2);

    }


    /// Returns the largest undo group ID used so far


        }
            AssertMaxUndoSoFar(1,3),
        /// and new deletes_from_union
        self.prev::<BaseMetric>();
        // TODO(vlovich): optimize this path to use the Complete event type
    selection: Selection,
    }


    }
    /// Get text of head revision.
        b.build()
                              to_payload("test_get_samples"));
                     modify_selection: &SelectionModifier) {

            }
        assert!(r != a_rope);
    /// Sorting priority between processes/threads in the view.
                    }
    {

        ];
    // TODO(vlovich): Replace all of this with serde flatten + rename once
            Some(region) => {
            max: offset,
impl MetadataType {
}
        let mut b = line_cache_shadow::Builder::new();
        assert_eq!(r.len(), r.offset_of_line(2));
                }
    }
        use self::MergeTestOp::*;
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
                    };
//
        engine.edit_rev(1, 1, first_rev, build_delta_1());
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let mut leaf_offset = pos - offset;
/// See `trace_payload` for a more complete discussion.
        let a = Rope::from("a\nb\nc");
    /// None of the find parameters or number of matches changed.
        for region in self.selection.iter() {
            } else if incomp == GraphemeIncomplete::PrevChunk {
        assert!(r != b_rope + a_rope);
                    "something", &["benchmark"],
    fn hash<H: Hasher>(&self, state: &mut H) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
}
            size: Size::default(),
                },
#[inline]

            timestamp_us: ns_to_us(time::precise_time_ns()),
        next_boundary.unwrap_or(None)
                let (pl, poffset) = self.prev_leaf()?;
                        if self.undone_groups.contains(undo_group) {
            let start = self.line_of_offset(last_text, iv.start());
//! info.
        let closest_occurrence = self.find.iter().flat_map(|x|
                find_leaf_split_for_bulk(s)
        }
    /// that are currently deleted, and thus in `tombstones` rather than
    pub fn push_str(&mut self, mut s: &str) {

    }
    // possible to fix it so that's not necessary.
        /// revision that were added by this revision.
        if self.scroll_to.is_none() && wrap {
    TRACE.closure(name, categories, closure)
    #[test]
        (self.session1, self.session2)
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    }

    utf16_size: usize,
        trace.instant("1", &["test"]);
    AsyncInstant,
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
use interval::Interval;
    #[test]
            } else if incomp == GraphemeIncomplete::NextChunk {

    lc_shadow: LineCacheShadow,

                        let n_skip = seg.their_line_num - line_num;

    }
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            }
            self.next::<BaseMetric>();
/// the session ID component of a `RevId`
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        min
        ];
            edit: Edit {
            }
            }),
    }
    }
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
                        .map(DeltaElement::from).collect(),
        let first_sample_timestamp = all_samples.front()
///
    }
        let undone = self.undone_groups.contains(&undo_group);
    //TODO: implement lines_raw using ranges and delete this
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
        let height = self.line_of_offset(text, text.len()) + 1;
        // update only find highlights affected by change
        engine

    buffer_id: BufferId,
    /// The maximum amount of space the tracing data will take up.  This does
    // TODO: this should be a Cow
    DynamicArray(Vec<String>),
                    ops.push(self.build_update_op("invalidate", None, seg.n));
//! An engine for handling edits (possibly from async sources) and undo. It
    pub fn session_id(&self) -> SessionId {
            if self.line_of_offset(text, offset) <= line {
                self.set_selection_raw(text, selection);
}
        cursor.prev::<BaseMetric>()
        if offset == 0 {
            }
                false => x.start
    #[test]

/// However, anything that can be converted into a Cow string can be passed as

        // find the lowest toggled undo group number
        self.undone_groups = groups;
    fn compute_transforms_2() {
    Undo {
    ObjectCreated,
        let (leaf, pos) = cursor.get_leaf().unwrap();
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
}
            self.unset_find();
            }),
    /// Imagine a "union string" that contained all the characters ever
    fn merge_associative() {
        &self.text

                        });
                    if retain_revs.contains(&rev.rev_id) {


pub fn samples_cloned_sorted() -> Vec<Sample> {
        assert_eq!(r.len(), r.offset_of_line(2));
    #[test]
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    Width(f64),
    }
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    use super::*;
impl From<Vec<String>> for CategoriesT {
        engine.undo([1,3].iter().cloned().collect());
impl<'a> Iterator for ByteIter<'a> {
    /// the pid or the tid depends on the name of the event
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
/// Usage of static strings is encouraged for best performance to avoid copies.
#![cfg_attr(feature = "benchmarks", feature(test))]
    }

    fn build_delta_1() -> Delta<RopeInfo> {
        let subset_str = format!("{:#?}", expand_by[0].1);
        self.send_update_for_plan(text, client, styles,
        assert_eq!(1, expand_by[0].0.priority);
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
    /// Returns a tuple of a new `Revision` representing the edit based on the
        let mut engine = Engine::new(Rope::from(TEST_STR));
                        Cow::Owned(un_deleted.transform_shrink(inserts))
    /// if there is not at least one edit.
        println!("{:#?}", b_delta_ops);
            GestureType::ToggleSel => self.toggle_sel(text, offset),
}
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        /// Used to store a reversible difference between the old
        sel.collapse();
            'B' => SampleEventType::DurationBegin,
        use std::hash::{Hash, Hasher};
                                             &text, false);

                        Some(gc_dels.transform_shrink(&inserts))
        let thread = std::thread::current();
        self.set_selection_raw(text, selection);
                    Some(chunk) => self.fragment = chunk,
    ///
    fn merge_session_priorities() {
        assert_tokens(&rope, &[
categories_from_constant_array!(4);
        let mut result = json!({

        }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));

        let mut cursor = Cursor::new(self, offset);
        engine.undo([1,3].iter().cloned().collect());
/// required). Mutations are generally copy-on-write, though in-place edits are
        assert_eq!(samples[1].name, "local pid");
    }

        // if we have active find highlights, we don't collapse selections
            GestureType::RangeSelect => self.select_range(text, offset),
            Assert(0, "ab".to_owned()),
/// configured via the `dict_payload` or `json_payload` features (there is an
                if s.ends_with('\n') {


    /// the same even if it is rebased or merged between devices.
    /// how many times it has been deleted, so if a character is deleted twice
                SelectionModifier::AddRemovingCurrent => {
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    /// Generally racy since the underlying storage might be mutated in a separate thread.
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        let a = Rope::concat(
            black_box(time::precise_time_ns());
        /// The set of groups toggled between undone and done.
impl FromStr for Rope {

    replace: Option<Replace>,

        // the generated JSON.
        -> Self
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
        last_line += if last_col > 0 { 1 } else { 0 };
        match *self {
                      width_cache: &mut WidthCache, keep_selections: bool)
        let height = self.line_of_offset(text, text.len()) + 1;

            SelectionIntoLines => self.do_split_selection_into_lines(text),
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
                return false;
        // set last selection or word under current cursor as search query
                    }
}
            'f' => SampleEventType::FlowEnd,
        let self_iv = Interval::new_closed_closed(0, self.len());
            let next_chunk = self.inner.next();
/// ```
                (region.is_upstream() && c == pos) ||
            let a_to_merge = &self.revs[base_index..];
        }
            SampleEventType::Metadata => 'M'
        let mut d_builder = Builder::new(TEST_STR.len());

        cur_len_utf8
        self.pending_render
            match exe_name.clone().file_name() {
    }
                        let n_skip = seg.their_line_num - line_num;
    #[cfg(feature = "benchmarks")]
        ------#
    #[serde(rename = "ph")]
#[inline]
        Self {
        engine.edit_rev(1, 1, first_rev, d1.clone());
///
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
        // A with ring, hangul, regional indicator "US"
            timestamp_us: ns_to_us(timestamp_ns),
/// revisions not shared by both sides.
        };
        let correct = parse_subset_list("
    #[test]
        }
            AssertMaxUndoSoFar(0,3),
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        x
    bytecount::count(s.as_bytes(), b'\n')

    offset: usize,
    fn rearrange_1() {
            Merge(0,2), Merge(1, 2),
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
    /// Get previous codepoint before cursor position, and advance cursor backwards.
    fn line_of_offset_panic() {
/// Create an instantaneous sample with a payload.  The type the payload
    out
        }
        let mut a = Rope::from("hello world");
            AssertAll("ac".to_owned()),

            l[offset..].chars().next()
#[derive(Clone, Debug)]
            tid: tid,

            }
        }
    }
pub type RevToken = u64;
}
    }
        let result = closure();
            trace.instant("c", &["test"]);
#![cfg_attr(feature = "cargo-clippy", allow(
    cursor: Cursor<'a, RopeInfo>,
    /// Returns a tuple of a new `Revision` representing the edit based on the
}
/// {
            Assert(0, "ab".to_owned()),
            for (i,rev) in self.revs.iter().enumerate().rev() {
        // since one of the two deletes was gc'd this should re-do the one that wasn't

                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
        if self.replace_changed {
        #------
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        delta.end()
/// However, anything that can be converted into a Cow string can be passed as
            Merge(0,2), Merge(1, 2),
    }

                        first_sample_timestamp,
                sel.add_region(SelRegion::new(last.start, offset));

        }

    }
        assert_eq!(Some(17), a.next_grapheme_offset(9));

                              to_payload("test_get_samples"));

        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            }
        let last = max(last, 0) as usize;
        let line = line as usize;
///     0
        let head_rev = &self.revs.last().unwrap();
    fn edit_rev_simple() {
    fn can_fragment() -> bool { false }
        engine.edit_rev(1, 3, new_head_2, d3);
    /// and currently in a debugging state.

    }
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }

            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            duration_us: None,
    // TODO: a case can be made to hang this on Cursor instead
    /// Collapse all selections in this view into a single caret
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    fn edit_rev_undo_3() {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                payload: payload,
}
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        let rope = Rope::from("hi\ni'm\nfour\nlines");

                    }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
// You may obtain a copy of the License at
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        let mut selection = Selection::new();
    #[cfg(feature = "benchmarks")]
                    }
    // A colliding session will break merge invariants and the document will start crashing Xi.
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        loop {

        engine.edit_rev(1, 1, initial_rev, d1.clone());
use bytecount;
            Assert(0, "abc".to_owned()),
                Some(i) => {
        if wrap_col > 0 {
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);

                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
        assert_eq!(0, a.line_of_offset(1));
    buffer_id: BufferId,
                MergeTestOp::AssertAll(ref correct) => {
/// Also note: in addition to the `From` traits described below, this module
        let utf8_offset = 9;
                           style: &Style) -> usize {

    }
    /// This case is a regression test reproducing a panic I found while using the UI.
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
            trace.closure("something", &[], || ());
/// 1. Samples that span sections of code may be inserted on end instead of
        }
                    for (ei, e) in self.peers.iter().enumerate() {
    }

    #[inline]
        }
    }
                    }
                payload: payload,
            }
                    els: delta.els.drain(..)
        // position after 'f' in four
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
            // These two will be different without using session IDs
    /// set with this function, which will make the revisions they create not have colliding IDs.

                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

        AssertMaxUndoSoFar(usize, usize),
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
/// the session ID component of a `RevId`
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
            line_cache_shadow::CURSOR_VALID
impl Ord for Sample {
            rendered_styles.push(sel_end as isize - sel_start as isize);
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        // shouldn't do anything since it was double-deleted and one was GC'd
/// # Examples
                        }
    }
///
            Assert(1, "abefg".to_owned()),
    TRACE.disable();
    /// None of the find parameters or number of matches changed.

    }
        }
        }
            while !s.is_char_boundary(offset - len) {
        self.revs.push(new_rev);
//!
                                     event_type: SampleEventType)

                    rev_id: rev.rev_id,
    /// Return the offset of the codepoint after `offset`.
    }
        // find the lowest toggled undo group number
            SampleGuard::new_disabled()
#[cfg(feature = "json_payload")]
                        undone_groups = Cow::Owned(new_undone);
    }
        },
// See the License for the specific language governing permissions and
    pub fn request_lines(&mut self, text: &Rope, client: &Client,

                              to_payload("test_get_samples"));
            utf16_size: 0,
            Sample::new_instant("local pid", &[], None),
}
                let (pl, poffset) = self.prev_leaf()?;
/// However, anything that can be converted into a Cow string can be passed as
        let contents = match rev.edit {
                    if let Some(last_selection) = self.selection.last() {
                }
    fn build_delta_2() -> Delta<RopeInfo> {
    {
            next_expand_by.push((trans_priority, new_trans_inserts));
const FLAG_SELECT: u64 = 2;
        }).collect::<Vec<FindStatus>>()

            next_expand_by.push((trans_priority, new_trans_inserts));
        let b = a.slice(2, 4);
        while offset < l.len() && !l.is_char_boundary(offset) {
#[derive(Clone, Debug)]
        let script = vec![
    fn from(s: T) -> Rope {
}
        while !s.is_empty() {
                None => {
                            }
            .map(|pos| offset + pos + 1)
    pub fn set_session_id(&mut self, session: SessionId) {

///
        true
            // The deletes are already after our inserts, but we need to include the other inserts
        #---
/// assert_eq!("ello wor", String::from(&b));
    lc_shadow: LineCacheShadow,
        let styles = self.render_styles(client, styles, start_pos, pos,

    }
        let script = vec![
    }
        let b = a.slice(1, 10);
    replace_changed: bool,
    }
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let b = a.slice(2, 4);
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            let head = engine.get_head_rev_id().token();

        }
    /// terminating newline.
            Merge(5,4),
/// samples are ordered chronologically for several reasons:
            rendered_styles.push(1);
        for _i in 0..50 {

        let mut engine = Engine::new(Rope::from(""));
        let inserts = parse_subset_list("
#[derive(Clone, Debug, PartialEq, Eq)]
                }
            self.record(Sample::new_duration(
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(snapshot[4].name, "z");
        assert_eq!(4, a.offset_of_line(2));
    for rev in revs.iter().rev() {
use std::collections::BTreeSet;
//     http://www.apache.org/licenses/LICENSE-2.0

    /// An iterator over the lines of a rope.
/// std::mem::drop(trace_guard); // finalize explicitly if
        client.def_style(&style.to_json(ix));

        #------
        }
    fn line_of_offset_small() {
            // with offset == 0, but be defensive.
impl NodeInfo for RopeInfo {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        ---#--
    fn is_boundary(s: &String, offset: usize) -> bool {
                self.set(pos);
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
    fn test_trace_disabled() {
    }
    /// slices will be nonempty.
    /// Time complexity: O(log n)

    }
    }
        true
/// Usage of static strings is encouraged for best performance to avoid copies.
        engine.undo([1].iter().cloned().collect());
            if let Edit { priority, ref inserts, .. } = r.edit {
    TRACE.closure(name, categories, closure)
    #[test]
///
pub struct RevId {
        // if we have active find highlights, we don't collapse selections
pub struct LinesMetric(usize);  // number of lines
        self.drag_state = None;
        -##-

{
    }
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
                inserts: inserted,
            }, to_payload("test_get_samples_nested_trace"));
        let end = self.sel_regions().last().unwrap().end;
    if a.is_empty() {
    ///
        // interior of last line should be last line

            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
            Some(right_str)
            if !selection.is_empty() {
        let b = a.slice(1, 10);
        assert_eq!("zcpbdj", String::from(&text_2));
            // to replicate whiteboard, z must be before a tombstone
    }
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());

        revs.append(&mut revs_3);
    end: usize,
        }

///
    }
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },

            last_line -= 1;
            edit: Undo { toggled_groups, deletes_bitxor }
use xi_rope::tree::Cursor;

    /// Merge the new content from another Engine into this one with a CRDT merge
                if rev.max_undo_so_far < lowest_group {
                                        &selections, &hls, style_spans);
            for rev in &self.revs {
            &self.deletes_from_union, &old_deletes_from_union);
impl From<Rope> for String {
        self.set_selection(text, sel);

    fn next(&mut self) -> Option<Cow<'a, str>> {



}

                let previous_name = thread_names.insert(sample.tid, thread_name.clone());

// The advantage of using a session ID over random numbers is that it can be
        trace.closure_payload("x", &["test"], || {
            Assert(1, "acb".to_owned()),
        }
            MetadataType::ProcessName {..} => "process_name",
            find.update_highlights(text, delta);
        }
    // partly because the reachability calculation would become more complicated (a
        assert_eq!(0, b.offset_of_line(0));
                                     event_type: SampleEventType)

trait StringArrayEq<Rhs: ?Sized = Self> {
}
        let trace = Trace::enabled(Config::with_limit_count(10));
impl Serialize for Rope {
    ($num_args: expr) => {
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
pub fn enable_tracing_with_config(config: Config) {
    FlowEnd,
    }
/// # Examples
        engine.edit_rev(1, 2, first_rev, d1.clone());
/// let c = b.slice(1, 7);
/// # use xi_rope::Rope;

/// implementation as efficient as a mutable version.
            let next_chunk = self.inner.next();
                        } else {
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
                let mut cursor = Cursor::new(&text, region.min());
        assert_eq!(rope.line_of_offset(15), 3);
        Self {
    /// Sets the selection to a new value, invalidating the line cache as needed.
        for &region in self.sel_regions() {
        use self::MergeTestOp::*;
                self.set_selection(text, SelRegion::caret(offset));
                }
use std;


                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        engine.edit_rev(1, 3, new_head_2, d3);
        }
categories_from_constant_array!(9);
    /// Returns a slice of the string from the byte range [`start`..`end`).
        s.is_char_boundary(offset)
impl<T: AsRef<str>> From<T> for Rope {
        let script = vec![


/// 2. Performance optimizations might have per-thread buffers.  Keeping all

    match std::env::current_exe() {

            SelectionForReplace => self.do_selection_for_replace(text),
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
        while !leaf.is_char_boundary(end) {
    }
        use self::MergeTestOp::*;
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
    }

        let mut cursor = Cursor::new(self, offset);
#![cfg_attr(feature = "benchmarks", feature(test))]
/// }
        Engine {
                    self.do_gesture(text, line, column, GestureType::WordSelect)
    #[test]
        ---#--
    },
    #[test]

    }
                }
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        let initial_rev = engine.get_head_rev_id().token();

        if line < self.first_line {
        let mut cursor = Cursor::new(self, offset);
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        let mut offset = 0;
            }
///
        let first = max(first, 0) as usize;
            ),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            timestamp_us: ns_to_us(timestamp_ns),
            Merge(1,0),
}
        base_subset.is_some() && base_subset == other_subset
            text: Rope::default(),
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            Assert(2, "ab".to_owned()),
        AssertMaxUndoSoFar(usize, usize),
            rendered_styles.push((sel_start as isize) - ix);
        }
    text: Rope,
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        result
    #[inline]
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
                name, categories, payload, SampleEventType::DurationBegin)),
    {

        AssertMaxUndoSoFar(usize, usize),
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        }
    #[test]
            self.current = next_chunk;
        assert_eq!(2, a.line_of_offset(5));
    }
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            } else {
    /// Get next codepoint after cursor position, and advance cursor.
        self.revs.push(new_rev);
            }
        assert_eq!(snapshot[8].name, "c");
        if offset >= next_line_offset {
            None => {
        let trace = Trace::enabled(Config::default());
enum WrapWidth {

        let l_str = text.slice_to_string(start_pos, pos);
    }
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
                }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(0, a.line_of_offset(1));

///
    /// want to set the process name (if provided then sets the thread name).
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
pub struct RopeInfo {
            AddSelectionBelow =>

        }

                None => {
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
        }, to_payload("test_get_sorted_samples"));
        let after_first_edit = engine.get_head_rev_id().token();
                    self.fragment = &self.fragment[i + 1 ..];
            let mut word_cursor = WordCursor::new(text, offset);
        }
        -##-

/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
categories_from_constant_array!(3);

    /// Constructs an instantaneous sample.
    }
    Metadata
        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
                }
            next_expand_by.push((trans_priority, new_trans_inserts));
    for rev in revs.iter().rev() {
            Merge(0,1),
    #[cfg(feature = "benchmarks")]
                }
}
//! conceptually represents the current text and all edit history for that
            // On the next step we want things in expand_by to have op in the context
        let style = style_map.merge_with_default(style);
        assert_eq!(samples[1].name, "local pid");

                    self.do_gesture(text, line, column, GestureType::WordSelect)
                    }

/// See `trace_payload` for a more complete discussion.
        impl<'de> Visitor<'de> for CategoriesTVisitor {
    fn goto_line(&mut self, text: &Rope, line: u64) {
    /// return if a delete is un-done or an insert is re- done.
}
    utf16_count


                // TODO: small nit, merged region should be backward if end < start.
            None => text.line_of_offset(offset)
            },

    #[test]
            selection.delete_range(offset, offset, true);

/// ```
        let mut selection = match multi_select {
            }

        json!({"test": value})
                        &mut rest[bi - ai - 1]

        // interior of last line should be last line
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
use std::fmt;
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
                }
        for _ in 0..(edits-max_undos) {
    #[derive(Debug)]
/// Atomicity is implicit, putting the offset

        assert_eq!(trace.is_enabled(), true);
        } else {

        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        self.enabled.store(true, AtomicOrdering::Relaxed);
        // 1 MB
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        where S: Into<StrCow>, C: Into<CategoriesT>
        let mut b = TreeBuilder::new();
/// implementation as efficient as a mutable version.
        self.text = text;
    /// tiny it is effectively O(n). This iterator does not allocate.

        }

        let mut line_num = 0;  // tracks old line cache
                                gc_dels = gc_dels.transform_expand(inserts);

/// xi_trace::trace("something happened", &["rpc", "response"]);
    }
        for &(sel_start, sel_end) in hls {
                c.provide_context(&pl, self.pos() - poffset);
        // insert `edits` letter "b"s in separate undo groups
        let line = self.line_of_offset(text, end);
        // since one of the two deletes was gc'd this should re-do the one that wasn't
    /// The maximum number of samples that should be stored.
    #[test]
            SampleEventType::AsyncInstant => 'n',
        self.revs.append(&mut new_revs);
            self.start_drag(offset, offset, offset);
        --#--
            Merge(1,2),
                leaf_offset = self.pos() - poffset;
    pub fn disable(&self) {
}
        if let Some(sel) = new_sel {
            offset -= 1;
        }
        assert_eq!(trace.get_samples_count(), 1);
    /// Selects an entire line and supports multi selection.
        // 1 MB
}
            self.categories == other.categories &&
        match self.breaks {
        let region = SelRegion::caret(offset);
    ns / 1000
    }
    }
        self.find_changed = FindStatusChange::All;
            "n": n,
        let mut engine = Engine::new(Rope::from(TEST_STR));
    TRACE.samples_cloned_unsorted()
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
        for _i in 0..50 {
    Undo {
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        let b_rope = Rope::from(&b);
            // TODO: finer grain invalidation for the line wrapping, needs info
//! CRDT implementation techniques, because all operations are serialized in
                   r.lines_all().collect::<Vec<_>>());
}
//

        assert_eq!(Some(1), a.next_codepoint_offset(0));
    }

        if self.find.is_empty() {
    lc_shadow: LineCacheShadow,
        self.start_drag(offset, region.start, region.end);
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
impl serde::Serialize for CategoriesT {
                              payload: Option<TracePayloadT>,
            prev_boundary = c.prev_boundary(&l, leaf_offset);
                }
            }
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);

            soln.push('b');
        // invert the changes to deletes_from_union starting in the present and working backwards
    }
        match *self {
        a.lines_all().collect::<Vec<_>>());
                // TODO could probably be more efficient by avoiding shuffling from head every time

                metadata_sort_index: None,
            }
        _ => 4
    }
    }

    }
categories_from_constant_array!(1);
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },

                    let (mut a, rest) = end.split_first_mut().unwrap();
            event_type: event_type,
            offset -= 1;
    /// Find what the `deletes_from_union` field in Engine would have been at the time
            }

/// samples are ordered chronologically for several reasons:
            'f' => SampleEventType::FlowEnd,
        assert_eq!(rope.line_of_offset(3), 1);
        self.lines += other.lines;


impl TreeBuilder<RopeInfo> {
        let inserted = inserts.inserted_subset();
    /// Returns the byte offset corresponding to the line `line`.
        } else {
        assert_eq!("1234567", String::from(r));
    }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        let inserts = parse_subset_list("
}
        let script = vec![
    fn append_large() {
/// }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        all_samples.reset_limit(config.max_samples());
/// # use xi_rope::Rope;
    fn to_payload(value: &'static str) -> TracePayloadT {
                payload: None,
    }
    // even worth the code complexity.
}
categories_from_constant_array!(0);
    /// No wrapping in effect.
            if sel_end_ix > sel_start_ix {

        where S: Into<StrCow>, C: Into<CategoriesT>
    /// The revision history of the document
        if self.find.is_empty() {
                    text.slice_to_string(region.min(), region.max())
        MergeTestState::new(2).run_script(&script[..]);
        self.deletes_from_union = deletes_from_union;
        let mut selection = self.selection.clone();
            match reverse {
    }
    fn test_ser_de() {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        self.deletes_from_union_before_index(rev_index + 1, true)
            // I think it's a precondition that this will never be called
                        &mut start[bi]
            AddSelectionAbove =>
#[derive(Serialize, Deserialize, Debug)]
            edit: Undo { toggled_groups, deletes_bitxor }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// The line ending is stripped from the resulting string. The final line ending
        let new_inserts = union_ins_delta.inserted_subset();
        priority: usize,
struct Revision {
use std::collections::hash_map::DefaultHasher;
    max_undo_so_far: usize,
                Undo { toggled_groups, deletes_bitxor } => {
        self.enabled.store(true, AtomicOrdering::Relaxed);
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
/// let b = Rope::from("world");

    }
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
    #[bench]
/// discussion on payload.
    AsyncEnd,
    }
impl<'a> Cursor<'a, RopeInfo> {
    TRACE.enable();
                payload: payload,
            AssertMaxUndoSoFar(1,3),
/// record it.
        assert_eq!(None, b.prev_codepoint_offset(0));
}
            match rev.edit {
use std::str::FromStr;
}
            'X' => SampleEventType::CompleteDuration,
/// * `name` - A string that provides some meaningful name to this sample.
    /// the other doesn't make it re-appear.
        for rev in self.revs[rev_index..].iter().rev() {


pub struct Engine {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        assert!(a.slice(0, 0) == empty);
        let b_rope = Rope::from(&b);
    }
    #[test]
impl Hash for Sample {
        while !s.is_empty() {
    }

    /// Time complexity: technically O(n log n), but the constant factor is so
    pub fn with_limit_count(limit: usize) -> Self {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
}

    }
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        self.replace = Some(Replace { chars, preserve_case });
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
            }
        assert_eq!(2, b.offset_of_line(1));
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));

                len += 1;
    // this is the cost contributed by the timestamp to

    fn identity() -> Self {
            inserts = inserts.transform_expand(trans_inserts, after);
//! a previously committed version of the text rather than the current text,
            }
///
#[inline]
categories_from_constant_array!(9);
            rendered_styles.push(sel_end as isize - sel_start as isize);
    #[test]
            Merge(0,1),
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            } else {
    fn undo_3() {
        let mut rendered_styles = Vec::new();
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        }
            to_payload("some description of the trace"))));

        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let delta = Delta::synthesize(&self.tombstones,
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    where S: Into<StrCow>, C: Into<CategoriesT>
                    selection.add_region(occ);
            },

    }
}
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
        -##-
/// Then offset=1 is invalid.
    pub width: f64,

            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
            let not_in_tombstones = self.deletes_from_union.complement();
            }

/// discussion on payload.
            let inserted = inserts.inserted_subset();
    #[bench]

        if !selection.regions_in_range(offset, offset).is_empty() {
                    } else {
    // TODO: maybe refactor this API to take a toggle set
                MergeTestOp::Merge(ai, bi) => {
categories_from_constant_array!(0);
// you may not use this file except in compliance with the License.

            args: Some(SampleArgs {
    }
enum Contents {
        let text_with_inserts = text_ins_delta.apply(&self.text);
    pub tid: u64,
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            // Do it the other way on the copy
                } else {
            "ops": ops,
        }
                self.add_selection_by_movement(text, Movement::Down),
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    }
impl Hash for Sample {
        if self.scroll_to.is_none() && wrap {
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        // 1 MB
#[macro_use]
    /// storage allocated will be limit * size_of<Sample>


                Edit { ref inserts, ref deletes, ref undo_group, .. } => {

                // Deprecated (kept for client compatibility):
            Assert(1, "ab".to_owned()),
    fn undo_4() {
    fn invalidate_selection(&mut self, text: &Rope) {
                    }
            }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        assert_eq!(2, b.offset_of_line(1));
                    Some(Contents::Edit {
        #[serde(rename_all = "snake_case")]
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        for chunk in self.iter_chunks(start, end) {
            SelectAll => self.select_all(text),
            Merge(4,3),

            size: Size::default(),



                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
            l[offset..].chars().next()

/// Returns the operations in `revs` that don't have their `rev_id` in
impl Serialize for DeltaElement<RopeInfo> {
            min: offset,
    pub fn scroll_height(&self) -> usize {
    /// should be constructed via SampleGuard.
        selection.add_region(region);
            rendered_styles.push(0);
    ///
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};

fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
/// could trigger incorrect behavior if they collide, so u64 is safe.
///
        d_builder.delete(Interval::new_closed_open(10, 36));
        first_line..(last_line + 1)
}
/// Boundary is atomic and determined by codepoint boundary.
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {

}
    /// if it is non-empty. It needs to be a separate commit rather than just
categories_from_constant_array!(4);
/// # Examples

        MergeTestState::new(2).run_script(&script[..]);
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
        offset
use memchr::{memrchr, memchr};
            }
    highlight_find: bool,
}
pub struct ChunkIter<'a> {
        priority: usize,
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    breaks: Option<Breaks>,
                    let mut selection = self.selection.clone();
}
            if self.line_of_offset(text, offset) <= line {
    pub fn disable(&self) {
/// }
            None => None
                self.set_selection(text, SelRegion::caret(offset));
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        assert_eq!(None, b.next_codepoint_offset(9));
        // original values this test was created/found with in the UI:
        }, to_payload("test_get_samples_nested_trace"));

                max_undo_so_far: i,
    }
        trace.instant("4", &["test"]);

        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
    }
            client.scroll_to(self.view_id, line, col);
        }
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
                        if n_skip > 0 {
            pid: sys_pid::current_pid(),
    }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                    }
        (Revision {

                        None

            Merge(1,0),
    Edit {
        let res = find_common(&a, &b);
use bytecount;
/// revisions on top of the revisions represented by `expand_by`.
                    let (start, end) = self.peers.split_at_mut(ai);
        &self.text
        last_line += if last_col > 0 { 1 } else { 0 };
    AsyncStart,
    pub fn with_limit_bytes(size: usize) -> Self {
    use test::black_box;
/// an argument.
                metadata_sort_index: None,
    ObjectDestroyed,
        }
    }
                sel.add_region(SelRegion::new(last.start, offset));
    }
            GestureType::LineSelect =>
            // corner and I'm lazy -cmyr
        RopeInfo {
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
                while cursor.pos() < region.max() {
}
        if offset == 0 {
        samples[0].timestamp_us = 10;
    /// Constructs a Duration sample.  For use via xi_trace::closure.
pub type RopeDelta = Delta<RopeInfo>;
            if next_chunk.is_none() { return None; }
        where S: serde::Serializer


    fn bench_two_timestamps(b: &mut Bencher) {
    type Output = Rope;
            Assert(0, "zcbd".to_owned()),
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    trace: Option<&'a Trace>,
        let utf8_offset = 13;
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        }
                MergeTestOp::AssertAll(ref correct) => {
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
                self.start_drag(offset, offset, offset);
/// However, anything that can be converted into a Cow string can be passed as
    /// Get text of head revision.
pub type Rope = Node<RopeInfo>;
pub struct Sample {
            let style_id = self.get_or_def_style_id(client, styles, &style);
        where D: Deserializer<'de>,
                edit: contents.clone()
        trace.closure_payload("x", &["test"], || {
                      delta: &Delta<RopeInfo>, client: &Client,
            max_undo_so_far,
        if wrap_col > 0 {
                Undo { toggled_groups, deletes_bitxor } => {
                }
            Some(Cow::Owned(mut s)) => {
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    }
        assert_eq!(snapshot[4].name, "y");
        let mut selection = Selection::new();

/// However, anything that can be converted into a Cow string can be passed as
/// `base_revs`, but modified so that they are in the same order but based on
    /// Determines the current number of find results and search parameters to send them to
        View {

    assert!(!a.is_empty() && !b.is_empty());


    {
    }
            let c = i.to_string() + "\n";
            self.record(Sample::new_duration(
        Engine {
    }
/// Returns the operations in `revs` that don't have their `rev_id` in
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    // possible to fix it so that's not necessary.
    }

        engine.edit_rev(1, 1, initial_rev, d1.clone());
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));

}
        assert_eq!(snapshot[4].name, "y");
        if let Some((l, offset)) = self.get_leaf() {

            }, to_payload("test_get_samples_nested_trace"));
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
    /// An iterator over the lines of a rope.
                } else {

// See the License for the specific language governing permissions and
    }
    // allowing us to use the same method to insert the text into the tombstones.
    ///
        let r = Rope::from(&a[..MAX_LEAF]);
        CategoriesT::DynamicArray(c)
            b.push_str(&c);
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
                                             &text, false);
pub struct Config {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                SelectionModifier::Add => {
                                deletes,
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
use std::collections::BTreeSet;
        self.set_dirty(text);

            HighlightFind { visible } => {
                    } else {
    }
            let (start, end) = if offset < drag_state.offset {
    /// Invalidates front-end's entire line cache, forcing a full render at the next
                    selection.add_region(occ);
        for seg in self.lc_shadow.iter_with_plan(plan) {
}
/// the session ID component of a `RevId`
use interval::Interval;
    }
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
///
        } else {


///

            text: Rope::default(),

        text = new_text;
    {
    {
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
    pub fn max_size_in_bytes(&self) -> usize {
            base_len: usize
    TRACE.block(name, categories)
pub struct Lines<'a> {
        }
/// acquires a dependency on the `serde_json` crate.
            }
/// Represents the current state of a document and all of its history
    #[cfg(feature = "benchmarks")]
            'N' => SampleEventType::ObjectCreated,
            }
        for i in 0..5_000 {
    (1, 0)
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    #[test]

            Some(offset - len)

            self.next()
                }
        }
        // stable order since the resolution of timestamps is 1us.
    use multiset::Subset;
//     http://www.apache.org/licenses/LICENSE-2.0
            .map(|pos| pos + 1)
            SampleGuard::new_disabled()
    pub name: StrCow,
        // if we have active find highlights, we don't collapse selections
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
//
}
        samples[1].timestamp_us = 5;
        Ok(Rope::from(s))


                Edit { priority, undo_group, inserts, deletes } => {

#[derive(Serialize, Deserialize, Debug, Clone)]
                    let (start, end) = {
    #[inline]
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        let mut hls = Vec::new();
                serializer.serialize_newtype_variant("DeltaElement", 1,
    #[test]
/// Revision will be used, which means only the (small) set of concurrent edits
}
            Assert(1, "abefg".to_owned()),
                sel.add_region(SelRegion::new(last.start, offset));

    fn basic_rev(i: usize) -> RevId {
    // in a single session.
    /// If `modify` is `true`, the selections are modified, otherwise the results
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    /// Return the offset of the codepoint before `offset`.
        }
use std;
    fn delta_rev_head() {
///
    }
    (out, text, tombstones, deletes_from_union)
            let sel = {
        MergeTestState::new(3).run_script(&script[..]);
///
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                _ => { }
            // I think it's a precondition that this will never be called
/// a.edit_str(1, 9, "era");
        engine.undo([1].iter().cloned().collect());
    }
            rev_id: self.next_rev_id(),
        ---#--
/// Find an index before which everything is the same
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
/// Measured unit is newline amount.
mod tests {
#[cfg(test)]
        }
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
        let mut all_samples = self.samples.lock().unwrap();
    fn is_boundary(s: &String, offset: usize) -> bool {
                    as_vec.push(Sample::new_metadata(
/// the `base_revs`. This allows the rest of the merge to operate on only
                     modify_selection: &SelectionModifier) {
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,

    for rev in revs.iter().rev() {
        let mut b = String::new();
        } else {
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
            Replace { chars, preserve_case } =>
/// with.  By default, the type is string-like just like name.  If compiled with
    // transform representing the characters added by common revisions after a point.
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
        }
    /// Return the offset of the codepoint before `offset`.
            sel
            self.find.push(Find::new());
        next_expand_by = Vec::with_capacity(expand_by.len());
            }
    fn next_codepoint_offset_small() {
                            rev_id: rev.rev_id,
    for &b in s.as_bytes() {
        r.slice_to_string(0, r.len())
    }
                            styles: &StyleMap, style_spans: &Spans<Style>,
    #[cfg(feature = "benchmarks")]
    /// This function does not perform any scrolling.
/// ```rust
                    }
/// Indicates what changed in the find state.

    }
        engine.undo([1,3].iter().cloned().collect());
#[inline]
            SampleEventType::AsyncEnd => 'e',
                while cursor.pos() < region.max() {
            return false;
    }
        leaf.as_bytes()[pos]
    }
    }
        // TODO(vlovich): optimize this path to use the Complete event type
    Edit {
fn find_leaf_split_for_bulk(s: &str) -> usize {
    }
            self.name == other.name &&
            warn!("Failed to get path to current exe: {:?}", e);
                }

    /// Update front-end with any changes to view since the last time sent.
        use std::hash::{Hash, Hasher};

                    }

        MergeTestState::new(3).run_script(&script[..]);

        } else {
        client.update_view(self.view_id, &params);
    }
}
            }

            // trans-expand other by expanded so they have the same context
fn clamp(x: usize, min: usize, max: usize) -> usize {
    }
        let first_rev = engine.get_head_rev_id().token();
            MetadataType::ProcessName {name} => (Some(name), None),
                    };
        });
        --#--
                self.set_dirty(text);


            Merge(0,2), Merge(1, 2),
///
}
            let _ = trace.block("test_samples_block", &["test"]);
        max
    if x < min {
        inserts.into_iter().enumerate().map(|(i, inserts)| {
            trace.closure_payload("y", &["test"], || {
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
                    self.do_gesture(text, line, column, GestureType::LineSelect)
    pub fn merge(&mut self, other: &Engine) {

        self.tombstones = new_tombstones;
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
}
categories_from_constant_array!(1);
        let a_rope = Rope::from(&a);
                    self.fragment = "";
                    text.slice_to_string(start, end)
            let (start, end) = if offset < drag_state.offset {
        LinesRaw {
        let thread = std::thread::current();
    /// Selects the next find match.
    {
        assert_eq!(snapshot[0].name, "process_name");
                    s = inserts.transform_union(&s);
                // TODO could probably be more efficient by avoiding shuffling from head every time
                        gc_dels = gc_dels.transform_expand(inserts);
    }
                cursors.push(c - start_pos);
}
    }
    where S: serde::Serializer {
        assert_eq!(r.len(), r.offset_of_line(2));
        d_builder.delete(Interval::new_closed_open(10, 36));
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
        -> R
        cursor.next_grapheme()
                                                    style_spans, client,
        let line = self.line_of_offset(text, end);

enum FindStatusChange {
#[derive(Serialize, Deserialize, Clone, Debug)]
            sample.event_type = SampleEventType::DurationEnd;
    fn lines_small() {
/// Create an instantaneous sample without any payload.  This is the lowest
/// None if an irrecoverable error occured.
    }
                println!("running {:?} at index {}", op, i);

///
/// }
        for _ in 0..in_measured_units {
            // recurse at most once; this doesn't feel great but I wrote myself into a
}
    }
                      delta: &Delta<RopeInfo>, client: &Client,
    fn bench_get_pid(b: &mut Bencher) {
                RenderTactic::Render => {
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
        //} else {
}
}

    #[test]
                        let end_line = start_line + seg.n;
        result
//

                            }
    fn eq_small() {
            "pristine": pristine,
            Merge(0,1),
    pub fn default() -> Self {
/// Measured unit is newline amount.
fn clamp(x: usize, min: usize, max: usize) -> usize {
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        assert_eq!(snapshot[3].name, "a");
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
// The advantage of using a session ID over random numbers is that it can be
    pub fn get_samples_count(&self) -> usize {
    max_undo_so_far: usize,
        first_line..(last_line + 1)
        self.tombstones = new_tombstones;
            Some(ref breaks) => {
        if let Some(ref mut trace) = self.trace {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    }
impl Engine {
    }
            Assert(1, "ab".to_owned()),
    /// The name to associate with the pid/tid.  Whether it's associated with
            // recurse at most once; this doesn't feel great but I wrote myself into a
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
            pid: sys_pid::current_pid(),
                    new_deletes = new_deletes.transform_expand(inserts);
/// {
/// See `trace_closure` for how the closure works and `trace_payload` for a
#[inline]
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        let first_rev = engine.get_head_rev_id().token();
    use test::black_box;
    }
    replace_changed: bool,
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        let deletes_from_union = parse_subset("-#----#");
            if !selection.is_empty() {
                   r.lines_all().collect::<Vec<_>>());
            }
    pub metadata_sort_index: Option<i32>,
    ///
    pub thread_name: Option<StrCow>,
            MetadataType::ProcessLabels {..} => (None, None)
        self.deletes_from_union = deletes_from_union;
    lines: usize,

    #[test]
            Assert(1, "apb".to_owned()),
                // TODO could probably be more efficient by avoiding shuffling from head every time
        (self.pid, self.timestamp_us).hash(state);
/// Computes a series of priorities and transforms for the deltas on the right
                    let (mut a, rest) = end.split_first_mut().unwrap();
                    let mut selection = self.selection.clone();
    }
    type Item = Cow<'a, str>;
                    return None;
        // and it only needs to be consistent over one execution.
    #[serde(rename = "dur")]
        as_vec.extend(all_samples.iter().cloned());
    #[test]
        self.len() >= MIN_LEAF
                if self.fragment.is_empty() {
        }
        let mut to_undo = BTreeSet::new();
        assert_eq!("#-####-", &subset_str);

        } else {
/// ```
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
        let mut b = line_cache_shadow::Builder::new();
                        Err(e) => {


    /// Selects an entire word and supports multi selection.
        }

                    }
///

        assert_eq!(2, a.offset_of_line(1));
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
                    };
    #[test]
                out.push((prio, inserts));
    fn edit_rev_undo_2() {
/// of Sample that determines order.
    /// Garbage collection means undo can sometimes need to replay the very first
#[inline]
#[inline]
        assert_eq!(utf8_offset, 19);
                pos = leaf_offset + nl.len();
    fn build_delta_2() -> Delta<RopeInfo> {
            }
        deserializer.deserialize_str(CategoriesTVisitor)
            for find in self.find.iter() {
        let mut selection = match multi_select {
    deletes: Subset,
        self.set_selection(text, sel);
            let a_to_merge = &self.revs[base_index..];
}
    }

            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        samples[1].timestamp_us = 5;
    }

        let trace = Trace::enabled(Config::default());
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
                   style_spans: &Spans<Style>, line_num: usize) -> Value
            },

{
            Merge(1,0), Merge(2,0),
    #[test]
            splitpoint

        assert_eq!(snapshot[4].name, "y");
        let cursor = Cursor::new(self, offset);
    #[cfg(feature = "benchmarks")]
extern crate serde_derive;
    pub(crate) fn unset_find(&mut self) {

    fn bench_trace_instant_with_payload(b: &mut Bencher) {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        } else {
            if (c > start_pos && c < pos) ||
        let trace = Trace::enabled(Config::default());
            tid: sys_tid::current_tid().unwrap(),
        let mut pos = self.pos();
    fn undo_5() {
}
/// * `categories` - A static array of static strings that tags the samples in
            MetadataType::ThreadName {name} => (Some(name), None),
        debug_subsets(&rearranged_inserts);
            self.tid == other.tid &&
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
                    b.add_span(seg.n, 0, 0);
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
    /// not account for any overhead of storing the data itself (i.e. pointer to

        -> R
        last_line += if last_col > 0 { 1 } else { 0 };
        self.set_selection(text, sel);
        b.iter(|| {
    }
    }
        // insert a character at the beginning


            trace.instant("c", &["test"]);
use xi_rope::tree::Cursor;


        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// The payload associated with any sample is by default a string but may be
        let (new_text, new_tombstones) =
                if !region.is_caret() {
        let _t = trace_block("View::wrap_width", &["core"]);
                            rendered_lines.push(line);
            Merge(1,0),
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
    /// The `pristine` argument indicates whether or not the buffer has

}
        let mut leaf_offset = pos - offset;
    // TODO: this should be a Cow
        ]);



            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    pub(crate) fn unset_find(&mut self) {

        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's

            panic!("line number {} beyond last line {}", line, max_line);
// distributed under the License is distributed on an "AS IS" BASIS,
        &leaf[offset..end]
use std::hash::{Hash, Hasher};

        as_vec
        for i in 1..(s1.len() * 3) {
            Assert(0, "zacbd".to_owned()),
        fn new(count: usize) -> MergeTestState {
}
    fn gc_4() {
        let l_str = text.slice_to_string(start_pos, pos);
        let rev = Revision {
    }
        self.revs.last().unwrap().rev_id
                        for line_num in start_line..end_line {
        let deletes_from_union = Subset::new(0);

//
///
pub fn disable_tracing() {
    /// Return the offset of the codepoint after `offset`.
    }
fn clamp(x: usize, min: usize, max: usize) -> usize {

        let new_deletes_from_union = {
    let inverse_tombstones_map = old_deletes_from_union.complement();
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        guard
    if a.is_empty() {
        assert_eq!(Some(1), a.next_codepoint_offset(0));

    /// End of the region selected when drag was started.
    // for simplicity.
        let snapshot = trace.samples_cloned_unsorted();
    scroll_to: Option<usize>,
        assert_eq!(correct, rebased_inserts);

                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

        let b = Rope::from("b");
            }),
    fn delta_rev_head() {
// ======== Generic helpers

            // Go crazy
            Assert(1, "bdefg".to_owned()),
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
                            }
            None
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            s.as_bytes()[offset - 1] == b'\n'
    /// Returns a slice of the string from the byte range [`start`..`end`).
fn initial_revision_counter() -> u32 {
        ];

    /// description for the invariant.
            Sample::new_instant("local pid", &[], None),
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);

    /// This method is responsible for updating the cursors, and also for
                        if n_skip > 0 {
    fn edit_rev_simple() {
// See the License for the specific language governing permissions and
            },


        let new_sel = selection_movement(movement, &self.selection,
    fn append_large() {
        let plan = RenderPlan::create(height, self.first_line, self.height);
        }
/// * `categories` - A static array of static strings that tags the samples in
        let mut d_builder = Builder::new(TEST_STR.len());
        if let Some(breaks) = self.breaks.as_mut() {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
    #[inline]
            Some(offset - len)
        }
        revs.append(&mut revs_3);
        }
            self.breaks = None
        let r = Rope::from(&a[..MAX_LEAF]);
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
        /// should go before typed text.
    fn compute_transforms_1() {
    }
        let inserts = parse_subset_list("
        let mut leaf_offset = pos - offset;
        where S: Into<StrCow>, C: Into<CategoriesT>
        let mut r = Rope::from("27");
    inserts: InsertDelta<RopeInfo>,
    }
    TRACE.instant_payload(name, categories, payload);
            pid: sys_pid::current_pid(),
                    if let Some(last_selection) = self.selection.last() {
        -> Result<CategoriesT, D::Error>
    let mut out = Vec::with_capacity(revs.len());
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
    }
    }

}


    fn bench_trace_instant_disabled(b: &mut Bencher) {
    /// The semantics are intended to match `str::lines()`.
            None
            SampleEventType::FlowInstant => 't',

            Merge(1,0),
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
                    a.merge(b);
use std::ops::Range;
                                deletes_bitxor: new_deletes_bitxor,
        while !s.is_empty() {
        Subset::new(len)
        use self::MergeTestOp::*;
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
        if offset == 0 {
mod sys_pid;

        leaf.as_bytes()[pos]
                    self.do_gesture(text, line, column, GestureType::LineSelect)
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);


const MAX_LEAF: usize = 1024;
        assert!(r != a_rope);
        self.scroll_to = Some(end);
            self.shrink_to_fit();
        engine.undo([1,2].iter().cloned().collect());
        if let Some(edit) = contents {
                    let full_path = exe_name.into_os_string();
        }
        let mut update = json!({
        Merge(usize, usize),

lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        engine.edit_rev(0, 2, first_rev, build_delta_2());

    /// Returns a u64 that will be equal for equivalent revision IDs and
        engine.gc(&gc);
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        assert_eq!(utf8_offset, 9);
    pub fn max_samples(&self) -> usize {
        assert_eq!(2, a.line_of_offset(5));
            }
                        }
                self.select_word(text, offset, true)
            // with offset == s.len(), but be defensive.
        let (new_text, new_tombstones) =

    }
        self.drag_state = Some(DragState {
        /// The subset of the characters of the union string from after this
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    // reachability calculation.
    // maybe explore grabbing leaf? would require api in tree
        let mut update = json!({
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
    }
            rev_id: self.next_rev_id(),
            trace.instant("something", &[]);
pub type StrCow = Cow<'static, str>;
pub type RopeDelta = Delta<RopeInfo>;
    /// An arbitrary payload to associate with the sample.  The type is
    }
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4

        let script = vec![
    out
    }
                         hls: &[(usize, usize)],
        assert_eq!("#---#--", &subset_str);
                self.select_word(text, offset, false),
        engine.undo([1,2].iter().cloned().collect());
                        self.revs.push(Revision {
/// creation.  Roughly corresponds to start_ns but instead there's a
                         style_spans: &Spans<Style>) -> Vec<isize>

        debug_subsets(&rebased_inserts);
                    text.slice_to_string(region.min(), region.max())
    #[inline]
        client.def_style(&style.to_json(ix));
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        if b >= 0xf0 {

#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            Assert(0, "acbd".to_owned()),
                                                    style_spans, client,
    TRACE.samples_cloned_sorted()
            l[offset..].chars().next()
        engine.edit_rev(1, edits+1, head2, d2);
}
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
 //additional cursor features
    fn find_base_1() {
}
        assert_eq!(rope.line_of_offset(15), 3);
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        let script = vec![
        for _ in 0..(edits-max_undos) {
        } else {
            utf16_size: 0,

            // On the next step we want things in expand_by to have op in the context
            let matches_only = self.find_changed == FindStatusChange::Matches;
pub struct SampleGuard<'a> {
        }
impl Serialize for DeltaElement<RopeInfo> {
        --#-
        if offset == 0 {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
            }
///
                formatter.write_str("comma-separated strings")
        assert_eq!(rope.line_of_offset(0), 0);
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
                        Some(end) => max(0, end - 1),

    }
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
categories_from_constant_array!(3);
        let correct = parse_subset_list("
        // We could probably reduce the cloning of selections by being clever.
    }
        let first = max(first, 0) as usize;
                            let line = self.render_line(client, styles, text,
    TRACE.instant_payload(name, categories, payload);

        }
    /// Returns the largest undo group ID used so far
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                match *other {
///
        self.text = new_text;
/// let mut a = Rope::from("hello world");
}
}
    #[cfg(feature = "benchmarks")]
    }
///
    }
            if inserts.is_empty() {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            }

            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    // ============== Merge script tests
/// let b = a.slice(1, 9);
            _ => None
                self.find_changed = FindStatusChange::All;
    #[cfg(feature = "benchmarks")]
        where S: Into<StrCow>, C: Into<CategoriesT>
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        Ok(Rope::from(s))

                // sanitize input
impl<T: AsRef<str>> From<T> for Rope {

pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
categories_from_constant_array!(1);
/// overhead tracing routine available.
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    /// Toggles a caret at the given offset.
///
/// A static string has the lowest overhead as no copies are necessary, roughly
extern crate test;
use std::sync::Mutex;
    }
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
    rev_id: RevId,
/// A static string has the lowest overhead as no copies are necessary, roughly
            while !s.is_char_boundary(splitpoint) {
        Assert(usize, String),
            Find { chars, case_sensitive, regex, whole_words } =>
                self.set(pos);
        assert_tokens(&rope, &[
            args: Some(SampleArgs {
        let start = self.line_col_to_offset(text, line, 0);
    /// the heap, counters, etc); just the data itself.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        }).unwrap_or(text.len());
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    #[serde(deserialize_with = "deserialize_event_type")]
    fn bench_trace_closure(b: &mut Bencher) {

            if !selection.is_empty() {
    fn test_cross_process_samples() {
                    new_deletes = new_deletes.transform_expand(inserts);
                cur_all_inserts = older_all_inserts;
// See the License for the specific language governing permissions and
                        if self.undone_groups.contains(undo_group) {
use std::ops::Range;
/// are shared.
    }
///
            Merge(0,2), Merge(1, 2),

        assert_eq!(snapshot[6].name, "z");
                      width_cache: &mut WidthCache, keep_selections: bool)
                rev_id: basic_rev(i),
}

    max: usize,
    pub fn select_all(&mut self, text: &Rope) {
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    /// All the selection regions other than the one being dragged.
    }
use std::fmt;
            // TODO: on double or triple click, quantize offset to requested granularity.
                RenderTactic::Preserve => {
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
        };
        len
        let new_pos = self.pos() + (end - offset);
        engine.edit_rev(1, 3, new_head_2, d3);
        assert_eq!("herald", String::from(a));
    #[should_panic]
        selection.add_region(region);
    fn can_fragment() -> bool { false }
    fn delta_rev_head() {
        let mut b = TreeBuilder::new();
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    }
        ix
    inner: ChunkIter<'a>,
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    fn compute_transforms_1() {
            trace: Some(&trace),
    }
        let inserts_1 = parse_subset_list("
                        };
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            let b = s.as_bytes()[offset];

    fn next(&mut self) -> Option<Cow<'a, str>> {
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
    pub fn disabled() -> Self {
    replace: Option<Replace>,
    }
                        b.add_span(seg.n, 0, 0);

    use super::*;
        let script = vec![
    }
        self.hash(&mut hasher);
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        self.enabled.load(AtomicOrdering::Relaxed)
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        let mut d = TracePayloadT::with_capacity(1);
    }
        assert_eq!(snapshot[1].name, "thread_name");
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                break;
    /// assumed to be forward).
        self.find_changed = FindStatusChange::All;

        }
            }
        // This might be an over-specified test as it will
            self.find.push(Find::new());
    /// Returns the visible line number containing the given offset.
            }
            }

        let cur_deletes_from_union = &self.deletes_from_union;
/// ```


}
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");

                Contents::Undo { .. } => panic!(),
}
        ---#--
    pub(crate) fn record(&self, sample: Sample) {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

    fn prev(s: &String, offset: usize) -> Option<usize> {
/// See `trace_block` for how the block works and `trace_payload` for a
//
    }
}
/// # Examples
        }
        b.iter(|| sys_pid::current_pid());
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        };
            Assert(0, "acbd".to_owned()),

                rev_id: basic_rev(i),
    // * Unicode width (so CJK counts as 2)
        /// Groups related edits together so that they are undone and re-done
/// * `name` - A string that provides some meaningful name to this sample.
    /// Highlights are only rendered when search dialog is open.
            Merge(0,2), Merge(1, 2), Merge(3, 2),
        }
            Merge(2,1),
    }
        assert_eq!(None, a.prev_grapheme_offset(0));
    #[test]
        serializer.serialize_str(&String::from(self))
    }
#[derive(Clone, Copy)]
/// The visual width of the buffer for the purpose of word wrapping.
            }
    }
    }
            MergeTestState { peers }
            None
}
                                gc_dels = gc_dels.transform_expand(inserts);

        let a = Rope::from("\n");
        // that into our actual target.
        if self.find_changed != FindStatusChange::None {
            } else if incomp == GraphemeIncomplete::PrevChunk {
            Merge(3,1), Merge(5,3),
            "text": &l_str,
            }
    //
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
                }
        let mut selection = self.selection.clone();

                    None
    fn compute_transforms_2() {
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
            self.record(Sample::new_instant(name, categories, None));
    /// Get text of a given revision, if it can be found.
        ---#--
/// implementation as efficient as a mutable version.
            Assert(1, "apbj".to_owned()),
        Self {
        delta.end()
        assert!(empty == empty);

// Licensed under the Apache License, Version 2.0 (the "License");
#[inline]
            self.name == other.name &&

            engine.undo(undos.clone());
        assert!(a != empty);
            while !s.is_char_boundary(splitpoint) {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
///
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
            let matches_only = self.find_changed == FindStatusChange::Matches;
    #[cfg(feature = "benchmarks")]

}
    {
// Licensed under the Apache License, Version 2.0 (the "License");

                        DeltaElement::Copy(start, end),
        #------
    inner: ChunkIter<'a>,
                    if let Some(new_gc_dels) = new_gc_dels {
            }),
            }

            rendered_styles.push((sel_start as isize) - ix);
            }),
enum WrapWidth {
/// ```
        use self::MergeTestOp::*;
    #[inline]

}
        let a_rope = Rope::from(&a);
pub struct SampleGuard<'a> {
            selection: SelRegion::caret(0).into(),
impl<'a> Iterator for ChunkIter<'a> {

    /// Get next codepoint after cursor position, and advance cursor.

                                gc_dels = gc_dels.union(deletes);
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
            }
    }
        b.iter(|| sys_pid::current_pid());
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);

    }
extern crate lazy_static;
        }
            lines: 0,
                tid));
/// With `json_payload` feature:
        let first_rev = engine.get_head_rev_id().token();
    /// This is used to determined whether FindStatus should be sent to the frontend.
}
        fn run_op(&mut self, op: &MergeTestOp) {
        }
        assert!(leaf.is_char_boundary(end));
use styles::{Style, ThemeStyleMap};
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
impl Engine {
    }
/// * `name` - A string that provides some meaningful name to this sample.
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
pub fn samples_cloned_unsorted() -> Vec<Sample> {

    #[bench]
            deletes = deletes.transform_expand(&new_trans_inserts);
    }
}
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        // original values this test was created/found with in the UI:

    {
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        }
        }
    fn next_codepoint_offset_small() {
    pub fn enable(&self) {
        }
    use multiset::Subset;

        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
    /// Selects an entire line and supports multi selection.
// You may obtain a copy of the License at
}
// ======== Merge helpers
            AssertMaxUndoSoFar(1,3),
}

                    // TODO: update (rather than re-render) in cases of text valid
        let mut selection = match multi_select {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    ProcessLabels { labels: String },
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        }
    // ============== Merge script tests
use std::fmt;
            // with offset == s.len(), but be defensive.
        assert_eq!(soln, String::from(engine.get_head()));
        Cow::from(a.into_owned() + b)
        result
    /// after an edit is applied, to allow batching with any plugin updates.
        }
/// feature makes the payload a `serde_json::Value` (additionally the library
    /// the other doesn't make it re-appear.
            self.set_selection(text, sel);
    pub fn sel_regions(&self) -> &[SelRegion] {

    }
    pub fn enable_config(&self, config: Config) {
    /// What kind of sample this is.
        {
        trace.instant("5", &["test"]);
                        let (inserts, deletes) = if gc_dels.is_empty() {
use rope::{Rope, RopeInfo};
        for u in s.chars() {
            // cursor
        if !self.is_enabled() {
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
    #[test]
            trace: None,

}
/// same priority into one transform to decrease the number of transforms that
                edit: Contents::Edit {
    pub fn max_samples(&self) -> usize {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                deletes: new_deletes,
    /// ancestor in order to be mergeable.
/// Find an index before which everything is the same
                    None => return if result.is_empty() { None } else { Some(result) }

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            } else {

            view_id: view_id,
        out.push(Revision {
    }

        let trace = Trace::disabled();
            self.event_type == other.event_type &&
#[inline]

    use serde_test::{Token, assert_tokens};
        let utf8_offset = 9;
    /// An arbitrary payload to associate with the sample.  The type is
            args: Some(SampleArgs {
            base_len: usize
            Assert(2, "adfc".to_owned()),
        let is_base = base_revs.contains(&rev.rev_id);
impl Metric<RopeInfo> for LinesMetric {
    }
    #[bench]

}
impl Rope {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            Assert(1, "zpbj".to_owned()),
    }
        d_builder.delete(Interval::new_closed_open(10, 36));
    #[bench]
        }
/// discussion on payload.
    // revision might hold content from an undo group that would otherwise be gc'ed),
/// Represents a transform from one rope to another.
    }
/// });
        let mut engine = Engine::new(Rope::from(TEST_STR));
                cursors.push(c - start_pos);
        assert_eq!(2, expand_by[1].0.priority);
        let mut retain_revs = BTreeSet::new();
                match self.inner.next() {
        let mut all_samples = self.samples.lock().unwrap();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    }
    // trace_block()/trace_closure
        let invalid = if all_caret {
    }
        });
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        MergeTestState::new(3).run_script(&script[..]);
use rpc::{GestureType, MouseAction, SelectionModifier};
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },

            tid: sys_tid::current_tid().unwrap(),
                        let n_skip = seg.their_line_num - line_num;
            return;
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                println!("running {:?} at index {}", op, i);
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    None,
    fn prev(s: &String, offset: usize) -> Option<usize> {
                self.set(pos);
    Instant,
        }
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(Some(17), a.next_grapheme_offset(9));
    pub fn max_samples(&self) -> usize {
                        }
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        inserts: Subset,
categories_from_constant_array!(3);
        let trace = Trace::enabled(Config::default());
    }

        ");
        let a_rope = Rope::from(&a);
pub fn disable_tracing() {


        count_utf16_code_units(&s[..in_base_units])
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
    }
                    text.slice_to_string(start, end)
///
}
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
//     http://www.apache.org/licenses/LICENSE-2.0
    /// set with this function, which will make the revisions they create not have colliding IDs.

    pub fn set_dirty(&mut self, text: &Rope) {
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
/// See `trace_payload` for a more complete discussion.
            Merge(0,1),
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
    }
            self.wrap_col = WrapWidth::Bytes(wrap_col);
        if line > max_line {
fn ns_to_us(ns: u64) -> u64 {
            Replace { chars, preserve_case } =>
            }

        assert_eq!(0, a.offset_of_line(0));

                peers.push(peer);
            let b = s.as_bytes()[offset];
        if !self.lc_shadow.needs_render(plan) { return; }
        samples
    /// from the rope.
    ///
                metadata_sort_index: None,
        assert_eq!(snapshot[4].name, "z");
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    fn gc_5() {
        assert_eq!(Some(9), b.next_codepoint_offset(5));
                    base_len: delta.base_len
        let iv = Interval::new_closed_open(start, end);
// Licensed under the Apache License, Version 2.0 (the "License");

        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
#[macro_use]
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
            sel.add_region(new_region);
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();

    }
        let mut b = TreeBuilder::new();
//
        &self.selection
    }
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        assert_eq!(trace.get_samples_count(), 0);
}
    bytecount::count(s.as_bytes(), b'\n')
        let inserts_3 = parse_subset_list("
}
pub enum CategoriesT {

                    }
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
use std::cmp;
    fn lines_small() {
        let mut end = start_pos + len;
        // TODO(vlovich): optimize this path to use the Complete event type
                    self.do_gesture(text, line, column, GestureType::WordSelect)
        engine.gc(&gc);
}
        let mut engine = Engine::empty();
                        hls.push((sel_start_ix, sel_end_ix));
        } else {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
    pub preserve_case: bool

        self.session = session;
}

use word_boundaries::WordCursor;
    }
        engine.edit_rev(1, 3, new_head_2, d3);
    #[test]
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    #[test]
            SampleEventType::FlowStart => 's',

///
        self.tombstones = new_tombstones;
            Assert(0, "acbd".to_owned()),
    }
        Merge(usize, usize),
    lc_shadow: LineCacheShadow,
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
            Assert(1, "arpbj".to_owned()),
impl Ord for Sample {
// Additional APIs custom to strings
        where S: Into<StrCow>, C: Into<CategoriesT>
/// `base_revs`, but modified so that they are in the same order but based on
    use super::*;
            sel
    fn edit_rev_undo_2() {
                    }
    }
    }
    pub fn lines_raw_all(&self) -> LinesRaw {
        engine.gc(&gc);
}
            utf16_count += 1;
        use self::MergeTestOp::*;
        assert_eq!("1234567", String::from(r));
    where S: serde::Serializer {
        thread.name().map(|ref s| to_cow_str(s.to_string()))
use fixed_lifo_deque::FixedLifoDeque;

}
            }
///
    /// Tracks whether the replacement string or replace parameters changed.
                pos = leaf_offset + pl.len();
            // with offset == 0, but be defensive.
            if let Some(ref thread_name) = sample.thread_name {
            }
        }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            timestamp_us: ns_to_us(timestamp_ns),
        let region = SelRegion::caret(offset);
            self.shrink_to_fit();
            Assert(0, "acbd".to_owned()),
        client.update_view(self.view_id, &params);
    }
        };
    }
        let last = max(last, 0) as usize;
/// Represents a transform from one rope to another.
        if self.cursor.pos() >= self.end {
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
use std::string::ParseError;
                           style: &Style) -> usize {
                                             &text, false);
    #[inline]
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let mut ops = Vec::new();
        // TODO: simplify this through the use of scopeguard crate
                self.set(pos);
    }
        deletes_from_union = new_deletes_from_union;
    #[test]
        trace.closure_payload("z", &["test"], || {},
    #[test]
#[derive(Clone, Debug, PartialEq, Eq)]
pub fn samples_cloned_sorted() -> Vec<Sample> {

        if (b as i8) >= -0x40 {
// Licensed under the Apache License, Version 2.0 (the "License");
                                deletes,
        engine.edit_rev(1, 3, new_head_2, d3);
        let r = Rope::from(&a[..MAX_LEAF]);
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
}
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
    }
        }
                        },
        #[derive(Serialize, Deserialize)]
    {
    /// from the rope.
        }
            sel.add_region(region);
// should make this generic, but most leaf types aren't going to be sliceable
/// same priority into one transform to decrease the number of transforms that
            'f' => SampleEventType::FlowEnd,
        offset
/// * `categories` - A static array of static strings that tags the samples in
        }
    }
        engine.undo([1,3].iter().cloned().collect());
// Licensed under the Apache License, Version 2.0 (the "License");
        let region = SelRegion::caret(offset);
            for rev in &self.revs {
}

    }

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    session1: u64,
// limitations under the License.

    /// The largest undo group number of any edit in the history up to this
            Assert(0, "bdc".to_owned()),
                //self.end - prev_pos

//
/// 3. You may not care about them always being sorted if you're merging samples
        self.utf16_size += other.utf16_size;
            Merge(0,2), Merge(1, 2),
                            max_undo_so_far: rev.max_undo_so_far,
    }
                }
/// An element in a `RopeDelta`.
            l[offset..].chars().next()
    fn gc_4() {

                SelectionModifier::Add => {
            drag_state: None,
impl<'a> Iterator for ChunkIter<'a> {
///
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
    }
            } else if incomp == GraphemeIncomplete::PrevChunk {

    ns / 1000

        // Rust is unlikely to break the property that this hash is strongly collision-resistant
    }
/// * `categories` - A static array of static strings that tags the samples in

            Assert(0, "acrbdz".to_owned()),
                        gc_dels = new_gc_dels;
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        debug_subsets(&rebased_inserts);
///
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
            lines: 0,
    }
            timestamp_us: ns_to_us(time::precise_time_ns()),
    }
    pub args: Option<SampleArgs>
        // rebase the delta to be on the head union instead of the base_rev union
        String::from(&r)
            }
    assert!(!a.is_empty() && !b.is_empty());
                }
                                  style_spans, &plan, pristine);
    utf16_count
                (!region.is_upstream() && c == start_pos) ||
                name, categories, Some(payload.into()), start, end - start));
        }
    for op in b_new {
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        }
/// Measured unit is newline amount.
        self.do_set_replace(replacement, false);
            session: default_session(),
        let first_rev = engine.get_head_rev_id().token();
    /// ties in edit priorities. Otherwise the results may be inconsistent.
/// that sorted would be prohibitively expensive.
    /// Start of the region selected when drag was started (region is
        let selection = SelRegion::new(0, text.len()).into();
            rendered_styles.push(sel_end as isize - sel_start as isize);
                }
/// Replace part of a `Rope`:
    }
        self.revs.iter().enumerate().rev()
pub struct ByteIter<'a> {

        match self.breaks {
extern crate lazy_static;
#[inline]
            //} else {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
            Revision {
    }

        // only one of the deletes was gc'd, the other should still be in effect
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    }
// Licensed under the Apache License, Version 2.0 (the "License");
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
            b.push('b');
        assert_eq!(Some(10), a.next_codepoint_offset(6));
    #[test]
        }
            }
        Self {
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);

        if self.is_enabled() {
            let base_index = find_base_index(&self.revs, &other.revs);
    }
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
            AssertMaxUndoSoFar(1,3),
        // rebase the deletion to be after the inserts instead of directly on the head union
    }
    {
    pub fn lines(&self, start: usize, end: usize) -> Lines {
    fn compute_info(s: &String) -> Self {
/// required). Mutations are generally copy-on-write, though in-place edits are

                cursors.push(c - start_pos);
            Merge(1,0),
        assert_eq!(0, r.line_of_offset(a.len() - 1));
categories_from_constant_array!(3);
            }

                },
        let end = self.line_col_to_offset(text, line + 1, 0);
    /// Only works well for ASCII, will probably not be maintained long-term.
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
    }
        assert_eq!(2, r.line_of_offset(r.len()));
            view_id: view_id,
    #[bench]
            s.as_bytes()[offset - 1] == b'\n'
        let mut engine = Engine::new(Rope::from(TEST_STR));
                } else {
    ///

                    if undone_groups.contains(undo_group) {
            warn!("Failed to get path to current exe: {:?}", e);
            }
            return Vec::with_capacity(0);
        }
/// Get a slice of a `Rope`:
    fn to_payload(value: &'static str) -> &'static str {
                    priority, inserts, deletes,
        }).collect()

    }
    {
    }
pub fn samples_cloned_sorted() -> Vec<Sample> {
            MetadataType::ProcessLabels {..} => (None, None)
    // this is the cost contributed by the timestamp to
        soln.push('f');
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
                    result = cow_append(result, &self.fragment[.. i + 1]);
#[derive(Serialize, Deserialize, Debug)]
                Delta {
}

    #[bench]
        let a = Rope::from("a\r\nb\r\nc");
                } else if click_count == Some(3) {
        let mut to_undo = BTreeSet::new();
            max_undo_so_far,
const MIN_LEAF: usize = 511;
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
            Assert(1, "ab".to_owned()),
    ($num_args: expr) => {
        }
    /// The current contents of the document as would be displayed on screen
            offset,
        where S: Serializer
        assert_eq!(samples[1].name, "local pid");
/// Boundary is atomic and determined by codepoint boundary.
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
                }
    1
                }
/// See `trace_block` for how the block works and `trace_payload` for a
        assert_eq!(None, a.prev_grapheme_offset(0));
                        undone_groups = Cow::Owned(new_undone);
                    if seg.validity == line_cache_shadow::ALL_VALID {

    }

            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            }
        assert_eq!(2, expand_by[1].0.priority);
            .map(|pos| pos + 1)
    pub fn new_instant<S, C>(name: S, categories: C,

            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        assert_eq!("a", String::from(&tombstones_2));
                            max_undo_so_far: rev.max_undo_so_far,
///
///
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    fn undo_5() {
    }
            next_boundary = c.next_boundary(&l, leaf_offset);
// Licensed under the Apache License, Version 2.0 (the "License");
        -##-
        }
        assert_eq!(0, b.line_of_offset(1));
    }
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        MergeTestState::new(3).run_script(&script[..]);
    /// Storage for all the characters that have been deleted  but could
                        &mut rest[bi - ai - 1]
                        let mut line_cursor = Cursor::new(text, offset);
            if Some(priority) == last_priority {
///     something_else_expensive();
            Merge(0,2), Merge(1, 2),
            }
    }
                self.set_selection(text, SelRegion::caret(offset));
fn find_leaf_split_for_bulk(s: &str) -> usize {

}
        self.hash(&mut hasher);
            // Do the merge one direction
    // this is the cost contributed by the timestamp to trace()
        self.len()
        assert_eq!(output, String::from(engine.get_head()));
    // TODO: insert from keyboard or input method shouldn't break undo group,
    fn compute_transforms_2() {
            let new_region = region_movement(movement, region, self,
        let b_revs = basic_insert_ops(inserts, 2);
    }

}
/// let a = Rope::from("hello world");
    let mut out = Vec::new();
        assert_eq!(2, expand_by[1].0.priority);
        --#--
        if offset == s.len() {
    pub event_type: SampleEventType,
                    })

                    let mut selection = self.selection.clone();

            buffer_id: buffer_id,

                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));

            if sel_end_ix > sel_start_ix {

    /// Collapse all selections in this view into a single caret
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    #[cfg(feature = "benchmarks")]
/// # Examples
        while let Err(incomp) = prev_boundary {
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        for i in 0..5_000 {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
use styles::{Style, ThemeStyleMap};
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
            }
    pending_render: bool,

            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        },

    inner: ChunkIter<'a>,
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        result

                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
            Merge(0,1),
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
                        _ => break
}
        }
            Merge(0,2), Merge(1, 2),
    ProcessName { name: String },
            Merge(0,2), Merge(1, 2),

        // likely be improved.
    /// want to set the process name (if provided then sets the thread name).
    fn lines_med() {
    }
    }
            SelectAll => self.select_all(text),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            }

///
        while let Err(incomp) = next_boundary {
        // This might be an over-specified test as it will
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
                let mut peer = Engine::new(Rope::from(""));
    /// This function will panic if `offset > self.len()`. Callers are expected to
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
        self.scroll_to_cursor(text);

        let snapshot = trace.samples_cloned_unsorted();
        self.lines(0, self.len())
const MIN_LEAF: usize = 511;
    }
        let script = vec![
            } else {
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    #[test]

    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        let params = json!({
    }

            Assert(2, "b".to_owned()),
    }
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        self.height = last - first;
        if !cursors.is_empty() {
        }
#[cfg(feature = "benchmarks")]
        assert_eq!(rope.line_of_offset(0), 0);
    #[test]
#[macro_use]
    }
            // recurse at most once; this doesn't feel great but I wrote myself into a
        b if b < 0xe0 => 2,
        engine.edit_rev(1, 2, first_rev, d1.clone());
        assert_eq!(utf16_units, 11);
// Try to split at newline boundary (leaning left), if not, then split at codepoint
                    // can only happen on empty input
        let contents = match rev.edit {
            }
    // * Unicode codepoints
/// See `trace_block` for how the block works and `trace_payload` for a
        ]);
    TRACE.closure_payload(name, categories, closure, payload)
impl StringArrayEq<[&'static str]> for Vec<String> {
            sel.add_region(region);

        where D: Deserializer<'de>,
                    // We're super-aggressive about dropping these; after gc, the history

        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
    }
        *self = b.build();
            samples: Mutex::new(FixedLifoDeque::new())
                        };
/// Internally, the implementation uses reference counting (not thread safe, though
    /// The state for finding text for this view.
        println!("{:#?}", delta_ops);
                    }

impl serde::Serialize for CategoriesT {
    #[derive(Clone, Debug)]
    fn edit_rev_concurrent() {
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
            };
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// Invalidates the styles of the given range (start and end are offsets within
/// patterns. Any large runs of typing in the same place by the same user (e.g
    type Item = &'a str;

        }
        }
    current: Option<&'a str>,

                }

            rev_id_counter: 1,
    /// Returns the largest undo group ID used so far
    use multiset::Subset;
        for i in 0..self.len() {
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

/// Boundary is atomic and determined by codepoint boundary.
/// * `name` - A string that provides some meaningful name to this sample.
                match elem {
    /// selection edges).
    pub args: Option<SampleArgs>

    /// Generate line breaks based on width measurement. Currently batch-mode,
            }
            Revision {
    /// Find parameters and number of matches changed.
    }
                                                                0, "copy", 2)?;
                payload: None,
                                                        &mut line_cursor,
        }
            Merge(1,0),
        let mut engine = Engine::new(Rope::from(TEST_STR));

            Assert(1, "abefg".to_owned()),
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        }
            match exe_name.clone().file_name() {
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
            soln.push('b');

        self.prev::<BaseMetric>();
            pid: sys_pid::current_pid(),

    /// Updates the view after the text has been modified by the given `delta`.
        assert_eq!(snapshot[2].name, "x");
}
#[derive(Clone, Debug, PartialEq, Eq)]
        where S: Into<StrCow>, C: Into<CategoriesT>
        let mut a = Rope::from("");
fn ns_to_us(ns: u64) -> u64 {
            ix = iv.end() as isize;

}


    }
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
impl serde::Serialize for CategoriesT {


            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },


                        for line_num in start_line..end_line {
    }
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },


                              to_payload("test_get_samples"));
pub enum CategoriesT {

        }
        where S: Into<StrCow>, C: Into<CategoriesT>
    #[test]
            rendered_styles.push((sel_start as isize) - ix);
                        let _ = s.pop();
            tombstones: Rope::default(),

        }
        let a = Rope::from("a\nb\n");
    }
        Cow::from(b)
    }

    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    #[test]
        } else {
        thread.name().map(|ref s| to_cow_str(s.to_string()))
    }
        for i in 0..self.len() {
        let mut all_samples = self.samples.lock().unwrap();
    pub args: Option<SampleArgs>
        for (iv, style) in style_spans.iter() {

        let a = Rope::from("\n");
    }
            // Do it the other way on the copy
    /// Time complexity: technically O(n log n), but the constant factor is so
/// Boundary is trailing and determined by a newline char.
    struct MergeTestState {

//! which is sufficient for asynchronous plugins that can only have one
        assert!(self.current.is_some());
    }
        } else {
        all_samples.push_back(sample);
pub type SessionId = (u64, u32);
    }

            let mut sel = drag_state.base_sel.clone();
        /// Just the `symmetric_difference` (XOR) of the two sets.
                self.set_dirty(text);

                    linewrap::rewrap_width(breaks, text, width_cache,
    }
    /// Returns the visible line number containing the given offset.
            engine.edit_rev(1, i+1, head, d);
/// feature makes the payload a `serde_json::Value` (additionally the library
    /// Selects a specific range (eg. when the user performs SHIFT + click).
                RenderTactic::Render => {

            // selection with interior
            }
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        assert_eq!(None, a.prev_grapheme_offset(0));
            Merge(0,2), Merge(1, 2),
    }

            "n": n,
        let is_base = base_revs.contains(&rev.rev_id);
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            }),
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        -##-
            match modify_selection {
                         hls: &[(usize, usize)],
        }

}
            Sample::new_instant("local pid", &[], None),
        let inserts = parse_subset_list("

        self.join(",").serialize(serializer)
    {
            Merge(0,1),
        ----
        if let Some((l, offset)) = self.get_leaf() {
    breaks: Option<Breaks>,
            // with offset == s.len(), but be defensive.

        let new_inserts = union_ins_delta.inserted_subset();
    fn from(r: Rope) -> String {
    fn test_get_samples() {
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        let first_rev = engine.get_head_rev_id().token();
                self.drag_state = None;
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);

                                  _allow_same: bool, modify_selection: &SelectionModifier) {
                        };
    /// This method is responsible for updating the cursors, and also for

        deletes_from_union = new_deletes_from_union;
        result
                    None => return if result.is_empty() { None } else { Some(result) }
                }
    }
            }
        client.update_view(self.view_id, &params);
/// from multiple distributed sources (i.e. you want to sort the merged result
            trace: Some(&trace),
/// assert_eq!("herald", String::from(a));
    CompleteDuration,
            black_box(time::precise_time_ns());
    }


    let mut out = Vec::with_capacity(b_new.len());
            pid: sys_pid::current_pid(),

            }
        }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
        engine.edit_rev(1, 1, first_rev, d1.clone());
            Merge(0,1), // the merge from the whiteboard scan
    pub fn line_of_offset(&self, offset: usize) -> usize {
        value
    }

//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
    use super::*;
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    pub fn get_samples_limit(&self) -> usize {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
    }
                return;
        b.push(self);
            let deletes = Subset::new(inserts.len());
            'O' => SampleEventType::ObjectSnapshot,
        assert!(leaf.is_char_boundary(end));
                        });
                    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    deletes: Subset,
        self.replace_changed = true;
    }
    }
    }
                    els: delta.els.drain(..)
/// associated performance hit across the board for turning it on).
        for u in s.chars() {
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
                self.highlight_find = visible;
        // since one of the two deletes was gc'd this should undo the one that wasn't
/// # Returns
        engine.edit_rev(0, 2, first_rev, build_delta_2());
//! It enables support for full asynchronous and even peer-to-peer editing.
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {

        self.set_selection_raw(text, selection);
            cur_len_utf16 += u.len_utf16();
            soln.push('b');
    }
        // multiple queries; select closest occurrence
            return false;
            &self.deletes_from_union, &old_deletes_from_union);
    /// not account for any overhead of storing the data itself (i.e. pointer to
              F: FnOnce() -> R
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            lines: 0,
                        }
            rendered_styles.push(0);
            AssertMaxUndoSoFar(1,3),
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
    }
            Some(offset + len_utf8_from_first_byte(b))
        assert_eq!(2, a.line_of_offset(5));
        self.set_selection_for_edit(text, new_sel);
    /// The thread the sample was captured on.  Omitted for Metadata events that
            let (start, end) = if offset < drag_state.offset {
        for find in self.find.iter() {
        assert_eq!("a", String::from(&tombstones_2));
        Ok(b.build())
        assert_eq!(snapshot[5].name, "z");
                metadata_name: None,
    }
}
    /// # Panics

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            let splitpoint = find_leaf_split_for_merge(self);
        engine.undo([].iter().cloned().collect());

        MergeTestState::new(4).run_script(&script[..]);
    }
#[derive(Clone, Debug, PartialEq, Eq)]
        let head_rev = &self.revs.last().unwrap();


        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));

            tid: sys_tid::current_tid().unwrap(),
    -> SampleGuard<'a>
            }
                WrapWidth::None => (),
                }
    pub fn byte_at(&self, offset: usize) -> u8 {
    }
            rendered_styles.push(sel_end as isize - sel_start as isize);
                }
        let _t = trace_block("View::wrap_width", &["core"]);
        // rebase delta to be on the base_rev union instead of the text
mod sys_tid;
            };
        }
    // A colliding session will break merge invariants and the document will start crashing Xi.
        let a = Rope::from("");
            write!(f, "Rope({:?})", String::from(self))
    /// Tests that priorities are used to break ties correctly
    /// the pid or the tid depends on the name of the event
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    }
                } else if click_count == Some(3) {
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
            Find { chars, case_sensitive, regex, whole_words } =>
        self.enable_config(Config::default());
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        let first_rev = engine.get_head_rev_id().token();
    }
            rev_id_counter: 1,
            }
        }
                                toggled_groups: &toggled_groups - gc_groups,
}
}
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
extern crate serde_derive;

    }
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),

    }
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            Move(movement) => self.do_move(text, movement, false),
            // recurse at most once; this doesn't feel great but I wrote myself into a
            }

        use self::MergeTestOp::*;
        trace.closure_payload("y", &["test"], || {},
        let revs = basic_insert_ops(inserts, 1);
            pid: sys_pid::current_pid(),
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
    out.as_mut_slice().reverse();
                    let (start, end) = {
}
    }

        selection.add_region(region);
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
                    let (start, end) = {

            rev_id_counter: 1,
#![cfg_attr(feature = "cargo-clippy", allow(
    }
            }
        assert!(a == a2);
        engine.gc(&gc);
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
        }
            Assert(1, "afc".to_owned()),
            Merge(1,2),
                RenderTactic::Render => {
            // corner and I'm lazy -cmyr
        // likely be improved.
#![cfg_attr(feature = "benchmarks", feature(test))]
    /// The line number is 0-based, thus this is equivalent to the count of newlines
        let new_pos = self.pos() + (end - offset);
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    // transform representing the characters added by common revisions after a point.
///
        assert_eq!(utf16_units, 17);
impl<'a> Cursor<'a, RopeInfo> {
        }
    }
        }
    fn next(s: &String, offset: usize) -> Option<usize> {
        };
/// # use xi_rope::Rope;
#[cfg(test)]
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {

pub fn len_utf8_from_first_byte(b: u8) -> usize {
            as_vec.push(Sample::new_metadata(

                    self.set_selection(text, selection);
            SampleEventType::ObjectCreated => 'N',
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
                metadata_sort_index: sort_index,
    CompleteDuration,
                }
            }
    fn arr_eq(&self, other: &Rhs) -> bool;
        }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
                        let end_line = start_line + seg.n;
    pub fn new_instant<S, C>(name: S, categories: C,
        }
            }
        let mut samples = vec![
            Merge(2,0),
        ---#--
        }
                           pristine: bool)
        // if we have active find highlights, we don't collapse selections
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
        }
    buffer_id: BufferId,
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
impl Serialize for DeltaElement<RopeInfo> {
            write!(f, "{}", String::from(self))
            rendered_styles.push((sel_start as isize) - ix);
    /// Returns an iterator over chunks of the rope.

    {
        let head2 = engine.get_head_rev_id().token();
            duration_us: None,
            Assert(0, "zacbd".to_owned()),
        let next_line_offset = self.offset_of_line(text, line + 1);
    pub fn get_head(&self) -> &Rope {
            Assert(1, "pb".to_owned()),
        self.enabled.store(false, AtomicOrdering::Relaxed);
        }

    }
        // current recording mechanism should see:
categories_from_constant_array!(1);
    // * Code units in some encoding
                self.set(pos);
impl From<Rope> for String {
use std::cmp::{min,max};
        let new_head_2 = engine.get_head_rev_id().token();
        }
        -##-
    pub fn do_find_all(&mut self, text: &Rope) {
// easily delta-compressed later.
        assert_eq!(snapshot[7].name, "c");
        engine.undo([].iter().cloned().collect());
        if !self.lc_shadow.needs_render(plan) { return; }

        }
    pub fn select_range(&mut self, text: &Rope, offset: usize) {


    /// None of the find parameters or number of matches changed.
                // This could be done by explicitly overriding, or by tweaking the
/// ```

    }
        let max_line = self.measure::<LinesMetric>() + 1;
    #[test]

    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    /// point. Used to optimize undo to not look further back.
            Merge(2,0),
    size: Size,
                    }
// See the License for the specific language governing permissions and
            pending_render: false,
        }
    pub fn lines_raw_all(&self) -> LinesRaw {
                let mut cursor = Cursor::new(&text, region.min());
}

    #[test]
            Merge(1,0),

        let mut b = TreeBuilder::new();
            max_undo_so_far: 0,
        let mut samples = vec![
                    Some(chunk) => self.fragment = chunk,
        let mut gc_dels = self.empty_subset_before_first_rev();
        assert_eq!(1, a.line_of_offset(2));
        assert_eq!("#---#--", &subset_str);
                // This could be done by explicitly overriding, or by tweaking the
    #[test]
            Assert(0, "acpbdj".to_owned()),
/// returned value is dropped.  `trace_closure` may be prettier to read.
}
    }
    type L = String;
///
                },
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();

        d_builder.delete(Interval::new_closed_open(58, 61));

        if offset >= next_line_offset {
                metadata_sort_index: None,
    }
/// See `trace_block` for how the block works and `trace_payload` for a
use std::fmt;
        self.text = text;
            Assert(1, "ab".to_owned()),
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    }
    }
                return;
            Some(offset - len)
/// A static string has the lowest overhead as no copies are necessary, roughly
    Undo {
            tombstones: Rope::default(),
/// implementation as efficient as a mutable version.
    #[bench]

        _ => 4
            sample: Some(Sample::new_duration_marker(
    {
        self.enabled.store(true, AtomicOrdering::Relaxed);
        } else {
/// An element in a `RopeDelta`.
/// # Returns
        }
        engine.undo([1,2].iter().cloned().collect());
/// });
    inner: ChunkIter<'a>,
}
            self.breaks = None
        for _i in 0..50 {
    pub tid: u64,
        Lines {
    // TODO find the maximum base revision.
        Self::with_limit_bytes(1 * 1024 * 1024)

        b.iter(|| {
            Merge(0,1), // the merge from the whiteboard scan
            // I think it's a precondition that this will never be called
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                cursors.push(c - start_pos);
            pos += 1;
/// Find a set of revisions common to both lists
        let revs = basic_insert_ops(inserts, 1);
}
        // todo: for now only a single search query is supported however in the future

///     something_expensive()

        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    /// the text).
            // copy the current state
    fn prev(s: &String, offset: usize) -> Option<usize> {
        if self.scroll_to.is_none() && wrap {
        self.text = text;
    pub chars: String,

/// fn something_expensive() {
        self.deletes_from_union = new_deletes_from_union;
                Some(pos) => offset += pos + 1,
        let first_rev = engine.get_head_rev_id().token();
    type Item = Cow<'a, str>;
    Bytes(usize),
    /// Start of the region selected when drag was started (region is
            x.next_occurrence(text, reverse, wrapped, &self.selection)
        AssertMaxUndoSoFar(usize, usize),
            'D' => SampleEventType::ObjectDestroyed,
            highlight_find: false,
    }
            GestureType::MultiWordSelect =>

}
                    ops.push(self.build_update_op("invalidate", None, seg.n));
        };
        Self {
}
    struct MergeTestState {
use std::sync::Mutex;
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
            duration_us: None,


/// with.  By default, the type is string-like just like name.  If compiled with
use std::cmp::{min,max};

        let mut soln = String::from("h");

                Some(filename) => {
    inner: ChunkIter<'a>,
        Ok(Delta::from(d))
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    TRACE.samples_cloned_unsorted()
impl fmt::Debug for Rope {
        }).collect()
///

//
        // TODO(vlovich): optimize this path to use the Complete event type
        assert_eq!(utf16_units, 20);

                                                        &mut line_cursor,

        let tid = all_samples.front()
pub struct View {
    fn merge_idempotent() {
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
            self.mk_new_rev(priority, undo_group, base_rev, delta);
    }
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
            name: sample_name,
    }
    /// When was the sample started.
        assert_eq!(snapshot[8].name, "x");

        as_vec.extend(all_samples.iter().cloned());
        // additional tests for line indexing
        engine.edit_rev(1, 2, new_head, d2);
        use std::hash::{Hash, Hasher};

            Assert(0, "zacbd".to_owned()),
        assert_eq!(rope.line_of_offset(3), 1);
        match ty {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    pub preserve_case: bool
    }
            Merge(5,4),
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
    utf16_count
        assert_eq!(snapshot[0].name, "process_name");
                    }
        MergeTestState::new(3).run_script(&script[..]);
        let mut rendered_styles = Vec::new();
        b.iter(|| black_box(time::precise_time_ns()));
                text.offset_of_line(line)
            name: sample_name,
    {
    }
        RopeInfo {
            {
                self.select_word(text, offset, true)
        let new_deletes_from_union = {
            };
            Merge(5,4),
/// Base unit is utf8 code unit.
            // if using breaks update cursor
    fn utf16_code_units_metric() {
    #[test]
        }
    ObjectCreated,
            base_rev: RevToken, delta: Delta<RopeInfo>) {

            Merge(0,2), Merge(1, 2),
                    }
    fn from_base_units(_: &String, in_base_units: usize) -> usize {


            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
                            ops.push(self.build_update_op("skip", None, n_skip));
        let expand_by = compute_transforms(revs);
    // this is the cost contributed by the timestamp to
        s.is_char_boundary(offset)
            let pos = bc.next::<BreaksMetric>();
        println!("{:#?}", delta_ops);

                    s = s.transform_shrink(&transformed_inserts);
    (out, text, tombstones, deletes_from_union)
}

                    "something", &["benchmark"],
        for rev in &self.revs[rev_index + 1..] {
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        let offset = self.line_col_to_offset(text, line as usize, col as usize);

        for op in &delta_ops {
                    Some(Contents::Edit {
}
    }
            Merge(0,1),
    fn lines_raw_small() {
        }
}

                    }
    ///
                leaf_offset = self.pos() - noffset;

            }
    let mut out = Vec::with_capacity(b_new.len());

        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());

    //
            let mut word_cursor = WordCursor::new(text, offset);
            's' => SampleEventType::FlowStart,
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    pub categories: Option<CategoriesT>,
    /// Selects an entire word and supports multi selection.
            ix = sel_end as isize;
use rope::{Rope, RopeInfo};
        }
            max: offset,
    #[cfg(feature = "benchmarks")]

            Merge(2,0),
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
                } else {
            }
impl<T: AsRef<str>> From<T> for Rope {
                last_priority = Some(priority);

    fn bench_get_pid(b: &mut Bencher) {


                    selection.add_region(SelRegion::new(sel_start, end_of_line));
            Merge(1,0),
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
            let horiz = None;
                true => x.end,
    fn test_trace_disabled() {
        where S: Serializer
        assert_eq!(None, a.next_codepoint_offset(10));

// See the License for the specific language governing permissions and
        assert_eq!("a", String::from(&tombstones_2));
pub fn disable_tracing() {
        // NOTE: we derive to an interim representation and then convert
        count_utf16_code_units(&s[..in_base_units])
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    }
/// configured via the `dict_payload` or `json_payload` features (there is an
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        RopeInfo {
#[macro_use]
                } else {
        debug_subsets(&rearranged_inserts);
                sel.add_region(SelRegion::new(last.start, offset));
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        d_builder.build()
#[cfg(feature = "json_payload")]
            match self.wrap_col {
    }
#[must_use]
    }
    #[test]
                            }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        assert_eq!(snapshot[7].name, "c");
        engine.undo([3].iter().cloned().collect());
            self.current = next_chunk;
    fn merge_whiteboard() {
    ($num_args: expr) => {
                match elem {
    // There will probably never be a document with more than 4 billion edits
        match self.breaks {
    pub fn get_head(&self) -> &Rope {
        let initial_rev = engine.get_head_rev_id().token();
// Try to split at newline boundary (leaning left), if not, then split at codepoint
    fn from_chrome_id(symbol: char) -> Self {
            self.set_dirty(text);
                                        &selections, &hls, style_spans);
            rendered_styles.push(sel_end as isize - sel_start as isize);
        let start = time::precise_time_ns();
            offset += 1;
        }
        out.push(Revision {
    /// The empty string will yield a single empty slice. In all other cases, the

            let max_undo = self.max_undo_group_id();
                        } else {
        true
            let _ = trace.block("test_samples_block", &["test"]);

        let res = find_common(&a, &b);
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
            let start = self.line_of_offset(last_text, iv.start());

        assert_eq!(Some(3), a.prev_grapheme_offset(9));
            find.find_status(matches_only)
//
        }
        x
enum MetadataType {
    }
    where D: serde::Deserializer<'de> {
            _ => None
            trace.record(sample);
            true => self.selection.clone(),
                    s = s.transform_shrink(&transformed_inserts);
        }
            event_type: event_type,
    TRACE.enable();
    /// Splits current selections into lines.
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
/// A size, in pixel units (not display pixels).
/// None if an irrecoverable error occured.
    }
        } else {
        let mut cur_len_utf8 = 0;
    let mut s = Subset::new(head_len);
    replace_changed: bool,

    /// unsaved changes.

    pub fn with_limit_bytes(size: usize) -> Self {

            if i >= max_undos {
            next_boundary = c.next_boundary(&l, leaf_offset);
            let sel = {
        let l_str = text.slice_to_string(start_pos, pos);
    /// set with this function, which will make the revisions they create not have colliding IDs.
    let mut s = Subset::new(head_len);
            CategoriesT::StaticArray(ref self_arr) => {
        b.iter(|| black_box(trace.closure_payload(
                         first_line: usize, last_line: usize, pristine: bool) {
            sample: None,
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            } else if incomp == GraphemeIncomplete::NextChunk {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,


    size: Size,
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    {
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
            thread_name: Sample::thread_name(),


        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
/// assert_eq!("ello wor", String::from(&b));
    /// Constructs a Duration sample.  For use via xi_trace::closure.
}
/// ```
    }
        //};
        // A with ring, hangul, regional indicator "US"
))]
            edit: Edit {
    /// unsaved changes.
        }

        let mut plan = RenderPlan::create(height, self.first_line, self.height);

    /// Selects the given region and supports multi selection.

                el.serialize_field(end)?;
        cursor.is_boundary::<BaseMetric>()

            rendered_styles.push(sel_end as isize - sel_start as isize);
}
        engine
        }
            revs: vec![rev],
        // TODO: want to let caller retain more rev_id's.
categories_from_constant_array!(6);
            Assert(0, "zacbd".to_owned()),
        let tombstones = Rope::from("27");
    fn measure(info: &RopeInfo, _: usize) -> usize {
/// assert_eq!("llo wo", String::from(c));
/// Create an instantaneous sample without any payload.  This is the lowest
    }
pub struct Utf16CodeUnitsMetric(usize);
            }
            Assert(2, "ab".to_owned()),
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
                    }
///
        (self.pid, self.timestamp_us).hash(state);
/// some way.
        assert_eq!(trace.get_samples_count(), 1);
/// However, anything that can be converted into a Cow string can be passed as
        gc_scenario(4,3);
    }
    /// Updates the view after the text has been modified by the given `delta`.
    fn undo_2() {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        let a = Rope::from("");
    /// the text).
        delta.apply(&self.text)
    let mut out = Vec::with_capacity(revs.len());
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
fn clamp(x: usize, min: usize, max: usize) -> usize {
        engine
                MetadataType::ProcessName {name: exe_name},
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
    /// Update front-end with any changes to view since the last time sent.
    #[test]
            splitpoint

    /// of individual region movements become carets.
        self.len() >= MIN_LEAF
        rope.line_of_offset(20);

                }
    fn invalidate_selection(&mut self, text: &Rope) {
    /// The maximum amount of space the tracing data will take up.  This does
                    .with_affinity(affinity)
            None
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));

        self.sample_limit_count * size_of::<Sample>()

    /// Starts a drag operation.
    /// update cycle. This should be a last resort, updates should generally cause
            },
    undo_group: usize,
                        &mut rest[bi - ai - 1]
    /// Time complexity: O(log n)

    fn rebase_1() {
                    "something", &["benchmark"],
        where D: Deserializer<'de>,
    session: SessionId,
    /// Determine whether `offset` lies on a codepoint boundary.
//! A rope data structure with a line count metric and (soon) other useful
            write!(f, "Rope({:?})", String::from(self))
    height: usize,
        let a = Rope::from("a\nb\n");
            }
    {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
/// See `trace_block` for how the block works and `trace_payload` for a
        cursor.next_grapheme()
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,

        inserts.into_iter().enumerate().map(|(i, inserts)| {

        self.find_changed = FindStatusChange::None;

        let d = engine.delta_rev_head(first_rev);
        assert_eq!(soln, String::from(engine.get_head()));
            if (c > start_pos && c < pos) ||
        /// together. For example, an auto-indent insertion would be un-done
                }
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
/// something_expensive();
    #[test]
pub fn enable_tracing() {
            for &occurrence in find.occurrences().iter() {
            }, to_payload("test_get_samples_nested_trace"));
            ix = sel_end as isize;
        //};

/// Usage of static strings is encouraged for best performance to avoid copies.
    #[test]
use std::borrow::Cow;
    }
            sample: None,
/// Then offset=1 is invalid.
    #[test]
        b if b < 0xf0 => 3,
            end -= 1;

        *self = b.build();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    pub timestamp_us: u64,
            size: Size::default(),
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    /// Returns a u64 that will be equal for equivalent revision IDs and
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
    }
        gc_scenario(35,20);
    }
    }
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
    /// tiny it is effectively O(n). This iterator does not allocate.
        }).unwrap_or(text.len());
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        plan.request_lines(first_line, last_line);
        self.find_changed = FindStatusChange::None;
//! a previously committed version of the text rather than the current text,
                    // We're super-aggressive about dropping these; after gc, the history
        self.deletes_from_union_before_index(rev_index + 1, true)
                        })
            duration_us: None,
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        ");
        let text_a = Rope::from("zcbd");
        assert_eq!(None, a.prev_grapheme_offset(0));

///
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
            Assert(1, "ab".to_owned()),
                (region.is_upstream() && c == pos) ||
        let mut a = String::new();
                                priority,
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        assert_eq!(trace.get_samples_count(), 0);
    pub fn max_undo_group_id(&self) -> usize {
/// Measured unit is utf8 code unit.
categories_from_constant_array!(2);
    }
                    self.set_selection(text, selection);

        self.do_set_replace(replacement, false);
        sel.collapse();
/// let b = a.slice(1, 9);
/// Computes a series of priorities and transforms for the deltas on the right
}
}
    // since undo and gc replay history with transforms, we need an empty set
    }
    fn sample_name(&self) -> &'static str {
                let (pl, poffset) = self.prev_leaf()?;
    fn compute_info(s: &String) -> Self {
                                priority,
            Assert(0, "ab".to_owned()),
use serde::de::{Deserialize, Deserializer};
/// For example, take a string that starts with a 0xC2 byte.
    }
/// # Examples
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        }
            },

/// Internally, the implementation uses reference counting (not thread safe, though
        }

                    let (start, end) = self.peers.split_at_mut(ai);

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
///
            write!(f, "{}", String::from(self))
    /// Storage for all the characters that have been deleted  but could
    rev_id_counter: u32,

    fn append_large() {

        self.revs.last().unwrap().rev_id

    }
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",

        ");
        a.lines_all().collect::<Vec<_>>());
            Merge(0,1),

            self.wrap_col = WrapWidth::Bytes(wrap_col);
    Edit {
        let d = RopeDelta_::deserialize(deserializer)?;
/// discussion on payload.
    /// the same even if it is rebased or merged between devices.

        assert_eq!(0, a.line_of_offset(0));
    pub timestamp_us: u64,
        self.timestamp_us == other.timestamp_us &&
            'B' => SampleEventType::DurationBegin,
    {
                        }
    pub fn new(initial_contents: Rope) -> Engine {
        let undone = self.undone_groups.contains(&undo_group);
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
/// equivalent performance to a regular trace.  A string that needs to be copied
    revs: Vec<Revision>,
// distributed under the License is distributed on an "AS IS" BASIS,
/// # Examples
    }
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        let cursor = Cursor::new(self, offset);
    fn undo_4() {
        let line = line as usize;
            AssertMaxUndoSoFar(1,3),

/// For example, take a string that starts with a 0xC2 byte.
    }
    fn gc_scenario(edits: usize, max_undos: usize) {
                    } else if !inserts.is_empty() {
        let a = Rope::from("a");
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        assert_eq!(r.len(), r.offset_of_line(2));
            Assert(0, "acrpbdzj".to_owned()),
            self.record(Sample::new_instant(name, categories, None));
                                     payload: Option<TracePayloadT>,
    fn into_chrome_id(&self) -> char {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
impl<'a> From<&'a Rope> for String {

                    let mut e = &mut self.peers[ei];
            Assert(1, "acb".to_owned()),
        deletes_from_union

            Assert(1, "acpbdj".to_owned()),
        let r = Rope::from(&a[..MAX_LEAF]);
        }

/// revisions not shared by both sides.
    }
    fn bench_trace_closure_payload(b: &mut Bencher) {
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
                true => x.end,
            for i in 0..count {
    }
/// Also note: in addition to the `From` traits described below, this module

    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
///
        assert_eq!(1, r.line_of_offset(r.len() - 1));
impl Metric<RopeInfo> for BaseMetric {
            return Vec::with_capacity(0);
        debug_subsets(&rebased_inserts);
        self.tombstones = new_tombstones;

        assert!(empty == empty);
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
// distributed under the License is distributed on an "AS IS" BASIS,
    }
            None
            rev_id_counter: 1,
        client.update_view(self.view_id, &params);
            l[offset..].chars().next()
        match rev.edit {
    #[test]
            if sel_end_ix > sel_start_ix {
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
use std::collections::BTreeSet;
            timestamp_us: ns_to_us(time::precise_time_ns()),
        }
}
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        engine.undo([1,3].iter().cloned().collect());
/// the `base_revs`. This allows the rest of the merge to operate on only
    ///
/// Valid within a session. If there's a collision the most recent matching
/// How tracing should be configured.
        as_vec
    /// Imagine a "union string" that contained all the characters ever
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
    #[test]
        // since one of the two deletes was gc'd this should re-do the one that wasn't
    }
/// ```
                //// if we aren't on a boundary we can't be at the end of the chunk
    fn gc_5() {
        where S: Serializer
        }
    /// Merge the new content from another Engine into this one with a CRDT merge

        self.set_dirty(text);
    }

        let is_base = base_revs.contains(&rev.rev_id);
        Ok(Rope::from(s))
        }
                // TODO create InsertDelta directly and more efficiently instead of factoring

/// some way.
}
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
/// Returns all the samples collected so far.  There is no guarantee that the
        while !s.is_empty() {
        assert_eq!(snapshot[2].name, "x");
fn count_utf16_code_units(s: &str) -> usize {
                    if !inserts.is_empty() {

/// feature makes the payload a `serde_json::Value` (additionally the library

        if !self.is_point_in_selection(offset) {
        a.push('\n');

            view_id: view_id,
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
        assert_eq!(snapshot[8].name, "c");
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            None
impl Ord for Sample {

        self.enable_config(Config::default());
        &self.selection
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);

    /// Starts a drag operation.

        }
            self.find.push(Find::new());
/// # Examples
    /// in the slice up to `offset`.
        engine.edit_rev(1, 1, first_rev, d1.clone());
                edit: contents.clone()
use self::Contents::*;
            end,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
categories_from_constant_array!(7);
        self.set_dirty(text);
        if self.is_enabled() {
    /// of the chunks is indeterminate but for large strings will generally be

            timestamp_us: ns_to_us(time::precise_time_ns()),
        cursor.prev_grapheme()
            &rebased_deletes_from_union, &new_deletes_from_union);
    }
/// could trigger incorrect behavior if they collide, so u64 is safe.
        b.iter(|| {

            "styles": styles,
enum WrapWidth {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
            deletes_from_union,
        // creation) is:
            }

        // TODO: refine for upstream (caret appears on prev line)

///
        -> Self
    }
    current: Option<&'a str>,
            let b = self.current.unwrap().as_bytes()[self.idx];
                _ => { }
use client::Client;
        assert_eq!(snapshot[2].name, "a");

        }
                    if !deletes.is_empty() {
struct Revision {
        assert!(a != b);
            self.name == other.name &&
        // current recording mechanism should see:
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
/// Contains replacement string and replace options.
        tombstones = new_tombstones;


/// });
        -##-
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        if offset == s.len() {
        let inserts = parse_subset_list("
}
            let expand_by = compute_transforms(a_new);

    /// Returns the visible line number containing the given offset.
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
}


        let mut result = String::new();

use std::collections::hash_map::DefaultHasher;

    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
///
    #[inline]
    pub width: f64,
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        self.first_line = first;
            args: Some(SampleArgs {
        for i in 1..(s1.len() * 3) {
        // find the lowest toggled undo group number
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
        _ => 4
        cursor.next_grapheme()

    fn merge_simple_delete_2() {
    #[test]
            write!(f, "{}", String::from(self))
                        } else {

        if let Some(breaks) = self.breaks.as_mut() {
            None
        let mut cursors = Vec::new();
    fn merge_priorities() {


        if (b as i8) >= -0x40 {

        }).collect();
            if let Some(replace) = self.get_replace() {
            } else {
            // I think it's a precondition that this will never be called
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    fragment: &'a str
                }
impl SampleEventType {
        /// should go before typed text.
        self.set_selection(text, sel);
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        // NOTE 2: from_micros is currently in unstable so using new
        trace.closure_payload("z", &["test"], || {},
        for &region in self.sel_regions() {
                priority: new_priority,
#[macro_use]
use xi_rope::spans::Spans;
        }
        engine.undo([3].iter().cloned().collect());
// distributed under the License is distributed on an "AS IS" BASIS,
        let len = match first_rev.edit {
            Merge(0,2), Merge(1, 2), Merge(3, 2),
                     modify_selection: &SelectionModifier) {
///

        }
    end: usize,
    fn rearrange_1() {
        // original values this test was created/found with in the UI:
    pub width: f64,
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
        }).collect()
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
        self.set_selection_raw(text, selection);
    #[bench]
}
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
const MIN_LEAF: usize = 511;
}
        if self.idx <= self.current.unwrap().len() {
        /// together. For example, an auto-indent insertion would be un-done

#[inline]
}
            sample_limit_count: limit
        let (start, end) = {
    /// If `line` is equal to one plus the current number of lines,
    /// The maximum number of entries the tracing data should allow.  Total
        ix
        assert_eq!(2, r.line_of_offset(r.len()));
        match *self {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        // rebase insertions on text and apply
    ///


        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
}
    #[bench]
                              payload: Option<TracePayloadT>,
        Assert(usize, String),
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());

/// monotonically increasing single global integer (when tracing) per creation
    pub fn iter_chunks_all(&self) -> ChunkIter {
            selection: SelRegion::caret(0).into(),
                }

                        // no need to un-delete undone inserts since we'll just shrink them out

/// with.  By default, the type is string-like just like name.  If compiled with
    #[test]
}
    }
    #[test]
            } else if incomp == GraphemeIncomplete::PrevChunk {
    #[serde(rename = "cat")]
            }, to_payload("test_get_sorted_samples"));
            Assert(0, "acrpbdzj".to_owned()),
    fn basic_rev(i: usize) -> RevId {
}
        -> Result<CategoriesT, D::Error>
#[derive(Clone, Debug)]
    }
        a.lines_all().collect::<Vec<_>>());
        MergeTestState::new(3).run_script(&script[..]);
pub fn enable_tracing_with_config(config: Config) {
    }
categories_from_constant_array!(9);
    }
        match self {
        }
            AddSelectionAbove =>
            .map(|pos| offset + pos + 1)
#[macro_use]
                MergeTestOp::AssertAll(ref correct) => {
                            None
}

}
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        }
    fn bench_single_timestamp(b: &mut Bencher) {
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
                    self.fragment = &self.fragment[i + 1 ..];
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
            //}

        let edit_iv = Interval::new_closed_open(start, end);
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
            tombstones: Rope::default(),
/// the `base_revs`. This allows the rest of the merge to operate on only
            black_box(trace.block_payload(
                MergeTestOp::Merge(ai, bi) => {
            name: name.into(),
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    pending_render: bool,
            Assert(2, "adfc".to_owned()),

    }
                selection.add_region(SelRegion::caret(region.max()));
///
fn exe_name() -> Option<String> {

            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
        assert_eq!("herald", String::from(a));
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
        self.find.clear();
        }
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
}
            Assert(0, "ab".to_owned()),
            return self.revs.len();
            for find in self.find.iter() {
            true => self.selection.clone(),
                self.do_drag(text, line, column, Affinity::default()),
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
/// assert_eq!("ello wor", String::from(&b));
/// ```
            SampleEventType::ObjectSnapshot => 'O',
        value
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
            let head = engine.get_head_rev_id().token();
        samples[1].pid = 2;
            duration_us: Some(ns_to_us(duration_ns)),

        assert!(r != b_rope + a_rope);

        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    }

            self.find.push(Find::new());
    pub args: Option<SampleArgs>
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    sample_limit_count: usize
        let mut b = TreeBuilder::new();
        offset
            let inserted = inserts.inserted_subset();
        guard
        self.find_changed = FindStatusChange::Matches;
                peer.set_session_id(((i*1000) as u64, 0));
        let trace = Trace::enabled(Config::default());
/// ```
    for &b in s.as_bytes() {
        a.lines_all().collect::<Vec<_>>());
    {
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
    /// This uniquely represents the identity of this revision and it stays
            'E' => SampleEventType::DurationEnd,
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        }
    #[test]
    ///
    /// they would be if they hadn't been deleted.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        let new_deletes_from_union = {
    /// the other doesn't make it re-appear.
    fn gc_3() {
            b.push_str(&c);
        self.session = session;
}
                Ok(CategoriesT::DynamicArray(categories))
        let mut b = String::new();
    fn edit_rev_undo_3() {
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)

    // How should we count "column"? Valid choices include:

    pub fn set_session_id(&mut self, session: SessionId) {
                priority, undo_group, deletes,
// easily delta-compressed later.
        MergeTestState::new(3).run_script(&script[..]);
/// Create an instantaneous sample with a payload.  The type the payload
            AssertAll("zacpb".to_owned()),
            }
        b.push('\n');
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    pub fn disable(&self) {



pub struct ByteIter<'a> {
            };
/// Base unit is utf8 code unit.
    }
            rendered_styles.push((iv.start() as isize) - ix);
                                                    self.size.width));

    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    }
#[macro_use]
                        } else {
    }
        if (b as i8) >= -0x40 {
    }
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
    /// This uniquely represents the identity of this revision and it stays

                                                        style_spans, line_num);
}
    }
        // multiple queries; select closest occurrence
        let new_head = engine.get_head_rev_id().token();
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    fn next(&mut self) -> Option<&'a str> {
// Unless required by applicable law or agreed to in writing, software
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
//     http://www.apache.org/licenses/LICENSE-2.0
            end += 1;
            sel.add_region(region);
    /// Note: unlike movement based selection, this does not scroll.

        let res = find_base_index(&a, &b);
    pub fn do_find_all(&mut self, text: &Rope) {
        let inserts_1 = parse_subset_list("

        assert_eq!(trace.get_samples_count(), 0);
                }
        --#--
    /// description for the invariant.

        if f.alternate() {
///     0

/// beginning.
}
/// acquires a dependency on the `serde_json` crate.
                            warn!("Failed to get string representation: {:?}", e);
    #[test]
        assert_eq!(rope.offset_of_line(0), 0);

        }
            l[offset..].chars().next()

        engine.edit_rev(1, 1, first_rev, d1.clone());
        }
        }
    // TODO find the maximum base revision.

    sample: Option<Sample>,
    #[test]
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
                        line_num = seg.their_line_num + seg.n;
            FindAll => self.do_find_all(text),

    /// Create a new Engine with a single edit that inserts `initial_contents`
            let splitpoint = find_leaf_split_for_merge(self);
            Assert(0, "acrpbdzj".to_owned()),


                    } else {
/// ```rust,ignore
    }
///     something_expensive()
    }
    }
    pub fn with_limit_count(limit: usize) -> Self {
            trace.closure("something", &[], || ());

    #[inline]
        use std::hash::{Hash, Hasher};
    #[test]
/// Find an index before which everything is the same
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            while !s.is_char_boundary(offset - len) {

            MetadataType::ThreadName {name} => (Some(name), None),
                    sel.add_region(region);
                Some(Cow::from(s))
        match *self {
        Self {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        assert!(empty == empty);
                        })
    pub fn max_size_in_bytes(&self) -> usize {
        if !self.is_enabled() {
    fn gc_2() {

    /// Determine whether `offset` lies on a codepoint boundary.
}

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },

    pub fn sel_regions(&self) -> &[SelRegion] {
use std::collections::HashMap;
        let a_revs = basic_insert_ops(inserts.clone(), 1);
            Merge(1,0),
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            SampleEventType::AsyncEnd => 'e',
            Merge(1,0),
        };
            Merge(0,2),

        if !self.is_enabled() {
    #[inline]

        // set last selection or word under current cursor as search query
pub fn enable_tracing_with_config(config: Config) {
        let col = col as usize;
            self.record(Sample::new_instant(name, categories, None));
/// * `categories` - A static array of static strings that tags the samples in
    // of the union string length *before* the first revision.
    #[test]
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        });
            match exe_name.clone().file_name() {

        -> Self

            Assert(1, "abefg".to_owned()),
    inserts: InsertDelta<RopeInfo>,
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            args: Some(SampleArgs {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    }
                                                        soft_breaks.as_mut(),
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
    session1: u64,


                    };
        /// together. For example, an auto-indent insertion would be un-done
    fn invalidate_selection(&mut self, text: &Rope) {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        ];
        assert_eq!(snapshot[3].name, "a");
        ");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            'N' => SampleEventType::ObjectCreated,
            self.shrink_to_fit();
    // TODO: a case can be made to hang this on Cursor instead
    ///
///
    #[test]
        /// Groups related edits together so that they are undone and re-done
}
            duration_us: None,
        });
        let mut selection = Selection::new();
                        let offset = self.offset_of_line(text, start_line);
                         start: usize, end: usize, sel: &[(usize, usize)],
    /// Starts a drag operation.
            self.first_line = line;
impl Ord for Sample {
        --#-
            'n' => SampleEventType::AsyncInstant,
                // should be removed in favor of do_gesture
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        let script = vec![
    /// Start of the region selected when drag was started (region is
                self.select_line(text, offset, line, false),
pub struct Replace {


    #[bench]
        d_builder.delete(Interval::new_closed_open(58, 61));
            self.find.push(Find::new());
            Assert(0, "bdc".to_owned()),
        trace.closure_payload("y", &["test"], || {},
        let delta = Delta::synthesize(&self.tombstones,

/// could trigger incorrect behavior if they collide, so u64 is safe.
    fn undo_5() {
        samples.sort();
        }
    /// The thread the sample was captured on.  Omitted for Metadata events that
    #[test]
    #[inline]
        ];

    }
    }
                SelRegion::new(start, end)
        self.undone_groups = groups;
/// Base unit is utf8 code unit.
    if a.is_empty() {
    }
        let params = json!({
    struct MergeTestState {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
        prev_boundary.unwrap_or(None)
                SelectionModifier::Set => self.set_selection(text, occ),
    {


}
        let trace = Trace::enabled(Config::with_limit_count(11));
    //TODO: implement iter_chunks using ranges and delete this
//
pub fn samples_cloned_unsorted() -> Vec<Sample> {
    ///
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
}
                        _ => break
    }
        while offset < l.len() && !l.is_char_boundary(offset) {
    #[serde(rename = "ph")]
        let s = String::deserialize(deserializer)?;
    }
    #[test]
    ProcessLabels { labels: String },
}
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
        engine.edit_rev(1, 1, first_rev, d1);
                self.do_find(text, chars, case_sensitive, regex, whole_words),

        // Rust is unlikely to break the property that this hash is strongly collision-resistant
        if f.alternate() {
        assert_eq!(1, expand_by[0].0.priority);
        assert_eq!(0, b.line_of_offset(1));
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,

                    let (mut a, rest) = end.split_first_mut().unwrap();
        let mut b = line_cache_shadow::Builder::new();
            self.tid == other.tid &&
        }
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
            }

            Assert(0, "ab".to_owned()),
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
#[inline]
    // TODO: replace this with a version of `lines` that accepts a range
    use delta::{Builder, Delta};
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
    /// This method is responsible for updating the cursors, and also for
    #[test]
/// required). Mutations are generally copy-on-write, though in-place edits are
            self.tid == other.tid &&
                        _ => break
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
///
    fn from(r: &Rope) -> String {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },

            Merge(2,1),
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        let mut engine = Engine::new(Rope::from(TEST_STR));

/// that sorted would be prohibitively expensive.
    ///
                        if !last_selection.is_caret() {
                self.set_dirty(text);
        deletes_from_union = new_deletes_from_union;
        assert_eq!(snapshot[5].name, "b");
impl fmt::Debug for Rope {
        }
    // * Unicode width (so CJK counts as 2)
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
                // should be removed in favor of do_gesture
    /// Return the line number corresponding to the byte index `offset`.
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
                if groups.contains(undo_group) {
            Revision {
impl Add<Rope> for Rope {
    fn bench_trace_block_payload(b: &mut Bencher) {
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// vertical scroll position
    fn arr_eq(&self, other: &Rhs) -> bool;
    #[cfg(feature = "benchmarks")]
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    fn add(self, rhs: Rope) -> Rope {
        rendered_styles
        let tombstones = Rope::from("27");
                self.start_drag(offset, offset, offset);
                   r.lines_all().collect::<Vec<_>>());
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    #[test]
                            if !inserts.is_empty() {
                    let transformed_deletes = deletes.transform_expand(&s);

        }
            'M' => SampleEventType::Metadata,
                     modify_selection: &SelectionModifier) {
        let subset_str = format!("{:#?}", expand_by[0].1);
        let first_rev = engine.get_head_rev_id().token();
            }
                }
#[derive(Serialize, Deserialize, Clone, Debug)]
                        s = &s[..s.len() - 1];
/// assert_eq!("herald", String::from(a));
    (1, 0)
// Unless required by applicable law or agreed to in writing, software
            self.record(Sample::new_instant(name, categories, None));
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
                selection.add_region(occurrence);
    fn test_samples_closure() {
    wrap_col: WrapWidth,
    #[serde(skip_serializing)]
            trace: Some(&trace),

            max_undo_so_far,
    fn line_offsets() {
        });
    #[test]
    /// This function does not perform any scrolling.
use client::Client;
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        }

        engine.undo([1].iter().cloned().collect());
    }
    fn prev(s: &String, offset: usize) -> Option<usize> {
        self.replace = Some(Replace { chars, preserve_case });
                true => x.end,
        Self::with_limit_bytes(1 * 1024 * 1024)
        self.revs.push(new_rev);
            MetadataType::ProcessName {..} => "process_name",
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {

        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
/// ```
#[derive(Copy, Clone)]
/// ```
/// Contains replacement string and replace options.
        let tid = all_samples.front()
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            fragment: ""
    use multiset::Subset;
//See ../docs/MetricsAndBoundaries.md for more information.


                        &mut start[bi]
            'O' => SampleEventType::ObjectSnapshot,
        let mut d_builder = Builder::new(TEST_STR.len());
            let right_str = self[splitpoint..].to_owned();
    #[test]
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    /// assumed to be forward).
fn exe_name() -> Option<String> {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
 //additional cursor features
/// }
#[inline]
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
            }
        expand_by = next_expand_by;
    pub fn lines_raw_all(&self) -> LinesRaw {
        let script = vec![
    #[cfg(feature = "benchmarks")]
            AddSelectionAbove =>
    #[bench]
                    self.do_gesture(text, line, column, GestureType::RangeSelect)

            }



        assert!(r == a_rope.clone() + b_rope.clone());
    /// inserted, including the ones that were later deleted, in the locations
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        -##-
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        let inserts = parse_subset_list("

        }
            SelectionForReplace => self.do_selection_for_replace(text),
    #[test]
        }, deletes_from_union)
                inserts: new_inserts,
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    fn bench_trace_instant_disabled(b: &mut Bencher) {
            SampleEventType::Instant => 'i',


        // current recording mechanism should see:
        assert_eq!("#-####-", &subset_str);
impl Leaf for String {
        MergeTestState::new(6).run_script(&script[..]);
            Merge(0,1),
///
    fn next_grapheme_offset() {
    #[test]
        let plan = RenderPlan::create(height, self.first_line, self.height);
            DeltaElement::Insert(ref node) =>
        }
    }
        // the smallest values with which it still fails:
        let first_rev = engine.get_head_rev_id().token();
        b.iter(|| black_box(trace.instant_payload(
            b.push('b');
                    } else {
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                    self.set_selection(text, selection);
        where S: Into<StrCow>, C: Into<CategoriesT>
pub fn count_newlines(s: &str) -> usize {
        assert_eq!(None, a.prev_codepoint_offset(0));
}

            }
    }
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    }
    fn next(s: &String, offset: usize) -> Option<usize> {
pub type SessionId = (u64, u32);
macro_rules! categories_from_constant_array {

        out.push(Revision {
    }
            Assert(1, "ab".to_owned()),
                         style_spans: &Spans<Style>) -> Vec<isize>
    out.as_mut_slice().reverse();
        assert_eq!("a", String::from(&tombstones_2));
    }
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
}
            SampleEventType::Metadata => 'M'
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        a.push('\n');
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        }
    /// Garbage collection means undo can sometimes need to replay the very first
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
            Cancel => self.do_cancel(text),
    Edit {
                    linewrap::rewrap_width(breaks, text, width_cache,
/// as opposed to thousands of revisions.
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    fn append_large() {
    for op in b_new {
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
            Merge(0,2), Merge(1, 2),
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
                self.do_selection_for_find(text, case_sensitive),
#[cfg(feature = "dict_payload")]
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        }

                },
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
            self.current = None;
}
        assert!(leaf.is_char_boundary(end));
                        })
        match cmd {
    ///
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        }
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size

        let (start, end) = iv.start_end();
                                     payload: Option<TracePayloadT>,
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
        #[serde(rename_all = "snake_case")]
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
/// # Arguments
}
        }
    /// want to set the process name (if provided then sets the thread name).
    pub fn get_samples_count(&self) -> usize {
        let iv = Interval::new_closed_open(start, end);
    #[test]
                    self.set_selection(text, selection);
        if let Some((l, offset)) = self.get_leaf() {
        }
                    let mut selection = self.selection.clone();
    /// after an edit is applied, to allow batching with any plugin updates.
///
        assert_eq!("#---#--", &subset_str);
        }
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    pub fn new_disabled() -> Self {

    fn cmp(&self, other: &Sample) -> cmp::Ordering {
                let mut cursor = Cursor::new(&text, region.min());
            highlight_find: false,
        }
        // We add selection after find because we want it to be preferred if the
    let mut out = Vec::new();
    /// The selection state for this view. Invariant: non-empty.
/// typing a paragraph) will be combined into a single segment in a transform
        self.lines_raw(0, self.len())
            self.idx = 0;

    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        // position after 'f' in four
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    }
    }
        };

                    let transformed_deletes = deletes.transform_expand(&s);
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            SampleEventType::AsyncEnd => 'e',
        // is the new edit in an undo group that was already undone due to concurrency?


        trace.record(guard.sample.as_ref().unwrap().clone());
        }).collect();
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    }
///
            self.current = None;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            Assert(2, "afc".to_owned()),

        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
///

        }
    /// the frontend.
categories_from_constant_array!(4);
/// Create an instantaneous sample without any payload.  This is the lowest
        if !new_inserts.is_empty() {
            trace.closure("test_samples_closure", &["test"], || {});
categories_from_constant_array!(5);
use interval::Interval;
/// from multiple distributed sources (i.e. you want to sort the merged result
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    let new_gc_dels = if inserts.is_empty() {
    pub payload: Option<TracePayloadT>,
        //};
                last.1 = last.1.transform_union(&inserts);
                        ops.push(self.build_update_op("copy", None, seg.n));
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                let (pl, poffset) = self.prev_leaf()?;
    }

                    } else if !inserts.is_empty() {
            match c.edit {
        self.revs.last().unwrap().max_undo_so_far
    fn test_samples_closure() {
            let start = self.line_of_offset(last_text, iv.start());
                    let (start, end) = {
        let start = time::precise_time_ns();
        // interior of last line should be last line
#[cfg(feature = "json_payload")]
        self.cursor.next_leaf();
            },
        }
pub type RevToken = u64;
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
#[derive(Clone, Copy)]
                peers.push(peer);
    }

                    Some(chunk) => self.fragment = chunk,
        }
        self.selection = sel;
            Some(Cow::Borrowed(mut s)) => {
        self.hash(&mut hasher);
    #[test]
/// Creates a duration sample that measures how long the closure took to execute.
                            deletes_bitxor
        let mut revs = basic_insert_ops(inserts_1, 1);
                Some(Cow::from(s))
        if self.highlight_find {
    }
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
        // x, a, y, b, z, c
//     http://www.apache.org/licenses/LICENSE-2.0
        let mut style_map = style_map.borrow_mut();
    where S: serde::Serializer {
    }
        -----#
        gc_scenario(35,20);
            },
        ");
    where S: Into<StrCow>, C: Into<CategoriesT>


            if next_chunk.is_none() { return None; }


            }
                self.do_gesture(text, line, col, ty),
}
    /// Does a drag gesture, setting the selection from a combination of the drag
        let (first_line, _) = self.offset_to_line_col(text, region.min());

        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
use std::borrow::Cow;

                // should be removed in favor of do_gesture

            },
        }
    pub fn collapse_selections(&mut self, text: &Rope) {

    }
                    els: delta.els.drain(..)
}
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    {
impl Serialize for Delta<RopeInfo> {
            Assert(0, "zcpbdj".to_owned()),
    #[test]
        b.iter(|| black_box(sys_tid::current_tid()));
            let start = self.line_of_offset(last_text, iv.start());
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    -> SampleGuard<'a>
                        ops.push(self.build_update_op("copy", None, seg.n));
        b.iter(|| black_box(sys_tid::current_tid()));
    fn bench_trace_closure_payload(b: &mut Bencher) {
        assert_eq!(rope.line_of_offset(3), 1);
        }, to_payload("test_get_samples_nested_trace"));
                Some(offset)
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    trace: Option<&'a Trace>,
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
    /// The line ending is stripped from the resulting string. The final line ending
        // NOTE: we derive to an interim representation and then convert
                name, categories, Some(payload.into()), start, end - start));
    /// Tracks whether this view has been scheduled to render.
                    "something", &["benchmark"], || {},

            }
                priority: new_priority,
        trace.closure_payload("z", &["test"], || {},
            }
            a.push('a');
        match *self {
    /// Find parameters and number of matches changed.
    }
}
    /// Get revision id of head revision.

                payload: payload,
            engine.edit_rev(1, i+1, head, d);
        offset
    }
        self.samples.lock().unwrap().len()


            pending_render: false,
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
            Merge(2,0),
    /// The maximum number of bytes the tracing data should take up.  This limit
        assert_eq!(trace.get_samples_limit(), 0);
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
                //// if we aren't on a boundary we can't be at the end of the chunk
        for op in &delta_ops {
///
               a.lines_all().collect::<Vec<_>>());
        }
            retain_revs.insert(last.rev_id);
}
    /// slices will be nonempty.
    pub fn offset_of_line(&self, line: usize) -> usize {
        }
            tid: sys_tid::current_tid().unwrap(),
                leaf_offset = self.pos() - poffset;
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
        }
        // the smallest values with which it still fails:
                            rendered_lines.push(line);
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        let b = Rope::from("b");
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        for r in &self.revs[ix + 1..] {
}
                Rope::from(s1.clone()),
            //if self.cursor.is_boundary::<BaseMetric>() {

    Instant,
    {
            update["lines"] = json!(lines);
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
    // * grapheme clusters
/// Usage of static strings is encouraged for best performance to avoid copies.
                }
            match exe_name.clone().file_name() {
    fn prev(s: &String, offset: usize) -> Option<usize> {
    #[serde(serialize_with = "serialize_event_type")]
            trace.closure("something", &[], || ());
            self.unset_find();
        if self.current.is_none() {
    #[test]
categories_from_constant_array!(7);
        let trace = Trace::enabled(Config::default());

            self.unset_find();
        use std::hash::{Hash, Hasher};
            name: name.into(),
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
        self.push_str(&other[start..end]);



    /// `text`. The count of a character in `deletes_from_union` represents
        let end = self.line_col_to_offset(text, line + 1, 0);
/// Boundary is trailing and determined by a newline char.
            GestureType::ToggleSel => self.toggle_sel(text, offset),
                metadata_sort_index: None,
    {

    #[cfg(feature = "benchmarks")]
    ///
        // creation) is:
                            styles: &StyleMap, style_spans: &Spans<Style>,
                }
    /// Find what the `deletes_from_union` field in Engine would have been at the time
            },
// Copyright 2016 The xi-editor Authors.
                    }
}
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    fn eq(&self, other: &CategoriesT) -> bool {
                                            closure: F, payload: P) -> R

/// same priority into one transform to decrease the number of transforms that
        -##-

/// Disable tracing.  This clears all trace data (& frees the memory).
//     http://www.apache.org/licenses/LICENSE-2.0
    }
        self.find_changed = FindStatusChange::Matches;
    }
        engine.edit_rev(1, edits+1, head2, d2);
        self.enabled.store(true, AtomicOrdering::Relaxed);

        ]);
    }
            trace.instant("c", &["test"]);
            engine.undo(undos.clone());
                    selection.add_region(SelRegion::new(sel_start, end_of_line));

/// have to be considered in `rebase` substantially for normal editing
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
        let base_sel = Selection::new();
                        let mut word_cursor = WordCursor::new(text, region.max());

        for find in &mut self.find {
        if self.highlight_find {
                SelRegion::new(start, end)
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    /// if it is non-empty. It needs to be a separate commit rather than just

        assert_eq!(Some(6), a.next_codepoint_offset(3));
    // TODO: maybe refactor this API to take a toggle set
/// Stores the tracing data.
}
    /// if there is not at least one edit.
    }
                        if !last_selection.is_caret() {
            let b_to_merge = &other.revs[base_index..];
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
impl SampleEventType {
            ix = sel_end as isize;
                        let new_deletes_bitxor = if gc_dels.is_empty() {
    }

            }
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
// Licensed under the Apache License, Version 2.0 (the "License");
    /// Only works well for ASCII, will probably not be maintained long-term.
        cursor.next_grapheme()
    }
            None => text.line_of_offset(offset)
    fn from(c: Vec<String>) -> CategoriesT {

            ix = sel_end as isize;
    fn rebase_1() {
    new_without_default_derive,

        Self {
                        let _ = s.pop();
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
                    text.slice_to_string(region.min(), region.max())
        result
    pub fn get_samples_count(&self) -> usize {
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        assert_eq!(trace.is_enabled(), true);
}
    }
                                  style_spans, &plan, pristine);
    pub fn offset_of_line(&self, line: usize) -> usize {
    ProcessLabels { labels: String },
            trace.record(sample);
                }
    #[test]

/// Base unit is utf8 code unit.
                // merge logic.
        thread.name().map(|ref s| to_cow_str(s.to_string()))
#![cfg_attr(feature = "benchmarks", feature(test))]
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
                let categories = v.split(",").map(|s| s.to_string()).collect();
        ];
        Cow::from(b)
    pub fn get_samples_limit(&self) -> usize {
/// an argument.
        for i in 0..5_000 {
        let res = find_common(&a, &b);
        assert_eq!(trace.get_samples_limit(), 20);
#[macro_use]
        delta.serialize_field("els", &self.els)?;
pub fn is_enabled() -> bool {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
pub struct SampleArgs {
/// ```rust
        let mut b = line_cache_shadow::Builder::new();
            let mut len = 1;
            if !s.is_empty() {
#[inline]
    #[bench]
            if sel_end_ix > sel_start_ix {
        if offset >= text.len() {
        cursor.prev::<BaseMetric>()
    #[test]
        Self::with_limit_bytes(1 * 1024 * 1024)
        if !new_inserts.is_empty() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        }
        self.tombstones = new_tombstones;
        Cow::from(a.into_owned() + b)
        }
        let r = r + Rope::from(&b[MIN_LEAF..]);
                         start: usize, end: usize, sel: &[(usize, usize)],
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            's' => SampleEventType::FlowStart,

            }
    fn prev_grapheme_offset() {
        // position after 'f' in four
            a = a + Rope::from(&c);
pub type TracePayloadT = serde_json::Value;
        }
                let categories = v.split(",").map(|s| s.to_string()).collect();
    pub fn collapse_selections(&mut self, text: &Rope) {
//     http://www.apache.org/licenses/LICENSE-2.0
            //if self.cursor.is_boundary::<BaseMetric>() {
    #[inline]
        let new_head_2 = engine.get_head_rev_id().token();
/// same priority into one transform to decrease the number of transforms that
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
    fn eq(&self, other: &CategoriesT) -> bool {
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        }
        assert_eq!("#---#--", &subset_str);
        self.pending_render = pending
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
            Assert(1, "arpbzj".to_owned()),
    /// recomputing line wraps.
pub fn disable_tracing() {
            }
            let max_undo = self.max_undo_group_id();
            'X' => SampleEventType::CompleteDuration,
    pub fn line_of_offset(&self, offset: usize) -> usize {
            black_box(time::precise_time_ns());
        } else {
    pub fn new_duration<S, C>(name: S,
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
    /// the text).
        let b_revs = basic_insert_ops(inserts, 2);
        MergeTestState::new(3).run_script(&script[..]);
}
    }
    find_leaf_split(s, MIN_LEAF)
    // maybe explore grabbing leaf? would require api in tree
                Edit { priority, undo_group, inserts, deletes } => {
                    }
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
                }
            self.truncate(splitpoint);
        }
/// ```
                if !region.is_caret() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
        self.find.clear();
                if !region.is_caret() {
            self.wrap_col = WrapWidth::Bytes(wrap_col);
    fn bench_single_timestamp(b: &mut Bencher) {
    use interval::Interval;
    }
                break;
        }
            let a_to_merge = &self.revs[base_index..];

#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    // TODO: this should be a Cow
            Assert(0, "zcbd".to_owned()),

            soln.push('b');
    out
        assert_eq!(trace.is_enabled(), true);
// You may obtain a copy of the License at

            Assert(1, "apbj".to_owned()),
    size: Size,
    }
            Assert(1, "acpbdj".to_owned()),
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
    fn compute_transforms_2() {
        assert_eq!(None, b.prev_codepoint_offset(0));

                SelectionModifier::AddRemovingCurrent => {


    {
    use interval::Interval;
            thread_name: None,

            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
            self.set_selection(text, selection);
                        let start_line = seg.our_line_num;
        b.push_str(s);
/// `base_revs`, but modified so that they are in the same order but based on
// You may obtain a copy of the License at
    #[cfg(feature = "benchmarks")]

    }

        Some(pos) => minsplit + pos,
            ix = sel_end as isize;
        client.update_view(self.view_id, &params);
            Merge(3,1), Merge(5,3),

        //for next line
// Copyright 2018 The xi-editor Authors.
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
                           style: &Style) -> usize {
    #[serde(rename = "xi_payload")]
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
    /// after an edit is applied, to allow batching with any plugin updates.
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
        println!("{:#?}", b_delta_ops);
mod sys_pid;
/// # use xi_rope::Rope;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            GestureType::ToggleSel => self.toggle_sel(text, offset),
            let next_chunk = self.inner.next();
            _ => return
        // selection state, and for scrolling it into view if needed. This choice can

            Assert(0, "zcpbdj".to_owned()),
            Some(region) => {
impl<'a> Cursor<'a, RopeInfo> {
        cursor.prev::<BaseMetric>()
        }
/// fn something_else_expensive() {
            }

/// version of Ropes, and if there are many copies of similar strings, the common parts
/// # Examples
                if s.ends_with('\n') {
                        inserts: transformed_inserts,
    }
    rev_id: RevId,
    #[test]
    // allowing us to use the same method to insert the text into the tombstones.
        let mut update = json!({
    #[inline]
    // Note: this function would need some work to handle retaining arbitrary revisions,
            'M' => SampleEventType::Metadata,
}
impl<'a> Drop for SampleGuard<'a> {
        assert_eq!(snapshot[1].name, "thread_name");
    }

        }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        for rev in old_revs.into_iter().rev() {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    /// Move the selection by the given movement. Return value is the offset of
        use self::MergeTestOp::*;
            Assert(1, "afc".to_owned()),
}
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
/// some way.

    // Render a single line, and advance cursors to next line.
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // encourage callers to use Cursor instead?

    }

    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
pub struct Config {
    fn line_offsets() {
        let a = Rope::from("a\rb\rc");
/// Create an instantaneous sample without any payload.  This is the lowest
                RenderTactic::Discard => {
        next_boundary.unwrap_or(None)
                Rope::from(s1.clone()),
            AssertMaxUndoSoFar(1,3),
    {
    fn test_get_samples_nested_trace() {
                                     categories: C,
            rev_id: self.next_rev_id(),
            Assert(5, "zacpb".to_owned()),
    ThreadSortIndex { sort_index: i32 },
            },
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
/// stored as tracing could still be enabled but set with a limit of 0.
                self.do_drag(text, line, column, Affinity::default()),

                sel
    /// Start of the region selected when drag was started (region is
                None => {

                        })
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
                }
    pub fn is_enabled(&self) -> bool {
            'B' => SampleEventType::DurationBegin,
struct DragState {

            GestureType::ToggleSel => self.toggle_sel(text, offset),
                }

    }
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
        deletes: Subset,
    /// The maximum number of bytes the tracing data should take up.  This limit
}
/// ```

        ix
                max_undo_so_far: i,
                selection.add_region(SelRegion::caret(region.max()));

impl RevId {
                            }
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
    /// is optional.
        }
            splitpoint

            SelectAll => self.select_all(text),
            Assert(0, "adfc".to_owned()),
/// State required to resolve a drag gesture into a selection.

    }
    #[test]
// distributed under the License is distributed on an "AS IS" BASIS,
                    text.slice_to_string(start, end)
        while !leaf.is_char_boundary(end) {
        for _i in 0..50 {
            self.next()
                }
        }
    fn test_cross_process_samples() {
        // probably change as the recording internals change.
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        self.revs.push(new_rev);
            } else {

    } else if x < max {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
        let snapshot = trace.samples_cloned_unsorted();
            None => None
    }
                      width_cache: &mut WidthCache, keep_selections: bool)
            AddSelectionBelow =>
// Unless required by applicable law or agreed to in writing, software
            'b' => SampleEventType::AsyncStart,
                Some(pos) => offset += pos + 1,
        if self.scroll_to.is_none() && wrap {
        let first_line = self.line_of_offset(text, start);
        println!("{:#?}", delta_ops);
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));

/// supported as an optimization when only one reference exists, making the
    /// Updates the view after the text has been modified by the given `delta`.
            Merge(1,2),
                                         self, text, modify);
        let start = time::precise_time_ns();

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        }

        println!("{:#?}", delta_ops);
            let splitpoint = if s.len() > MAX_LEAF {
        leaf.as_bytes()[pos]
                s.len()
                        inserts: transformed_inserts,

#[cfg(feature = "benchmarks")]
                                  style_spans, &plan, pristine);
        b.push('\n');
    }
    fn test_samples_block() {
            match c.edit {
    /// the pid or the tid depends on the name of the event
        }
/// feature makes the payload a `serde_json::Value` (additionally the library
        prev_boundary.unwrap_or(None)
    /// If `modify` is `true`, the selections are modified, otherwise the results
        }
        self.start_drag(offset, region.start, region.end);
    }
}
            timestamp_us: ns_to_us(timestamp_ns),
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
                SelRegion::new(start, end)
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
                // Deprecated (kept for client compatibility):
        for _i in 0..50 {
    }
        }
            SelectionForReplace => self.do_selection_for_replace(text),
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        for rev in &self.revs[first_candidate..] {
//See ../docs/MetricsAndBoundaries.md for more information.
    }

    }
/// could trigger incorrect behavior if they collide, so u64 is safe.
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
        assert_eq!("a", String::from(&tombstones_2));
    #[bench]
}
            Assert(1, "acb".to_owned()),

        // only one of the deletes was gc'd, the other should still be in effect
        let a = Rope::from("");

                l = pl;
                    priority, undo_group,
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    }
    let mut s = Subset::new(head_len);
    #[derive(Clone, Debug)]
        MergeTestState::new(6).run_script(&script[..]);
        for i in 0..self.len() {
    pub fn offset_of_line(&self, line: usize) -> usize {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
//! A rope data structure with a line count metric and (soon) other useful
        let trace = Trace::disabled();
    TRACE.block_payload(name, categories, payload)
    fn append_large() {

    fn arr_eq(&self, other: &Rhs) -> bool;
    #[test]
    fn undo_3() {
    #[serde(rename = "sort_index")]
            Merge(2,3),
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                } else if click_count == Some(3) {
        });
            Assert(0, "acbd".to_owned()),
        } else { // no toggled groups, return past end
            tid: sys_tid::current_tid().unwrap(),
            let splitpoint = find_leaf_split_for_merge(self);

#[inline]
    }
        let mut a = String::new();
        let subset_str = format!("{:#?}", expand_by[1].1);
    }

            s.as_bytes()[offset - 1] == b'\n'
                    return Some(result);
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
    -> SampleGuard<'a>


                let (pl, poffset) = self.prev_leaf()?;
impl View {
                selections.push((sel_start_ix, sel_end_ix));


        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        self.scroll_to_cursor(text);

    #[cfg(feature = "benchmarks")]
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
            rendered_styles.push(style_id as isize);
                WrapWidth::Width(px) =>
            for &occurrence in find.occurrences().iter() {
    new_without_default_derive,

    type Item = u8;
impl<'a> SampleGuard<'a> {
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
            offset = text.len();
            Merge(0,2),
fn initial_revision_counter() -> u32 {
              F: FnOnce() -> R
use std::fmt;
        let inserts = parse_subset_list("
    fn measure(_: &RopeInfo, len: usize) -> usize {
    }
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
    /// Get previous codepoint before cursor position, and advance cursor backwards.
                }
pub struct RopeInfo {
        fn new(count: usize) -> MergeTestState {
        assert_eq!(2, expand_by.len());
            Assert(1, "arpbj".to_owned()),


            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
/// the session ID component of a `RevId`
        Some(self.cmp(other))
        assert_eq!(correct, res);
        // todo: the correct Find instance needs to be updated with the new parameters

    }
#[derive(Copy, Clone)]
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    use serde_test::{Token, assert_tokens};
            base_len: usize
    }
        }).collect()
            1 if self.selection[0].is_caret() => {
                edit: contents.clone()
    priority: usize,
                        ops.push(self.build_update_op("invalidate", None, seg.n));
        if s.len() <= MAX_LEAF {
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
}
    /// The name of the event to be shown.
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
    fn next_rev_id(&self) -> RevId {
/// # Performance
        offset
                    text.slice_to_string(start, end)
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert!(r.clone().slice(0, a.len()) == a_rope);
        all_samples.reset_limit(config.max_samples());
    }
    // TODO: don't construct transform if subsets are empty
                el.serialize_field(start)?;
        // rebase the delta to be on the head union instead of the base_rev union
///
/// # use xi_rope::Rope;
                        deletes_from_union = deletes_from_union.union(deletes);
    }
                             client: &Client, style_spans: &Spans<Style>)
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    /// Returns the largest undo group ID used so far
        let b = a.slice(2, 4);
        let (mut l, mut offset) = self.get_leaf()?;
    pub fn scroll_height(&self) -> usize {
impl PartialEq for Sample {
        assert_eq!(b, String::from(a));
        // We add selection after find because we want it to be preferred if the
use client::Client;
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!("1234567", String::from(r));
            self.set_dirty(text);
    // ============== Merge script tests
        in_measured_units
        for _ in 0..(edits-max_undos) {
        let start_pos = start_of_line.pos();
    /// Selects the given region and supports multi selection.
        self.set_selection_raw(text, selection);

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        if let Some(ix) = style_map.lookup(style) {
    }
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        let offset = self.line_col_to_offset(text, line as usize, 0);
    }
                cursors.push(c - start_pos);
    fn test_get_samples() {
            cur_len_utf16 += u.len_utf16();
        }


/// A rope data structure.
                        None if cursor.pos() == text.len() => cursor.pos(),
    }
impl Eq for Sample {}
            deletes: Subset::new(0),
                rev_id: basic_rev(i),

        // current recording mechanism should see:
    fn bench_single_timestamp(b: &mut Bencher) {
            tid: sys_tid::current_tid().unwrap(),
    /// Returns the visible line number containing the given offset.
        let utf8_offset = 13;
            }
            self.args == other.args
    }

                                                    self.size.width));
        // if self.end is inside this chunk, verify that it is a codepoint boundary
    }
        let a = Rope::from("\n");
    TRACE.instant(name, categories);
/// conforms to is currently determined by the feature this library is compiled

            find.find_status(matches_only)
            SelectionForFind { case_sensitive } =>
        for _ in 0..line_len {
        }
        for i in 1..(s1.len() * 3) {
        let mut soln = String::from("h");
        // spam cmd+z until the available undo history is exhausted
                    };
                None => {
                        let mut rendered_lines = Vec::new();
                    a.merge(b);
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
//! An engine for handling edits (possibly from async sources) and undo. It
        assert_eq!(2, r.line_of_offset(r.len()));
    fn append_large() {
                    } else {

                } else if click_count == Some(2) {
}
                    .with_horiz(horiz)
macro_rules! categories_from_constant_array {
categories_from_constant_array!(5);
// utility function to clamp a value within the given range
            timestamp_us: ns_to_us(time::precise_time_ns()),
        assert_eq!(output, String::from(engine.get_head()));
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
        // of the delta so we can set the cursor before or after the edit, as needed.
    }
// ======== Merge helpers
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    fn undo_2() {
    pub width: f64,
        /// Just the `symmetric_difference` (XOR) of the two sets.
        }
                    deletes: deletes.clone(),
            let matches_only = self.find_changed == FindStatusChange::Matches;
    }
        b if b < 0xf0 => 3,
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
    }
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
                }
            let mut sample = self.sample.take().unwrap();
        let mut b = TreeBuilder::new();
                        }
// limitations under the License.
        // x, a, y, b, z, c
        match self.breaks {
        }
        assert_eq!(snapshot[0].name, "process_name");
}
}
    {
                }
        self.find_changed = FindStatusChange::Matches;
        /// revision that were added by this revision.
                              to_payload("test_get_samples"));
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID

                _ => panic!("to_base_units called with arg too large")

    /// A delta that, when applied to `base_rev`, results in the current head. Panics
        let utf8_offset = 13;


        -> Result<CategoriesT, D::Error>

        let a = Rope::concat(
    }
    #[serde(skip_serializing_if = "Option::is_none")]
            },

            None => {
                                                                0, "copy", 2)?;
                                gc_dels = gc_dels.transform_union(inserts);

            let b_to_merge = &other.revs[base_index..];
    }
    #[inline]
        let result = closure();
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
        b.build()

            SampleEventType::Metadata => 'M'
}
    /// in the range of 511-1024 bytes.
            b.push_str(&c);
    use super::*;
    fn basic_rev(i: usize) -> RevId {
        b.push('\n');
pub fn enable_tracing() {
            Revision {
    }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
//
                metadata_sort_index: None,

    rev_id_counter: u32,
        self.lines_raw(0, self.len())
    fn measure(info: &RopeInfo, _: usize) -> usize {
            return Vec::with_capacity(0);
        assert_eq!(0, a.line_of_offset(0));
        self.revs.reverse();
/// Enable tracing with the default configuration.  See Config::default.
            }
    use super::*;
            Merge(1,2),
    fn test_cross_process_samples() {
                el.serialize_field(end)?;
        a.lines_all().collect::<Vec<_>>());
{
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

        let mut all_samples = self.samples.lock().unwrap();
        ];
            if self[i] != other[i] {
    /// Returns the byte offset corresponding to the line `line`.
        let script = vec![
            trace.closure_payload("y", &["test"], || {
            scroll_to: Some(0),
        let r = Rope::from(&a[..MAX_LEAF]);
        let mut b = line_cache_shadow::Builder::new();
        priority: usize,
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        }
impl TreeBuilder<RopeInfo> {
        }
    #[test]
use edit_types::ViewEvent;
    /// The state for replacing matches for this view.
        if self.highlight_find {
        cursor.prev::<BaseMetric>()
    }
        rope.offset_of_line(5);
    #[serde(skip_serializing_if = "Option::is_none")]
}
}
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
        for _ in 0..line_len {
                let categories = v.split(",").map(|s| s.to_string()).collect();
            Revision {
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        }
                self.do_set_replace(chars, preserve_case),
        if self.len() != other.len() {
                                deletes_bitxor: new_deletes_bitxor,

/// xi_trace::trace("something happened", &["rpc", "response"]);
    ///
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

        impl From<&'static[&'static str; $num_args]> for CategoriesT {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        memchr(b'\n', &s.as_bytes()[offset..])
    // for simplicity.
pub fn disable_tracing() {
extern crate serde_derive;
            Assert(1, "zpbj".to_owned()),
            // selection with interior
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

    pub fn new_instant<S, C>(name: S, categories: C,
        let height = self.line_of_offset(text, text.len()) + 1;
            self.truncate(splitpoint);
                text.offset_of_line(line)
            let mut sel = drag_state.base_sel.clone();

#[inline]
    }
                    None
        }).collect();
        let rope = Rope::from("hi\ni'm\nfour\nlines");
/// # Examples
    #[test]
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                });
impl<T: AsRef<str>> From<T> for Rope {
                self.set_dirty(text);
pub fn len_utf8_from_first_byte(b: u8) -> usize {
        self.lines += other.lines;
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
            }
            }
/// assert_eq!("herald", String::from(a));
    /// unsaved changes.
/// let c = b.slice(1, 7);
    wrap_col: WrapWidth,
                false => x.start
//! There is also a full CRDT merge operation implemented under
    pub fn enable_config(&self, config: Config) {
        println!("{:#?}", delta_ops);
            SampleEventType::AsyncStart => 'b',
            }
#[cfg(test)]
    /// Returns the regions of the current selection.
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
    match std::env::current_exe() {
        };
        b.iter(|| black_box(trace.closure_payload(
impl Rope {
            .map(|(i, _)| i)
        engine.edit_rev(0, 1, first_rev, build_delta_1());
    }
            edit: Edit {


    }

        /// and new deletes_from_union
                }
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        let mut ops = Vec::new();
// you may not use this file except in compliance with the License.
    /// Returns an iterator over chunks of the rope.
            let new_region = region_movement(movement, region, self,
    #[test]
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    #[test]
    #[derive(Debug)]
        AssertAll(String),

            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
pub struct Engine {
/// `base_revs`, but modified so that they are in the same order but based on
    /// Find what the `deletes_from_union` field in Engine would have been at the time
        ----#
        assert!(self.current.is_some());
        let correct = parse_subset_list("
use delta::{Delta, DeltaElement};
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4

                selection.add_region(occurrence);
                                deletes_bitxor: new_deletes_bitxor,

                name, categories, payload, SampleEventType::DurationBegin)),
        // TODO: simplify this through the use of scopeguard crate
        }, new_text, new_tombstones, new_deletes_from_union)
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
}
                return;
        delta.serialize_field("els", &self.els)?;
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
                } else {
/// an argument.
/// record it.
        } else if line == max_line {
        assert_eq!(correct, rebased_inserts);
            Assert(1, "ab".to_owned()),
    /// Does a drag gesture, setting the selection from a combination of the drag
            pid: sys_pid::current_pid(),
        where S: Into<StrCow>, C: Into<CategoriesT>
                         start: usize, end: usize, sel: &[(usize, usize)],
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
    #[serde(default = "default_session", skip_serializing)]
        }
    {
        where S: Into<StrCow>, C: Into<CategoriesT>
//
        let b = a.slice(1, 10);
    /// Invalidates the styles of the given range (start and end are offsets within
                last.1 = last.1.transform_union(&inserts);
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
/// Usage of static strings is encouraged for best performance to avoid copies.
fn count_utf16_code_units(s: &str) -> usize {
    fn from(r: Rope) -> String {

    }

        // set last selection or word under current cursor as replacement string
        assert_eq!(trace.get_samples_count(), 0);

    pub chars: String,
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    }
            event_type: SampleEventType::CompleteDuration,
                                                     "insert", node)
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    samples: Mutex<FixedLifoDeque<Sample>>,
        assert_eq!(1, a.line_of_offset(3));
        b.iter(|| sys_pid::current_pid());
    }
        Some(self.cmp(other))
    /// concurrently it will have count `2` so that undoing one delete but not
            ix = sel_end as isize;
                   style_spans: &Spans<Style>, line_num: usize) -> Value
            to_payload("some description of the trace"))));
    struct MergeTestState {
            &rebased_deletes_from_union, &new_deletes_from_union);
            pid: sys_pid::current_pid(),

///

/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
            first_line: 0,
        trace.closure_payload("x", &["test"], || (),

            MetadataType::ProcessLabels {..} => "process_labels",
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
        let script = vec![
}

    #[test]

        self.timestamp_us.cmp(&other.timestamp_us)
    identity_op,

                    e.edit_rev(p, u, head, delta.clone());
    {
            Assert(3, "ab".to_owned()),
        struct RopeDelta_ {
    }
    #[serde(rename = "cat")]
}
        ]);
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {

            MetadataType::ProcessLabels {..} => (None, None)
        self.cursor.next_leaf();
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
}
    }
        }
    pub event_type: SampleEventType,

        self.set_dirty(text);
            let (start, end) = if offset < drag_state.offset {


// Unless required by applicable law or agreed to in writing, software
    }
            a = a + Rope::from(&c);
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
// You may obtain a copy of the License at

pub struct Utf16CodeUnitsMetric(usize);
            Assert(1, "abefg".to_owned()),
    ///
        let a = Rope::from("a");
                // TODO could probably be more efficient by avoiding shuffling from head every time
                }
impl Trace {

        let (new_text, new_tombstones) =
        b.iter(|| {
                            (inserts.transform_shrink(&gc_dels),
        self.set_dirty(text);
        // update only find highlights affected by change
        // even though the actual sampling order (from timestamp of
        assert_eq!(trace.is_enabled(), true);

            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {


/// Revision 0 is always an Undo of the empty set of groups
            a.push('a');
    }
            name: name.into(),
    #[cfg(feature = "benchmarks")]
    }
    fn is_boundary(s: &String, offset: usize) -> bool {
use client::Client;
        let first_rev = engine.get_head_rev_id().token();
    inner: ChunkIter<'a>,
        a.lines_all().collect::<Vec<_>>());

trait StringArrayEq<Rhs: ?Sized = Self> {
        let mut result = Cow::from("");

        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
    }
        ");
    ///
    pub(crate) fn record(&self, sample: Sample) {
            }
    /// Imagine a "union string" that contained all the characters ever
#[inline]
        self.revs.iter().enumerate().rev()
}
            x.next_occurrence(text, reverse, wrapped, &self.selection)
    (1, 0)
            Assert(0, "adfc".to_owned()),
            "text": &l_str,
    #[cfg(feature = "benchmarks")]
#[inline]
            }

        }
mod tests {
    /// Toggles a caret at the given offset.

        let mut revs = basic_insert_ops(inserts_1, 1);
/// Creates a duration sample that measures how long the closure took to execute.
    None,
            'e' => SampleEventType::AsyncEnd,
    let mut s = Subset::new(head_len);
            DeltaElement::Copy(ref start, ref end) => {
                            Cursor::new(breaks, offset));
        // ensure that when the samples are sorted by time they come out in a
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        let b = a.slice(2, 4);

        self.rev_id_counter += 1;
        &self.selection
use find::Find;
                    if !inserts.is_empty() {
                if s.ends_with('\n') {
    fn to_payload(value: &'static str) -> TracePayloadT {
        in_base_units
        // the smallest values with which it still fails:
    /// This uniquely represents the identity of this revision and it stays
// You may obtain a copy of the License at
        trace.instant("1", &["test"]);

                } else {
        // only one of the deletes was gc'd, the other should still be in effect
            black_box(trace.block_payload(
    fn compute_transforms_1() {

            'f' => SampleEventType::FlowEnd,
    }

    #[test]
            },
}
        for _ in 0..line_len {
mod tests {
    inner: ChunkIter<'a>,
                            let line = self.render_line(client, styles, text,

    }
            let inserted = inserts.inserted_subset();
        }
        client.def_style(&style.to_json(ix));
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                    }
        assert_eq!(trace.get_samples_count(), 5);
        }
        self.deletes_from_union = new_deletes_from_union;
    fn prev(s: &String, offset: usize) -> Option<usize> {
///
            'b' => SampleEventType::AsyncStart,
        } else {
    #[derive(Debug)]
    {
    fn build_delta_2() -> Delta<RopeInfo> {
        let a = Rope::from("\n");
                        undone_groups = Cow::Owned(new_undone);
            .map(|pos| pos + 1)
    }
    // and partly because you need to retain more undo history, to supply input to the
        let a = Rope::from("a\nb\nc");
        }
}
    }
    fn gc_6() {
    impl MergeTestState {


            let mut sample = self.sample.take().unwrap();
    /// Time complexity: O(log n)
/// Creates a duration sample that measures how long the closure took to execute.
        assert_eq!(output, String::from(engine.get_head()));
            find.update_highlights(text, delta);
                return false;

        let selection = SelRegion::new(0, text.len()).into();
    TRACE.instant(name, categories);
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    fn consume(self) -> (Option<String>, Option<i32>) {
    /// the frontend.
        // We add selection after find because we want it to be preferred if the
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    fn next(&mut self) -> Option<u8> {
        self.replace_changed = true;
// distributed under the License is distributed on an "AS IS" BASIS,
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// inserted, including the ones that were later deleted, in the locations
                        }
    }
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        let styles = self.render_styles(client, styles, start_pos, pos,
        // +2 for exe & thread name

            },
    #[serde(default = "initial_revision_counter", skip_serializing)]

        b.push(self);
        };
pub type RopeDelta = Delta<RopeInfo>;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
                   style_spans: &Spans<Style>, line_num: usize) -> Value
/// A size, in pixel units (not display pixels).
        plan.request_lines(first_line, last_line);

    #[bench]

/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        if self.len() <= MAX_LEAF {
                    if seg.validity == line_cache_shadow::ALL_VALID {
            tid: tid,
                    return Some(result);
        assert_eq!(2, expand_by.len());
                }
        }).collect();
            Merge(0,2),
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
                len += 1;
        }
            // These two will be different without using session IDs
    where S: Into<StrCow>, C: Into<CategoriesT>
        };

        assert!(r == a_rope.clone() + b_rope.clone());
    fn arr_eq(&self, other: &Rhs) -> bool;

                    sel.add_region(region);

            offset -= 1;

        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            // about what wrapped.
        if self.len() <= MAX_LEAF {
    /// the pid or the tid depends on the name of the event
        assert_eq!(rope.offset_of_line(0), 0);
        ];
    fn do_cancel(&mut self, text: &Rope) {
        self.lc_shadow = b.build();
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
/// that sorted would be prohibitively expensive.

        let offset = self.line_col_to_offset(text, line as usize, 0);
                        let mut word_cursor = WordCursor::new(text, region.max());
    pub fn default() -> Self {
                out.push(DeltaOp {
        LinesRaw {
                inserts: new_inserts,
/// # Returns
        offset
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);

use internal::find::FindStatus;
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
/// ```
/// some way.
///
        ");
    {
            offset = text.len();

            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let a_revs = basic_insert_ops(inserts.clone(), 1);
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
    /// the other doesn't make it re-appear.
}
//! An engine for handling edits (possibly from async sources) and undo. It

                            edit: Undo {
    }
                    linewrap::rewrap_width(breaks, text, width_cache,
                    let transformed_deletes = deletes.transform_expand(&s);
    #[test]
    All,
            Merge(1,0),
    /// The incrementing revision number counter for this session used for `RevId`s
                            deletes_bitxor.transform_shrink(&gc_dels)
    }
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
}
        let trace = Trace::enabled(Config::with_limit_count(10));
                    deletes: deletes.clone(),
/// # Performance
    /// The session ID used to create new `RevId`s for edits made on this device
        if !self.lc_shadow.needs_render(plan) { return; }
/// some way.
            'N' => SampleEventType::ObjectCreated,
        let script = vec![
        MergeTestState::new(2).run_script(&script[..]);
// Additional APIs custom to strings
    // How should we count "column"? Valid choices include:
/// conversions in both directions.
}
    inner: ChunkIter<'a>,
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        assert_eq!(snapshot[0].name, "process_name");
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    // even worth the code complexity.
        where S: Into<StrCow>, C: Into<CategoriesT>
        if !self.is_enabled() {
    pub fn line_of_offset(&self, offset: usize) -> usize {
}
            Assert(0, "adfc".to_owned()),
/// ```

    {
        }
                        }
        MergeTestState::new(4).run_script(&script[..]);
        assert_eq!(0, b.offset_of_line(0));
/// from multiple distributed sources (i.e. you want to sort the merged result
        let first = max(first, 0) as usize;
        where S: Into<StrCow>, C: Into<CategoriesT>
        /// The subset of the characters of the union string from after this

/// # Arguments
                },
            deletes: Subset::new(0),
        let mut cursor = Cursor::new(self, offset);

        let mut cur_len_utf16 = 0;

        ]);
    inner: LinesRaw<'a>
    #[test]
    }

    pub fn max_samples(&self) -> usize {
        // send updated find status only if there have been changes
        deletes_bitxor: Subset,
        Self {
/// See `trace_payload` for a more complete discussion.

    /// Sorting priority between processes/threads in the view.
    }
        }

            Drag(MouseAction { line, column, .. }) =>
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
        if !self.is_enabled() {
///
            deletes_from_union,
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);


        });
    #[test]
    ///
        // TODO: simplify this through the use of scopeguard crate
            duration_us: None,
                SelectionModifier::Add => {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
// Try to split at newline boundary (leaning left), if not, then split at codepoint


        let correct = parse_subset_list("
    // How should we count "column"? Valid choices include:
    #[serde(default = "initial_revision_counter", skip_serializing)]
        }
        assert_eq!(Some(0), a.prev_codepoint_offset(1));

    {
    #[cfg(feature = "benchmarks")]
                    }


                    let (start, end) = {
    #[test]
    #[cfg(feature = "benchmarks")]
    fn undo() {

/// bytes required to represent the codepoint.
                    if sel_end_ix > sel_start_ix {
        } else {
        impl From<RopeDelta_> for Delta<RopeInfo> {
        engine.gc(&to_undo);
        }
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced

    fn goto_line(&mut self, text: &Rope, line: u64) {
        let mut selection = Selection::new();
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        }
}
                            deletes_bitxor
}
#[must_use]
                CategoriesT::StaticArray(c)
    buffer_id: BufferId,
    pub fn get_head(&self) -> &Rope {
    /// For safety, this will panic if any revisions have already been added to the Engine.
                },
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
    }
    }
    }
        client.update_view(self.view_id, &params);
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
            let horiz = None;

                }
            for i in 0..count {
    }
                    self.do_gesture(text, line, column, GestureType::WordSelect)
    }

            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
/// Represents the current state of a document and all of its history
#[derive(Clone, Copy)]
                where E: serde::de::Error
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
}
    if x < min {
            SampleEventType::FlowStart => 's',
        let new_head_2 = engine.get_head_rev_id().token();
    fn rearrange_1() {

/// ```
    }
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,

// You may obtain a copy of the License at
                    text.slice_to_string(start, end)
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
#[derive(Clone, Copy)]
        while let Err(incomp) = prev_boundary {
        let text_with_inserts = text_inserts.apply(&text);
                            ops.push(self.build_update_op("skip", None, n_skip));
            Assert(0, "zacbd".to_owned()),
categories_from_constant_array!(0);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    pending_render: bool,
    // TODO: maybe refactor this API to take a toggle set
    pub fn with_limit_count(limit: usize) -> Self {
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
/// configured via the `dict_payload` or `json_payload` features (there is an
    edit: Contents,
                    }
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
}
    use engine::*;
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
// Additional APIs custom to strings
            'b' => SampleEventType::AsyncStart,
///
                self.select_line(text, offset, line, false),
        let script = vec![
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        let result = closure();
mod tests {
categories_from_constant_array!(1);
        let first_rev = engine.get_head_rev_id().token();
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
    pub fn slice(&self, start: usize, end: usize) -> Rope {

/// Stores the relevant data about a sample for later serialization.
        // since one of the two deletes was gc'd this should re-do the one that wasn't
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
        }
    fn line_of_offset_small() {

        for i in 1..(s1.len() * 3) {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());

        Rope::from_str(s.as_ref()).unwrap()
use std::string::ParseError;
        Self {
// Low level functions
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        ];
///
    }
                selection.add_region(occurrence);
                match *other {

        // Rust is unlikely to break the property that this hash is strongly collision-resistant
            Assert(0, "ab".to_owned()),
    /// Find the first revision that could be affected by toggling a set of undo groups
        let trace = Trace::enabled(Config::with_limit_count(10));
            }
        let trace = Trace::enabled(Config::with_limit_count(10));


    pub pid: u64,
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
                    if s.ends_with('\r') {
            if cur_len_utf16 >= in_measured_units {
pub fn samples_len() -> usize {
    /// Determines the current number of find results and search parameters to send them to
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
                        };
    }
    #[bench]

        let mut revs_2 = basic_insert_ops(inserts_2, 4);

impl StringArrayEq<[&'static str]> for Vec<String> {
                                toggled_groups: &toggled_groups - gc_groups,
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            let common = find_common(a_to_merge, b_to_merge);
    #[test]

    assert!(!a.is_empty() && !b.is_empty());
        let first_rev = &self.revs.first().unwrap();
        ");
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
        self.iter_chunks(0, self.len())
        match self.breaks {
    fn from(r: Rope) -> String {
extern crate libc;
    }
        if offset == s.len() {
    use engine::*;
    /// If the cursor is at the end of the rope, returns the empty string.
        let trace = Trace::enabled(Config::with_limit_count(10));
/// ```
            Merge(0,2), Merge(1, 2),
        //} else {
            self.wrap_col = WrapWidth::Bytes(wrap_col);
        }
    current: Option<&'a str>,
        if let Some(breaks) = self.breaks.as_mut() {
    // TODO: replace this with a version of `lines` that accepts a range
        if self.find.is_empty() {

        self.undone_groups = groups;
        ---#--
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
    TRACE.instant(name, categories);
                      delta: &Delta<RopeInfo>, client: &Client,
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            Assert(1, "acb".to_owned()),
        }
                             client: &Client, style_spans: &Spans<Style>)
            Cancel => self.do_cancel(text),
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
/// could trigger incorrect behavior if they collide, so u64 is safe.
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
#[derive(Copy, Clone)]
    }
    fn prev(s: &String, offset: usize) -> Option<usize> {
        assert_eq!(trace.is_enabled(), true);
        let initial_rev = engine.get_head_rev_id().token();
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        hasher.finish()
        };
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                    new_deletes = new_deletes.transform_expand(inserts);
        use self::MergeTestOp::*;
    /// if it is non-empty. It needs to be a separate commit rather than just
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),

        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                        let mut rendered_lines = Vec::new();
                rev_id: basic_rev(i),
            'D' => SampleEventType::ObjectDestroyed,
        let utf8_offset = 13;
                        .map(DeltaElement::from).collect(),
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
        fn new(count: usize) -> MergeTestState {
                }
    for rev in revs.iter().rev() {
    }
            GestureType::MultiLineSelect =>
/// # Returns
    move_delta.apply(tombstones)
}
        assert_eq!(snapshot[5].name, "z");
                    ops.push(self.build_update_op("invalidate", None, seg.n));

/// });
        base_subset.is_some() && base_subset == other_subset
        }

                self.set_selection(text, SelRegion::caret(offset));
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
impl Eq for CategoriesT {}
    }
    /// The revision history of the document
}
        // todo: the correct Find instance needs to be updated with the new parameters
        let mut selection = match multi_select {
        // insert character at end, when this test was added, it panic'd here
        // rebase the deletion to be after the inserts instead of directly on the head union
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let chars_left = (edits-max_undos)+1;
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        while !leaf.is_char_boundary(end) {
use std::mem::size_of;
        assert!(a != b);
    #[test]
                break;

        self.lc_shadow = b.build();
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        while offset < l.len() && !l.is_char_boundary(offset) {
    /// Offset of the point where the drag started.

            replace_changed: false,
                    let full_path = exe_name.into_os_string();
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        assert_eq!(snapshot[8].name, "x");
        // TODO(vlovich): optimize this path to use the Complete event type
        // We somewhat arbitrarily choose the last region for setting the old-style
    }
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    // A colliding session will break merge invariants and the document will start crashing Xi.
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
            if let Some(replace) = self.get_replace() {
            enabled: AtomicBool::new(false),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    // A colliding session will break merge invariants and the document will start crashing Xi.
    text: Rope,
    // even worth the code complexity.
/// record it.
            base_len: usize
        let mut b = TreeBuilder::new();
        } else {
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));

            Merge(1,2),
        let delta = Delta::synthesize(&self.tombstones,
    pub fn get_caret_offset(&self) -> Option<usize> {
        if !self.is_enabled() {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        if self.current.is_none() {
            Merge(3,1), Merge(5,3),
            while !s.is_char_boundary(splitpoint) {
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));

    #[test]
            Assert(0, "acpbdj".to_owned()),
        let trace = Trace::enabled(Config::default());


        assert_eq!(1, res);
            name: name.into(),
        let tid = all_samples.front()
    samples: Mutex<FixedLifoDeque<Sample>>,
    priority: usize,
        CategoriesT::DynamicArray(c)
    }
impl<'de> serde::Deserialize<'de> for CategoriesT {
    ObjectSnapshot,
/// an argument.
}
    }
/// monotonically increasing single global integer (when tracing) per creation
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            // if using breaks update cursor
                              to_payload("test_get_samples"));

        engine.gc(&gc);
                peers.push(peer);
    }


            rebased_deletes_from_union.union(to_delete)
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        }
        assert_eq!(snapshot[3].name, "a");
            if !selection.is_empty() {
impl<'a> Iterator for Lines<'a> {
    }
    }
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
        }
    // TODO: switch to a persistent Set representation to avoid O(n) copying
use interval::Interval;
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    }
}
        fn new(count: usize) -> MergeTestState {
        let mut soln = String::from("h");
        engine.undo([1].iter().cloned().collect());
    }


        assert!(a == a2);
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            Assert(0, "acrbd".to_owned()),
        let trace = Trace::enabled(Config::with_limit_count(11));
}
        }
        result
                    None
        let mut to_undo = BTreeSet::new();
    #[test]
                    }
                priority, undo_group, deletes,

    session_id: SessionId,
            ix = iv.end() as isize;

    #[test]
            self.set_selection(text, sel);
                    }

        self.enabled.store(false, AtomicOrdering::Relaxed);
///
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
            GestureType::RangeSelect => self.select_range(text, offset),
                                                        soft_breaks.as_mut(),
                        hls.push((sel_start_ix, sel_end_ix));


                            (inserts, deletes)


}
    fn delta_rev_head_2() {
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
                    "something", &["benchmark"], || {},
    #[test]
            }
            },

            Merge(0,1),
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
        assert!(empty == empty);
    /// When was the sample started.

                let mut el = serializer.serialize_tuple_variant("DeltaElement",
}
                if groups.contains(undo_group) {
/// typing a paragraph) will be combined into a single segment in a transform
        assert_eq!(snapshot[0].name, "process_name");
        }
                }
        }
    }
                } else {
    /// The thread the sample was captured on.  Omitted for Metadata events that
    }
                            }
        // additional tests for line indexing
            self.current = None;
        let mut pos = self.pos();
            } else {
        }, to_payload("test_get_samples_nested_trace"));
        engine.undo([3].iter().cloned().collect());
        assert_eq!(utf16_units, 20);
        assert_eq!(trace.get_samples_count(), 0);
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        match *self {
    }
    }
    ///
        }
            GotoLine { line } => self.goto_line(text, line),
    }
    /// This method is responsible for updating the cursors, and also for
        let utf8_offset = 13;
        }
            // TODO: finer grain invalidation for the line wrapping, needs info

        // position after 'f' in four
            if self.fragment.is_empty() {

    }
        self.find_changed = FindStatusChange::None;
        let a = Rope::from("a\nb\nc");
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
    /// recomputing line wraps.
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
    All,

    let mut last_priority: Option<usize> = None;
/// With `json_payload` feature:
    #[inline]
        assert_tokens(&rope, &[
        if let Some(edit) = contents {
    }
    #[serde(skip_serializing_if = "Option::is_none")]

    }
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            // Do it the other way on the copy
                        s = &s[..s.len() - 1];
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
            // with offset == s.len(), but be defensive.
            let sel = {

    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
                }

                        DeltaElement::Copy(start, end),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
}
#[cfg(feature = "json_payload")]


            Merge(1,2),
            Assert(1, "acb".to_owned()),
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
    {
        if self.is_enabled() {
    #[test]
        where S: Into<StrCow>, C: Into<CategoriesT>

            inserts = inserts.transform_expand(trans_inserts, after);
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            Some(right_str)
 //additional cursor features
                self.select_word(text, offset, true)

    }

    fn gc_scenario(edits: usize, max_undos: usize) {
#[cfg(feature = "json_payload")]
        struct CategoriesTVisitor;
    // this should have the same behavior, but worse performance
            edit: Undo { toggled_groups, deletes_bitxor }
/// as opposed to thousands of revisions.
    pub fn slice(&self, start: usize, end: usize) -> Rope {
            trace.record(sample);
        delta.apply(&self.text)
                el.serialize_field(start)?;
        d
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
                _ => { }
        if self.is_enabled() {
            if let Some(ref thread_name) = sample.thread_name {
    /// If the cursor is at the end of the rope, returns the empty string.
            Assert(1, "cb".to_owned()),
    }
                    s = inserts.transform_union(&s);

///
    AsyncEnd,

            }
                        }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    fn to_payload(value: &'static str) -> TracePayloadT {

            update["lines"] = json!(lines);
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
    FlowEnd,
            }),
    }
        cursor.next_grapheme()

            }
        engine.edit_rev(1, 3, new_head_2, d3);
// you may not use this file except in compliance with the License.
        self.utf16_size += other.utf16_size;
        assert_eq!(trace.is_enabled(), true);
        // interior of last line should be last line
            self.set_selection(text, selection);
/// fn something_expensive() -> u32 {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            MetadataType::ProcessLabels {..} => (None, None)
                    if let Some(last_selection) = self.selection.last() {
    #[test]
    }
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
    #[serde(skip_serializing_if = "Option::is_none")]
        let (mut l, mut offset) = self.get_leaf()?;
/// ```
        }
    /// For safety, this will panic if any revisions have already been added to the Engine.
        --#--
            selection.delete_range(offset, offset, true);
    }

    }
        engine.undo([1].iter().cloned().collect());
                name, categories, None, start, end - start));

    #[test]
            //self.cursor.set(self.end);
    }
    fn bench_get_tid(b: &mut Bencher) {
        }
        -##-
        // a, b, y, z, c, x
// you may not use this file except in compliance with the License.
            AssertMaxUndoSoFar(0,3),
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
            deletes = deletes.transform_expand(&new_trans_inserts);
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
            }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
//! CRDT implementation techniques, because all operations are serialized in

        let a = Rope::from("a\nb\nc");
    }
                    text.slice_to_string(region.min(), region.max())
        self.rev_id_counter += 1;
/// beginning.
    }
    pub fn with_limit_count(limit: usize) -> Self {
            timestamp_us: ns_to_us(time::precise_time_ns()),
        }
    pub fn undo(&mut self, groups: BTreeSet<usize>) {

    FlowEnd,
    }
        Self {
        let empty = Rope::from("");
                metadata_name: None,
                    })
impl TreeBuilder<RopeInfo> {
        let mut cursor = Cursor::new(self, offset);
        Lines {
    base_sel: Selection,
    CompleteDuration,
    {
        for r in &self.revs[ix + 1..] {
            samples: Mutex::new(FixedLifoDeque::new())
    /// how many times it has been deleted, so if a character is deleted twice
/// For example, take a string that starts with a 0xC2 byte.

    #[test]
        let mut selection = self.selection.clone();
    /// of individual region movements become carets.
/// For example, take a string that starts with a 0xC2 byte.
        info.lines
                splitpoint -= 1;
{
/// fn something_else_expensive(value: u32) {

        }
    }
//
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    fn len(&self) -> usize {
        let start = self.line_col_to_offset(text, line, 0);
#[derive(Clone, Copy)]
        }
    use test::Bencher;
            {
            duration_us: None,
    /// Callers are expected to validate their input.
        }
            }
                peers.push(peer);
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
            write!(f, "{}", String::from(self))
                                            closure: F, payload: P) -> R
        let mut sel = Selection::new();
    session: SessionId,
    fn from_chrome_id(symbol: char) -> Self {
    }

    fn merge_priorities() {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
                    let e = &mut self.peers[ei];
    /// If the cursor is at the end of the rope, returns the empty string.


            AddSelectionBelow =>
                                           client, iv, new_len, px),
        //};


                    s = inserts.transform_union(&s);
    fn test_get_samples_nested_trace() {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
use std::fmt;
    fn append_large() {

//
use movement::{Movement, region_movement, selection_movement};
            "something", &["benchmark"],
        let mut to_undo = BTreeSet::new();
            SampleEventType::ObjectSnapshot => 'O',
/// Create a `Rope` from a `String`:
fn find_leaf_split_for_merge(s: &str) -> usize {
        RevId { session1: 1, session2: 0, num: i as u32 }


/// # Returns
            trace.instant("test_samples_pulse", &["test"]);
        if let Some(ref mut trace) = self.trace {
                WrapWidth::None => (),
        priority: usize,
            return self.revs.len();
        trace.closure_payload("x", &["test"], || {
        self.view_id

        let base_sel = Selection::new();
    #[test]
        let utf8_offset = 19;
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// # Arguments
        }
//! info.
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        let b = a.slice(2, 4);
        json!({"test": value})
    fn can_fragment() -> bool {
            selection: SelRegion::caret(0).into(),
    #[bench]
                self.run_op(op);


        assert!(end <= leaf.len());
        }
/// revisions not shared by both sides.
#[derive(Clone, Copy)]
                        let (inserts, deletes) = if gc_dels.is_empty() {

            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            for (i,rev) in self.revs.iter().enumerate().rev() {
            's' => SampleEventType::FlowStart,
    // ============== Merge script tests
            inserts: Subset::new(0),
        }

    #[bench]
        assert_eq!(None, b.next_codepoint_offset(9));
                self.do_set_replace(chars, preserve_case),
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        enum RopeDeltaElement_ {
    },
        assert!(r == a_rope.clone() + b_rope.clone());
        let a_rope = Rope::from(&a);
                    if s.ends_with('\r') {
            let b = s.as_bytes()[offset];
/// let b = Rope::from("world");
                            warn!("Failed to get string representation: {:?}", e);
                text.offset_of_line(line)
    }
//     http://www.apache.org/licenses/LICENSE-2.0
        for _ in 0..line_len {
        let guard = Self {
        undo_group: usize,

        assert_eq!(trace.get_samples_count(), 0);
    }
        self.deletes_from_union = deletes_from_union;
    {
        ");
/// Usage of static strings is encouraged for best performance to avoid copies.
    }
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
                }
    }
        View {
    }
/// rather than just this processe's samples).
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    /// method to be fast even when the selection is large.

    }
/// Creates a duration sample that measures how long the closure took to execute.

            self.breaks = None
    find: Vec<Find>,
        self.enabled.store(false, AtomicOrdering::Relaxed);
                    self.do_gesture(text, line, column, GestureType::LineSelect)
        trace.instant("5", &["test"]);
            let max_undo = self.max_undo_group_id();
            let horiz = None;
            lines: 0,

extern crate libc;
        -#-
    ///
use std::fmt;
    }

    /// Get previous codepoint before cursor position, and advance cursor backwards.

                        first_sample_timestamp,
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        let new_pos = self.pos() + (end - offset);
                payload: payload,
    /// this returns the offset of the end of the rope. Arguments higher
                    }

        // set last selection or word under current cursor as search query

}
            write!(f, "Rope({:?})", String::from(self))
        let a = Rope::from("");

            utf16_count += 1;
        let tombstones_b = Rope::from("a");
    }
    fn bench_trace_closure(b: &mut Bencher) {
    #[test]
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            let first_rev = engine.get_head_rev_id().token();
        let tid = all_samples.front()
        }
        // interior of last line should be last line
            Merge(0,1), // the merge from the whiteboard scan

        if let Some(breaks) = self.breaks.as_mut() {
        }
/// See `trace_closure` for how the closure works and `trace_payload` for a
    num: u32,
    /// If the cursor is at the end of the leaf, advances to the next leaf.
}
        let end = time::precise_time_ns();

#[inline]
        assert_eq!(rope.line_of_offset(0), 0);
        let utf8_offset = 13;
        b.iter(|| {
        ];
/// # Arguments
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        where D: serde::Deserializer<'de>
        assert!(r != a_rope);
            rendered_styles.push(0);
        self.set_selection(text, new_sel);
impl Hash for Sample {
///
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
#[inline]
}
}
            self.push_leaf(s[..splitpoint].to_owned());
            Assert(1, "ab".to_owned()),
    fragment: &'a str
/// # Arguments

                }
        // insert character at end, when this test was added, it panic'd here
        // Note: for committing plugin edits, we probably want to know the priority
mod sys_tid;
                    text.slice_to_string(region.min(), region.max())
        for &(trans_priority, ref trans_inserts) in &expand_by {
    /// Returns the byte offset corresponding to the line `line`.

pub enum CategoriesT {
        rope.line_of_offset(20);
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
}
        base_subset.is_some() && base_subset == other_subset
        assert_eq!(0, a.lines_raw_all().count());
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    fn bench_trace_block_payload(b: &mut Bencher) {
}
        self.view_id
            FindNext { wrap_around, allow_same, modify_selection } =>

                        gc_dels = new_gc_dels;
#[inline]
    {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
    fn from(r: Rope) -> String {
            lines: count_newlines(s),
    /// method to be fast even when the selection is large.

        engine.gc(&gc);
        /// Just the `symmetric_difference` (XOR) of the two sets.
///
                sel
    session1: u64,

        }

            'D' => SampleEventType::ObjectDestroyed,
    match std::env::current_exe() {
                self.set(pos);
}
#[inline]
    }

    /// The empty string will yield a single empty slice. In all other cases, the
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
pub type Rope = Node<RopeInfo>;
        assert_eq!(None, a.prev_grapheme_offset(0));
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
            args: Some(SampleArgs {
        let mut engine = Engine::new(Rope::from(TEST_STR));
                        first_sample_timestamp,
    /// If `modify` is `true`, the selections are modified, otherwise the results
        let script = vec![
        let first_rev = engine.get_head_rev_id().token();
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        } else {
                        },
/// bytes required to represent the codepoint.
}
            new_deletes = new_deletes.transform_expand(&new_inserts);
        let mut soln = String::from("h");
            },
    }
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
        loop {
            duration_us: None,
    fn do_cancel(&mut self, text: &Rope) {
        self.samples.lock().unwrap().len()
                SelectionModifier::Set => self.set_selection(text, occ),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

    #[test]

categories_from_constant_array!(4);
            None
/// # Arguments

    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,

}
        &self.text
        impl<'de> Visitor<'de> for CategoriesTVisitor {
        while offset < l.len() && !l.is_char_boundary(offset) {
            //} else {
// Unless required by applicable law or agreed to in writing, software
        let snapshot = trace.samples_cloned_unsorted();
    }
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    ///
            // trans-expand other by expanded so they have the same context
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    #[test]
        d_builder.build()
        // even though the actual sampling order (from timestamp of
            Assert(0, "zcpbdj".to_owned()),
///
        }

use rope::{Rope, RopeInfo};
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
    /// Find parameters and number of matches changed.
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
        }
                        for line_num in start_line..end_line {
        let mut engine = Engine::new(Rope::from(TEST_STR));

        client.update_view(self.view_id, &params);
    #[test]
    }
pub struct BaseMetric(());
        ];
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
            priority: 0,
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
            name: name.into(),
        let utf8_offset = 9;
        }

                el.serialize_field(start)?;
        self.set_dirty(text);
{

/// Base unit is utf8 code unit.
    ObjectDestroyed,


                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        self.deletes_from_union = new_deletes_from_union;
    /// inserted, including the ones that were later deleted, in the locations
    /// terminating newline.
            let inserted = inserts.inserted_subset();
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
                        let mut line_cursor = Cursor::new(text, offset);
        b.iter(|| black_box(sys_tid::current_tid()));
    use serde_test::{Token, assert_tokens};
            }
    /// The semantics are intended to match `str::lines()`.
        use self::MergeTestOp::*;

        // todo: for now only a single search query is supported however in the future
    fn arr_eq(&self, other: &Vec<String>) -> bool {
    }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
    /// should be as unlikely to collide as two random u64s.
            Merge(0,1),
        ");
            true => self.selection.clone(),

        match rev.edit {
    }
        ];
        }
    }
    #[inline]
        b.add_span(height, 0, 0);
    a_ids.intersection(&b_ids).cloned().collect()
            GestureType::MultiWordSelect =>
/// Boundary is atomic and determined by codepoint boundary.
    }
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
    // TODO make this faster somehow?
        // +2 for exe & thread name.
}

impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
        }
    }

                let mut sel = Selection::new();

        for seg in self.lc_shadow.iter_with_plan(plan) {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
}
    fn line_of_offset_small() {
    fn eq_med() {
}
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    /// Returns a slice of the string from the byte range [`start`..`end`).
                inserts: new_inserts,
    }
                    })
    }
            MetadataType::ProcessName {name} => (Some(name), None),
}

// limitations under the License.
/// first can make it ~1.7x slower than a regular trace.
    }
        let b_revs = basic_insert_ops(inserts, 2);
    }
        // likely be improved.
#[inline]
            SampleGuard::new(&self, name, categories, None)
            ix = sel_end as isize;
                    };
        let closest_occurrence = self.find.iter().flat_map(|x|
    }
        let mut result = json!({
    fn gc_scenario(edits: usize, max_undos: usize) {
/// Returns the operations in `revs` that don't have their `rev_id` in
            a.push('a');
    }
        let guard = Self {
    #[cfg(feature = "benchmarks")]
    {
    #[serde(rename = "sort_index")]

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            Assert(1, "pb".to_owned()),

    TRACE.instant(name, categories);
                // TODO could probably be more efficient by avoiding shuffling from head every time
                    }
use std::borrow::Cow;
        ---#-
    fn arr_eq(&self, other: &Rhs) -> bool;
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
#[cfg(feature = "benchmarks")]
#[cfg(feature = "dict_payload")]
        }
        self.lc_shadow = b.build();
        assert_eq!(None, a.next_grapheme_offset(17));
        if self.find.is_empty() {

    fn append_large() {
    }
#[cfg(feature = "benchmarks")]
    fn merge_associative() {
        let head2 = engine.get_head_rev_id().token();
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
///
            // On the next step we want things in expand_by to have op in the context
                let mut sel = Selection::new();
            Assert(0, "zcpbdj".to_owned()),
}
        engine.edit_rev(1, 2, initial_rev, d1.clone());
}
    fn rearrange_1() {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    }
        }).collect()
// You may obtain a copy of the License at
impl StringArrayEq<[&'static str]> for Vec<String> {
    }

        true

    fn test_cross_process_samples() {

#[derive(Clone, Copy)]
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {



            Gesture { line, col, ty } =>
            client.scroll_to(self.view_id, line, col);
        if self.is_enabled() {
            }


    for rev in revs.iter().rev() {
    }

    /// wherever there's a non-zero-count segment in `deletes_from_union`.

        self.set_dirty(text);
        let initial_rev = engine.get_head_rev_id().token();
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
use interval::Interval;
        }, to_payload("test_get_samples_nested_trace"));
        }
        }

    /// We attempt to reduce duplicate renders by setting a small timeout
            let next_chunk = self.inner.next();
/// }
    }

    ///
// you may not use this file except in compliance with the License.
        let trace = Trace::enabled(Config::with_limit_count(10));
            replace_changed: false,

    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {

                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
}
    /// Find parameters and number of matches changed.
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
}
    #[serde(deserialize_with = "deserialize_event_type")]

                            if !inserts.is_empty() {
    /// Start of the region selected when drag was started (region is
        // todo: for now only a single search query is supported however in the future
        assert_eq!(2, expand_by.len());
                }
        let first_rev = engine.get_head_rev_id().token();

            prev_boundary = c.prev_boundary(&l, leaf_offset);

    {
        match self.selection.len() {
        /// revision that were added by this revision.
            inserts: Subset::new(0),

        assert_eq!(snapshot[6].name, "z");
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
    pub fn new_disabled() -> Self {

            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
        let mut cursor = Cursor::new(self, offset);
            new_deletes = new_deletes.transform_expand(&new_inserts);
                },
                    sel.add_region(region);

            text: Rope::default(),
        let mut result = json!({
    /// the same even if it is rebased or merged between devices.

    fn bench_trace_instant(b: &mut Bencher) {
        assert_eq!(trace.get_samples_count(), 0);
            trace.instant("something", &[]);
/// first can make it ~1.7x slower than a regular trace.

                            max_undo_so_far: rev.max_undo_so_far,
        -#-
        }
    }
                        Err(e) => {
    fn eq(&self, other: &Sample) -> bool {
    /// Note: unlike movement based selection, this does not scroll.

    where S: serde::Serializer {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            Assert(1, "ab".to_owned()),
            MetadataType::ProcessName {name} => (Some(name), None),
            buffer_id: buffer_id,
            None => text.line_of_offset(offset)
        }
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
/// on program launch.
        }
    #[test]
                            (inserts.transform_shrink(&gc_dels),

/// Indicates what changed in the find state.
            match exe_name.clone().file_name() {
/// 1. Samples that span sections of code may be inserted on end instead of
            _ => None
        loop {
            AssertAll("ac".to_owned()),

                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
}
    /// An iterator over the lines of a rope.
    #[test]

            self.categories == other.categories &&
        self.join(",").serialize(serializer)
                return false;

// distributed under the License is distributed on an "AS IS" BASIS,
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
}
use std::string::ParseError;
use styles::{Style, ThemeStyleMap};
            DeltaElement::Copy(ref start, ref end) => {
        let a = Rope::from("a");
    /// The `pristine` argument indicates whether or not the buffer has
        let subset_str = format!("{:#?}", expand_by[0].1);
    }
    } else {
            }
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
                        &mut rest[bi - ai - 1]
fn clamp(x: usize, min: usize, max: usize) -> usize {
#[derive(Clone, Copy)]
        expand_by = next_expand_by;
    pub fn with_limit_bytes(size: usize) -> Self {
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    use engine::*;
}
/// supported as an optimization when only one reference exists, making the
use tabs::{ViewId, BufferId};
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    }
    pub fn new_instant<S, C>(name: S, categories: C,
        assert_eq!(utf16_units, 9);
            offset,
        assert_eq!(utf8_offset, 13);
        next_boundary.unwrap_or(None)
                    ops.push(self.build_update_op("invalidate", None, seg.n));
    fn test_samples_pulse() {
                Rope::from(s1.clone()),
                        }
            }
            r = op.inserts.apply(&r);
// Copyright 2018 The xi-editor Authors.
            utf16_count += 1;
//! text.
            wrap_col: WrapWidth::None,
    Width(f64),
categories_from_constant_array!(5);
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
            // Go crazy
        }

            }
/// * `categories` - A static array of static strings that tags the samples in
                        word_cursor.select_word()
            .map_or(0, |ref s| s.timestamp_us);
    #[cfg(feature = "benchmarks")]
                            deletes_bitxor.transform_shrink(&gc_dels)
    /// if it is non-empty. It needs to be a separate commit rather than just
    fn to_payload(value: &'static str) -> TracePayloadT {
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        let mut a = String::new();

    fn is_boundary(s: &String, offset: usize) -> bool {
    pub fn set_session_id(&mut self, session: SessionId) {
        self.find_changed = FindStatusChange::None;
                            warn!("Failed to get string representation: {:?}", e);
    #[serde(skip_serializing_if = "Option::is_none")]
            Assert(1, "arpbj".to_owned()),
//! a previously committed version of the text rather than the current text,
            event_type: SampleEventType::CompleteDuration,
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
    new_without_default_derive,
}

        assert_eq!(snapshot[0].name, "process_name");
                    if sel_end_ix > sel_start_ix {
        b.push(self);
        Self {
                    rev_id: rev.rev_id,
                for &region in rest {
                self.add_selection_by_movement(text, Movement::Down),
///
}
    fn test_samples_closure() {
        }
        self.set_selection_raw(text, selection);
            rendered_styles.push(0);
            match c.edit {


    #[serde(skip_serializing_if = "Option::is_none")]
    offset: usize,
            // I think it's a precondition that this will never be called

        for &(sel_start, sel_end) in hls {
        result
{
}

// See the License for the specific language governing permissions and
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
mod tests {
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
            Assert(2, "ab".to_owned()),

        }
        // TODO(vlovich): optimize this path to use the Complete event type
    }
                undo_group,
        engine.edit_rev(1, 2, initial_rev, d1.clone());

            replace: None,
            SampleEventType::AsyncEnd => 'e',
    ThreadName { name: String },
/// revisions on top of the revisions represented by `expand_by`.
    All,
                (!region.is_upstream() && c == start_pos) ||
            Assert(1, "pb".to_owned()),
    fn merge_session_priorities() {
            // recurse at most once; this doesn't feel great but I wrote myself into a
            rendered_styles.push((iv.start() as isize) - ix);
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
                }
                              to_payload("test_get_samples"));
    }
                self.select_word(text, offset, false),
        let start = self.line_col_to_offset(text, line, 0);
            Assert(0, "acbd".to_owned()),
    #[allow(dead_code)]
        ];
    }
                    }
        let deletes_from_union = Subset::new(0);
        self.scroll_to = Some(end);
// Copyright 2016 The xi-editor Authors.
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
                peers.push(peer);
                    self.fragment = "";
        self.enabled.load(AtomicOrdering::Relaxed)
        let mut cur_len_utf8 = 0;
        trace.instant("5", &["test"]);
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);

        where S: Serializer
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
        }
        self.push_str(&other[start..end]);
            for rev in &self.revs {

    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
            Sample::new_instant("remote pid", &[], None)];
    pub fn new_duration_marker<S, C>(name: S,
        assert_eq!(r.len(), r.offset_of_line(2));
            DeltaElement::Copy(ref start, ref end) => {
        }

    /// how many times it has been deleted, so if a character is deleted twice
        for i in 0..5_000 {

                         start: usize, end: usize, sel: &[(usize, usize)],

                    }
        let after_first_edit = engine.get_head_rev_id().token();
        }
        self.revs.last().unwrap().rev_id
}
        assert_eq!(rope.line_of_offset(3), 1);
                    // We're super-aggressive about dropping these; after gc, the history
            Some(offset + len_utf8_from_first_byte(b))
        }
            }
                        });
                self.push_leaf(s.to_owned());
                // merge logic.
/// * `categories` - A static array of static strings that tags the samples in
        use serde::de::Visitor;
            self.collapse_selections(text);
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
use std::str::FromStr;
            let deletes = Subset::new(inserts.len());
    fn consume(self) -> (Option<String>, Option<i32>) {
        let script = vec![
            .map(|(i, _)| i)
                priority: new_priority,
                    }
    }
        MergeTestState::new(3).run_script(&script[..]);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        for rev in self.revs[rev_index..].iter().rev() {

    fn next(s: &String, offset: usize) -> Option<usize> {

    /// Constructs an instantaneous sample.
        // 1 for exe name & 1 for the thread name
    #[serde(deserialize_with = "deserialize_event_type")]
    }
            prev_boundary = c.prev_boundary(&l, leaf_offset);
/// # Arguments
/// Tracing is disabled initially on program launch.
            'f' => SampleEventType::FlowEnd,
    {
            pos
            samples: Mutex::new(FixedLifoDeque::new())
//
        assert_eq!(snapshot[1].name, "thread_name");
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

            trace.closure_payload("y", &["test"], || {
    pub(crate) fn get_replace(&self) -> Option<Replace> {
            Merge(1,0),
            pending_render: false,
    use delta::{Builder, Delta};
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
}
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
        MergeTestState::new(6).run_script(&script[..]);
            Merge(0,1),
}
        if self.find.is_empty() {
}
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            pid: sys_pid::current_pid(),
    }
        assert!(a != empty);
                    };
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    type Item = Cow<'a, str>;
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
            offset -= 1;
                metadata_name: None,
        use self::MergeTestOp::*;
        // the smallest values with which it still fails:
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.

        where S: Into<StrCow>, C: Into<CategoriesT>
                    }
            // with offset == 0, but be defensive.
        #[derive(Serialize, Deserialize)]
    TRACE.get_samples_count()
        self.subseq(iv)
        ##
            rev_id: self.next_rev_id(),
use std::cmp::{min,max};
// Licensed under the Apache License, Version 2.0 (the "License");
            }
        let mut b = String::new();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            if !s.is_empty() {
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
        let mut engine = Engine::empty();
            match seg.tactic {
        // original values this test was created/found with in the UI:
        self.find_changed = FindStatusChange::All;
        let mut selection = Selection::new();
        let result = closure();

    }
    Instant,

        let r = Rope::from(&a[..MAX_LEAF]);
                            None
        self.set(new_pos);
        samples[0].pid = 1;
                        undone_groups = Cow::Owned(new_undone);
    #[test]
    fn prev(s: &String, offset: usize) -> Option<usize> {
use xi_rope::tree::Cursor;
    }
        assert_eq!(2, a.line_of_offset(5));
        let all_samples = self.samples.lock().unwrap();
    // this is the cost contributed by the timestamp to trace()
            "something", &["benchmark"],
// Unless required by applicable law or agreed to in writing, software

            // TODO: finer grain invalidation for the line wrapping, needs info
    /// Get the line range of a selected region.
pub fn count_newlines(s: &str) -> usize {
}
}
            self.name == other.name &&
        cur_len_utf8
    ///
        if offset >= next_line_offset {
            Merge(1,2),
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
            'i' => SampleEventType::Instant,

            SelectionIntoLines => self.do_split_selection_into_lines(text),
            }
        /// Just the `symmetric_difference` (XOR) of the two sets.
            }
        if self.replace_changed {
    /// how many times it has been deleted, so if a character is deleted twice
        ];
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(correct, rebased_inserts);
        }).unwrap_or(text.len());
    edit: Contents,
                    let transformed_deletes = deletes.transform_expand(&s);
        let end = self.line_col_to_offset(text, line + 1, 0);
    ///
            Assert(0, "zacpb".to_owned()),
    /// the same even if it is rebased or merged between devices.
        delta.apply(&self.text)
    where S: Into<StrCow>, C: Into<CategoriesT>
        // probably change as the recording internals change.
        // rebase insertions on text and apply
        self.set_selection(text, SelRegion::caret(offset));
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }

    }
                        Err(e) => {
//     http://www.apache.org/licenses/LICENSE-2.0

        for _ in 0..line_len {
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn bench_single_timestamp(b: &mut Bencher) {
                Rope::from(s1.clone()),
/// }
            },
    #[inline]
            Assert(1, "zpbj".to_owned()),
    /// End of the region selected when drag was started.
            b.push('b');
        engine.gc(&gc);
/// some way.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    #[test]
            } else if incomp == GraphemeIncomplete::NextChunk {
                            styles: &StyleMap, style_spans: &Spans<Style>,
    /// of the chunks is indeterminate but for large strings will generally be
//! An engine for handling edits (possibly from async sources) and undo. It
/// Usage of static strings is encouraged for best performance to avoid copies.
    //
/// Revision will be used, which means only the (small) set of concurrent edits
        last_line += if last_col > 0 { 1 } else { 0 };

    /// Generate line breaks based on width measurement. Currently batch-mode,
    #[cfg(feature = "benchmarks")]
                last_priority = Some(priority);
                if !region.is_caret() {
    fn do_cancel(&mut self, text: &Rope) {
///
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
            Merge(1,2),
        Self::with_limit_count(size / size_of::<Sample>())
        let iv = Interval::new_closed_open(start, end);
            rendered_styles.push((sel_start as isize) - ix);
mod sys_tid;
            }),
// Unless required by applicable law or agreed to in writing, software
        if all_samples.is_empty() {
            Assert(2, "b".to_owned()),
/// on program launch.
/// record it.
    max: usize,
pub struct SampleGuard<'a> {

                l = nl;
/// });
// Unless required by applicable law or agreed to in writing, software

        } else {
                    if !inserts.is_empty() {
        let chars_left = (edits-max_undos)+1;
        in_measured_units
        gc_scenario(4,3);
    {
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
    fn build_delta_1() -> Delta<RopeInfo> {
    #[cfg(feature = "benchmarks")]
        -##-
        for u in s.chars() {

    /// Return the byte offset corresponding to the line number `line`.
        self.set_selection_for_edit(text, new_sel);
        where S: Into<StrCow>, C: Into<CategoriesT>
    /// Get next codepoint after cursor position, and advance cursor.
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard

        for rev in old_revs.into_iter().rev() {
            let mut peers = Vec::with_capacity(count);
/// ```rust

        let text = Rope::from("13456");
    /// Tracks whether find highlights should be rendered.
        gc_scenario(35,20);
                        Some(gc_dels.transform_shrink(&inserts))
                c.provide_context(&pl, self.pos() - poffset);
    #[allow(dead_code)]
        let max_line = self.measure::<LinesMetric>() + 1;
            SampleEventType::FlowInstant => 't',
                    to_payload(("some description of the closure")))));
            word_cursor.select_word()
    }
        let mut update = json!({
                cur_all_inserts = older_all_inserts;
            Merge(1,0),
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
        /// The subset of the characters of the union string from after this
        assert_eq!(Some(9), a.next_grapheme_offset(3));

    ///
            }
                inserts: inserted,

use memchr::{memrchr, memchr};
            false => Selection::new(),
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    #[test]

        self.subseq(iv)
            base_sel: selection.clone(),
        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
        ---#--
        let trace = Trace::enabled(Config::default());
    /// Create a new Engine with a single edit that inserts `initial_contents`
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>


    ///
    fn bench_get_tid(b: &mut Bencher) {
    pub width: f64,
            }
        prev_boundary.unwrap_or(None)

}
                }

        // if we have active find highlights, we don't collapse selections
        let (mut l, mut offset) = self.get_leaf()?;
    // this is the cost contributed by the timestamp to
    }
                   r.lines_all().collect::<Vec<_>>());
    }

            categories: Some(categories.into()),
        self.buffer_id
    pub chars: String,
/// Disable tracing.  This clears all trace data (& frees the memory).
        delta.serialize_field("els", &self.els)?;
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
                              to_payload("test_get_samples"));
    /// Get the contents of the document at a given revision number

            sel
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
        assert_eq!(2, a.offset_of_line(1));
    /// Selects an entire word and supports multi selection.
        self.send_update_for_plan(text, client, styles,

        let mut sel = self.selection.clone();
    #[serde(default = "default_session", skip_serializing)]
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    /// Selects all find matches.
        rendered_styles
                    text.slice_to_string(region.min(), region.max())
}
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        }
        }
    }
        self.set_selection_raw(text, selection);
    }
    fn accumulate(&mut self, other: &Self) {
use xi_trace::trace_block;
use std::mem::size_of;
            let base_index = find_base_index(&self.revs, &other.revs);
    /// not account for any overhead of storing the data itself (i.e. pointer to
        let mut revs = basic_insert_ops(inserts_1, 1);
// limitations under the License.
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    }
        a.push('\n');
        assert_eq!(1, b.line_of_offset(2));
            self.first_line = line;
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    }
                    };

    }
            match memchr(b'\n', &s.as_bytes()[offset..]) {

        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
        engine.edit_rev(1, 2, first_rev, d1.clone());
    }
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
            max_undo_so_far: 0,

/// State required to resolve a drag gesture into a selection.
            GestureType::MultiWordSelect =>
        // send updated replace status if changed
    /// Starts a drag operation.
            }),
                break;

        engine.edit_rev(1, edits+1, head2, d2);
                        // no need to un-delete undone inserts since we'll just shrink them out
        use self::MergeTestOp::*;
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
                splitpoint -= 1;
    TRACE.samples_cloned_unsorted()
    /// Returns the byte offset corresponding to the line `line`.
                    selection.add_region(occ);
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
    // Send the requested lines even if they're outside the current scroll region.
        /// revision that were added by this revision.
                              to_payload("test_get_samples"));
        },
        // A with ring, hangul, regional indicator "US"
    ThreadSortIndex { sort_index: i32 },
            SelectionForReplace => self.do_selection_for_replace(text),
                    e.edit_rev(p, u, head, delta.clone());

            ix = sel_end as isize;
                inserts: inserted,
        // 1 for exe name & 1 for the thread name
        b.push(rhs);
    }
        let text_with_inserts = text_inserts.apply(&text);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
///
        }
    }
            }
        } else {
        cursor.is_boundary::<BaseMetric>()
                        DeltaElement::Insert(Rope::from(s)),
        ---#--


    TRACE.get_samples_count()
use serde_json::Value;
        let trace = Trace::enabled(Config::default());
        let head = engine.get_head_rev_id().token();

        for sample in all_samples.iter() {

            }
///
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                         first_line: usize, last_line: usize, pristine: bool) {
    pub fn new_duration<S, C>(name: S,
        // This might be an over-specified test as it will
pub fn samples_len() -> usize {
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
            }
    }
            's' => SampleEventType::FlowStart,
        // a, b, y, z, c, x
/// * `name` - A string that provides some meaningful name to this sample.
}
            let start = self.line_of_offset(last_text, iv.start());
            // TODO: on double or triple click, quantize offset to requested granularity.
        }


    TRACE.instant_payload(name, categories, payload);
            l[offset..].chars().next()
    /// Selects a specific range (eg. when the user performs SHIFT + click).
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
        }
impl PartialOrd for Sample {
pub type Rope = Node<RopeInfo>;
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                },
    // maybe explore grabbing leaf? would require api in tree
        let mut sel = Selection::new();
/// assert_eq!("herald", String::from(a));

    }
            Merge(1,2),
    /// the other doesn't make it re-appear.
                    } else {
    type Item = Cow<'a, str>;
///
        let (ins_delta, deletes) = delta.factor();
        assert_eq!(0, b.line_of_offset(1));

            ),
                             client: &Client, style_spans: &Spans<Style>)
        where S: Into<StrCow>, C: Into<CategoriesT>
    #[test]
/// * `name` - A string that provides some meaningful name to this sample.
    }
impl Serialize for DeltaElement<RopeInfo> {
            trace: Some(&trace),
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
                metadata_name: None,
    #[test]
    #[cfg(feature = "benchmarks")]
    /// Collapse all selections in this view into a single caret
        let mut samples = self.samples_cloned_unsorted();
/// Valid within a session. If there's a collision the most recent matching
        let initial_rev = engine.get_head_rev_id().token();
        }
            b.push('b');
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        /// Used to store a reversible difference between the old
            x.next_occurrence(text, reverse, wrapped, &self.selection)
            for (i, op) in script.iter().enumerate() {
        self.set_selection(text, new_sel);
            // selection with interior
        let a = Rope::from("\n");
    }
        ids.iter().cloned().map(|i| {
            // to replicate whiteboard, z must be before a tombstone
        assert_eq!(None, a.next_codepoint_offset(10));
        self.text = text;
        -##-
pub fn samples_len() -> usize {
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
    }
/// Usage of static strings is encouraged for best performance to avoid copies.

        // current recording mechanism should see:
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
        cursor.prev_grapheme()
    StaticArray(&'static[&'static str]),
    }
            }
        engine.edit_rev(1, edits+1, head, d1);
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
/// bytes required to represent the codepoint.
            match c.edit {
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);

#[macro_use]
    #[test]
    (out, text, tombstones, deletes_from_union)
    /// Sets the selection to a new value, without invalidating.
        assert_eq!(1, r.line_of_offset(r.len() - 1));

    }
            }
    ThreadName { name: String },

    }
        }
/// Then offset=1 is invalid.
                payload: payload,

                    to_payload(("some payload for the block"))));
            }
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
                // should be removed in favor of do_gesture
            Merge(3,1), Merge(5,3),
                metadata_name: None,
            for i in 0..count {

            SampleEventType::Metadata => 'M'
                        None if cursor.pos() == text.len() => cursor.pos(),
#[derive(Clone, Copy)]
    fn is_boundary(s: &String, offset: usize) -> bool {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        s.is_char_boundary(offset)
                self.push_leaf(s.to_owned());
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
                offset = prev;
/// None if an irrecoverable error occured.
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
    {
                // TODO create InsertDelta directly and more efficiently instead of factoring
    fn to_payload(value: &'static str) -> &'static str {
    }
        let end = time::precise_time_ns();
    }
    {
    /// recomputing line wraps.
    #[test]
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);

        /// The set of groups toggled between undone and done.
        let mut engine = Engine::new(Rope::from(TEST_STR));
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    }
///     something_else_expensive();
/// See `trace_payload` for a more complete discussion.


            Drag(MouseAction { line, column, .. }) =>
}
    idx: usize,

                return None;
///
pub struct Utf16CodeUnitsMetric(usize);
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
            FindAll => self.do_find_all(text),
    /// The empty string will yield a single empty slice. In all other cases, the
        assert_eq!(correct, res);

    pub fn lines(&self, start: usize, end: usize) -> Lines {
        // insert a character at the beginning

    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        samples[0].timestamp_us = 10;
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
/// A flag used to indicate when legacy actions should modify selections
            return ix;

}

               a.lines_all().collect::<Vec<_>>());
    /// Return the offset of the codepoint before `offset`.
    use delta::{Builder, Delta};
/// discussion on payload.
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        self.timestamp_us.cmp(&other.timestamp_us)
            None
        // likely be improved.
                MergeTestOp::Assert(ei, ref correct) => {
                    }
                    self.do_gesture(text, line, column, GestureType::LineSelect)

                if (flags & FLAG_SELECT) != 0 {
///
    //

        // spam cmd+z until the available undo history is exhausted
//
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        all_samples.reset_limit(0);
        let cur_deletes_from_union = &self.deletes_from_union;
/// Measured unit is utf8 code unit.
    use interval::Interval;
    fn test_ser_de() {
    }
struct Revision {
        text = new_text;
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let b = a.slice(1, 10);
        gc_scenario(35,20);
                            if !deletes.is_empty() {
        selection.add_region(region);
pub struct ChunkIter<'a> {
#[macro_use]
    pub fn set_size(&mut self, size: Size) {
        serializer.serialize_str(&String::from(self))
        let first_rev = engine.get_head_rev_id().token();
        // insert `edits` letter "b"s in separate undo groups
        }

            b.push('b');
        let correct = parse_subset_list("
        }

        #---
            duration_us: None,
    None,
            "pristine": pristine,
            SampleEventType::ObjectSnapshot => 'O',
    }
        assert_eq!(None, b.prev_codepoint_offset(0));
        (line, offset - self.offset_of_line(text, line))
            }
            //self.cursor.set(self.end);
        count_newlines(&s[..in_base_units])
/// samples are ordered chronologically for several reasons:
    fn drop(&mut self) {

            sel.add_region(new_region);
        Engine {
//
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            sample.event_type = SampleEventType::DurationEnd;



                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),

        for _ in 0..line_len {
    }
        first_line..(last_line + 1)
        };
    /// not account for any overhead of storing the data itself (i.e. pointer to
    }
    #[test]
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
/// Represents a transform from one rope to another.
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    fn do_cancel(&mut self, text: &Rope) {
        while offset < l.len() && !l.is_char_boundary(offset) {
//
                        DeltaElement::Copy(start, end),
        assert_eq!(snapshot[3].name, "b");
    }
            rendered_styles.push((sel_start as isize) - ix);
                        let start_line = seg.our_line_num;
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
    #[serde(deserialize_with = "deserialize_event_type")]
        let next_line_offset = self.offset_of_line(text, line + 1);


            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
            match *op {

        assert_eq!(Some(3), a.next_grapheme_offset(0));

    fn from(r: &Rope) -> String {
        let selection = SelRegion::new(0, text.len()).into();
    }
                        undone_groups = Cow::Owned(new_undone);
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
#[inline]
    }
                                priority,
        #[derive(Serialize, Deserialize)]
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
        }
    ///
        self.height = last - first;
            Assert(0, "ab".to_owned()),
        }
// Unless required by applicable law or agreed to in writing, software
            enabled: AtomicBool::new(false),
            Some(ref breaks) => {
    fn arr_eq(&self, other: &Vec<String>) -> bool {
            breaks: None,
            trace.closure("test_samples_closure", &["test"], || {});
    if a.is_empty() {
    /// Selects a specific range (eg. when the user performs SHIFT + click).
            Assert(0, "zacpbdj".to_owned()),
/// However, anything that can be converted into a Cow string can be passed as
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {

            self.set_selection(text, sel);
        }
        if let Some(edit) = contents {

    type Item = Cow<'a, str>;
        assert_eq!(2, r.line_of_offset(r.len()));
        // Note: for committing plugin edits, we probably want to know the priority
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
// limitations under the License.
    fn empty_subset_before_first_rev(&self) -> Subset {
                        };
                el.serialize_field(start)?;
        let b = a.slice(2, 4);
        // that into our actual target.
        hasher.finish()
                    }
                Undo { toggled_groups, deletes_bitxor } => {
            match memchr(b'\n', self.fragment.as_bytes()) {
    }
    session2: u32,

                        } else {
                self.do_drag(text, line, column, Affinity::default()),
/// Stores the relevant data about a sample for later serialization.
            if Some(priority) == last_priority {
            'n' => SampleEventType::AsyncInstant,
            ModifySelection(movement) => self.do_move(text, movement, true),
        self.set_selection(text, sel);
    }
        let region = SelRegion::caret(offset);

struct DragState {
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        MergeTestState::new(4).run_script(&script[..]);

        engine.edit_rev(1, 3, new_head_2, d3);
/// assert!("hello world" == String::from(a + b));

            Rope::from(s1.clone()),
    // this is the cost contributed by the timestamp to trace()

        if let Some((l, offset)) = self.get_leaf() {



                                     payload: Option<TracePayloadT>,
        let mut end = start_pos + len;
            match memchr(b'\n', &s.as_bytes()[offset..]) {
        fn new(count: usize) -> MergeTestState {
}
            Assert(1, "ab".to_owned()),
        struct CategoriesTVisitor;

///

        let region = SelRegion::caret(offset);
            }
    pub fn collapse_selections(&mut self, text: &Rope) {
        Ok(b.build())
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
    #[test]

    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
    #[cfg(feature = "dict_payload")]
            rendered_styles.push(0);
        assert_eq!(1, expand_by[0].0.priority);
    }
                            if !inserts.is_empty() {
    base_sel: Selection,
            Assert(2, "ab".to_owned()),
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            sel.add_region(region);
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
            }

        let mut engine = Engine::empty();
    ///
    }

    deletes: Subset,
        }
                self.drag_state = None;

    ///
        let mut a = String::new();
        expand_by = next_expand_by;
            AssertMaxUndoSoFar(0,2),
#[inline]
                        word_cursor.select_word()
            Merge(1,2),
                        for line_num in start_line..end_line {
}
        self.revs.push(new_rev);
        };

        // send updated find status only if there have been changes

            offset = text.prev_grapheme_offset(offset + 1).unwrap();
    ProcessSortIndex { sort_index: i32 },
        assert_eq!(trace.get_samples_count(), 0);
    pub fn select_all(&mut self, text: &Rope) {
        let script = vec![
                    if !inserts.is_empty() {
            Merge(4,3),
    /// if it is non-empty. It needs to be a separate commit rather than just
        if let Some(breaks) = self.breaks.as_mut() {
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
    }
            },
        let a = Rope::from("");
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        let inserts = parse_subset_list("
///
                    let e = &mut self.peers[ei];

                }
    match std::env::current_exe() {
    /// Merge the new content from another Engine into this one with a CRDT merge
        expand_by = next_expand_by;
                        deletes_from_union = deletes_from_union.transform_union(inserts);
    }
        assert_eq!(Some(1), a.next_codepoint_offset(0));
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
                len += 1;
        }
        update
    }
                len += 1;
}
            }
        trace.closure_payload("x", &["test"], || {
#[derive(Serialize, Deserialize, Clone, Debug)]
            black_box(time::precise_time_ns());
        if self.find.is_empty() {
}
        let first_rev = &self.revs.first().unwrap();

        // Any edit cancels a drag. This is good behavior for edits initiated through
                            deletes_bitxor
    }
    /// Invalidates the styles of the given range (start and end are offsets within
        assert_eq!(None, a.prev_grapheme_offset(0));



            session: default_session(),
            },

/// ```rust
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    /// The name to associate with the pid/tid.  Whether it's associated with

    }
        let _t = trace_block("View::wrap_width", &["core"]);
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
            return ix;

    #[bench]


        }
        assert_eq!(snapshot[7].name, "c");

#[derive(Clone, Debug, PartialEq, Eq)]
// See the License for the specific language governing permissions and
/// Creates a duration sample that measures how long the closure took to execute.
        }

        // This might be an over-specified test as it will
                    text.slice_to_string(start, end)
#[cfg(feature = "dict_payload")]
        let is_base = base_revs.contains(&rev.rev_id);
        }
    ObjectSnapshot,
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
        cursor.prev_grapheme()
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
            for rev in &self.revs {

            Assert(1, "zapbj".to_owned()),
        let revs = basic_insert_ops(inserts, 1);
}
    fn merge_max_undo_so_far() {
        let trace = Trace::enabled(Config::with_limit_count(10));
    for rev in revs.iter().rev() {
use std::collections::hash_map::DefaultHasher;
                            (inserts, deletes)
    /// the same even if it is rebased or merged between devices.
        // selection state, and for scrolling it into view if needed. This choice can
    /// Merge the new content from another Engine into this one with a CRDT merge

                if !region.is_caret() {

        assert_eq!(trace.get_samples_count(), 0);
    }
        self.set_selection(text, selection);
//
        Self {
#[cfg(feature = "dict_payload")]
            }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    /// Determines the current number of find results and search parameters to send them to
            tid: tid,
    }
            }
/// 3. You may not care about them always being sorted if you're merging samples
///
        -> Result<CategoriesT, D::Error>

    }
const MAX_LEAF: usize = 1024;
#[cfg(feature = "json_payload")]
            pos += 1;
    }
            session: default_session(),
        let new_pos = self.pos() + (end - offset);
    } else {
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
            Assert(0, "acrbdz".to_owned()),
            base_len: usize
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        assert_eq!(1, a.line_of_offset(3));
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        } else {
    pub thread_name: Option<StrCow>,

        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        self.set_selection_for_edit(text, new_sel);
        for find in self.find.iter() {
        let (start, end) = iv.start_end();
    #[test]
#[inline]
    }
                    .with_affinity(affinity)
        // creation) is:
    /// Find what the `deletes_from_union` field in Engine would have been at the time

        engine.edit_rev(1, 1, first_rev, build_delta_1());
    /// Selects an entire line and supports multi selection.

use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    }
                        b.add_span(seg.n, 0, 0);
                edit: Contents::Edit {
        }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
    pub(crate) fn has_pending_render(&self) -> bool {
            size: Size::default(),
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(trace.is_enabled(), true);
        self.session = session;
        (Revision {
            }
    #[inline]
// You may obtain a copy of the License at

    pub fn empty() -> Engine {

                while cursor.pos() < region.max() {
#[inline]
    }
        b.push_str(s);
                selection.add_region(occurrence);
            &rebased_deletes_from_union, &new_deletes_from_union);
                                                     "insert", node)
                } else if click_count == Some(3) {
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            self.args == other.args
    }
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
#[cfg(test)]
                    e.edit_rev(p, u, head, delta.clone());
        let deletes_from_union_b = parse_subset("-#---");
    new_without_default_derive,
    match std::env::current_exe() {
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
                        let new_deletes_bitxor = if gc_dels.is_empty() {
            let b = s.as_bytes()[offset];
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
enum Contents {
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        gc_scenario(4,3);
            match memchr(b'\n', &s.as_bytes()[offset..]) {
use std::ops::Add;
        let is_base = base_revs.contains(&rev.rev_id);
    #[test]

            lc_shadow: LineCacheShadow::default(),
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
            // with offset == s.len(), but be defensive.
    fn offset_of_line_panic() {
}

/// Stores the tracing data.
            MetadataType::ProcessName {..} => "process_name",

    /// Collapse all selections in this view into a single caret
                }
        }
            Merge(1,0),
            }
        let line = self.line_of_offset(text, end);
            r = op.inserts.apply(&r);
fn exe_name() -> Option<String> {
        result
                    }
    // maybe explore grabbing leaf? would require api in tree
        }
            //leaf.len() - start_pos
        let first_rev = engine.get_head_rev_id().token();
            let matches_only = self.find_changed == FindStatusChange::Matches;
        let contents = Contents::Edit {

    #[allow(dead_code)]
/// ```rust

    }
        let trace = Trace::enabled(Config::default());
                    None
    }
        // a, b, y, z, c, x

                    }
///
        for _ in 0..line_len {
/// Returns all the samples collected so far ordered chronologically by
        }
pub struct LinesRaw<'a> {
                    })

            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
            rendered_styles.push(0);
                        let offset = self.offset_of_line(text, start_line);
        d.insert(StrCow::from("test"), StrCow::from(value));

        a.lines_all().collect::<Vec<_>>());
        let r = r + Rope::from(&b[MIN_LEAF..]);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                return false;
                        None

        inserts.into_iter().enumerate().map(|(i, inserts)| {
        let mut a = Rope::from("");
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        thread.name().map(|ref s| to_cow_str(s.to_string()))
        match cmd {

    #[test]
        let mut engine = Engine::new(Rope::from(TEST_STR));
                return false;
                    b.add_span(seg.n, 0, 0);
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
/// first can make it ~1.7x slower than a regular trace.
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        // current recording mechanism should see:
                    let new_gc_dels = if inserts.is_empty() {
//     http://www.apache.org/licenses/LICENSE-2.0
        self.pending_render = pending
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        use self::MergeTestOp::*;
    /// The semantics are intended to match `str::lines()`.
                }
        }
        if self.breaks.is_some() {
    rev_id: RevId,
    /// The maximum number of entries the tracing data should allow.  Total
    #[test]
    //TODO: implement iter_chunks using ranges and delete this
    // partly because the reachability calculation would become more complicated (a
    {
            next_expand_by.push((trans_priority, new_trans_inserts));
    pub fn with_limit_count(limit: usize) -> Self {
            undone_groups: BTreeSet::new(),
    }
            find.update_highlights(text, delta);
pub struct RevId {
        a.push('\n');
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
// line iterators
        if self.highlight_find {
//! This module actually implements a mini Conflict-free Replicated Data Type
                         start: usize, end: usize, sel: &[(usize, usize)],
                        } else {
            Merge(1,0),
                        // no need to un-delete undone inserts since we'll just shrink them out
    find_changed: FindStatusChange,

        trace.closure_payload("x", &["test"], || {
                SelectionModifier::AddRemovingCurrent => {
    #[test]
//
        if self.replace_changed {

fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        }
        result
    #[serde(skip_serializing_if = "Option::is_none")]
    #[test]
    }
pub type TracePayloadT = StrCow;
    pub event_type: SampleEventType,
        if self.scroll_to.is_none() && wrap {
            let max_undo = self.max_undo_group_id();
                            (inserts.transform_shrink(&gc_dels),
        }
///
        }
                    let transformed_inserts = inserts.transform_expand(&s);
        };
impl Add<Rope> for Rope {
        assert_eq!(snapshot.len(), 5);
        assert!(r.clone().slice(0, a.len()) == a_rope);
///
        assert_eq!(snapshot[0].name, "process_name");
    pub fn new_disabled() -> Self {
    }
        trace.closure_payload("y", &["test"], || {},

            selection.delete_range(offset, offset, true);
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
}
    find_leaf_split(s, MIN_LEAF)
            rev_id_counter: 1,
                                                                0, "copy", 2)?;
    fn test_get_sorted_samples() {
impl TreeBuilder<RopeInfo> {
        assert_eq!(Some(1), a.next_codepoint_offset(0));
                l = pl;

        }
                    let mut selection = self.selection.clone();
        };
    #[cfg(feature = "dict_payload")]
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    }
                Edit { priority, undo_group, inserts, deletes } => {
                return false;
        let mut engine = Engine::new(Rope::from(TEST_STR));

            self.current = next_chunk;
            let start = self.line_of_offset(last_text, iv.start());
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
                            max_undo_so_far: rev.max_undo_so_far,

            if self[i] != other[i] {
        self.set_selection_raw(text, sel.into());
        // spam cmd+z until the available undo history is exhausted
        let mut sel = Selection::new();
        
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                                                        &mut line_cursor,
// ======== Merge helpers

        let edit_iv = Interval::new_closed_open(start, end);
            Assert(0, "zacpbdj".to_owned()),
        };
    {
    {
//! CRDT implementation techniques, because all operations are serialized in
    #[test]
        };
    /// validate their input.
        let mut update = json!({
        /// should go before typed text.
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                }
/// could trigger incorrect behavior if they collide, so u64 is safe.
        Lines {
    }
    utf16_count
        let mut b = TreeBuilder::new();
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
/// * `categories` - A static array of static strings that tags the samples in
impl<'de> Deserialize<'de> for Delta<RopeInfo> {

            self.args == other.args
/// Atomicity is implicit, putting the offset
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    /// What kind of sample this is.


/// # Arguments

            AssertMaxUndoSoFar(0,2),

    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
}

        }
impl<T: AsRef<str>> From<T> for Rope {
            }
        self.utf16_size += other.utf16_size;
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        // additional tests for line indexing
/// implementation as efficient as a mutable version.
            Assert(5, "zacpb".to_owned()),
    /// Offset of the point where the drag started.
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
            let mut word_cursor = WordCursor::new(text, offset);

use xi_trace::trace_block;


        Self::with_limit_count(size / size_of::<Sample>())

/// stored as tracing could still be enabled but set with a limit of 0.
        let empty = Rope::from("");
    } else if x < max {
                self.select_word(text, offset, false),
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    let mut out = Vec::with_capacity(revs.len());
        self.hash(&mut hasher);
    let inverse_tombstones_map = old_deletes_from_union.complement();
        rendered_styles
                None => {
        b.build()
    #[inline]
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    edit: Contents,
    #[test]
            Assert(0, "acbd".to_owned()),
        let trace = Trace::enabled(Config::with_limit_count(20));
        match self.selection.len() {
    #[test]
                                                    self.size.width));
                    }
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),

                    if s.ends_with('\r') {
    /// What kind of sample this is.
                if !inserts.is_empty() {
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
            SampleEventType::DurationBegin => 'B',

///
        if before {
    session: SessionId,
                        None if cursor.pos() == text.len() => cursor.pos(),
        }
}
        let empty = Rope::from("");
    }
            breaks: None,
}

    #[serde(skip_serializing_if = "Option::is_none")]
    #[cfg(feature = "benchmarks")]
/// revisions on top of the revisions represented by `expand_by`.
            Assert(1, "ab".to_owned()),
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};

    }
            }
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        let snapshot = trace.samples_cloned_unsorted();
    fn prev(s: &String, offset: usize) -> Option<usize> {

    #[test]
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
    for rev in revs.iter().rev() {
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),

    pub fn select_all(&mut self, text: &Rope) {

        for i in ((edits-max_undos)..edits).rev() {
                      width_cache: &mut WidthCache, keep_selections: bool)
        assert_eq!(Some(9), b.next_codepoint_offset(5));
/// * `categories` - A static array of static strings that tags the samples in
                    let full_path = exe_name.into_os_string();
}
                Edit { priority, undo_group, inserts, deletes } => {
                if !region.is_caret() {
                pos = leaf_offset + nl.len();
    }
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");

                            rev_id: rev.rev_id,
    }
    }

    #[test]
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    }
        assert_eq!("-###-", &subset_str);
/// returned value is dropped.  `trace_closure` may be prettier to read.
        use self::MergeTestOp::*;
    ns / 1000
    TRACE.samples_cloned_unsorted()
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
            MetadataType::ProcessLabels {..} => "process_labels",
        let script = vec![
// Low level functions
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
}
    view_id: ViewId,
        revs.append(&mut revs_2);
impl<'a> Iterator for ChunkIter<'a> {
                }

mod sys_pid;
        as_vec
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
                std::thread::sleep(std::time::Duration::new(0, 1000));
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
            // TODO: on double or triple click, quantize offset to requested granularity.



                    a.merge(b);
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
/// between two utf8 code units that form a code point is considered invalid.
        let closest_occurrence = self.find.iter().flat_map(|x|
const MIN_LEAF: usize = 511;
            if (c > start_pos && c < pos) ||
    /// Find parameters and number of matches changed.
        };
        self.do_set_replace(replacement, false);

        assert_eq!(None, b.prev_codepoint_offset(0));

    /// storage allocated will be limit * size_of<Sample>
    }
        }
        ];
    }
            rendered_styles.push((sel_start as isize) - ix);
            height: 10,
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
            let _x = trace.block("something", &[]);
        let selection = SelRegion::new(0, text.len()).into();
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            let (start, end) = if offset < drag_state.offset {

        match *self {
/// Transform `revs`, which doesn't include information on the actual content of the operations,
pub struct SampleArgs {
            GestureType::WordSelect =>
    }
/// something_expensive();
        ];
        let trace = Trace::disabled();
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
            Cancel => self.do_cancel(text),
        }
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
            black_box(time::precise_time_ns());
    }
            duration_us: Some(ns_to_us(duration_ns)),
                    } else {
        }
    /// the frontend.
                el.serialize_field(start)?;

//! An engine for handling edits (possibly from async sources) and undo. It
}

        let script = vec![
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    fn next(s: &String, offset: usize) -> Option<usize> {
/// Enable tracing with a specific configuration. Tracing is disabled initially
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
use interval::Interval;
                            max_undo_so_far: rev.max_undo_so_far,
        match cmd {

fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        assert_eq!(trace.get_samples_limit(), 11);
    }

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        #------
        let mut to_undo = BTreeSet::new();
}
impl Rope {
            offset,
        ");
    #[inline]
            engine.edit_rev(0, 0, first_rev, delta);
    /// Collapse all selections in this view into a single caret
    }
    /// Merge the new content from another Engine into this one with a CRDT merge
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
        offset
        if let Some(last) = self.revs.last() {
///
    }
}
        for _i in 0..50 {

        let new_head = engine.get_head_rev_id().token();
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
pub fn enable_tracing() {
            Assert(1, "pbj".to_owned()),
                max_undo_so_far: i+1,
#[inline]
        if let Some(lines) = lines {
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
            }
        deletes: Subset,
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        if !before {
        // x, a, y, b, z, c
/// See `trace_block` for how the block works and `trace_payload` for a
        #------
    fn merge_simple_delete_1() {
        }
}
    /// This method is responsible for updating the cursors, and also for
            Assert(2, "ab".to_owned()),
                self.set(pos);
            base_rev: RevToken, delta: Delta<RopeInfo>) {
        let all_samples = self.samples.lock().unwrap();
            AssertMaxUndoSoFar(1,1),
impl<'a> Cursor<'a, RopeInfo> {
        let next_line_offset = self.offset_of_line(text, line + 1);
    /// Exposed for unit tests.
        }
    #[test]
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        if let Some(occ) = closest_occurrence {
        let mut b = String::new();
                            if !inserts.is_empty() {
        // we add the special find highlights (1) and selection (0) styles first.
    /// after an edit is applied, to allow batching with any plugin updates.
            inserts: Subset::new(0),
    use interval::Interval;
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        let text_with_inserts = text_ins_delta.apply(&self.text);
        let trace = Trace::enabled(Config::with_limit_count(10));

        b.iter(|| {


        let text_with_inserts = text_inserts.apply(&text);
        assert_eq!(None, a.next_codepoint_offset(10));
            // I think it's a precondition that this will never be called
        for _ in 0..line_len {
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
    fn line_offsets() {
        });
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
    pub fn get_caret_offset(&self) -> Option<usize> {

    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
            Assert(0, "acpbdj".to_owned()),
            if let Edit { ref inserts, .. } = rev.edit {

    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
                } else {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            rendered_styles.push(style_id as isize);
#[macro_use]
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    pub metadata_sort_index: Option<i32>,
    lines: usize,
                }
    let mut utf16_count = 0;
struct FullPriority {
        ];

        ]);
    pub fn get_head(&self) -> &Rope {

            'i' => SampleEventType::Instant,
    pub fn slice(&self, start: usize, end: usize) -> Rope {
/// State required to resolve a drag gesture into a selection.
    #[test]
    out
use std;

    #[test]
/// {
    /// than this will panic.

///
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
            }
    }
        }
                },
        let mut sel = self.selection.clone();
        d_builder.delete(Interval::new_closed_open(10, 36));

        for region in self.selection.iter() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
        assert_eq!(snapshot[8].name, "x");
            Assert(0, "b".to_owned()),
                    .with_affinity(affinity)
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    fn merge_insert_only_whiteboard() {
            engine.undo(undos.clone());
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
                        let n_skip = seg.their_line_num - line_num;
    breaks: Option<Breaks>,
        // insert character at end, when this test was added, it panic'd here
                      width_cache: &mut WidthCache, keep_selections: bool)

// Unless required by applicable law or agreed to in writing, software
            let first_rev = engine.get_head_rev_id().token();
        assert_eq!(5, a.offset_of_line(3));
#[macro_use]

    /// Returns the visible line number containing the given offset.
    }
categories_from_constant_array!(0);

    where S: Into<StrCow>, C: Into<CategoriesT>
            a = a + Rope::from(&c);
                    let (start, end) = self.peers.split_at_mut(ai);
        trace.instant("2", &["test"]);
            if !selection.is_empty() {
    }
            }
    }
                    }
                    self.set_selection(text, selection);
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
            SampleEventType::ObjectSnapshot => 'O',
    #[test]
    }
    /// Time complexity: O(log n)
        }
}
            trace.closure_payload("y", &["test"], || {
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
            args: Some(SampleArgs {
        if self.current.is_none() {
                    self.do_gesture(text, line, column, GestureType::WordSelect)
                self.set_selection_raw(text, selection);
        ];
        None => {
    /// tiny it is effectively O(n). This iterator does not allocate.
        let a2 = Rope::from("a");
                warn!("Usage of click is deprecated; use do_gesture");
        if let Some(last) = self.revs.last() {
        b if b < 0xf0 => 3,
        engine.edit_rev(1, 1, first_rev, d1.clone());
            if let GraphemeIncomplete::PreContext(_) = incomp {
    }
            deletes: Subset::new(0),
        deletes_bitxor: Subset,
        }
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    fn lines_raw_small() {
        self.sample_limit_count
                c.provide_context(&pl, self.pos() - poffset);
            write!(f, "{}", String::from(self))
        // todo: the correct Find instance needs to be updated with the new parameters
    /// borrowed from the rope.

    /// Time complexity: O(log n)
        assert_eq!(None, a.next_grapheme_offset(17));
    }
                            (inserts.transform_shrink(&gc_dels),
        assert_eq!(trace.get_samples_limit(), 11);
    #[test]
//     http://www.apache.org/licenses/LICENSE-2.0
        for _i in 0..50 {
                payload: payload,
                    };
        let invalid = if all_caret {
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
            let right_str = self[splitpoint..].to_owned();
// Licensed under the Apache License, Version 2.0 (the "License");
}

        ix
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        true
        }

// limitations under the License.
    }
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))

                el.serialize_field(end)?;

    pub pid: u64,
        }
/// let c = b.slice(1, 7);

        self.set_dirty(text);
/// that sorted would be prohibitively expensive.
            rendered_styles.push(style_id as isize);
    }
    FlowStart,
        engine.edit_rev(1, 1, first_rev, d1);
    AsyncEnd,
            MetadataType::ThreadName {name} => (Some(name), None),
    #[cfg(feature = "benchmarks")]
    }


                            ops.push(self.build_update_op("skip", None, n_skip));
}
            match reverse {
        ----#
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
            {
            trace.closure("something", &[], || ());

            Assert(0, "ab".to_owned()),
        engine.edit_rev(1, 2, first_rev, d1.clone());

use bytecount;
            {
}
}
                splitpoint -= 1;
    /// Return the offset of the codepoint before `offset`.
        -##-

    }
    fn bench_trace_block(b: &mut Bencher) {
))]
        }
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
///
}
            if cur_len_utf16 >= in_measured_units {
        (line, offset - self.offset_of_line(text, line))

                let categories = v.split(",").map(|s| s.to_string()).collect();
                    let (start, end) = {
        let utf8_offset = 13;
        ]);
    ///
impl Eq for CategoriesT {}
impl Serialize for Rope {
}

    fn find_common_1() {
    samples: Mutex<FixedLifoDeque<Sample>>,

                            }
                                                    style_spans, client,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
///
                        }
/// Internally, the implementation uses reference counting (not thread safe, though

                            if !inserts.is_empty() {
    }
                self.find_changed = FindStatusChange::All;
/// Find an index before which everything is the same
    fn render_line(&self, client: &Client, styles: &StyleMap,
        assert_eq!(trace.get_samples_limit(), 0);
}
                    selection.add_region(occ);
    fn edit_rev_simple() {

        assert_eq!(b, String::from(a));
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    /// the pid or the tid depends on the name of the event
    #[test]
        let a = Rope::from("a\nb\n");
    }
        }
        let contents = Contents::Edit {
                        for line_num in start_line..end_line {
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        // the smallest values with which it still fails:
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
}
        for i in 0..5_000 {
        }
//
        let trace = Trace::disabled();
            // TODO: finer grain invalidation for the line wrapping, needs info
                           pristine: bool)
            Some(right_str)

        let region = SelRegion::caret(offset);
    TRACE.enable_config(config);
        while let Err(incomp) = prev_boundary {

        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
/// * `name` - A string that provides some meaningful name to this sample.
                leaf_offset = self.pos() - poffset;
                                     payload: Option<TracePayloadT>,
        // x, a, y, b, z, c
              F: FnOnce() -> R
        if line > max_line {
        self.cursor.next_leaf();
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            "pristine": pristine,
                    self.fragment = "";
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {

    // in a single session.
        ---#--
            lines: 0,
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
    }
        cur_len_utf8
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
fn initial_revision_counter() -> u32 {
            Merge(0,2), Merge(1, 2),
                              start_ns: u64,
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    }
    }
        self.timestamp_us.cmp(&other.timestamp_us)
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
        let (leaf, offset) = match self.get_leaf() {
        use self::MergeTestOp::*;
    // TODO: this should be a Cow
    #[cfg(feature = "benchmarks")]
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        if offset >= text.len() {
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
fn find_leaf_split_for_merge(s: &str) -> usize {
        // additional tests for line indexing
/// equivalent performance to a regular trace.  A string that needs to be copied
        let rearranged = rearrange(&revs, &base, 7);
//! This module actually implements a mini Conflict-free Replicated Data Type
            }

        let d = engine.delta_rev_head(after_first_edit);
                            if !inserts.is_empty() {

                        s = &s[..s.len() - 1];
                metadata_sort_index: sort_index,
            false
        for op in &delta_ops {
            match c.edit {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        soln.push('f');
        -##-
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    /// if it is non-empty. It needs to be a separate commit rather than just
                let (nl, noffset) = self.next_leaf()?;
            thread_name: Sample::thread_name(),

        assert_eq!(1, a.line_of_offset(2));
    #[test]
                        if n_skip > 0 {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    /// Highlights are only rendered when search dialog is open.
        let trace = Trace::enabled(Config::with_limit_count(11));
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
            pos += 1;
                Contents::Edit {inserts, ..} => inserts,
          F: FnOnce() -> R
    }

impl<'a> Iterator for ChunkIter<'a> {

        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    fn merge_max_undo_so_far() {

            replace: None,
    /// method to be fast even when the selection is large.

        // todo: the correct Find instance needs to be updated with the new parameters
        }
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
    }
        assert_eq!(trace.get_samples_count(), 0);
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
/// A static string has the lowest overhead as no copies are necessary, roughly
    // * Code units in some encoding
pub enum SampleEventType {
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
            SampleEventType::AsyncStart => 'b',
/// let a = Rope::from("hello world");
        let first_rev = engine.get_head_rev_id().token();

            warn!("Failed to get path to current exe: {:?}", e);
        revs.append(&mut revs_3);
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
        // current recording mechanism should see:
    /// update cycle. This should be a last resort, updates should generally cause
            'e' => SampleEventType::AsyncEnd,
    }
        if self.replace_changed {
                                inserts,
use std::str;
            Merge(1,0),
        }

        let mut b = TreeBuilder::new();
                self.set(pos);
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
    /// Constructs an instantaneous sample.
        // current recording mechanism should see:
    } else {
        let (start, end) = iv.start_end();
const MIN_LEAF: usize = 511;
        assert_eq!(output, String::from(engine.get_head()));
    {
        if let Some(lines) = lines {
            Assert(0, "zcpbdj".to_owned()),
    {
                                undo_group,
/// Usage of static strings is encouraged for best performance to avoid copies.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        use self::MergeTestOp::*;
        if let Some(exe_name) = exe_name() {
        let script = vec![
/// Returns all the samples collected so far.  There is no guarantee that the
            // Snap to grapheme cluster boundary
use std::mem::size_of;
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
            drag_state: None,
/// bytes required to represent the codepoint.
    fn eq_small() {
                                                                0, "copy", 2)?;
            AddSelectionBelow =>
                Contents::Edit {inserts, ..} => inserts,
        }).collect()
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.

    }
            MergeTestState { peers }
            _ => None
            s.as_bytes()[offset - 1] == b'\n'
                },
    #[test]

    /// Return the byte offset corresponding to the line number `line`.
use width_cache::WidthCache;
        assert_eq!(trace.get_samples_count(), 0);
        assert_eq!(0, a.offset_of_line(0));
            _ => return
    #[test]
    }
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
                        priority, undo_group,
    fn consume(self) -> (Option<String>, Option<i32>) {
#[derive(Clone, Debug, PartialEq, Eq)]
        assert_tokens(&rope, &[
    /// This is used to determined whether FindStatus should be sent to the frontend.
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
                }
// Licensed under the Apache License, Version 2.0 (the "License");

        deletes_from_union = new_deletes_from_union;
    /// The line number is 0-based.
        let mut cursor = Cursor::new(self, offset);
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        let mut leaf_offset = pos - offset;
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    fn undo_3() {
        let _t = trace_block("View::wrap_width", &["core"]);
        samples
        } else {
            let to_delete = if undone { &new_inserts } else { &new_deletes };

        };
        #------
impl Rope {
///
                deletes: new_deletes,
    }

    }

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
        if before {
    #[bench]
                    text.slice_to_string(region.min(), region.max())

                           style: &Style) -> usize {
        let tid = all_samples.front()
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,


        engine.undo([1,2].iter().cloned().collect());
            Assert(0, "acrpbdzj".to_owned()),
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
    /// Invalidate the current selection. Note that we could be even more
            inserts: Subset::new(0),
        });
    fn to_payload(value: &'static str) -> &'static str {
        let max_line = self.measure::<LinesMetric>() + 1;
}
enum Contents {
                let (pl, poffset) = self.prev_leaf()?;
/// fn something_else_expensive() {

}

            sample: None,
    fn prev(s: &String, offset: usize) -> Option<usize> {
    fn bench_trace_closure_disabled(b: &mut Bencher) {

pub struct RopeInfo {

    fn bench_trace_closure_payload(b: &mut Bencher) {
        } else {
    where S: serde::Serializer {
        assert_eq!(trace.get_samples_count(), 0);
        assert_eq!(snapshot[3].name, "y");
            Revision {
    /// The thread the sample was captured on.  Omitted for Metadata events that
//! This module actually implements a mini Conflict-free Replicated Data Type

    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        self.cursor.next_leaf();
                self.set_selection_raw(text, selection);
    }
    }
    fn bench_two_timestamps(b: &mut Bencher) {
        }
/// With `json_payload` feature:
            for find in self.find.iter() {
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
        let script = vec![
    session2: u32,

}
        let mut a = Rope::from("");
            Merge(1,0),

        r.slice_to_string(0, r.len())
        delta.serialize_field("base_len", &self.base_len)?;
            self.current = next_chunk;
                            }
        let utf8_offset = 9;
            GestureType::WordSelect =>
        engine.edit_rev(0, 1, first_rev, build_delta_1());
            Assert(1, "acpbdj".to_owned()),
                    let mut selection = self.selection.clone();
            };
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
                }

            update["lines"] = json!(lines);

        let b_rope = Rope::from(&b);
    /// is optional.
/// ```
                Some(pos) => offset += pos + 1,
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        self.lc_shadow = b.build();
        where D: serde::Deserializer<'de>
}
        #[serde(rename_all = "snake_case")]
        }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
    pub payload: Option<TracePayloadT>,
                            if !deletes.is_empty() {
        ----#
            }
    /// Front end's line cache state for this view. See the `LineCacheShadow`

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                if !region.is_caret() {

    out
            args: Some(SampleArgs {

            'b' => SampleEventType::AsyncStart,
            MetadataType::ProcessName {..} => "process_name",
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
            Merge(4,3),
        b if b < 0x80 => 1,
    }
            to_payload("some description of the trace"))));
            'B' => SampleEventType::DurationBegin,

        self.subseq(iv)
    ///
        Rope::from_str(s.as_ref()).unwrap()
        let len = match first_rev.edit {

    #[cfg(feature = "benchmarks")]
            .map_or(0, |ref s| s.timestamp_us);
    }
    #[test]
        assert_eq!(2, b.offset_of_line(1));
use xi_rope::tree::Cursor;
    fn len(&self) -> usize {
        let inserts = parse_subset_list("
                        deletes_from_union
        let mut sel = Selection::new();
        };
            None => return "",
        let (mut l, mut offset) = self.get_leaf()?;
    fn utf16_code_units_metric() {
        }
                    RopeDeltaElement_::Insert(s) =>
    sample_limit_count: usize
            None => {
    // encourage callers to use Cursor instead?
// Copyright 2016 The xi-editor Authors.
        if !selection.regions_in_range(offset, offset).is_empty() {
                        for line_num in start_line..end_line {
        let script = vec![
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        /// The subset of the characters of the union string from after this

    #[derive(Debug)]
    pub metadata_name: Option<StrCow>,
    /// The maximum number of samples that should be stored.
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    #[test]
            }
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    fn measure(info: &RopeInfo, _: usize) -> usize {
                pos = leaf_offset + pl.len();
        assert_eq!(2, a.line_of_offset(5));

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
//!
    /// if there is not at least one edit.
            x.next_occurrence(text, reverse, wrapped, &self.selection)

        for rev in old_revs.into_iter().rev() {
                if is_base {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
            },

    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        Merge(usize, usize),
            self.truncate(splitpoint);
type StyleMap = RefCell<ThemeStyleMap>;
                // sanitize input
                } else {
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
                        } else {
    /// Only works well for ASCII, will probably not be maintained long-term.
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        let mut engine = Engine::new(Rope::from(TEST_STR));
            let after = full_priority >= trans_priority;  // should never be ==
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
        }
    /// The largest undo group number of any edit in the history up to this
        assert_eq!(1, expand_by[0].0.priority);
    }
    fn delta_rev_head_3() {
        }
        }
//! `Engine::merge`, which is more powerful but considerably more complex.
///
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
            'e' => SampleEventType::AsyncEnd,
            GestureType::MultiLineSelect =>
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        assert_eq!(snapshot[4].name, "y");
            } else {
        let d = engine.delta_rev_head(after_first_edit);
    /// Storage for all the characters that have been deleted  but could
        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

            engine.undo(undos.clone());
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        let a = Rope::from("a\nb\n");
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
#[cfg(test)]
                    return Some(result);
    }

/// conforms to is currently determined by the feature this library is compiled

    }

        assert_eq!(None, a.next_grapheme_offset(17));
    /// Each instance represents a separate search query.
fn default_session() -> (u64,u32) {
                match *other {
        assert!(self.current.is_some());
        let revs = basic_insert_ops(inserts, 1);
                }
        self.join(",").serialize(serializer)
            }
// distributed under the License is distributed on an "AS IS" BASIS,
                offset = prev;
            }
                    self.fragment = &self.fragment[i + 1 ..];
                }
    }
            trace.closure_payload("y", &["test"], || {

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                Some(offset)
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
            return None;
                            ops.push(self.build_update_op("skip", None, n_skip));
        self.push_str(&other[start..end]);
    ///
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
macro_rules! categories_from_constant_array {
        /// The set of groups toggled between undone and done.
                Undo { ref toggled_groups, ref deletes_bitxor } => {

        assert_eq!(4, a.offset_of_line(2));

        assert_eq!(None, a.prev_codepoint_offset(0));
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
    }
    /// the pid or the tid depends on the name of the event
        use self::MergeTestOp::*;
        assert_eq!(trace.get_samples_limit(), 20);
// limitations under the License.
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
            s = &s[splitpoint..];
}
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
                    };
        let mut b = line_cache_shadow::Builder::new();

            Assert(0, "ab".to_owned()),
            rendered_styles.push((sel_start as isize) - ix);
        self.deletes_from_union = new_deletes_from_union;
            tombstones: Rope::default(),
    pub fn new_duration<S, C>(name: S,
        self.iter_chunks(0, self.len())
            self.breaks = None
            Assert(1, "arpbzj".to_owned()),
        if self.replace_changed {
pub type RopeDelta = Delta<RopeInfo>;
        use self::MergeTestOp::*;
                match elem {
        let d = RopeDelta_::deserialize(deserializer)?;
            args: Some(SampleArgs {
        // the smallest values with which it still fails:
    fn edit_rev_simple() {
        assert_eq!(0, b.line_of_offset(1));
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
    #[test]
    pub(crate) fn record(&self, sample: Sample) {
                    if !inserts.is_empty() {


            let mut peers = Vec::with_capacity(count);
/// let b = a.slice(1, 9);
                                  style_spans, &plan, pristine);

#[inline]
        }

    for rev in revs.iter().rev() {
    pub fn slice(&self, start: usize, end: usize) -> Rope {

impl<'a> Iterator for Lines<'a> {


            }
    /// Garbage collection means undo can sometimes need to replay the very first
        where D: serde::Deserializer<'de>
        assert_eq!(snapshot[4].name, "y");
        assert!(r != b_rope + a_rope);
    }
use std::str::FromStr;
            match self.wrap_col {

        engine.undo([1].iter().cloned().collect());
            }
        }
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
        // set last selection or word under current cursor as search query
        }
        let inserted = inserts.inserted_subset();
    fn merge_max_undo_so_far() {


/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
            SelectionForFind { case_sensitive } =>
        let mut sel = self.selection.clone();
}
        // Note: for committing plugin edits, we probably want to know the priority
}
            self.args == other.args
            // TODO: finer grain invalidation for the line wrapping, needs info
        self.first_line = first;
    }
        assert_eq!(trace.is_enabled(), true);
                                gc_dels = gc_dels.transform_expand(inserts);
            }

            rendered_styles.push(1);
            to_undo.insert(i+1);

        engine.edit_rev(1, 3, new_head_2, d3);
            }
        ");

        engine.undo([1,3].iter().cloned().collect());
        let next_line_offset = self.offset_of_line(text, line + 1);
            }
    // in a single session.
/// Contains replacement string and replace options.


        self.set_selection_for_edit(text, new_sel);
    ///
    /// This is used to determined whether FindStatus should be sent to the frontend.
                payload: payload,
}
        self.lc_shadow = b.build();
    AsyncStart,
                    }
            let b = s.as_bytes()[offset];
                payload: payload,
        engine.gc(&gc);
use self::Contents::*;
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
///
/// However, anything that can be converted into a Cow string can be passed as
impl<'a> SampleGuard<'a> {
}

    }
                    let new_gc_dels = if inserts.is_empty() {
        }
    }
        // multiple queries; select closest occurrence
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
            if let Some(replace) = self.get_replace() {
        View {
    }
        if self.is_enabled() {

#[inline]
        let script = vec![
        if self.len() != other.len() {
            samples: Mutex::new(FixedLifoDeque::new())
                    result = cow_append(result, self.fragment);
}
const MAX_LEAF: usize = 1024;
        let mut all_samples = self.samples.lock().unwrap();
        rendered_styles
    }
    fn edit_rev_undo_2() {
    /// Selects all find matches.
                // TODO could probably be more efficient by avoiding shuffling from head every time
        b.iter(|| black_box(sys_tid::current_tid()));
        all_samples.push_back(sample);
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        } else {
categories_from_constant_array!(2);
        let snapshot = trace.samples_cloned_sorted();
    fn do_cancel(&mut self, text: &Rope) {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    None,
    }

                        _ => break
///
        while let Err(incomp) = prev_boundary {
        // A with ring, hangul, regional indicator "US"
        where S: Into<StrCow>, C: Into<CategoriesT>
            let splitpoint = if s.len() > MAX_LEAF {

        let trace = Trace::enabled(Config::with_limit_count(10));
        struct CategoriesTVisitor;
            self.current = None;

    fn bench_trace_block_payload(b: &mut Bencher) {
        println!("{:#?}", b_delta_ops);
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
                // This could be done by explicitly overriding, or by tweaking the
        assert!(r.clone().slice(0, a.len()) == a_rope);

                              categories: C,
use self::Contents::*;
            Merge(0,2), Merge(1, 2),
/// Creates a duration sample that measures how long the closure took to execute.
        assert_eq!(None, b.next_codepoint_offset(9));
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {

))]
    #[test]
            Merge(0,1),
                    result = cow_append(result, self.fragment);

fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    /// Update front-end with any changes to view since the last time sent.
            }),

        all_samples.push_back(sample);
use std::fmt;
///     something_else_expensive();
                }
                }
            if let Some(ref thread_name) = sample.thread_name {
        let mut selection = match multi_select {
    pub(crate) fn get_buffer_id(&self) -> BufferId {

    #[should_panic]
        let (leaf, offset) = match self.get_leaf() {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
            CategoriesT::StaticArray(ref self_arr) => {
        let mut d_builder = Builder::new(TEST_STR.len());
/// Base unit is utf8 code unit.
        let mut offset = 0;
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
            // recurse at most once; this doesn't feel great but I wrote myself into a
        let mut cursor = Cursor::new(self, offset);
        let contents = Contents::Edit {
    fn replace_small() {
    // TODO find the maximum base revision.
    }
    }
            // I think it's a precondition that this will never be called
                metadata_sort_index: None,
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
            write!(f, "Rope({:?})", String::from(self))

        /// Used to store a reversible difference between the old
            trace.closure("test_samples_closure", &["test"], || {});
    }
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
                    let head = e.get_head_rev_id().token();
        // send updated find status only if there have been changes
            // recurse at most once; this doesn't feel great but I wrote myself into a
    /// 96 bits which is more than sufficient for this to never happen.
    TRACE.block_payload(name, categories, payload)
fn count_utf16_code_units(s: &str) -> usize {
    fn next(s: &String, offset: usize) -> Option<usize> {
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        if self.is_enabled() {
        assert_eq!(utf16_units, 9);

        self.sample_limit_count
/// }
        let text_b = Rope::from("zpbj");
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
        let mut ix = 0;
            trace: None,
        self.drag_state = None;
            GestureType::PointSelect => {

/// Get a slice of a `Rope`:
/// # Arguments
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        assert_eq!(0, r.line_of_offset(a.len() - 1));
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
    }

    fn line_of_offset_small() {
            Merge(2,1),
pub type TracePayloadT = StrCow;
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        for i in ((edits-max_undos)..edits).rev() {
            } else if incomp == GraphemeIncomplete::PrevChunk {
        assert!(a != b);
        engine.edit_rev(1, 1, first_rev, d1.clone());
            deletes_from_union,
            self.record(Sample::new_duration(
                for &region in rest {
categories_from_constant_array!(4);
    }
        self.tombstones = tombstones;
                        b.add_span(seg.n, 0, 0);
        }

    let mut utf16_count = 0;
                    if s.ends_with('\r') {
        if let Some(exe_name) = exe_name() {
        assert!(a != b);
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    /// Returns a u64 that will be equal for equivalent revision IDs and
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {


// limitations under the License.
                        deletes: transformed_deletes,
}
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.

        }
        r.slice_to_string(0, r.len())
{
    // recompute the prefix up to where the history diverges, but it's not clear that's
                        if n_skip > 0 {
    type L = String;
        self.set_selection_raw(text, selection);
            }
                cursors.push(c - start_pos);
        let mut result = Cow::from("");
                    let full_path = exe_name.into_os_string();
    }
        info.utf16_size
                                             &text, false);


        engine.edit_rev(1, 1, initial_rev, d1.clone());
        }
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
                }
        self.replace = Some(Replace { chars, preserve_case });
        } else {
#[derive(Serialize, Deserialize, Debug)]
        });

                client.replace_status(self.view_id, &json!(replace))
extern crate lazy_static;
    }
        let rearranged = rearrange(&revs, &base, 7);
    }
        match self {
        }
            MetadataType::ProcessName {..} => "process_name",
/// See `trace_payload` for a more complete discussion.
    #[test]
    #[test]

            HighlightFind { visible } => {
//! this central engine. It provides the ability to apply edits that depend on
/// conforms to is currently determined by the feature this library is compiled
        first_line..(last_line + 1)
        }
}
                name, categories, None, start, end - start));
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    /// Tests that priorities are used to break ties correctly
#[inline]
        let b = a.slice(2, 4);
    // TODO: switch to a persistent Set representation to avoid O(n) copying
    num: u32,
        assert_eq!(snapshot[3].name, "b");
    }
                offset = prev;
        let trace = Trace::enabled(Config::default());
        // Any edit cancels a drag. This is good behavior for edits initiated through
    /// Width in bytes (utf-8 code units).
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
pub fn samples_cloned_unsorted() -> Vec<Sample> {
            'b' => SampleEventType::AsyncStart,
}
            rendered_styles.push(sel_end as isize - sel_start as isize);
    /// Selects the given region and supports multi selection.

        assert_eq!(snapshot[5].name, "z");
        self.set_selection(text, selection);
            edit: Undo { toggled_groups, deletes_bitxor }

        


    pub fn iter_chunks_all(&self) -> ChunkIter {
        self.revs.iter().enumerate().rev()
        let mut engine = Engine::new(Rope::from(""));

        // update only find highlights affected by change
        b.push_str(s);
            let new_region = region_movement(movement, region, self,
    /// The selection state for this view. Invariant: non-empty.
    #[test]
                    }
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            lines: 0,
}
            b.push('b');
            let mut peers = Vec::with_capacity(count);
    /// Get the line range of a selected region.

    DurationBegin,
        });
        // rather than emitting an explicit start/stop to reduce the size of

        assert_eq!(rope.line_of_offset(1), 0);
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);

        match *self {
    }
}

        leaf.as_bytes()[pos]
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    #[test]
        let inserts_1 = parse_subset_list("
/// Returns all the samples collected so far.  There is no guarantee that the
        assert_eq!(utf8_offset, 19);
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
impl From<Rope> for String {

use interval::Interval;
pub fn enable_tracing() {
        let mut a = Rope::from("");
                if !inserts.is_empty() {

            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
}
            MetadataType::ThreadName {..} => "thread_name",
        };
    }
    #[test]
    move_delta.apply(tombstones)
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {

    /// The line number is 0-based.
///
}
        --#--
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            MetadataType::ThreadName {..} => "thread_name",
        let a = Rope::concat(
/// * `name` - A string that provides some meaningful name to this sample.
    #[test]
        // 1 for exe name & 1 for the thread name
                             client: &Client, style_spans: &Spans<Style>)
        self.revs.last().unwrap().rev_id
        let script = vec![

            Assert(1, "arpb".to_owned()),
                        Some(gc_dels.transform_shrink(&inserts))

/// from the new revisions on the left.
impl<'a> Drop for SampleGuard<'a> {
                Edit { priority, undo_group, inserts, deletes } => {
            timestamp_us: ns_to_us(timestamp_ns),
                splitpoint -= 1;
                    }
    /// An iterator over the lines of a rope.
        self.set_selection_raw(text, sel.into());
    #[test]
// You may obtain a copy of the License at

/// See `trace_payload` for a more complete discussion.
        let revs = basic_insert_ops(inserts, 1);
        }
    }

}
                        gc_dels = new_gc_dels;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            result["cursor"] = json!(cursors);
                        priority, undo_group,
    /// method to be fast even when the selection is large.
        assert_eq!(correct, res);
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
use std::collections::BTreeSet;
    AsyncEnd,
/// Then offset=1 is invalid.
    #[test]
use delta::{Delta, InsertDelta};

                } else if click_count == Some(3) {
impl<'a> Iterator for Lines<'a> {
        let text_a = Rope::from("zcbd");
    #[test]
    TRACE.closure_payload(name, categories, closure, payload)
                    s = s.transform_shrink(&transformed_inserts);


    }
    TRACE.instant_payload(name, categories, payload);
                    if s.ends_with('\r') {
        leaf.as_bytes()[pos]
                            ops.push(self.build_update_op("skip", None, n_skip));
            } else {
    /// the frontend.
            'E' => SampleEventType::DurationEnd,


    Width(f64),
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        engine.undo([1,3].iter().cloned().collect());
        // A with ring, hangul, regional indicator "US"

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            min: offset,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    /// Selects the next find match.
    fn prev(s: &String, offset: usize) -> Option<usize> {
            if self[i] != other[i] {
        let trace = Trace::disabled();
        self.do_set_replace(replacement, false);


        let (mut new_revs, text, tombstones, deletes_from_union) = {
impl Ord for Sample {
    // partly because the reachability calculation would become more complicated (a
            Assert(0, "acrbdz".to_owned()),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                engine.gc(&to_gc)
    fn len(&self) -> usize {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
        }
        a.lines_all().collect::<Vec<_>>());
        where D: serde::Deserializer<'de>
                        Cow::Owned(un_deleted.transform_shrink(inserts))
        }
                true => x.end,

            _ => return
    }
        } else {
// distributed under the License is distributed on an "AS IS" BASIS,
    }
                        DeltaElement::Copy(start, end),
    }

        assert_eq!(None, a.next_codepoint_offset(10));
    }
        result
        }
}
                RenderTactic::Discard => {
            'X' => SampleEventType::CompleteDuration,
        {
        let max_line = self.measure::<LinesMetric>() + 1;
        rope.line_of_offset(20);
            black_box(time::precise_time_ns());

        serializer.serialize_str(&String::from(self))
            rev_id, max_undo_so_far,
/// None if an irrecoverable error occured.
        assert!(empty == empty);
            }
            }),
                self.do_set_replace(chars, preserve_case),

        assert!(empty == empty);
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
use width_cache::WidthCache;
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            black_box(time::precise_time_ns());

    /// This case is a regression test reproducing a panic I found while using the UI.
}
use selection::{Affinity, Selection, SelRegion};

        }
    }
            find_changed: FindStatusChange::None,
    }
            // d-expand by other
        for &(sel_start, sel_end) in hls {
    // in a single session.

        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
// limitations under the License.

    /// Get next codepoint after cursor position, and advance cursor.

// you may not use this file except in compliance with the License.
    /// All the selection regions other than the one being dragged.
        for seg in self.lc_shadow.iter_with_plan(plan) {
        #---

    }
    utf16_size: usize,
    }
        }
                cursors.push(c - start_pos);
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        let mut cursors = Vec::new();
    ///
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    }
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
                                                    self.size.width));
/// from the new revisions on the left.

        self.push_str(&other[start..end]);
/// Usage of static strings is encouraged for best performance to avoid copies.
pub struct LinesRaw<'a> {
use styles::{Style, ThemeStyleMap};
        assert!(r == a_rope.clone() + b_rope.clone());
                    };
        for _ in 0..line_len {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
///
    /// is optional.
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// Tracks whether there has been changes in find results or find parameters.
        });
}
        let mut b = line_cache_shadow::Builder::new();
            // Do the merge one direction
        self.set_selection_raw(text, sel.into());
        let a = Rope::from("a\nb\nc");
// you may not use this file except in compliance with the License.
                serializer.serialize_newtype_variant("DeltaElement", 1,
        offset
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
impl<'a> Iterator for ByteIter<'a> {
            utf16_size: count_utf16_code_units(s),
            DeltaElement::Copy(ref start, ref end) => {
    }
/// * `name` - A string that provides some meaningful name to this sample.
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
        /// revision that were deleted by this revision.
        if self.is_enabled() {
    #[test]
            Assert(0, "b".to_owned()),
        ];
            Assert(0, "cbd".to_owned()),
            }
        assert_eq!(2, expand_by.len());
        assert_eq!(rope.offset_of_line(1), 3);
    pub fn enable_config(&self, config: Config) {
        self.set(new_pos);
            } else {
    /// terminating newline.
    pub chars: String,
        self.enabled.load(AtomicOrdering::Relaxed)
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
            Some((l, off)) => (l, off),
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }
        let trace = Trace::disabled();
}
    }
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    #[derive(Clone, Debug)]
    }

#[derive(Serialize, Deserialize, Debug, Clone)]

        }

                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
            Assert(0, "ab".to_owned()),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    /// Imagine a "union string" that contained all the characters ever
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
///
        let _t = trace_block("View::wrap_width", &["core"]);
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
            self.record(Sample::new_duration(
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
        });
}
        let new_head = engine.get_head_rev_id().token();
                                                        &mut line_cursor,
            if self[i] != other[i] {

            rendered_styles.push(0);

        true
                }
            rebased_deletes_from_union.union(to_delete)
                    let sel_start = cursor.pos();
        let offset = self.line_col_to_offset(text, line as usize, 0);
#[derive(Serialize, Deserialize, Debug, Clone)]
        let deletes_from_union_a = parse_subset("-#---");
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
            SampleEventType::DurationBegin => 'B',
///
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        self.deletes_from_union = new_deletes_from_union;
        }
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        // since character was inserted after gc, editor gcs all undone things



    #[test]
                    // fast-forward this revision over all common ones after it
        self.lines += other.lines;
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
    pub fn prev_codepoint(&mut self) -> Option<char> {
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
    fn eq(&self, other: &Sample) -> bool {
            tid: sys_tid::current_tid().unwrap(),
            let new_region = region_movement(movement, region, self,
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        assert!(leaf.is_char_boundary(end));
        let head = engine.get_head_rev_id().token();
            }
use serde::de::{Deserialize, Deserializer};
                self.select_word(text, offset, true)
            }

    #[cfg(feature = "dict_payload")]

        assert_eq!(None, b.next_codepoint_offset(9));
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
#[inline]
use unicode_segmentation::GraphemeIncomplete;
            }),
        let (leaf, offset) = match self.get_leaf() {
            Assert(1, "ab".to_owned()),
        assert_eq!(1, b.line_of_offset(2));
        ---#--
        assert_eq!(samples[1].name, "local pid");

enum WrapWidth {
        if self.is_enabled() {
        }
        let after_first_edit = engine.get_head_rev_id().token();
/// Creates a duration sample that measures how long the closure took to execute.
    where D: serde::Deserializer<'de> {
    fn next(s: &String, offset: usize) -> Option<usize> {
    }
    fn can_fragment() -> bool { true }
        // that into our actual target.
    wrap_col: WrapWidth,
/// something_expensive();
            view_id: view_id,

    pub fn iter_chunks_all(&self) -> ChunkIter {
    #[test]
            tid: sys_tid::current_tid().unwrap(),

        for rev in self.revs[rev_index..].iter().rev() {
        }
                }
#[inline]
/// discussion on payload.
        self.find_changed = FindStatusChange::None;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
    }
            self.record(Sample::new_duration(
        if let Some(exe_name) = exe_name() {
    fn compute_info(s: &String) -> Self {
    fn basic_rev(i: usize) -> RevId {
            }

        let height = self.line_of_offset(text, text.len()) + 1;
            find.set_hls_dirty(false)
        while offset < l.len() && !l.is_char_boundary(offset) {
            end,
        let (ins_delta, deletes) = delta.factor();
            SampleEventType::FlowEnd => 'f',
            trace.closure("test_samples_closure", &["test"], || {});
    fn can_fragment() -> bool { false }
        }
    }
        assert_eq!(snapshot[0].name, "process_name");
            name: sample_name,
        where D: Deserializer<'de>,
        let trace = Trace::enabled(Config::default());
pub struct Size {
        assert_eq!(rope.offset_of_line(0), 0);
    }
    // reachability calculation.
            name: name.into(),
        let first_line = self.line_of_offset(text, start);
        // find the lowest toggled undo group number
        println!("{:#?}", b_delta_ops);
        // the front-end, but perhaps not for async edits.
        }
            size: Size::default(),
    }
        // 1 for exe name & 1 for the thread name
        for &(trans_priority, ref trans_inserts) in &expand_by {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
///

    fn offset_of_line_panic() {
    let mut utf16_count = 0;
    }
        }
                    s = s.transform_shrink(&transformed_inserts);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    pub(crate) fn unset_find(&mut self) {
/// An element in a `RopeDelta`.
                // merge logic.
        d_builder.delete(Interval::new_closed_open(10, 36));
//
pub fn len_utf8_from_first_byte(b: u8) -> usize {
                        let n_skip = seg.their_line_num - line_num;
            self.truncate(splitpoint);
/// some way.
    fn compute_transforms_2() {
    ///
        assert_eq!("a", String::from(&tombstones_2));
    #[cfg(feature = "benchmarks")]
            MetadataType::ProcessName {name} => (Some(name), None),
    /// Tracks whether the replacement string or replace parameters changed.

                CategoriesT::StaticArray(c)
    use delta::{Builder, Delta};
            type Value = CategoriesT;
    }
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
pub struct SampleGuard<'a> {

            Assert(1, "arpb".to_owned()),
        let a = Rope::from("a\nb\n");
    }
        self.deletes_from_union = new_deletes_from_union;
        undo_group: usize,
        self.timestamp_us.cmp(&other.timestamp_us)
    pub fn default() -> Self {
    // TODO: insert from keyboard or input method shouldn't break undo group,
        cursor.prev_grapheme()
/// Usage of static strings is encouraged for best performance to avoid copies.
}
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),


/// ```
        selection.add_region(region);

            let max_undo = self.max_undo_group_id();
extern crate test;
        ");
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
    pub fn scroll_height(&self) -> usize {
        let mut cursor = Cursor::new(self, offset);
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
///
                        sample.tid));
    #[bench]
///
    fn lines_raw_small() {
// limitations under the License.
        // probably change as the recording internals change.
        for find in &mut self.find {
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
            max_undo_so_far,
        assert_eq!(snapshot[2].name, "a");
}
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    /// Get next codepoint after cursor position, and advance cursor.
            edit: Edit {
    #[cfg(feature = "benchmarks")]

        // todo: the correct Find instance needs to be updated with the new parameters
    }
    pub preserve_case: bool
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
            self.args == other.args
            AssertAll("ac".to_owned()),
//
//!
    }
    {
        self.set_selection(text, selection);
            SampleEventType::DurationBegin => 'B',
    #[test]
    pub fn prev_codepoint(&mut self) -> Option<char> {
    /// in the range of 511-1024 bytes.
    fn bench_two_timestamps(b: &mut Bencher) {
            Assert(1, "arpb".to_owned()),
    }
///
    }
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
use std::str::FromStr;
                    if !deletes.is_empty() {
/// let a = Rope::from("hello ");
/// that sorted would be prohibitively expensive.
        }

impl PartialEq for CategoriesT {
    #[test]
            'M' => SampleEventType::Metadata,
#[inline]
                }
    }
        Ok(Rope::from(s))
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
    }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);


            max: offset,
        match self.inner.next() {
        MergeTestState::new(3).run_script(&script[..]);
        // rather than emitting an explicit start/stop to reduce the size of
        b.iter(|| black_box(sys_tid::current_tid()));
            }
        rendered_styles
        String::from(&r)
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
                }
            edit: Undo { toggled_groups, deletes_bitxor }
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
        Lines {
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    let mut out = Vec::with_capacity(b_new.len());

            Merge(0,2), Merge(1, 2),
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            },

        trace.instant("4", &["test"]);

        assert_eq!(None, b.next_codepoint_offset(9));

            timestamp_us: ns_to_us(time::precise_time_ns()),

        let first_rev = engine.get_head_rev_id().token();
        {
}

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            trace.closure("something", &[], || ());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            self.name == other.name &&
        let d = engine.delta_rev_head(first_rev);

        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
            Assert(2, "afc".to_owned()),
        match self {
    fn test_get_samples_nested_trace() {
    /// not account for any overhead of storing the data itself (i.e. pointer to
            SelectionForReplace => self.do_selection_for_replace(text),
            SelectAll => self.select_all(text),
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        let start = time::precise_time_ns();

/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
// See the License for the specific language governing permissions and
}
            }, to_payload("test_get_sorted_samples"));
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {

        for _i in 0..50 {
            Assert(0, "acpbdj".to_owned()),
use serde::de::{Deserialize, Deserializer};
            'O' => SampleEventType::ObjectSnapshot,
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        let correct = parse_subset_list("
    // possible to fix it so that's not necessary.
use rpc::{GestureType, MouseAction, SelectionModifier};
    }
    #[serde(default = "initial_revision_counter", skip_serializing)]
                Undo { toggled_groups, deletes_bitxor } => {
        /// Used to order concurrent inserts, for example auto-indentation
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                self.do_selection_for_find(text, case_sensitive),
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);

pub struct View {
///
            Assert(0, "zacpbdj".to_owned()),
    }

                                        &selections, &hls, style_spans);
        RopeInfo {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

    }
        self.enable_config(Config::default());
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        }
    /// Only works well for ASCII, will probably not be maintained long-term.
    pub fn new_duration_marker<S, C>(name: S,
                    undo_group: i+1,
            FindPrevious { wrap_around, allow_same, modify_selection } =>
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        };
}
    text: Rope,
        let height = self.line_of_offset(text, text.len()) + 1;
                    .with_horiz(horiz)
                el.serialize_field(end)?;


                return;
    type L = String;
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
              F: FnOnce() -> R
        }


    /// tiny it is effectively O(n). This iterator does not allocate.
        }
        let a = Rope::from("a\nb\nc");
        assert_eq!(Some(0), a.prev_grapheme_offset(3));

        }

            next_expand_by.push((trans_priority, new_trans_inserts));
    }
            let expand_by = compute_transforms(a_new);
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));

                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));

        let mut all_samples = self.samples.lock().unwrap();
impl PartialEq for CategoriesT {
        // of the delta so we can set the cursor before or after the edit, as needed.
    DurationBegin,
        Self {
        }

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
        let trace = Trace::enabled(Config::with_limit_count(11));
    }
                // TODO: small nit, merged region should be backward if end < start.
    /// If `modify` is `true`, the selections are modified, otherwise the results

                self.find_changed = FindStatusChange::All;
                    if let Some(last_selection) = self.selection.last() {

    /// Collapse all selections in this view into a single caret
    }
            None => text.line_of_offset(offset)
        let revs = basic_insert_ops(inserts, 1);

}
                deletes: new_deletes,
fn ns_to_us(ns: u64) -> u64 {
        Self {
                    } else {
        if all_samples.is_empty() {
        assert_eq!(None, a.next_grapheme_offset(17));
        engine.gc(&gc);
    ///


    fn do_split_selection_into_lines(&mut self, text: &Rope) {
    fn undo_5() {
    fn line_offsets() {
    /// Determine whether `offset` lies on a codepoint boundary.
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
///


//

                    ops.push(self.build_update_op("invalidate", None, seg.n));
mod sys_tid;
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
        engine.undo([2].iter().cloned().collect());
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    }
            }
    // since undo and gc replay history with transforms, we need an empty set
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        assert_eq!(0, a.lines_all().count());


    /// update cycle. This should be a last resort, updates should generally cause

            if cur_len_utf16 >= in_measured_units {
        let trace = Trace::enabled(Config::default());
    }
        let mut sel = Selection::new();
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
            None
///

        }
/// assert_eq!("llo wo", String::from(c));

        let height = self.line_of_offset(text, text.len()) + 1;
        assert_eq!(1, res);

        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        assert_eq!(snapshot[8].name, "x");
    }
                priority: new_priority,
/// Revision 0 is always an Undo of the empty set of groups
        let revs = basic_insert_ops(inserts, 1);
        impl From<RopeDelta_> for Delta<RopeInfo> {
                                     categories: C,
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);

    pub width: f64,
    fn next_rev_id(&self) -> RevId {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        where S: Into<StrCow>, C: Into<CategoriesT>
            &rebased_deletes_from_union, &new_deletes_from_union);
    replace: Option<Replace>,
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
}

        let correct = parse_subset_list("
    /// The process the sample was captured in.
            sample.event_type = SampleEventType::DurationEnd;
        let end = time::precise_time_ns();
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
#[inline]
    /// This is used to determined whether FindStatus should be sent to the frontend.
        #------
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    for rev in revs.iter().rev() {
                    priority, undo_group,
    #[test]
                let categories = v.split(",").map(|s| s.to_string()).collect();
        ");
    TRACE.samples_cloned_sorted()
    pub metadata_name: Option<StrCow>,
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
            Merge(0,1),
        use self::MergeTestOp::*;
        let offset = self.line_col_to_offset(text, line, col);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }
                    } else {
                    if retain_revs.contains(&rev.rev_id) {
        }
            // with offset == s.len(), but be defensive.
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            ix = sel_end as isize;
                                deletes,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    for r in revs {
        let offset = self.line_col_to_offset(text, line, col);
    }
    #[inline]
    }
    #[test]
            s = &s[splitpoint..];
                        word_cursor.select_word()

    }

        // move deleted or undone-inserted things from text to tombstones
    pub fn get_samples_count(&self) -> usize {
    /// update cycle. This should be a last resort, updates should generally cause
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
struct FullPriority {
    }
            self.push_leaf(s[..splitpoint].to_owned());
        self.timestamp_us.cmp(&other.timestamp_us)
            Assert(0, "abc".to_owned()),
                    if !inserts.is_empty() {
    /// the text).
enum WrapWidth {
}
//! There is also a full CRDT merge operation implemented under
        }
        }
    #[test]
impl SampleEventType {
            // copy the current state
            FindPrevious { wrap_around, allow_same, modify_selection } =>
    fn bench_trace_instant_disabled(b: &mut Bencher) {

        }
                if s.ends_with('\n') {
        selection.add_region(region);
            find_changed: FindStatusChange::None,
    /// than this will panic.
        }

        match ty {
    /// from the rope.
/// Returns all the samples collected so far ordered chronologically by
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
                    to_payload(("some payload for the block"))));
                    self.fragment = "";
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
/// # Arguments

/// }
        b.set_dirty(true);
    /// Select entire buffer.
        }
        RopeInfo {
    pub fn max_samples(&self) -> usize {
        } else {

}
        (Revision {
/// Usage of static strings is encouraged for best performance to avoid copies.
    //

        if !self.is_enabled() {
            thread_name: None,
    {
    /// The name to associate with the pid/tid.  Whether it's associated with
    ///
                    // can only happen on empty input
        let b = a.slice(1, 10);
impl Config {
///
}
//
                    // we don't want new revisions before this to be transformed after us
/// However, anything that can be converted into a Cow string can be passed as
//
        for i in 0..self.len() {
        let trace = Trace::enabled(Config::with_limit_count(11));
    fn measure(info: &RopeInfo, _: usize) -> usize {
                        let mut rendered_lines = Vec::new();
                    }
                    if invert_undos {
// Unless required by applicable law or agreed to in writing, software
categories_from_constant_array!(7);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
        let trace = Trace::disabled();
        }
        let mut offset = 0;
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[serde(skip_serializing)]
                      delta: &Delta<RopeInfo>, client: &Client,
        }
// ======== Generic helpers
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
#[inline]
/// creation.  Roughly corresponds to start_ns but instead there's a
                    to_payload(("some payload for the block"))));
            Merge(0,1),
        // move deleted or undone-inserted things from text to tombstones
    // Send the requested lines even if they're outside the current scroll region.
    use serde_test::{Token, assert_tokens};
struct FullPriority {
    TRACE.closure_payload(name, categories, closure, payload)
///
/// Applies an optimization where it combines sequential revisions with the

        }
    fn to_payload(value: &'static str) -> TracePayloadT {
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    }
            Merge(3, 0), Merge(4, 1), Merge(5, 2),

    }

            }
/// }

/// Create a `Rope` from a `String`:
    /// the same even if it is rebased or merged between devices.
        for find in &mut self.find {
        if !gc_dels.is_empty() {
    }

        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                    };

            Merge(0,2), Merge(1, 2),
            timestamp_us: ns_to_us(time::precise_time_ns()),
    }
        // send updated replace status if changed
        b.iter(|| {
}
                let mut cursor = Cursor::new(&text, region.min());
        None => {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
    /// Tracks whether find highlights should be rendered.

        if !selection.regions_in_range(offset, offset).is_empty() {
            'X' => SampleEventType::CompleteDuration,

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
        use self::MergeTestOp::*;
    }
        let script = vec![
}
            }
        Cow::from(b)
        }
                engine.gc(&to_gc)
    }
//! this central engine. It provides the ability to apply edits that depend on
        let mut selections = Vec::new();
}
                    })
        let new_sel = selection_movement(movement, &self.selection,
        self.find.iter().map(|find| {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
    fn undo_3() {
    }
    }
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
    }
        in_base_units
    #[test]
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);

        };
    use test::Bencher;
///
//! This module actually implements a mini Conflict-free Replicated Data Type

                } else {
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
    pub fn max_samples(&self) -> usize {
            if !selection.is_empty() {
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
            }
        let mut b = line_cache_shadow::Builder::new();
        self.samples.lock().unwrap().limit()
    fn gc_4() {
    fn test_get_samples() {
    /// If the cursor is at the end of the rope, returns the empty string.
                        Some(gc_dels.transform_shrink(&inserts))
                        };
        let mut engine = Engine::new(Rope::from(TEST_STR));


    }
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
                self.find_changed = FindStatusChange::All;
/// A rope data structure.
/// Returns the operations in `revs` that don't have their `rev_id` in
    pub thread_name: Option<StrCow>,
                    result = cow_append(result, &self.fragment[.. i + 1]);
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());


    revs: Vec<Revision>,
                    }
            rev_id: self.next_rev_id(),
                c.provide_context(&pl, self.pos() - poffset);
    /// Find parameters and number of matches changed.
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            categories: Some(categories.into()),
        }
            if region.is_caret() {
        s.is_char_boundary(offset)
    pub fn select_all(&mut self, text: &Rope) {

    }
            Merge(3,1), Merge(5,3),

pub struct Size {
                    if sel_end_ix > sel_start_ix {
            first_line: 0,
                }
    assert!(a[0].rev_id == b[0].rev_id);
                        }
    fn edit_rev_concurrent() {
        assert_eq!("herald", String::from(a));
    fn offset_of_line_panic() {
                _ => panic!("to_base_units called with arg too large")

        ix
    #[serde(rename = "sort_index")]
        if !before {
    TRACE.samples_cloned_sorted()
            &rebased_deletes_from_union, &new_deletes_from_union);
        priority: usize,
//! A rope data structure with a line count metric and (soon) other useful
                        let mut line_cursor = Cursor::new(text, offset);
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
            Merge(1,0),
                    RopeDeltaElement_::Copy(start, end) =>
/// ```
    pub fn lines_all(&self) -> Lines {
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            if self[i] != other[i] {
        Cow::from(a.into_owned() + b)
        }
    }
        expand_by = next_expand_by;
        for _i in 0..50 {
            rev_id, max_undo_so_far,
        // even though the actual sampling order (from timestamp of
        self.set_selection_raw(text, selection);

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            }
use self::Contents::*;
                last_priority = Some(priority);
        if self.find_changed != FindStatusChange::None {

                self.do_gesture(text, line, col, ty),
            utf16_count += 1;
    }
            }
pub struct Lines<'a> {
                out.push((prio, inserts));
        } else {
    /// Get text of a given revision, if it can be found.
            }
}
        assert_eq!(2, a.line_of_offset(4));



            Assert(1, "ab".to_owned()),
        result

    }
        // We add selection after find because we want it to be preferred if the
            }
        let new_head_2 = engine.get_head_rev_id().token();

            }
                self.push_leaf(s.to_owned());
        let mut all_samples = self.samples.lock().unwrap();

    /// The incrementing revision number counter for this session used for `RevId`s
        // only one of the deletes was gc'd, the other should still be in effect
        self.revs.push(new_rev);
                            if !deletes.is_empty() {
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

    fn can_fragment() -> bool {
    #[cfg(feature = "benchmarks")]
                },
            Move(movement) => self.do_move(text, movement, false),
use linewrap;
// should make this generic, but most leaf types aren't going to be sliceable
/// See `trace_closure` for how the closure works and `trace_payload` for a
        let ix = style_map.add(style);
impl<'de> Deserialize<'de> for Delta<RopeInfo> {

        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
/// Create an instantaneous sample without any payload.  This is the lowest
    fn can_fragment() -> bool { true }
        trace.instant("1", &["test"]);
        use std::hash::{Hash, Hasher};
    #[bench]
    /// if there is not at least one edit.

        let trace = Trace::enabled(Config::default());
        let new_inserts = union_ins_delta.inserted_subset();
            find_changed: FindStatusChange::None,
        soln.push('f');
        }
    /// This uniquely represents the identity of this revision and it stays
        deletes: Subset,
    session_id: SessionId,
        );
const FLAG_SELECT: u64 = 2;

        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
                    } else {
///
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    /// Get revision id of head revision.
            Some((l, off)) => (l, off),
/// Revision 0 is always an Undo of the empty set of groups
        self.text = text;
                    if seg.validity == line_cache_shadow::ALL_VALID {
    fn delta_rev_head() {
        let d = engine.delta_rev_head(after_first_edit);
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
        for rev in self.revs[rev_index..].iter().rev() {
        Self {
            self.find.push(Find::new());
        let mut engine = Engine::new(Rope::from(TEST_STR));
        // stable order since the resolution of timestamps is 1us.
/// Usage of static strings is encouraged for best performance to avoid copies.
        self.sample_limit_count * size_of::<Sample>()

        let subset_str = format!("{:#?}", expand_by[0].1);

            }
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
            trace.closure("test_samples_closure", &["test"], || {});
        assert_eq!(0, a.line_of_offset(0));
        a.edit_str(1, 9, "era");
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
/// Applies an optimization where it combines sequential revisions with the
    #[test]

/// Base unit is utf8 code unit.
                        });
/// an argument.
    /// Returns a tuple of a new `Revision` representing the edit based on the
    {
                    }
                MetadataType::ProcessName {name: exe_name},
                // TODO: small nit, merged region should be backward if end < start.
        b.iter(|| black_box(sys_tid::current_tid()));
}
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
/// first can make it ~1.7x slower than a regular trace.

        let tombstones_a = Rope::from("a");

        }
use multiset::{Subset, CountMatcher};
        };
                        deletes: transformed_deletes,
    base_sel: Selection,
/// conversions in both directions.
    }
            els: Vec<RopeDeltaElement_>,
        assert_eq!(1, r.line_of_offset(r.len() - 1));

        let new_head = engine.get_head_rev_id().token();
        true
    }
        let (start, end) = {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();

                        let (inserts, deletes) = if gc_dels.is_empty() {
    buffer_id: BufferId,
            self.unset_find();

        let mut a = Rope::from("");
        delta.end()
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
        };
            cursor: Cursor::new(self, start),
        -> R
        assert!(r != a_rope);
        assert_tokens(&rope, &[
            }

                            rev_id: rev.rev_id,
        let utf8_offset = 9;

    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
    }
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
        self.len() >= MIN_LEAF
            }
{
            self.event_type == other.event_type &&
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
                metadata_sort_index: sort_index,
}
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
    pub fn disabled() -> Self {
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
    fn deserialize<D>(deserializer: D)
            Assert(1, "apb".to_owned()),
            Assert(1, "apbj".to_owned()),
    /// after an edit is applied, to allow batching with any plugin updates.
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
            }

    #[allow(dead_code)]
            thread_name: Sample::thread_name(),
    pub height: f64,
            }
    #[test]
}
impl PartialEq for Sample {
        if let Some(ix) = style_map.lookup(style) {
    }
                    new_deletes = new_deletes.transform_expand(inserts);
        let mut b = line_cache_shadow::Builder::new();
/// A static string has the lowest overhead as no copies are necessary, roughly
                priority: new_priority,
use delta::{Delta, DeltaElement};
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
                let mut sel = Selection::new();
        CategoriesT::DynamicArray(c)
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            MetadataType::ThreadName {..} => "thread_name",
    -> SampleGuard<'a>
            args: Some(SampleArgs {
/// discussion on payload.
        }
            Merge(2,0),
        b.iter(|| sys_pid::current_pid());
            self.start_drag(offset, offset, offset);
    #[test]
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    pub duration_us: Option<u64>,
                        _ => break
            self.record(Sample::new_duration(
                        } else {
        let (leaf, pos) = cursor.get_leaf().unwrap();
        engine.undo([1,2].iter().cloned().collect());
    session1: u64,
// distributed under the License is distributed on an "AS IS" BASIS,

        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
        #[derive(Serialize, Deserialize)]
            "n": n,
/// # use xi_rope::Rope;
    /// Tests that merging again when there are no new revisions does nothing
}
    }
/// A flag used to indicate when legacy actions should modify selections
    }
fn count_utf16_code_units(s: &str) -> usize {
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        let script = vec![
    for &b in s.as_bytes() {
    type Item = Cow<'a, str>;
///
        None => {
            to_undo.insert(i+1);
impl CategoriesT {
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
//! under `Engine::edit_rev`, which is considerably simpler than the usual
}
/// assert_eq!("llo wo", String::from(c));
            offset = text.len();

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        }

            None
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
    /// Returns the largest undo group ID used so far
        let start = time::precise_time_ns();
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                    if undone_groups.contains(undo_group) {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                let (nl, noffset) = self.next_leaf()?;
                        let (inserts, deletes) = if gc_dels.is_empty() {
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        if before {
        assert_eq!(snapshot[0].name, "process_name");

        }
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        self.cursor.next_leaf();

    fn edit_rev_concurrent() {
            drag_state: None,
    {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
extern crate test;
    /// Constructs an instantaneous sample.
        LinesRaw {
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        };
                        } else {
        cursor.is_boundary::<BaseMetric>()
    #[test]

        let mut b = TreeBuilder::new();
    /// how many times it has been deleted, so if a character is deleted twice
                    } else {
    fn do_cancel(&mut self, text: &Rope) {
                                undo_group,
    /// Time complexity: O(log n)
    /// Find what the `deletes_from_union` field in Engine would have been at the time
        true
        trace.record(guard.sample.as_ref().unwrap().clone());

            retain_revs.insert(last.rev_id);
/// Applies an optimization where it combines sequential revisions with the
    /// The empty string will yield a single empty slice. In all other cases, the
#[derive(Clone, Copy)]
///
}
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
/// The payload associated with any sample is by default a string but may be
                            rev_id: rev.rev_id,
    #[cfg(feature = "benchmarks")]
            'b' => SampleEventType::AsyncStart,
/// some way.
        } else {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
}
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        }
    use interval::Interval;
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    }
        // since character was inserted after gc, editor gcs all undone things
    }
/// Represents the current state of a document and all of its history
        } else {
        let text_with_inserts = text_ins_delta.apply(&self.text);
    }
            Assert(0, "ab".to_owned()),
        let cursor = Cursor::new(self, offset);
}
pub fn count_newlines(s: &str) -> usize {

            // These two will be different without using session IDs
                    }
                    filename.to_str().map(|s| s.to_string())
//
            } else {

                    // TODO: update (rather than re-render) in cases of text valid
    pub chars: String,
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {

///
}
    #[cfg(feature = "benchmarks")]
        assert!(leaf.is_char_boundary(end));
    }
            edit: Contents::Edit {
                        DeltaElement::Copy(start, end),
                _ => panic!("to_base_units called with arg too large")
        // of the delta so we can set the cursor before or after the edit, as needed.
    }
impl Serialize for Delta<RopeInfo> {

        deletes_from_union
            panic!("line number {} beyond last line {}", line, max_line);

/// A guard that when dropped will update the Sample with the timestamp & then
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)

        ---#-

                Undo { ref toggled_groups, ref deletes_bitxor } => {
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
        for _ in 0..line_len {
            revs: vec![rev],
        // the generated JSON.
        where S: Into<StrCow>, C: Into<CategoriesT>
                    }
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            engine.edit_rev(0, 0, first_rev, delta);
        // rebase the deletion to be after the inserts instead of directly on the head union


    pub fn enabled(config: Config) -> Self {
        println!("{:#?}", b_delta_ops);
        // stable order since the resolution of timestamps is 1us.
            timestamp_us: ns_to_us(start_ns),
            Assert(1, "pbj".to_owned()),
        for i in ((edits-max_undos)..edits).rev() {
        ");
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
    /// This is a `Subset` of the "union string" representing the characters
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
            }
        let mut selections = Vec::new();
    CompleteDuration,
        // same span exists in both sets (as when there is an active selection)
/// `base_revs`, but modified so that they are in the same order but based on
    /// Get the line range of a selected region.
    #[inline]

        if s.len() <= MAX_LEAF {
        d_builder.build()
    #[bench]
    }
        #------
        samples[0].pid = 1;
        // We could probably reduce the cloning of selections by being clever.
    #[serde(skip_serializing_if = "Option::is_none")]
    // TODO: maybe refactor this API to take a toggle set
            None
    }
    use interval::Interval;
            Assert(1, "pb".to_owned()),
        self.deletes_from_union = new_deletes_from_union;
        }
            let after = full_priority >= trans_priority;  // should never be ==
    #[cfg(feature = "benchmarks")]
/// assert_eq!("herald", String::from(a));
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
fn ns_to_us(ns: u64) -> u64 {
                tid));
        let a_revs = basic_insert_ops(inserts.clone(), 1);
{
        }
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
            Assert(0, "acpbdj".to_owned()),
                            ops.push(self.build_update_op("skip", None, n_skip));

        // ensure that when the samples are sorted by time they come out in a
            SampleEventType::Instant => 'i',
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
                splitpoint -= 1;
        value
    AsyncStart,
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        assert_eq!(Some(8), a.next_grapheme_offset(0));
        let text_with_inserts = text_ins_delta.apply(&self.text);
        }
        where D: Deserializer<'de>,
            size: Size::default(),
                    self.set_selection(text, selection);
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    /// Tests that merging again when there are no new revisions does nothing
            MetadataType::ProcessLabels {..} => "process_labels",
                            edit: Undo {
    }
    pub fn merge(&mut self, other: &Engine) {
    }
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
            Assert(1, "arpb".to_owned()),
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        Ok(Rope::from(s))
/// the session ID component of a `RevId`
        }
    TRACE.disable();
    #[cfg(feature = "benchmarks")]
                    } else {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        });
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {

use std::borrow::Cow;
                    base_len: delta.base_len
///
                        },
/// Internally, the implementation uses reference counting (not thread safe, though

        let text = Rope::from("13456");
/// See `trace_closure` for how the closure works and `trace_payload` for a
    fn to_payload(value: &'static str) -> TracePayloadT {
impl<'a> Iterator for LinesRaw<'a> {
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        assert_eq!(snapshot[4].name, "y");
// should make this generic, but most leaf types aren't going to be sliceable
        assert_eq!(snapshot[7].name, "c");
    fn into_chrome_id(&self) -> char {

}
        AssertAll(String),
    }
}
    fn build_delta_1() -> Delta<RopeInfo> {
            self.find.push(Find::new());
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        // todo: the correct Find instance needs to be updated with the new parameters
        deletes_from_union

/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
    #[serde(skip_serializing_if = "Option::is_none")]
/// Returns all the samples collected so far ordered chronologically by
    // TODO find the maximum base revision.

    TRACE.samples_cloned_sorted()

    fn undo_3() {
/// * `name` - A string that provides some meaningful name to this sample.
    }
    /// New offset to be scrolled into position after an edit.
    }
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
/// # Arguments
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
                if !inserts.is_empty() {
        // todo: this will be changed once multiple queries are supported
    }



            let expand_by = compute_transforms(a_new);

        // A with ring, hangul, regional indicator "US"

            tid: tid,
            panic!("line number {} beyond last line {}", line, max_line);
}
    num: u32,
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        LinesRaw {
        let inserts = parse_subset_list("
impl Eq for Sample {}
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        assert!(end <= leaf.len());
        }
        self.timestamp_us == other.timestamp_us &&
                c.provide_context(&pl, self.pos() - poffset);

    ///
            match self.wrap_col {
        });
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
                let mut peer = Engine::new(Rope::from(""));
        let b = a.slice(2, 4);
        }
                // Deprecated (kept for client compatibility):
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
    a_ids.intersection(&b_ids).cloned().collect()
    /// This function will panic if `offset > self.len()`. Callers are expected to
    // https://github.com/serde-rs/serde/issues/1189 is fixed.

                rev_id: basic_rev(i),
/// required). Mutations are generally copy-on-write, though in-place edits are

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
}
            }),

                },
                l = pl;
    /// borrowed from the rope.

    // * grapheme clusters
                    new_deletes = new_deletes.transform_expand(inserts);
            Assert(1, "cb".to_owned()),
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        all_samples.reset_limit(config.max_samples());

    }
    }

                    Some(Contents::Edit {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },


}
        let script = vec![
            engine.edit_rev(0, 0, first_rev, delta);


    fn test_cross_process_samples() {
            Assert(0, "abc".to_owned()),
        }
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {

    /// point. Used to optimize undo to not look further back.
                let mut sel = Selection::new();
        let (start, end) = {
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    move_delta.apply(tombstones)
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        use self::MergeTestOp::*;
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
    let mut out = Vec::with_capacity(b_new.len());
                    self.do_gesture(text, line, column, GestureType::WordSelect)
            args: Some(SampleArgs {
    where S: Into<StrCow>, C: Into<CategoriesT>
        let revs = basic_insert_ops(inserts, 1);
        // rebase insertions on text and apply
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
}
extern crate log;
            priority: 0,
        let b = a.slice(1, 10);
    }
    AsyncStart,
        assert_eq!(utf16_units, 9);
            ModifySelection(movement) => self.do_move(text, movement, true),
    #[cfg(feature = "benchmarks")]
    /// The maximum number of bytes the tracing data should take up.  This limit
///
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
            // These two will be different without using session IDs
            }
            Assert(0, "acbd".to_owned()),
            None

                }
        });


    pub metadata_sort_index: Option<i32>,
                        ops.push(self.build_update_op("copy", None, seg.n));
        };
        }
    /// Exposed for unit tests.
    type Item = Cow<'a, str>;
    }
    #[cfg(feature = "benchmarks")]
// ======== Merge helpers

            true => self.selection.clone(),

/// Revision 0 is always an Undo of the empty set of groups
        &self.selection
// utility function to clamp a value within the given range
            FindAll => self.do_find_all(text),
        let first_rev = &self.revs.first().unwrap();
        if offset >= next_line_offset {
    #[inline]

                }
                    RopeDeltaElement_::Copy(start, end) =>
    fn sample_name(&self) -> &'static str {
        let next_line_offset = self.offset_of_line(text, line + 1);
        d_builder.build()
    #[test]
        for seg in self.lc_shadow.iter_with_plan(plan) {

}
        //};

    /// Find parameters and number of matches changed.
                }
            let new_region = region_movement(movement, region, self,
            next_expand_by.push((trans_priority, new_trans_inserts));
                self.add_selection_by_movement(text, Movement::Down),

        }
}
    type Item = &'a str;
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    }
    }
        let mut cur_len_utf16 = 0;
    TRACE.disable();
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        };
categories_from_constant_array!(9);
              F: FnOnce() -> R
        }
    }
    }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        });
        assert!(a.slice(0, 0) == empty);
        // This might be an over-specified test as it will
            AddSelectionBelow =>
        self.replace_changed = true;
        struct RopeDelta_ {
        true
        }

    }
                        gc_dels = gc_dels.transform_expand(inserts);
    }
            }
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {

            .find(|&(_, ref rev)| rev.rev_id == rev_id)
    }
/// Enable tracing with a specific configuration. Tracing is disabled initially
    fn accumulate(&mut self, other: &Self) {

                    return None;
    }
        let r = r + Rope::from(&b[MIN_LEAF..]);

                _ => { }
    #[inline]
            Assert(0, "acpbdj".to_owned()),
impl<'de> serde::Deserialize<'de> for CategoriesT {
        gc_scenario(4,3);

        where S: Serializer

            }
          F: FnOnce() -> R
        let res = find_base_index(&a, &b);
                RenderTactic::Discard => {
        assert_eq!(utf8_offset, 19);
    }
                peer.set_session_id(((i*1000) as u64, 0));
                    let full_path_str = full_path.into_string();
        // insert `edits` letter "b"s in separate undo groups
                              to_payload("test_get_samples"));
            Merge(2,0),
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));

        }, new_text, new_tombstones, new_deletes_from_union)
        }
        } else {
            } else {
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
            &self.deletes_from_union, &old_deletes_from_union);
                l = nl;
        assert_eq!(1, a.line_of_offset(2));
        as_vec
    /// update cycle. This should be a last resort, updates should generally cause

        let mut cursor = Cursor::new(self, offset);

        a.push('\n');
        use self::MergeTestOp::*;
        ];
        if self.len() <= MAX_LEAF {
    }
        engine.undo([1,2].iter().cloned().collect());

            let start = self.line_of_offset(last_text, iv.start());
    #[cfg(feature = "benchmarks")]
                    a.merge(b);
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
        MergeTestState::new(3).run_script(&script[..]);

    {
        assert_eq!(None, a.next_grapheme_offset(17));
        // position after 'f' in four
        self.find_changed = FindStatusChange::None;
        }
        }
    use super::*;
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        #------
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
impl StringArrayEq<[&'static str]> for Vec<String> {
        assert_eq!(snapshot[1].name, "thread_name");
                            styles: &StyleMap, style_spans: &Spans<Style>,
// Unless required by applicable law or agreed to in writing, software
impl FromStr for Rope {
                        inserts: transformed_inserts,


                Contents::Edit {inserts, ..} => inserts,
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                edit: Contents::Edit {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                   r.lines_all().collect::<Vec<_>>());
pub struct BaseMetric(());
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        self.start_drag(offset, region.start, region.end);
        next_boundary.unwrap_or(None)
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    fn next(s: &String, offset: usize) -> Option<usize> {
                return None;
        let trace = Trace::enabled(Config::default());
            if sel_end_ix > sel_start_ix {
            Merge(2,1),
            }

        },
    }
/// With `json_payload` feature:
    #[cfg(feature = "benchmarks")]
    /// Determines whether the offset is in any selection (counting carets and

    /// The empty string will yield a single empty slice. In all other cases, the

/// assert!("hello world" == String::from(a + b));
        b if b < 0xf0 => 3,
                                gc_dels = gc_dels.transform_union(inserts);
                        deletes_from_union = deletes_from_union.union(deletes);
        }
                return None;
    }
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    type L = String;
    pub fn disabled() -> Self {
        all_samples.reset_limit(0);
    }
        offset
            let mut len = 1;
            pid: sys_pid::current_pid(),

    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
    // TODO(vlovich): Replace all of this with serde flatten + rename once
    /// the other doesn't make it re-appear.
        assert_eq!(correct, res);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            false => Selection::new(),
            }
            while !s.is_char_boundary(offset - len) {
/// An element in a `RopeDelta`.

    } else {
}
    }
    }
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    /// how many times it has been deleted, so if a character is deleted twice
        let inserts_2 = parse_subset_list("
                el.end()
    #[cfg(feature = "benchmarks")]
            's' => SampleEventType::FlowStart,
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    ///
//
        if self.find_changed != FindStatusChange::None {
    fn undo_2() {
    }
    }
                payload: payload,
                    } else {
/// Measured unit is utf8 code unit.
impl Sample {
    {
            match *op {
                self.set(pos);
    /// fine-grained in the case of multiple cursors, but we also want this
        self.scroll_to = Some(end);
        match self.selection.len() {
    #[test]
        ]);
        b.push(rhs);
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        use self::MergeTestOp::*;
                    let after = new_full_priority >= full_priority;  // should never be ==

        inserts: Subset,

    /// Invalidates front-end's entire line cache, forcing a full render at the next
                    }
        /// along with the newline that triggered it.
                    let (mut a, rest) = end.split_first_mut().unwrap();

        s.is_char_boundary(offset)
    }
        None => {
    /// Storage for all the characters that have been deleted  but could
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            panic!("line number {} beyond last line {}", line, max_line);
            }

                                            closure: F, payload: P) -> R
    }
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
/// some way.
        let mut d_builder = Builder::new(TEST_STR.len());
        revs.append(&mut revs_2);
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,

    /// fine-grained in the case of multiple cursors, but we also want this
            // about what wrapped.
            black_box(trace.block_payload(
            },

        // multiple queries; select closest occurrence
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            GestureType::WordSelect =>
        let (new_text, new_tombstones) =
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));

            update["lines"] = json!(lines);
        d_builder.delete(Interval::new_closed_open(10, 36));
}
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
#[inline]
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        let d = RopeDelta_::deserialize(deserializer)?;
            b.push('b');
            rendered_styles.push((sel_start as isize) - ix);
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
/// How tracing should be configured.
        let mut rendered_styles = Vec::new();
        let a = Rope::concat(
        match self.breaks {
            wrap_col: WrapWidth::None,
    #[test]
                    };
        self.sample_limit_count
        let mut leaf_offset = pos - offset;

use tabs::{ViewId, BufferId};
        }
        assert_eq!(Some(8), a.next_grapheme_offset(0));

    let mut last_priority: Option<usize> = None;
            end,
        for find in self.find.iter() {
/// Applies an optimization where it combines sequential revisions with the
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
use self::Contents::*;
    /// after an edit is applied, to allow batching with any plugin updates.
        assert_eq!(2, expand_by[1].0.priority);
    }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
// you may not use this file except in compliance with the License.
/// from multiple distributed sources (i.e. you want to sort the merged result

    pub fn select_range(&mut self, text: &Rope, offset: usize) {
                    } else {
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
    pub event_type: SampleEventType,
//!
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                        let start_line = seg.our_line_num;
/// }
    // This computes undo all the way from the beginning. An optimization would be to not
    s.serialize_char(ph.into_chrome_id())
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    /// Storage for all the characters that have been deleted  but could


                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));

            match modify_selection {
        samples.sort();
    rev_id: RevId,
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
    /// Set the selection to a new value.
        self.tombstones = new_tombstones;
    {
    }
    {
    pub fn new_duration_marker<S, C>(name: S,
    session1: u64,

use std::fmt;
            SampleEventType::CompleteDuration => 'X',
        self.find_changed = FindStatusChange::None;
            self.first_line = line;
        let mut style_map = style_map.borrow_mut();
        let script = vec![
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
/// revisions on top of the revisions represented by `expand_by`.
        let first_rev = engine.get_head_rev_id().token();
use styles::{Style, ThemeStyleMap};

                        let _ = s.pop();
}
        struct CategoriesTVisitor;
        });
    sample_limit_count: usize
        }
        text = new_text;
            self.record(Sample::new_duration(
        let r = Rope::from(&a[..MAX_LEAF]);
        self.replace.clone()


    }
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
            thread_name: Sample::thread_name(),
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        self.invalidate_selection(text);
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);

    #[test]
    fn measure(info: &RopeInfo, _: usize) -> usize {
        samples.sort();
    FlowInstant,
    }

            }
                        ops.push(self.build_update_op("copy", None, seg.n));
pub fn trace<S, C>(name: S, categories: C)
        count_utf16_code_units(&s[..in_base_units])

        }

/// let a = Rope::from("hello ");
        self.set_selection_for_edit(text, new_sel);
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        self.subseq(iv)
                tid));
}
        engine.edit_rev(1, 1, first_rev, d1.clone());
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
    }
    }

            Scroll(range) => self.set_scroll(range.first, range.last),
        self.scroll_to_cursor(text);
    }
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
categories_from_constant_array!(5);
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            SelectionIntoLines => self.do_split_selection_into_lines(text),
    /// The largest undo group number of any edit in the history up to this
                    e.edit_rev(p, u, head, delta.clone());
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
            if i >= max_undos {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",

    #[serde(rename = "name")]
        #---
    }
}
            .map(|pos| offset + pos + 1)
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        use self::MergeTestOp::*;
    }
                         first_line: usize, last_line: usize, pristine: bool) {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    /// the heap, counters, etc); just the data itself.
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
use std::ops::Add;
    /// If `line` is equal to one plus the current number of lines,
/// revisions on top of the revisions represented by `expand_by`.
            rendered_styles.push((iv.start() as isize) - ix);
{
                    self.do_gesture(text, line, column, GestureType::LineSelect)
pub struct Sample {


/// ```rust
    }
        }
// utility function to clamp a value within the given range
        gc_scenario(4,3);
// See the License for the specific language governing permissions and

        }
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
        }
        });
#[inline]
        let mut cursors = Vec::new();
    pub pid: u64,
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
                    // are empty, could send update removing the cursor.
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
}
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
/// An element in a `RopeDelta`.
                    RopeDeltaElement_::Copy(start, end) =>


            undo_group: 0,

        engine.gc(&gc);
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        // same span exists in both sets (as when there is an active selection)
                metadata_name: None,
///
    /// The maximum number of bytes the tracing data should take up.  This limit
            // about what wrapped.
    }
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
impl<'a> Cursor<'a, RopeInfo> {
        debug_subsets(&rebased_inserts);
/// patterns. Any large runs of typing in the same place by the same user (e.g
/// ```
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        }
            Assert(0, "bdc".to_owned()),
            MetadataType::ProcessName {name} => (Some(name), None),
        ids.iter().cloned().map(|i| {
        assert_eq!(trace.get_samples_count(), 0);

        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    }
impl fmt::Debug for Rope {
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
/// The payload associated with any sample is by default a string but may be
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    }

    }
use xi_rope::tree::Cursor;
        where D: Deserializer<'de>,
        assert_eq!(snapshot[2].name, "x");
    for rev in revs.iter().rev() {
    fn identity() -> Self {
    }
        ]);
        }
        offset
    /// Sets the selection to a new value, invalidating the line cache as needed.
/// ```
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
    fn find_base_1() {
    DurationEnd,

            self.unset_find();
                    let _ = s.pop();
    }
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    }

            "op": op,
/// Create an instantaneous sample with a payload.  The type the payload
    StaticArray(&'static[&'static str]),
        let mut gc_dels = self.empty_subset_before_first_rev();
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            Assert(2, "ab".to_owned()),
            let mut sample = self.sample.take().unwrap();
        let l_str = text.slice_to_string(start_pos, pos);

        ];
    fn hash<H: Hasher>(&self, state: &mut H) {
            .map(|(i, _)| i)
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
            ix = sel_end as isize;
        let a = Rope::from("");
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    fn scroll_to_cursor(&mut self, text: &Rope) {
        where S: Into<StrCow>, C: Into<CategoriesT>
    /// Imagine a "union string" that contained all the characters ever
            let mut len = 1;
            {
        self.view_id
        let inserts = parse_subset_list("
    fn render_line(&self, client: &Client, styles: &StyleMap,
        // if self.end is inside this chunk, verify that it is a codepoint boundary
    let mut out = Vec::with_capacity(revs.len());


            offset += 1;
        let mut result = String::new();
        all_samples.reset_limit(0);
    fn undo_4() {
    #[test]
    }
    // TODO: switch to a persistent Set representation to avoid O(n) copying

        }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let contents = Contents::Edit {
    #[cfg(feature = "benchmarks")]
        self.lc_shadow = b.build();
        s.is_char_boundary(offset)
    #[cfg(feature = "benchmarks")]

                formatter.write_str("comma-separated strings")
categories_from_constant_array!(5);
    {
                    if retain_revs.contains(&rev.rev_id) {
        match *self {
        // update only find highlights affected by change
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        len

            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        // current recording mechanism should see:

        assert_eq!(rope.offset_of_line(1), 3);

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
impl<'a> Iterator for LinesRaw<'a> {
        }
            if cur_len_utf16 >= in_measured_units {
        delta.serialize_field("base_len", &self.base_len)?;
pub type Rope = Node<RopeInfo>;
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            Cancel => self.do_cancel(text),
            match modify_selection {
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    ObjectDestroyed,
    }
        let mut a = String::new();
use std::collections::HashMap;
/// let mut a = Rope::from("hello world");
        assert_eq!("-###-", &subset_str);
    }

    pub height: f64,
        info.utf16_size

            name: name.into(),
        self.start_drag(offset, region.start, region.end);
impl<'a> Iterator for LinesRaw<'a> {
        if let Some(last) = self.revs.last() {
    TRACE.instant(name, categories);

// Unless required by applicable law or agreed to in writing, software
        // 1 for exe name & 1 for the thread name
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
    /// validate their input.
    }
            Assert(0, "acbd".to_owned()),
        self.utf16_size += other.utf16_size;
/// ```
    pub args: Option<SampleArgs>
                    }
            pending_render: false,
        use self::ViewEvent::*;
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        let style = style_map.merge_with_default(style);
    use test::Bencher;
        // A with ring, hangul, regional indicator "US"
    }
    }
        for _ in 0..(edits-max_undos) {
        update
    }
    }
    find_changed: FindStatusChange,

    fn find_base_1() {
        }
        let a = Rope::from("a\rb\rc");
        b.build()
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let res = find_base_index(&a, &b);
            AssertAll("ac".to_owned()),

        let first = max(first, 0) as usize;
    struct MergeTestState {
        self.drag_state = Some(DragState { base_sel, offset, min, max });

                }
/// record it.
                rev_id: basic_rev(i+1),
            find: Vec::new(),
                                                                0, "copy", 2)?;
            Assert(0, "acbd".to_owned()),

    }
    pub fn set_session_id(&mut self, session: SessionId) {
        self.text = new_text;
{
    out
impl Rope {
    edit: Contents,

        priority: usize,
        }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
use std::borrow::Cow;
        self.set_selection_raw(text, selection);
            Assert(0, "ab".to_owned()),

            inserts: Subset::new(0),

/// version of Ropes, and if there are many copies of similar strings, the common parts
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
///     something_else_expensive();
//! `Engine::merge`, which is more powerful but considerably more complex.

        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
            Assert(1, "acb".to_owned()),
    /// concurrently it will have count `2` so that undoing one delete but not
                (region.is_upstream() && c == pos) ||
    /// Get next codepoint after cursor position, and advance cursor.
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());

        let inserts_2 = parse_subset_list("
struct DeltaOp {
    #[test]
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
        }).unwrap_or(text.len());
        self.set_dirty(text);
        engine.edit_rev(1, 1, initial_rev, d1.clone());
            AssertMaxUndoSoFar(0,3),
    }
    /// if it is non-empty. It needs to be a separate commit rather than just
        assert_eq!(snapshot[1].name, "thread_name");
                metadata_name: None,
    deletes_from_union: Subset,
    }
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
        }
                              to_payload("test_get_samples"));
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
            }
        if self.len() != other.len() {
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        if !gc_dels.is_empty() {
    /// of the chunks is indeterminate but for large strings will generally be
                }
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
            MetadataType::ProcessLabels {..} => (None, None)

        assert_eq!(0, a.lines_all().count());
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        all_samples.push_back(sample);
        let first_rev = engine.get_head_rev_id().token();
///
        MergeTestState::new(3).run_script(&script[..]);
        }
}
            },
        use serde::de::Visitor;
    pub fn iter_chunks_all(&self) -> ChunkIter {
                std::thread::sleep(std::time::Duration::new(0, 1000));
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
    }
                    None
    /// Tracks whether find highlights should be rendered.
            };
        b.iter(|| {
        self.drag_state = Some(DragState {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            SampleEventType::FlowInstant => 't',
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    #[inline]
                        let offset = self.offset_of_line(text, start_line);
const MIN_LEAF: usize = 511;
    // of the union string length *before* the first revision.
    #[test]
    }
                last_priority = Some(priority);
            enabled: AtomicBool::new(false),
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
        if offset == s.len() {
        match *self {
    }
                MergeTestOp::Assert(ei, ref correct) => {
fn ns_to_us(ns: u64) -> u64 {
            }
            }, to_payload("test_get_samples_nested_trace"));
                WrapWidth::None => (),
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    /// The maximum number of samples that should be stored.
        }
                Contents::Edit {inserts, ..} => inserts,
            }
        let mut leaf_offset = pos - offset;
    #[test]
    /// Time complexity: O(log n)
            Assert(1, "zpbj".to_owned()),
        let expand_by = compute_transforms(revs);
}

        let last = max(last, 0) as usize;
    /// Return the offset of the codepoint before `offset`.
        engine.undo([1].iter().cloned().collect());
#[cfg(feature = "dict_payload")]
                (region.is_upstream() && c == pos) ||
            "something", &["benchmark"],
/// on program launch.
        tombstones = new_tombstones;
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
            SelectionForReplace => self.do_selection_for_replace(text),
        if self.is_enabled() {

            deletes = deletes.transform_expand(&new_trans_inserts);
    session_id: SessionId,

        result
        let guard = Self {
        }
        assert_eq!(samples[0].name, "remote pid");
    breaks: Option<Breaks>,
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            None

    pub fn lines_raw_all(&self) -> LinesRaw {
    }
                    })
                metadata_name: None,


        let subset_str = format!("{:#?}", expand_by[0].1);
    {
        Some(pos) => minsplit + pos,

{
    inner: ChunkIter<'a>,
        let mut rendered_styles = Vec::new();
            sel.add_region(region);
    }
        let (mut new_revs, text, tombstones, deletes_from_union) = {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            categories: None,
        let first = max(first, 0) as usize;
/// samples are ordered chronologically for several reasons:
        assert!(self.current.is_some());
                // should be removed in favor of do_gesture
    {
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
// Licensed under the Apache License, Version 2.0 (the "License");
    }
        assert_eq!(trace.get_samples_count(), 5);
/// let a = Rope::from("hello ");
    #[test]
    }
            Some(ref breaks) => {
    }

// you may not use this file except in compliance with the License.

/// * `categories` - A static array of static strings that tags the samples in
        let mut result = Cow::from("");
            Some(Cow::Borrowed(mut s)) => {



extern crate serde;
    }
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
    fn prev_grapheme_offset() {
pub fn is_enabled() -> bool {
        for _ in 0..(edits-max_undos) {
                },
    #[test]
}
        ];
    #[test]
            GotoLine { line } => self.goto_line(text, line),
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
            sel.add_region(
                    }
/// ```
            trace.instant("c", &["test"]);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    fn find_common_1() {
    ///
    }
            1 if self.selection[0].is_caret() => {
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
                self.add_selection_by_movement(text, Movement::Down),
            Replace { chars, preserve_case } =>
                        let (inserts, deletes) = if gc_dels.is_empty() {
    pub(crate) fn get_buffer_id(&self) -> BufferId {
        if !cursors.is_empty() {
        ];
categories_from_constant_array!(8);
            {
    fn next(&mut self) -> Option<u8> {
        if s.len() <= MAX_LEAF {

                match *other {

        len
    }
    fn from_chrome_id(symbol: char) -> Self {
    } else {
                }
                }
        let mut end = start_pos + len;
//
            type Value = CategoriesT;
        thread.name().map(|ref s| to_cow_str(s.to_string()))
            //if self.cursor.is_boundary::<BaseMetric>() {
                                  style_spans, &plan, pristine);
    fn deserialize<D>(deserializer: D)

    }
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
            let matches_only = self.find_changed == FindStatusChange::Matches;
impl From<Rope> for String {
            categories: Some(categories.into()),
        let trace = Trace::enabled(Config::default());


    -> SampleGuard<'a>
            let a_to_merge = &self.revs[base_index..];

                        let n_skip = seg.their_line_num - line_num;
            let deletes = Subset::new(inserts.len());
        self.rev_id_counter += 1;
            Assert(0, "zcpbdj".to_owned()),
                cursors.push(c - start_pos);
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
    }
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
            ix = iv.end() as isize;
                                           client, iv, new_len, px),
    }
                            rendered_lines.push(line);
                WrapWidth::Width(px) =>
            result.push_str(chunk);
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    }
        ).min_by_key(|x| {

                            rev_id: rev.rev_id,
        let utf8_offset = 19;
    }
                match elem {
                    let (mut a, rest) = end.split_first_mut().unwrap();
        first_line..(last_line + 1)
            base_rev: RevToken, delta: Delta<RopeInfo>) {
    use multiset::Subset;
    fn do_selection_for_replace(&mut self, text: &Rope) {

        self.revs.reverse();
///

        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
            Some(offset - len)
            },
        assert_eq!(rope.line_of_offset(3), 1);
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
        if let Some((l, offset)) = self.get_leaf() {
            // I think it's a precondition that this will never be called
pub struct View {
            for (i, op) in script.iter().enumerate() {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            self.find.push(Find::new());

    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
            // with offset == s.len(), but be defensive.
                            rev_id: rev.rev_id,
                serializer.serialize_newtype_variant("DeltaElement", 1,
extern crate test;
            a.push('a');
    where D: serde::Deserializer<'de> {
                }
    // TODO: this should be a Cow

        }
            "something", &["benchmark"],
    #[test]
/// returned value is dropped.  `trace_closure` may be prettier to read.
        // stable order since the resolution of timestamps is 1us.
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
#[inline]
    a_ids.intersection(&b_ids).cloned().collect()
            Merge(0,2), Merge(1, 2),
        as_vec
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
            let (start, end) = if offset < drag_state.offset {
        }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
/// * `name` - A string that provides some meaningful name to this sample.


        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
                match *other {
            } else {
                        let n_skip = seg.their_line_num - line_num;
    }
            pid: sys_pid::current_pid(),
extern crate lazy_static;
        assert_eq!(utf8_offset, 19);
        };
        let (new_text, new_tombstones) =
            inserts: Subset::new(0),
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    /// No wrapping in effect.
//!
    /// This is used to determined whether FindStatus should be sent to the frontend.
            }
        self.len()
        }
    #[test]

                peers.push(peer);
        let new_head_2 = engine.get_head_rev_id().token();
        // invert the changes to deletes_from_union starting in the present and working backwards

            if !s.is_empty() {
    /// The maximum number of entries the tracing data should allow.  Total
    buffer_id: BufferId,
            categories: Some(categories.into()),
            Merge(1,2),
    type Item = u8;
        } else {
        assert!(a != b);
                        if n_skip > 0 {
    pub pid: u64,
                // TODO could probably be more efficient by avoiding shuffling from head every time
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
    fn merge_insert_only_whiteboard() {

            sample_limit_count: limit
        info.utf16_size
    /// Replacement string.
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            match seg.tactic {
            .map(|pos| pos + 1)
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());

    /// The line number is 0-based, thus this is equivalent to the count of newlines
        samples
            Copy(usize, usize),
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
    }
            Assert(0, "zcpbdj".to_owned()),
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    fn eq(&self, other: &Sample) -> bool {
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
/// required). Mutations are generally copy-on-write, though in-place edits are
}

        self.height = last - first;
                payload: payload,
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {

    highlight_find: bool,
            }
        MergeTestState::new(3).run_script(&script[..]);
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                            styles: &StyleMap, style_spans: &Spans<Style>,

    }

        // x, a, y, b, z, c
                        hls.push((sel_start_ix, sel_end_ix));
        match self.breaks {

            Assert(0, "ab".to_owned()),
            rendered_styles.push((iv.start() as isize) - ix);
///
        if self.find.is_empty() {

    }
impl From<Vec<String>> for CategoriesT {
        if let Some(ref mut trace) = self.trace {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        self.samples.lock().unwrap().len()
            let mut sample = self.sample.take().unwrap();
        self.send_update_for_plan(text, client, styles,
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                        inserts: transformed_inserts,
    /// The maximum number of samples that should be stored.
    }
    }
    }
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
                }
use linewrap;
/// fn something_else_expensive() {
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
                self.select_word(text, offset, true)
                     modify_selection: &SelectionModifier) {
    }

}
                    if !deletes.is_empty() {
    }
    fn test_ser_de() {
        engine.edit_rev(0, 1, first_rev, build_delta_1());

    #[derive(Clone, Debug)]
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        --#--


pub struct Size {
            pos -= 1;
                match elem {

#[inline]
    #[test]

            rendered_styles.push((sel_start as isize) - ix);
            "styles": styles,
        ).min_by_key(|x| {
                        let n_skip = seg.their_line_num - line_num;
                        ops.push(self.build_update_op("copy", None, seg.n));
        let result = closure();

        let (iv, new_len) = delta.summary();
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            sample: Some(Sample::new_duration_marker(
/// ```
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
            if let GraphemeIncomplete::PreContext(_) = incomp {
                }
impl PartialEq for Sample {
    }
/// Measured unit is utf8 code unit.

        assert_eq!(utf16_units, 9);
        let res = find_base_index(&a, &b);
            self.push_leaf(s[..splitpoint].to_owned());
        let result = closure();
/// std::mem::drop(trace_guard); // finalize explicitly if
    }
    fn bench_trace_block_payload(b: &mut Bencher) {
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
    #[test]
                                             &text, false);
        self.scroll_to_cursor(text);
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    }
        match self.selection.len() {
                    } else if !inserts.is_empty() {
}
        );
    }
    }
        Some(pos) => minsplit + pos,
        priority: usize,
    }
pub type RopeDelta = Delta<RopeInfo>;
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        -> SampleGuard
    #[cfg(feature = "benchmarks")]
        engine.edit_rev(1, 2, first_rev, d1.clone());
                match self.inner.next() {
        self.set_selection(text, sel);
///
    /// Constructs a Duration sample.  For use via xi_trace::closure.
                    sel.add_region(region);
    fn can_fragment() -> bool { false }
/// an argument.

        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
#[inline]
        b.push('\n');
                        let n_skip = seg.their_line_num - line_num;
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    StaticArray(&'static[&'static str]),
                if !region.is_caret() {
        let first_rev = engine.get_head_rev_id().token();
                    } else {
///
    pub fn collapse_selections(&mut self, text: &Rope) {
    }
    use test::black_box;
        a.push('\n');
        deserializer.deserialize_str(CategoriesTVisitor)
    -> SampleGuard<'a>
    /// Tracks whether find highlights should be rendered.
}
    }
        undo_group: usize,
///
            Some(ref breaks) => {
///
        engine.edit_rev(0, 2, first_rev, build_delta_2());

    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
            Merge(1,0),
pub type StrCow = Cow<'static, str>;
    /// This is a `Subset` of the "union string" representing the characters

                        Some(gc_dels.transform_shrink(&inserts))
            }
/// fn something_else_expensive() {
    fn prev(s: &String, offset: usize) -> Option<usize> {
    /// Get the line range of a selected region.
                Some(Cow::from(s))
        let first_sample_timestamp = all_samples.front()
            Rope::concat(
    #[cfg(feature = "benchmarks")]
    /// Returns the byte offset corresponding to the line `line`.
    }
    assert!(!a.is_empty() && !b.is_empty());
            tid: sys_tid::current_tid().unwrap(),
/// let a = Rope::from("hello ");

    replace_changed: bool,

            categories: Some(categories.into()),
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
        }
impl<'de> serde::Deserialize<'de> for CategoriesT {
/// let a = Rope::from("hello ");
    fn to_payload(value: &'static str) -> &'static str {
            return self.len();
        if let Some(exe_name) = exe_name() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let (mut l, mut offset) = self.get_leaf()?;
    #[inline]
    session_id: SessionId,
        //};
fn clamp(x: usize, min: usize, max: usize) -> usize {
        Self {
            SampleEventType::FlowEnd => 'f',
        let trace = Trace::enabled(Config::default());
                        self.revs.push(Revision {
            // with offset == 0, but be defensive.
                metadata_sort_index: sort_index,
    }
    fn delta_rev_head_2() {


                self.add_selection_by_movement(text, Movement::Up),
    replace: Option<Replace>,
            offset += 1;
                if groups.contains(undo_group) {

impl fmt::Debug for Rope {

            ),
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    }
    }
        let tombstones_b = Rope::from("a");
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);

    ///
                let (last, rest) = self.sel_regions().split_last().unwrap();
        // likely be improved.
// Copyright 2018 The xi-editor Authors.

        // A with ring, hangul, regional indicator "US"
            self.next()
        }
                    self.do_gesture(text, line, column, GestureType::LineSelect)
        if offset == s.len() {
        Rope::from_str(s.as_ref()).unwrap()



// limitations under the License.
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
                metadata_sort_index: None,
    /// Merge the new content from another Engine into this one with a CRDT merge
        let trace = Trace::disabled();
                        None if cursor.pos() == text.len() => cursor.pos(),
        self.set_selection(text, sel);
        samples.sort();
        match symbol {
        let new_sel = selection_movement(movement, &self.selection,
        assert!(a != empty);
    min: usize,
    #[test]
            if sel_end_ix > sel_start_ix {
        assert_eq!(snapshot[4].name, "z");
    fn offset_of_line_panic() {
            FindNext { wrap_around, allow_same, modify_selection } =>


                        let start_line = seg.our_line_num;
//
            //leaf.len() - start_pos
/// assert!("hello world" == String::from(a + b));
    fn to_payload(value: &'static str) -> &'static str {
            // trans-expand other by expanded so they have the same context
/// xi_trace::trace("something happened", &["rpc", "response"]);
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    // TODO: insert from keyboard or input method shouldn't break undo group,
        let plan = RenderPlan::create(height, self.first_line, self.height);
    /// Splits current selections into lines.
    }

            Some(region) => {
        for find in &mut self.find {
#[inline]
        match self.inner.next() {
///
    fn measure(info: &RopeInfo, _: usize) -> usize {
        self.pending_render = pending
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    TRACE.disable();
        if offset == 0 {
        let a = Rope::concat(
            Some(region) => {


}
            SampleGuard::new(&self, name, categories, None)
    #[test]
impl fmt::Debug for Rope {
        let sample_name = to_cow_str(meta.sample_name());
    fn bench_trace_instant(b: &mut Bencher) {
            Rope::concat(
/// bytes required to represent the codepoint.
        let a = Rope::from("a\nb\nc");
        if self.len() != other.len() {
}
    }
            }
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
use delta::{Delta, InsertDelta};
            base_sel: selection.clone(),
            }
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
        assert_eq!(utf8_offset, 9);

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
/// Enable tracing with the default configuration.  See Config::default.
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
        let b = a.slice(2, 4);
        self.drag_state = None;
        }
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
            line_cache_shadow::CURSOR_VALID

    fn undo() {
        let r = Rope::from(&a[..MAX_LEAF]);

                    if seg.validity == line_cache_shadow::ALL_VALID {
    }
    }
    /// the heap, counters, etc); just the data itself.
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        if self.find_changed != FindStatusChange::None {
    }

    fn bench_trace_instant(b: &mut Bencher) {
            Assert(1, "pbj".to_owned()),
        // a, b, y, z, c, x
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
/// {
        // current recording mechanism should see:
use std::fmt;
#[derive(Clone, Debug, PartialEq, Eq)]
                            rev_id: rev.rev_id,
                    // fast-forward this revision over all common ones after it
    fragment: &'a str

            Assert(1, "zapbj".to_owned()),
categories_from_constant_array!(6);
        let snapshot = trace.samples_cloned_unsorted();

        let start_pos = start_of_line.pos();
    }
        a.lines_all().collect::<Vec<_>>());
                                  style_spans, &plan, pristine);
        assert_eq!("-###-", &subset_str);
    #[inline]
            AssertMaxUndoSoFar(1,1),

        engine.edit_rev(1, 2, initial_rev, d1.clone());
    /// Generate line breaks based on width measurement. Currently batch-mode,
    #[test]
                self.select_line(text, offset, line, false),
        }
    }

pub type StrCow = Cow<'static, str>;
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        rope.line_of_offset(20);
        assert!(leaf.is_char_boundary(end));
            rendered_styles.push(style_id as isize);
        }
            Merge(0,1),
        match self.breaks {
//
        for &(sel_start, sel_end) in sel {
            }
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    inner: ChunkIter<'a>,
            offset = text.len();
        while offset < l.len() && !l.is_char_boundary(offset) {

    }

                         first_line: usize, last_line: usize, pristine: bool) {
            let matches_only = self.find_changed == FindStatusChange::Matches;
        }
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {

            name: sample_name,
    find_changed: FindStatusChange,
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
    }
        // todo: the correct Find instance needs to be updated with the new parameters
        priority: usize,
    } else {
    ///
    // recompute the prefix up to where the history diverges, but it's not clear that's
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
            for (i, op) in script.iter().enumerate() {
    // * grapheme clusters
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
                              to_payload("test_get_samples"));
//
    }
            els: Vec<RopeDeltaElement_>,
                } else {
            update["lines"] = json!(lines);
                }
            GestureType::PointSelect => {
/// }
        loop {
            Some(offset - len)


extern crate libc;
            }
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    /// Find what the `deletes_from_union` field in Engine would have been at the time
                        ops.push(self.build_update_op("invalidate", None, seg.n));
        #[serde(rename_all = "snake_case")]


    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        if let Some(sel) = new_sel {
            for (i,rev) in self.revs.iter().enumerate().rev() {
                            edit: Edit {
///

/// Get a slice of a `Rope`:
    pub fn enabled(config: Config) -> Self {

                    Some(chunk) => self.fragment = chunk,
            Assert(1, "ab".to_owned()),
        assert_eq!(1, expand_by[0].0.priority);
        View {
                self.set(pos);
}
    }
        false
/// * `name` - A string that provides some meaningful name to this sample.
    /// Get previous codepoint before cursor position, and advance cursor backwards.
    pub thread_name: Option<StrCow>,
                }
            args: Some(SampleArgs {
        }
            'X' => SampleEventType::CompleteDuration,
    }
}
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),

        // multiple queries; select closest occurrence
        };
            'n' => SampleEventType::AsyncInstant,
        let mut selection = Selection::new();
    #[bench]

    fn from_base_units(_: &String, in_base_units: usize) -> usize {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            self.find.push(Find::new());
    /// set with this function, which will make the revisions they create not have colliding IDs.

            }
        }, to_payload("test_get_sorted_samples"));
    }
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
#[inline]
                        }
    }
    }
                cur_all_inserts = older_all_inserts;
            Assert(1, "acpbdj".to_owned()),

        assert_eq!(1, a.line_of_offset(2));
                    } else {
        assert_eq!(a.len(), r.offset_of_line(1));
    /// height of visible portion
        let a = Rope::from("a\nb\nc");
    /// Find the first revision that could be affected by toggling a set of undo groups
    // Render a single line, and advance cursors to next line.
}

        assert_eq!(Some(3), a.next_codepoint_offset(1));

//See ../docs/MetricsAndBoundaries.md for more information.

fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    match b {
//! CRDT implementation techniques, because all operations are serialized in
/// discussion on payload.
    /// All the selection regions other than the one being dragged.
impl Leaf for String {
        let trace = Trace::enabled(Config::with_limit_count(11));
                edit: Contents::Edit {
        thread.name().map(|ref s| to_cow_str(s.to_string()))
        });

            if let Edit { priority, ref inserts, .. } = r.edit {
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
    }
        Cow::from(a.into_owned() + b)
        assert_eq!(0, r.line_of_offset(a.len() - 1));
        let mut b = line_cache_shadow::Builder::new();
                    // we don't want new revisions before this to be transformed after us
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(snapshot[4].name, "y");
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),

    {
                        Ok(s) => Some(s),
    pub fn new(initial_contents: Rope) -> Engine {
#[macro_use]

    }
        let region = SelRegion::caret(offset);
#[derive(Copy, Clone)]
        s.is_char_boundary(offset)
        } else {
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
    /// List of categories the event applies to.
    use test::black_box;
///
        let head2 = engine.get_head_rev_id().token();
categories_from_constant_array!(8);
                        };
        // We could probably reduce the cloning of selections by being clever.
// easily delta-compressed later.
    }
    /// Front end's line cache state for this view. See the `LineCacheShadow`
            Assert(1, "ab".to_owned()),
    {
        let mut leaf_offset = pos - offset;

        self.set_dirty(text);
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    }
    /// This function does not perform any scrolling.
    fn gc_6() {
                    for (ei, e) in self.peers.iter().enumerate() {
            self.next::<BaseMetric>();
        offset
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
            self.set_selection(text, selection);
            // corner and I'm lazy -cmyr
            match memchr(b'\n', &s.as_bytes()[offset..]) {
            // trans-expand other by expanded so they have the same context
            }
    pub fn scroll_height(&self) -> usize {

            );
                    result = cow_append(result, &self.fragment[.. i + 1]);
    fn delta_rev_head_3() {

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
}
    /// validate their input.

                selection.add_region(occurrence);
        let b_revs = basic_insert_ops(inserts, 2);
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    /// Generate line breaks based on width measurement. Currently batch-mode,
                pos = leaf_offset + pl.len();
        Assert(usize, String),
        #------


    /// should be as unlikely to collide as two random u64s.

    pub metadata_sort_index: Option<i32>,
        let edit_iv = Interval::new_closed_open(start, end);
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
                    }
            write!(f, "Rope({:?})", String::from(self))
            }
}
            trace.instant("c", &["test"]);
            } else {
fn default_session() -> (u64,u32) {
        assert_eq!(r.len(), r.offset_of_line(2));
// Copyright 2018 The xi-editor Authors.
        assert_eq!(0, a.lines_all().count());

                    s = &s[..s.len() - 1];
            rendered_styles.push((sel_start as isize) - ix);
            // to replicate whiteboard, z must be before a tombstone
                CategoriesT::StaticArray(c)

        let trace = Trace::enabled(Config::with_limit_count(20));
/// ```

/// Represents a transform from one rope to another.
    }
        result
        let mut revs = basic_insert_ops(inserts_1, 1);
        Self {
    }
        b if b < 0x80 => 1,
                edit: contents.clone()

    max: usize,
    fn arr_eq(&self, other: &Rhs) -> bool;
    }
    /// Get text of a given revision, if it can be found.
        if !selection.regions_in_range(offset, offset).is_empty() {
        value
const MIN_LEAF: usize = 511;
///
/// Revision 0 is always an Undo of the empty set of groups
        let script = vec![
    }
        assert_eq!(trace.is_enabled(), true);
        assert_eq!(snapshot[2].name, "x");
        engine.edit_rev(0, 2, first_rev, build_delta_2());

    /// controlled by features (default string).
            trace.closure_payload("y", &["test"], || {

        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
pub fn samples_len() -> usize {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },


    fn scroll_to_cursor(&mut self, text: &Rope) {
        LinesRaw {
        // 1 for exe name & 1 for the thread name
                payload: payload,
        }, to_payload("test_get_samples_nested_trace"));

        assert_eq!("1234567", String::from(r));
    fn bench_trace_block_payload(b: &mut Bencher) {
                    }
    assert!(!a.is_empty() && !b.is_empty());
/// Usage of static strings is encouraged for best performance to avoid copies.
/// for single user cases, used by serde and ::empty
            Assert(0, "adfc".to_owned()),
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
            utf16_size: count_utf16_code_units(s),
// distributed under the License is distributed on an "AS IS" BASIS,
                                            closure: F, payload: P) -> R
            event_type: event_type,
        let a = Rope::from("\n");
                match *other {
    fn hash<H: Hasher>(&self, state: &mut H) {
        /// revision that were added by this revision.
        assert_eq!(trace.is_enabled(), true);
        where S: Into<StrCow>, C: Into<CategoriesT>
                        }
            Assert(1, "zapbj".to_owned()),
        engine.edit_rev(0, 2, first_rev, build_delta_2());
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
                RenderTactic::Discard => {
    }

    /// Tests that merging again when there are no new revisions does nothing

            Merge(0,2), Merge(1, 2),
        let mut cur_len_utf8 = 0;
        let new_head_2 = engine.get_head_rev_id().token();
                    }
        gc_scenario(35,20);

    fn from(r: &Rope) -> String {
                    for (ei, e) in self.peers.iter().enumerate() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },

                    }

    }
            deletes_from_union,
    }
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
        let a = Rope::from("a\nb\n");
    pub fn enabled(config: Config) -> Self {
    }
            word_cursor.select_word()
use styles::{Style, ThemeStyleMap};
///

    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
        ];
}
    trace: Option<&'a Trace>,
            }
pub struct View {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        }
                        if !last_selection.is_caret() {

        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
            "op": op,
impl Rope {
            Assert(2, "ab".to_owned()),
    fn find_common_1() {
                                toggled_groups: &toggled_groups - gc_groups,
/// conversions in both directions.
        // probably change as the recording internals change.
mod sys_tid;
        b.build()
            categories: Some(categories.into()),
            inserts: Subset::new(0),
    type Err = ParseError;
            duration_us: None,
/// See `trace_block` for how the block works and `trace_payload` for a
            Some(offset - len)
    fn test_samples_pulse() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    /// This uniquely represents the identity of this revision and it stays
            Contents::Undo { .. } => panic!("can't merge undo yet"),
            DeltaElement::Insert(ref node) =>
        }
    pub fn join(&self, sep: &str) -> String {
        // We somewhat arbitrarily choose the last region for setting the old-style
        }
    ///
        for i in ((edits-max_undos)..edits).rev() {
                    return i + 1; // +1 since we know the one we just found doesn't have it
    }
    fn rearrange_1() {
    }
}
        assert_eq!("zcpbdj", String::from(&text_2));
    /// Get the contents of the document at a given revision number
///
                }
            None => None
                priority, undo_group, deletes,
        if let Some(lines) = lines {
    -> SampleGuard<'a>
    /// if it is non-empty. It needs to be a separate commit rather than just
        MergeTestState::new(3).run_script(&script[..]);
        for &(sel_start, sel_end) in hls {
                el.end()
            GestureType::ToggleSel => self.toggle_sel(text, offset),

fn initial_revision_counter() -> u32 {
                    text.slice_to_string(region.min(), region.max())
    height: usize,
    for rev in revs.iter().rev() {
        let tombstones_b = Rope::from("a");
categories_from_constant_array!(9);
    TRACE.closure(name, categories, closure)

        use self::MergeTestOp::*;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        cursor.prev::<BaseMetric>()
    fn is_boundary(s: &String, offset: usize) -> bool {
    fn deserialize<D>(deserializer: D)
    }
        Rope::from_str(s.as_ref()).unwrap()
    match b {
impl Eq for CategoriesT {}
            "text": &l_str,



    }
        trace.closure_payload("x", &["test"], || (),
    }
//! a previously committed version of the text rather than the current text,

                c.provide_context(&pl, self.pos() - poffset);

        let result = closure();
    #[should_panic]
                }
#[cfg(test)]
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
                    priority, undo_group,
        };
        // TODO: refine for upstream (caret appears on prev line)
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
/// Create an instantaneous sample without any payload.  This is the lowest
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
        result
        all_samples.reset_limit(config.max_samples());
}
    #[test]
                    rev_id: rev.rev_id,
    }
        d_builder.build()
        }
                selection.add_region(SelRegion::caret(region.max()));
    fn test_get_samples_nested_trace() {
struct Revision {
            Find { chars, case_sensitive, regex, whole_words } =>
        assert_eq!(rope.offset_of_line(1), 3);


        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
        let mut engine = Engine::new(Rope::from(TEST_STR));
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
/// # Performance
/// * `name` - A string that provides some meaningful name to this sample.
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
}
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
                let (ins, _) = delta.factor();
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
        };
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        let a = Rope::from("a\nb\nc");

        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    fn sample_name(&self) -> &'static str {

/// Transform `revs`, which doesn't include information on the actual content of the operations,

        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>

    identity_op,
            sel.add_region(region);
use std::string::ParseError;

    /// ties in edit priorities. Otherwise the results may be inconsistent.
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
            match c.edit {
        for rev in &self.revs[first_candidate..] {
                undo_group,
        Ok(b.build())
                            styles: &StyleMap, style_spans: &Spans<Style>,

        let mut ops = Vec::new();
        /// revision that were deleted by this revision.
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);

                while cursor.pos() < region.max() {
        assert_eq!(Some(9), a.next_grapheme_offset(3));
        samples[0].pid = 1;
            SampleEventType::ObjectCreated => 'N',
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
            Rope::from(s1.clone()),
    #[test]
                self.drag_state = None;
///
    // * Code units in some encoding
            Assert(0, "ab".to_owned()),
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        // a, b, y, z, c, x
            }
        let replacement = match self.selection.last() {
    {
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
            pid: sys_pid::current_pid(),
                }
                rev_id: basic_rev(i+1),

                sel.add_region(SelRegion::new(last.start, offset));
    end: usize,
                // TODO could probably be more efficient by avoiding shuffling from head every time
                let mut sel = Selection::new();
            find.unset();
        let height = self.line_of_offset(text, text.len()) + 1;

        self.set(new_pos);
                         style_spans: &Spans<Style>) -> Vec<isize>

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        assert_eq!(trace.get_samples_count(), 1);
        }
    fn rebase_1() {

        assert_eq!(trace.get_samples_count(), 5);
        where S: Serializer
            size: Size::default(),
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
    }
                let offset = self.selection[0].start;
        // +2 for exe & thread name.
    let mut s = Subset::new(head_len);
            // I think it's a precondition that this will never be called
    // in a single session.

            x.next_occurrence(text, reverse, wrapped, &self.selection)
    fn is_boundary(s: &String, offset: usize) -> bool {

    /// state and new offset.
        // expand by each in expand_by
/// Create an instantaneous sample without any payload.  This is the lowest
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
        self.find_changed = FindStatusChange::None;

    #[test]
        // x, a, y, b, z, c
    /// should be constructed via SampleGuard.

//
    }
                return false;
        peers: Vec<Engine>,
    }
            let sel = {

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    {
            line_cache_shadow::CURSOR_VALID
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
            if self.line_of_offset(text, offset) <= line {
    #[test]

        }
                tid));
                }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
                true => x.end,
        ");
        let new_head = engine.get_head_rev_id().token();
                        });

        let thread = std::thread::current();
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
        let (mut l, mut offset) = self.get_leaf()?;
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);

/// conforms to is currently determined by the feature this library is compiled

        assert_eq!(Some(6), a.next_codepoint_offset(3));
    #[serde(rename = "xi_payload")]
    match b {
        assert_eq!(samples[0].name, "remote pid");
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
            }

    TRACE.enable();
/// Revision will be used, which means only the (small) set of concurrent edits
                            (inserts.transform_shrink(&gc_dels),
        // if we have active find highlights, we don't collapse selections
                    undo_group: i+1,
        let start = time::precise_time_ns();

    // TODO(vlovich): Replace all of this with serde flatten + rename once
            Assert(0, "adc".to_owned()),
                last.1 = last.1.transform_union(&inserts);
            let _ = trace.block("test_samples_block", &["test"]);
        assert_eq!(trace.get_samples_count(), 0);
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
        let a = Rope::from("a\nb\nc");
/// `base_revs`, but modified so that they are in the same order but based on
        engine
    #[serde(rename = "dur")]


    /// Create a new Engine with a single edit that inserts `initial_contents`
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
            }
            Merge(1,0),

                              to_payload("test_get_samples"));
    }
                pos = leaf_offset + nl.len();
    /// The semantics are intended to match `str::lines()`.
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    fn to_payload(value: &'static str) -> TracePayloadT {
        }
///
    pub timestamp_us: u64,
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    }
        let replacement = match self.selection.last() {
            GestureType::WordSelect =>
extern crate serde_derive;
mod tests {
}
        let trace = Trace::enabled(Config::default());
                    self.do_gesture(text, line, column, GestureType::LineSelect)


        all_samples.reset_limit(0);
    #[cfg(feature = "benchmarks")]
    pending_render: bool,
            // I think it's a precondition that this will never be called
    #[test]
pub struct Utf16CodeUnitsMetric(usize);
        }
        let invalid = if all_caret {
    ///
}
// ======== Generic helpers
/// Usage of static strings is encouraged for best performance to avoid copies.
            self.args == other.args
#[derive(Clone, Copy)]
        let len = match first_rev.edit {
        let r = r + Rope::from(&b[MIN_LEAF..]);
/// have to be considered in `rebase` substantially for normal editing
//     http://www.apache.org/licenses/LICENSE-2.0

    base_sel: Selection,
    /// Find parameters and number of matches changed.
        let first = max(first, 0) as usize;
        self.find.clear();
            lines: count_newlines(s),
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
///
impl Hash for Sample {
    #[test]
/// xi_trace::trace("something happened", &["rpc", "response"]);
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
//     http://www.apache.org/licenses/LICENSE-2.0
        let mut cur_len_utf16 = 0;


    use std::collections::BTreeSet;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        }
        assert_eq!(Some(8), a.next_grapheme_offset(0));
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        for u in s.chars() {
                              start_ns: u64,
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
                    "something", &["benchmark"],

    }
        // We could probably reduce the cloning of selections by being clever.
//! text.

    use multiset::Subset;

    #[test]
        let rev = Revision {
/// ```
        match symbol {
                serializer.serialize_newtype_variant("DeltaElement", 1,
        }
            Assert(2, "adfc".to_owned()),

    ($num_args: expr) => {
    pub height: f64,
            }
    fn test_get_sorted_samples() {
/// # Examples
        // interior of last line should be last line
                        word_cursor.select_word()
    /// Tests that priorities are used to break ties correctly

        let mut revs = basic_insert_ops(inserts_1, 1);
//! CRDT implementation techniques, because all operations are serialized in
    }
        } else if self.first_line + self.height <= line {

        self.deletes_from_union_before_index(rev_index + 1, true)

        -##-
        assert_eq!(None, a.prev_grapheme_offset(0));

                    let sel_start = cursor.pos();
    idx: usize,
        assert_eq!(None, a.prev_grapheme_offset(0));
    /// This method is responsible for updating the cursors, and also for
        if offset == 0 {

                // TODO: small nit, merged region should be backward if end < start.
        ");
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    }
        MergeTestState::new(3).run_script(&script[..]);
        -##-
    }
    }
        }

    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {


    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {

                    None

    /// Selects the next find match.
    }
    }
}

        });
            Drag(MouseAction { line, column, .. }) =>
            // I think it's a precondition that this will never be called
        engine.undo([1,2].iter().cloned().collect());
            };
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
            Scroll(range) => self.set_scroll(range.first, range.last),
    highlight_find: bool,
    }
    lc_shadow: LineCacheShadow,
                pos = leaf_offset + nl.len();
    type Item = u8;
use std::ops::Range;

            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
    // TODO: replace this with a version of `lines` that accepts a range
            while !s.is_char_boundary(offset - len) {
//

fn clamp(x: usize, min: usize, max: usize) -> usize {
            Merge(1,2),
/// ```

    }
                              to_payload("test_get_samples"));
//
            // I think it's a precondition that this will never be called
    fn invalidate_selection(&mut self, text: &Rope) {
    TRACE.block_payload(name, categories, payload)

    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
/// let mut a = Rope::from("hello world");

}
    pub fn lines_raw_all(&self) -> LinesRaw {

impl Metric<RopeInfo> for BaseMetric {
        }
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};

            }
            breaks: None,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
}
    /// point. Used to optimize undo to not look further back.
use std::fmt;
    /// Update front-end with any changes to view since the last time sent.
    // * Code units in some encoding

        } else {
// Licensed under the Apache License, Version 2.0 (the "License");
        // +2 for exe & thread name.
        }

        assert_eq!("#-####-", &subset_str);
            self.set_selection(text, sel);
            find.unset();
use movement::{Movement, region_movement, selection_movement};
        if f.alternate() {

            Sample::new_instant("local pid", &[], None),
        assert!(a == a2);
    /// Exposed for unit tests.
impl MetadataType {
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
        -> R
        let mut selections = Vec::new();

    max: usize,
            Assert(0, "zacpbdj".to_owned()),
    1
                    // fast-forward this revision over all common ones after it
//! A rope data structure with a line count metric and (soon) other useful
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    /// If `modify` is `true`, the selections are modified, otherwise the results
    /// This is a `Subset` of the "union string" representing the characters
                    let e = &mut self.peers[ei];
                    priority, inserts, deletes,
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
            Assert(1, "arpbj".to_owned()),
                            }
                        b.add_span(seg.n, 0, 0);
                    if s.ends_with('\r') {
            }
        assert_eq!(0, a.offset_of_line(0));

        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
                            max_undo_so_far: rev.max_undo_so_far,
            selection: SelRegion::caret(0).into(),

    }
        {
//     http://www.apache.org/licenses/LICENSE-2.0
        let line = self.line_of_offset(text, offset);
        use serde::de::Visitor;
        }
        /// and new deletes_from_union
        ---#--
impl<'a> From<&'a Rope> for String {
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        cursor.is_boundary::<BaseMetric>()
categories_from_constant_array!(1);
    find: Vec<Find>,
        }
        } else {

            black_box(trace.block_payload(
        let mut samples = self.samples_cloned_unsorted();
        b.push(rhs);
        }
            black_box(time::precise_time_ns());
    pub fn instant<S, C>(&self, name: S, categories: C)

    fn from(c: Vec<String>) -> CategoriesT {
        engine.undo([1,2].iter().cloned().collect());
            pos += 1;
#[inline]
        use self::MergeTestOp::*;

/// Get a slice of a `Rope`:
            Assert(0, "bdc".to_owned()),
        assert_eq!(snapshot[2].name, "a");
        }
        }

        self.join(",").serialize(serializer)
    fn bench_get_tid(b: &mut Bencher) {
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
                    if let Some(last_selection) = self.selection.last() {
            edit: Contents::Edit {
        result
    /// ancestor in order to be mergeable.
        let mut pos = self.pos();
/// Tracing is disabled initially on program launch.
            categories: Some(categories.into()),
    fn from(r: Rope) -> String {
                self.push_leaf(s.to_owned());
            if self.fragment.is_empty() {
    }
        engine.gc(&gc);

    }
impl FromStr for Rope {
                self.do_drag(text, line, column, Affinity::default()),
            match *op {


    }
    fn line_of_offset_panic() {
    // possible to fix it so that's not necessary.
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    ObjectCreated,
#[derive(Clone, Debug, PartialEq, Eq)]
        } else { // no toggled groups, return past end
        assert_eq!(snapshot[1].name, "thread_name");
        } else {
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        }
        assert_eq!(None, a.prev_grapheme_offset(0));
        self.set_selection_raw(text, sel.into());
            Merge(4,3),
    fn from_chrome_id(symbol: char) -> Self {
                        first_sample_timestamp,
        if line < self.first_line {
            if (c > start_pos && c < pos) ||
// should make this generic, but most leaf types aren't going to be sliceable
///

    DynamicArray(Vec<String>),
        // A with ring, hangul, regional indicator "US"
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        self.revs.iter().enumerate().rev()
                   style_spans: &Spans<Style>, line_num: usize) -> Value
            max: offset,
    #[test]
impl<'de> serde::Deserialize<'de> for CategoriesT {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
            None => return "",
/// Represents the current state of a document and all of its history
/// let b = a.slice(1, 9);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

            edit: Contents::Edit {
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        ];
        None => {

        fn run_script(&mut self, script: &[MergeTestOp]) {
    }
    #[cfg(feature = "dict_payload")]


            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        for &region in self.sel_regions() {

    #[test]
    /// An arbitrary payload to associate with the sample.  The type is
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
    #[allow(dead_code)]
        --#--
        engine.edit_rev(1, 1, first_rev, d1);

    /// End of the region selected when drag was started.
    /// This case is a regression test reproducing a panic I found while using the UI.
    #[test]
        self.lines_raw(0, self.len())
    FlowInstant,
            trace: Some(&trace),
                }
                }
}
        let mut all_samples = self.samples.lock().unwrap();
    }
            Merge(0,1),

        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
}
        let mut samples = self.samples_cloned_unsorted();
    }
    }
    /// the text).
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
//     http://www.apache.org/licenses/LICENSE-2.0
        }
            let _x = trace.block("something", &[]);
            SampleEventType::AsyncStart => 'b',
    /// If `line` is equal to one plus the current number of lines,
            l[offset..].chars().next()
    }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        engine.edit_rev(1, edits+1, head2, d2);
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
    fn do_selection_for_replace(&mut self, text: &Rope) {
                    // of which undos were used to compute deletes_from_union in edits may be lost.
                None => {
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
                    } else if !inserts.is_empty() {

        engine.edit_rev(1, 3, new_head_2, d3);
}
        self.sample_limit_count
        let deletes_from_union_b = parse_subset("-#---");
    fn line_offsets() {
        for region in self.selection.regions_in_range(start_pos, pos) {
        } else {
                }
        }
use std::mem::size_of;
        LinesRaw {
            black_box(time::precise_time_ns());
/// Tracing is disabled initially on program launch.
        }
            a.push('a');
            end -= 1;
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
                if !region.is_caret() {
        /// Used to order concurrent inserts, for example auto-indentation
                        });
    // reachability calculation.
/// let a = Rope::from("hello world");
        let first_rev = engine.get_head_rev_id().token();
        Assert(usize, String),
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        let mut cursor = Cursor::new(self, offset);
                selection.add_region(occurrence);
        let mut revs = basic_insert_ops(inserts_1, 1);

        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        } else {
    #[test]
                MetadataType::ProcessName {name: exe_name},
        // current recording mechanism should see:
    fn undo_5() {
        self.set_selection_raw(text, selection);
impl<'a> Iterator for ByteIter<'a> {
        deletes_from_union = new_deletes_from_union;
    // use own breaks if present, or text if not (no line wrapping)
    pub fn with_limit_bytes(size: usize) -> Self {

                        let end_line = start_line + seg.n;
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    #[serde(rename = "name")]
        let b_rope = Rope::from(&b);

                    let full_path_str = full_path.into_string();
    #[cfg(feature = "benchmarks")]
        let a = Rope::from("a\nb\nc");
            'B' => SampleEventType::DurationBegin,
        }
        ");
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    ///
}
    FlowStart,
        let (leaf, offset) = match self.get_leaf() {
///
    Matches
            false
                break;
impl Eq for CategoriesT {}
    #[test]
            let after = full_priority >= trans_priority;  // should never be ==
        self.rev_id_counter += 1;
        assert_eq!(1, r.line_of_offset(a.len()));
            match memchr(b'\n', &s.as_bytes()[offset..]) {
        }
use memchr::{memrchr, memchr};
        assert_eq!(snapshot[4].name, "z");
/// Stores the tracing data.
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
                }
                println!("running {:?} at index {}", op, i);

    }
            } else {
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;

        if !self.lc_shadow.needs_render(plan) { return; }
    }
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
/// Usage of static strings is encouraged for best performance to avoid copies.
// The advantage of using a session ID over random numbers is that it can be
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
        base_subset.is_some() && base_subset == other_subset
/// ```rust,ignore

        info.utf16_size
            }),

        let old_revs = std::mem::replace(&mut self.revs, Vec::new());

        // rebase the deletion to be after the inserts instead of directly on the head union
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
/// }
}
        MergeTestState::new(3).run_script(&script[..]);
        self.rev_id_counter += 1;
            timestamp_us: ns_to_us(time::precise_time_ns()),
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
        }
        // Any edit cancels a drag. This is good behavior for edits initiated through
                warn!("Usage of click is deprecated; use do_gesture");
        assert_eq!(Some(0), a.prev_grapheme_offset(3));


        result

        self.set_selection(text, selection);
    impl MergeTestState {

    /// If the cursor is at the end of the rope, returns the empty string.

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    }
/// Atomicity is implicit, putting the offset

    {
        let first_rev = engine.get_head_rev_id().token();
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
                    selection.add_region(occ);
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
            Replace { chars, preserve_case } =>
            SampleGuard::new_disabled()
                    text.slice_to_string(start, end)
    /// of the chunks is indeterminate but for large strings will generally be
///     something_else_expensive();

        let (mut new_revs, text, tombstones, deletes_from_union) = {
            find_changed: FindStatusChange::None,
        where S: Into<StrCow>, C: Into<CategoriesT>
            Merge(1,0),
    pub fn select_all(&mut self, text: &Rope) {
        let r = r + Rope::from(&b[MIN_LEAF..]);
/// # use xi_rope::Rope;
        ];
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        if self.find.is_empty() {


        let start_pos = start_of_line.pos();
                Some(Cow::from(s))
    }
        debug_subsets(&rearranged_inserts);
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    }
                payload: payload,
    }
    /// Select entire buffer.
pub type StrCow = Cow<'static, str>;
/// implementation as efficient as a mutable version.
            //}
        }
        let search_query = match self.selection.last() {
        });
        assert!(a != empty);
        };
        assert_eq!(1, r.line_of_offset(r.len() - 1));
use std::fmt;
}
    fn add(self, rhs: Rope) -> Rope {
        let mut b = String::new();
        let end = self.sel_regions().last().unwrap().end;
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            Assert(1, "ab".to_owned()),
#[macro_use]
        let mut b = String::new();
    }
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    }
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
        let trace = Trace::enabled(Config::with_limit_count(11));

    scroll_to: Option<usize>,
        // send updated replace status if changed
            // I think it's a precondition that this will never be called
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
            wrap_col: WrapWidth::None,
impl SampleEventType {
        /// Used to store a reversible difference between the old

            let a_to_merge = &self.revs[base_index..];
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
// Unless required by applicable law or agreed to in writing, software
    /// Splits current selections into lines.
            }
/// Indicates what changed in the find state.
        assert_eq!(1, r.line_of_offset(r.len() - 1));
fn default_session() -> (u64,u32) {
#[derive(Clone, Debug, PartialEq, Eq)]
}
            timestamp_us: ns_to_us(time::precise_time_ns()),
    ///

        update
            }
///
        assert_eq!(rope.offset_of_line(1), 3);
    fn delta_rev_head_3() {
        if self.breaks.is_some() {
        assert_eq!(snapshot[2].name, "x");
        assert_eq!(snapshot[1].name, "thread_name");
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
        // creation) is:

        assert_eq!(r.len(), r.offset_of_line(2));
/// ```
        let mut rendered_styles = Vec::new();
}
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
                    };
            find.find_status(matches_only)
                name, categories, payload, SampleEventType::DurationBegin)),
    }
            FindPrevious { wrap_around, allow_same, modify_selection } =>
    inner: ChunkIter<'a>,
                    }

        assert_tokens(&rope, &[
        Self {
    }
        self.len()
    #[test]
        -#-
            match c.edit {

            categories: Some(categories.into()),

            let after = full_priority >= trans_priority;  // should never be ==

                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
        let mut b = line_cache_shadow::Builder::new();
            offset += 1;
        }
        let next_line_offset = self.offset_of_line(text, line + 1);
        b.push_str(new);
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        /// revision that were deleted by this revision.
        --#--
//! info.
}
    ///

    }
use xi_rope::interval::Interval;
    }

            cur_len_utf8 += u.len_utf8();
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
            _ => return
        // the front-end, but perhaps not for async edits.
    }
        assert_eq!(snapshot[4].name, "z");
                    }
struct DragState {
            Merge(0,1), // the merge from the whiteboard scan
    fn rebase_1() {
                let (pl, poffset) = self.prev_leaf()?;
        // TODO: may make this method take the iv directly
    }
    impl MergeTestState {

    fn compute_info(s: &String) -> Self {
        let new_sel = self.drag_state.as_ref().map(|drag_state| {

        let thread = std::thread::current();
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
            return None;
        ---#--
    pub timestamp_us: u64,
            type Value = CategoriesT;
        while let Err(incomp) = prev_boundary {
    /// If `modify` is `true`, the selections are modified, otherwise the results
/// See `trace_closure` for how the closure works and `trace_payload` for a
        }
    fn rearrange_1() {
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        result
    first_line: usize,
                let categories = v.split(",").map(|s| s.to_string()).collect();
/// Creates a duration sample that measures how long the closure took to execute.
        let col = col as usize;
        let trace = Trace::disabled();
            els: Vec<RopeDeltaElement_>,
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },

                undo_group,
    }
        inserts: Subset,
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        // 1 MB
    fn merge_max_undo_so_far() {
                metadata_sort_index: None,

        // current recording mechanism should see:
            new_deletes = new_deletes.transform_expand(&new_inserts);
        }

    fn prev(s: &String, offset: usize) -> Option<usize> {
        } else {
    ($num_args: expr) => {
            Merge(2,3),
// you may not use this file except in compliance with the License.
}
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
categories_from_constant_array!(9);
        assert_eq!(Some(2), b.next_codepoint_offset(0));
/// # Arguments
                selection.add_region(SelRegion::caret(region.max()));
        } else {
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        assert_eq!(0, r.line_of_offset(a.len() - 1));
    pub fn prev_grapheme(&mut self) -> Option<usize> {
    /// of individual region movements become carets.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
            Assert(0, "ab".to_owned()),
                Some(Cow::from(s))
        assert_eq!(Some(5), b.next_codepoint_offset(2));
            Merge(3,1), Merge(5,3),
    fn compute_transforms_1() {
            's' => SampleEventType::FlowStart,
                }
    #[cfg(feature = "benchmarks")]

    fn build_delta_2() -> Delta<RopeInfo> {
categories_from_constant_array!(2);
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
/// patterns. Any large runs of typing in the same place by the same user (e.g
        }
        let utf8_offset = 9;
        ----
        let first_sample_timestamp = all_samples.front()
    wrap_col: WrapWidth,
        assert_eq!(0, r.line_of_offset(a.len() - 1));
                        let mut rendered_lines = Vec::new();
                priority: new_priority,
        // insert character at end, when this test was added, it panic'd here
    ///
    // TODO: a case can be made to hang this on Cursor instead
            find.unset();
    /// The process the sample was captured in.
                    } else {
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
pub type RopeDelta = Delta<RopeInfo>;
                if self.fragment.is_empty() {
// distributed under the License is distributed on an "AS IS" BASIS,
    fn compute_info(s: &String) -> Self {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
    height: usize,
    fn from(s: T) -> Rope {
        // +2 for exe & thread name.
    fn lines_small() {
    }
        assert_eq!(soln, String::from(engine.get_head()));
            Merge(1,0),
use selection::{Affinity, Selection, SelRegion};
            self.pid == other.pid &&
        }
/// assert!("hello world" == String::from(a + b));
    fn from_chrome_id(symbol: char) -> Self {
    }
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },

        let chars_left = (edits-max_undos)+1;
    pub duration_us: Option<u64>,
    #[test]
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        }
//!
    fn compute_transforms_1() {
            Assert(1, "afc".to_owned()),
        impl From<RopeDelta_> for Delta<RopeInfo> {
    fn identity() -> Self {
    ///
        let first_rev = engine.get_head_rev_id().token();
    }
                                                        style_spans, line_num);
pub struct Sample {
}
                }
        let mut delta = serializer.serialize_struct("Delta", 2)?;
        let tombstones_b = Rope::from("a");
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);

    let inverse_tombstones_map = old_deletes_from_union.complement();
/// Measured unit is utf8 code unit.
#[inline]
    fn gc_4() {
        }
        }
    /// of individual region movements become carets.
        assert_eq!(snapshot[6].name, "z");
                payload: payload,
        }
    #[test]
        );
use rope::{Rope, RopeInfo};
    }
            MetadataType::ProcessLabels {..} => "process_labels",
/// # Arguments
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    #[test]
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    /// selection edges).
/// }
                }
                }
impl<'a> From<&'a Rope> for String {
    // trace_block()/trace_closure
                priority: new_priority,
    }
            name: name.into(),
        for (iv, style) in style_spans.iter() {
}
    /// Selects an entire word and supports multi selection.
    fn do_selection_for_replace(&mut self, text: &Rope) {
            GestureType::ToggleSel => self.toggle_sel(text, offset),
impl<'a> Iterator for Lines<'a> {
                        for line_num in start_line..end_line {
        assert_eq!(snapshot[3].name, "b");
                warn!("Usage of click is deprecated; use do_gesture");
}

                RenderTactic::Preserve => {
}
                    let (mut a, rest) = end.split_first_mut().unwrap();
            Assert(0, "ab".to_owned()),
    }
        let mut result = json!({
        self.selection = sel;
            Some(Cow::Owned(mut s)) => {
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        println!("{:#?}", delta_ops);
///     something_else_expensive();
                        }

        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    // fast-forward this revision over all common ones after it
    fn scroll_to_cursor(&mut self, text: &Rope) {
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
/// A static string has the lowest overhead as no copies are necessary, roughly
        // since one of the two deletes was gc'd this should re-do the one that wasn't
/// let b = Rope::from("world");
    let mut utf16_count = 0;
    /// they would be if they hadn't been deleted.
        let undone = self.undone_groups.contains(&undo_group);
    fn identity() -> Self {
    }

        // todo: the correct Find instance needs to be updated with the new parameters
            revs: vec![rev],
/// beginning.
            FindPrevious { wrap_around, allow_same, modify_selection } =>
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
        assert_eq!("zcpbdj", String::from(&text_2));
        match self.breaks {
    fn edit_rev_undo_2() {
    }
        let script = vec![
            },
                            deletes_bitxor
    // use own breaks if present, or text if not (no line wrapping)
                pos = leaf_offset + nl.len();
        let (leaf, offset) = match self.get_leaf() {
    type Item = u8;
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
            find.unset();
        }
    pub fn prev_codepoint(&mut self) -> Option<char> {

}
            return self.len();
                println!("running {:?} at index {}", op, i);
        let inserts = parse_subset_list("
    #[cfg(feature = "benchmarks")]
/// returned value is dropped.  `trace_closure` may be prettier to read.
        // we add the special find highlights (1) and selection (0) styles first.
    fn from(r: Rope) -> String {
    /// Tracks whether this view has been scheduled to render.
            trace.closure("something", &[], || ());
            }
                }
    max: usize,
                },
    }
        let mut result = String::new();

#[inline]
    struct MergeTestState {
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    /// Determines whether the offset is in any selection (counting carets and
    }
/// With `json_payload` feature:
                        b.add_span(seg.n, 0, 0);
            let pos = bc.next::<BreaksMetric>();
    /// Collapse all selections in this view into a single caret
        }

    fn merge_priorities() {
                                gc_dels = gc_dels.union(deletes);
        let a = Rope::from("a\rb\rc");
    }
            match c.edit {
                return false;


#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    }
                        let un_deleted = deletes_from_union.subtract(deletes);
            self.start_drag(offset, offset, offset);
// Try to split at newline boundary (leaning left), if not, then split at codepoint
            }
/// Find an index before which everything is the same
    ///
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
        b.iter(|| black_box(sys_tid::current_tid()));
extern crate serde_json;
}
        let trace = Trace::enabled(Config::default());
/// # Arguments
}
        }
/// ```
// distributed under the License is distributed on an "AS IS" BASIS,
        for _ in 0..line_len {
    /// and currently in a debugging state.


pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
    wrap_col: WrapWidth,
    #[inline]

        // TODO: simplify this through the use of scopeguard crate
    pub fn push_str(&mut self, mut s: &str) {
        self.set_selection(text, sel);
                Undo { toggled_groups, deletes_bitxor } => {
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
    /// Invalidate the current selection. Note that we could be even more
    // TODO: switch to a persistent Set representation to avoid O(n) copying
                self.set_selection(text, SelRegion::caret(offset));
            }
            engine.undo(undos);
    (1, 0)
        engine.edit_rev(1, 1, first_rev, d1.clone());
                        hls.push((sel_start_ix, sel_end_ix));
/// Stores the tracing data.
        for _ in 0..line_len {
// Copyright 2016 The xi-editor Authors.
        if offset == 0 {
    }
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
            }
    }
        let mut result = String::new();
    /// ancestor in order to be mergeable.
        samples[0].pid = 1;
    /// borrowed from the rope.
    fn eq(&self, other: &Sample) -> bool {
///
impl PartialEq for CategoriesT {
            match memchr(b'\n', &s.as_bytes()[offset..]) {

    #[test]
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        if wrap_col > 0 {
        self.timestamp_us.cmp(&other.timestamp_us)
                    .with_affinity(affinity)
        match *self {
                std::thread::sleep(std::time::Duration::new(0, 1000));
                name, categories, None, start, end - start));
                }
/// configured via the `dict_payload` or `json_payload` features (there is an
            'O' => SampleEventType::ObjectSnapshot,
        }
    /// the text).
                         first_line: usize, last_line: usize, pristine: bool) {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
/// A guard that when dropped will update the Sample with the timestamp & then
    #[test]
/// # use xi_rope::Rope;
#[macro_use]
    lc_shadow: LineCacheShadow,
        ChunkIter {
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    } else if x < max {
            pos -= 1;
    }


}
// Licensed under the Apache License, Version 2.0 (the "License");

    use super::*;
    }
        let b = a.slice(1, 10);
            // with offset == 0, but be defensive.
        RopeInfo {
}
        let trace = Trace::enabled(Config::with_limit_count(20));
                if groups.contains(undo_group) {
                self.set_selection(text, SelRegion::caret(offset));
        ];
    let inverse_tombstones_map = old_deletes_from_union.complement();
            //leaf.len() - start_pos
/// could trigger incorrect behavior if they collide, so u64 is safe.
            MergeTestState { peers }
}
        assert_eq!(trace.get_samples_count(), 1);
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
pub struct SampleArgs {
///
    DurationEnd,
        let mut engine = Engine::new(Rope::from(TEST_STR));
            if let Some(replace) = self.get_replace() {
/// Computes a series of priorities and transforms for the deltas on the right
        self.deletes_from_union = new_deletes_from_union;
use xi_rope::delta::Delta;
                    })
    #[test]
    pub duration_us: Option<u64>,
        }
        let mut ix = 0;
                inserts: inserted,
        }
        }
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {

    }
        b.push_str(new);
    }
            self.idx = 0;
    /// The empty string will yield a single empty slice. In all other cases, the
        assert!(self.current.is_some());
/// ```
    fn build_delta_1() -> Delta<RopeInfo> {
        }
    /// the frontend.
                                  style_spans, &plan, pristine);
    }
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    }
                            rev_id: rev.rev_id,
    type L = String;
        // even though the actual sampling order (from timestamp of
                }
        let mut result = Cow::from("");
        let inserts = parse_subset_list("
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        let subset_str = format!("{:#?}", expand_by[0].1);
/// fn something_expensive() -> u32 {
        engine.undo([].iter().cloned().collect());

        }
            FindAll => self.do_find_all(text),
        let trace = Trace::enabled(Config::with_limit_count(10));
        count_newlines(&s[..in_base_units])
        let mut cursor = Cursor::new(self, offset);
                        let mut word_cursor = WordCursor::new(text, region.max());
            enabled: AtomicBool::new(false),
//     http://www.apache.org/licenses/LICENSE-2.0

            }
    let mut out = Vec::new();
                    to_payload(("some description of the closure")))));
        }
    TRACE.get_samples_count()
            for i in 0..count {
    /// The line number is 0-based.
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            if next_chunk.is_none() { return None; }

        let a = Rope::from("a\r\nb\r\nc");

        //for next line
        let style = style_map.merge_with_default(style);
    pub fn session_id(&self) -> SessionId {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    }
        if all_samples.is_empty() {
            let c = i.to_string() + "\n";
}
    }
        assert_eq!(snapshot[2].name, "a");
    }
            result["cursor"] = json!(cursors);
        b.iter(|| black_box(trace.closure_payload(
            self.pid == other.pid &&
        }
    }
        ];


        let mut a = Rope::from("");
        if self.highlight_find {
        use self::MergeTestOp::*;
                      width_cache: &mut WidthCache, keep_selections: bool)
        guard
            let splitpoint = if s.len() > MAX_LEAF {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        let mut all_samples = self.samples.lock().unwrap();
    pub fn set_scroll(&mut self, first: i64, last: i64) {
        }
                        Cow::Owned(un_deleted.transform_shrink(inserts))
            selection.delete_range(offset, offset, true);
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    new_without_default_derive,
        // same span exists in both sets (as when there is an active selection)

                self.do_selection_for_find(text, case_sensitive),
        where D: Deserializer<'de>,
///
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    fn next(&mut self) -> Option<Cow<'a, str>> {
    fn edit_rev_undo_2() {
        trace.instant("3", &["test"]);
    fn delta_rev_head() {
                                priority,
                metadata_sort_index: sort_index,
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
        self.deletes_from_union = new_deletes_from_union;
                name, categories, payload, SampleEventType::DurationBegin)),
/// ```
}
    assert!(!a.is_empty() && !b.is_empty());
        /// revision that were deleted by this revision.
    #[bench]
/// for strings, specialized for incremental editing operations. Most operations
    pub fn set_dirty(&mut self, text: &Rope) {
        ix
                where E: serde::de::Error
            // with offset == 0, but be defensive.
///
            if !selection.is_empty() {
    ns / 1000


/// # Examples
                rev_id: basic_rev(i),
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
        -##-
enum MetadataType {
            duration_us: None,
                        let (inserts, deletes) = if gc_dels.is_empty() {

    #[bench]
    TRACE.get_samples_count()
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
        while let Err(incomp) = prev_boundary {
            Merge(5,4),
        ");
        #------


        let rearranged = rearrange(&revs, &base, 7);
        let trace = Trace::disabled();
    #[bench]
        d.insert(StrCow::from("test"), StrCow::from(value));
        // ensure that when the samples are sorted by time they come out in a

            rendered_styles.push(style_id as isize);
            splitpoint
        let all_samples = self.samples.lock().unwrap();
#[inline]
    fn merge_associative() {
    /// selection edges).
impl Serialize for DeltaElement<RopeInfo> {
            Revision {


                        let _ = s.pop();
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        if self.cursor.pos() >= self.end {
        all_samples.push_back(sample);
            GotoLine { line } => self.goto_line(text, line),
            // cursor
        let inserted = inserts.inserted_subset();
        if let Some(ref mut trace) = self.trace {
        let mut b = String::new();
                            rendered_lines.push(line);
        let height = self.line_of_offset(text, text.len()) + 1;
        !self.selection.regions_in_range(offset, offset).is_empty()
        *self = b.build();
    }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);

        d_builder.delete(Interval::new_closed_open(10, 36));
/// Atomicity is implicit, putting the offset
    // even worth the code complexity.
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                    }
            None => text.line_of_offset(offset)
        where S: Serializer
    }
    #[test]

        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                offset = prev;
    pub fn instant<S, C>(&self, name: S, categories: C)
    // TODO find the maximum base revision.
    match std::env::current_exe() {
///
    }

                                                    style_spans, client,
        }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        where S: serde::Serializer
#[cfg(feature = "json_payload")]
                    } else {
            highlight_find: false,
    // this is the cost contributed by the timestamp to trace()

// You may obtain a copy of the License at
    fn into_chrome_id(&self) -> char {

    /// Generally racy since the underlying storage might be mutated in a separate thread.

    /// Garbage collection means undo can sometimes need to replay the very first

        // position after 'f' in four
mod fixed_lifo_deque;
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
            Assert(1, "apb".to_owned()),
        }
        }
        b.push(self);
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
        assert_tokens(&rope, &[
    }
            GestureType::MultiWordSelect =>
enum WrapWidth {


        }
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
        if let Contents::Edit {priority, inserts, .. } = r.edit {
            if self.fragment.is_empty() {
        assert_eq!(snapshot[0].name, "process_name");
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        let mut offset = 0;
            let mut peers = Vec::with_capacity(count);

        }
    move_delta.apply(tombstones)
        }
        self.revs.push(new_rev);
    rev_id: RevId,
    }

/// for strings, specialized for incremental editing operations. Most operations
    fn next(s: &String, offset: usize) -> Option<usize> {
        let mut to_undo = BTreeSet::new();
        let script = vec![
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
                        deletes_from_union
                    selection.add_region(occ);
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    pub(crate) fn get_replace(&self) -> Option<Replace> {
            match c.edit {


                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
    ///

categories_from_constant_array!(1);
        }
        if offset == s.len() {
        }

    #[bench]
                            Cursor::new(breaks, offset));

        assert_eq!(Some(9), a.next_grapheme_offset(3));
            }
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
{
        impl From<RopeDelta_> for Delta<RopeInfo> {
}
    } else {
                let (nl, noffset) = self.next_leaf()?;
    pub categories: Option<CategoriesT>,
/// rather than just this processe's samples).

        self.set_selection(text, SelRegion::caret(offset));
    #[serde(rename = "ts")]
///
            while !s.is_char_boundary(offset - len) {
            args: Some(SampleArgs {
            // about what wrapped.
    fn offset_of_line_panic() {
    }
// should make this generic, but most leaf types aren't going to be sliceable
        match self.inner.next() {
                SelectionModifier::Set => self.set_selection(text, occ),
///     something_expensive()
pub struct ChunkIter<'a> {
    assert!(!a.is_empty() && !b.is_empty());
    fn test_trace_disabled() {

///
        assert!(end <= leaf.len());
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
                Some(pos) => offset += pos + 1,
        b.set_dirty(true);
    /// Returns an iterator over chunks of the rope.
            // to replicate whiteboard, z must be before a tombstone
    #[test]
/// ```
        let end = time::precise_time_ns();
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
    fn eq(&self, other: &CategoriesT) -> bool {
        assert_eq!(2, expand_by.len());
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));



    }
    fn compute_deltas_1() {
        }
                }
            Assert(0, "ab".to_owned()),
                        }
mod tests {
    // TODO: switch to a persistent Set representation to avoid O(n) copying
    fn find_base_1() {
            Merge(2,0),
                                gc_dels = gc_dels.transform_expand(inserts);
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
        } else {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
extern crate test;
/// The result of the closure.
            write!(f, "Rope({:?})", String::from(self))
        }
    fn find_common_1() {
            Assert(1, "cb".to_owned()),


            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            } else {
            ModifySelection(movement) => self.do_move(text, movement, true),
    #[cfg(feature = "dict_payload")]
    }
    base_sel: Selection,

        rendered_styles
        value
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
}
        if before {
    TRACE.disable();
/// an argument.
                        let end_line = start_line + seg.n;
    fn next(&mut self) -> Option<u8> {
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    }
    }
            Some(offset + len_utf8_from_first_byte(b))
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
            SampleEventType::Instant => 'i',
                    els: delta.els.drain(..)
        self.rev_id_counter += 1;
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
#[inline]
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    #[cfg(feature = "benchmarks")]

    fn test_get_samples_nested_trace() {

        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
    None,
/// The visual width of the buffer for the purpose of word wrapping.
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
}
    #[test]
        engine.undo([1,2].iter().cloned().collect());
    }
    deletes: Subset,

            Merge(3,1), Merge(5,3),
pub enum SampleEventType {
        self.find.iter().map(|find| {
    pub fn max_samples(&self) -> usize {
impl PartialEq for CategoriesT {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
//See ../docs/MetricsAndBoundaries.md for more information.
    }
    fn compute_transforms_2() {
        deletes_bitxor: Subset,
        } else {
    ($num_args: expr) => {
                        }
        memchr(b'\n', &s.as_bytes()[offset..])
        }

            SampleEventType::AsyncStart => 'b',
            Click(MouseAction { line, column, flags, click_count }) => {

    find: Vec<Find>,
        for _ in 0..line_len {
    #[test]
    fn compute_transforms_1() {
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        if self.len() != other.len() {
            self.set_selection(text, sel);
    }

    /// Returns an iterator over chunks of the rope.

        ]);
    #[test]
            self.idx = 0;
    }
                                deletes_bitxor: new_deletes_bitxor,
            categories: Some(categories.into()),
        --#--
}
            }
        let mut leaf_offset = pos - offset;
        }).collect();
        }
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
///
                if s.ends_with('\n') {
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        let b = a.slice(1, 10);
    // TODO(vlovich): Replace all of this with serde flatten + rename once

        assert_eq!(utf8_offset, 13);
                return None;
{

    ObjectSnapshot,
    }
    /// height of visible portion
/// The result of the closure.
impl FromStr for Rope {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },

        use self::MergeTestOp::*;
        for rev in old_revs.into_iter().rev() {
use self::Contents::*;

                    None => return if result.is_empty() { None } else { Some(result) }
    // TODO: maybe refactor this API to take a toggle set
        engine.gc(&gc);
            pid: sys_pid::current_pid(),

        for i in 0..self.len() {
        // only one of the deletes was gc'd, the other should still be in effect

///

        MergeTestState::new(3).run_script(&script[..]);
        let correct = parse_subset_list("
impl Hash for Sample {
    #[test]
    rev_id_counter: u32,
            Assert(0, "acbd".to_owned()),
    #[test]
/// version of Ropes, and if there are many copies of similar strings, the common parts
            let mut word_cursor = WordCursor::new(text, offset);
        let mut hls = Vec::new();
    TRACE.disable();
    pub fn new_duration_marker<S, C>(name: S,
///
    new_without_default_derive,
    }
        ---#--
    Metadata
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    }
                formatter.write_str("comma-separated strings")
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        let snapshot = trace.samples_cloned_sorted();

            for (i, op) in script.iter().enumerate() {

                l = pl;
        where S: serde::Serializer
    /// Create a new Engine with a single edit that inserts `initial_contents`
        (self.pid, self.timestamp_us).hash(state);
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        assert_eq!(utf8_offset, 9);
        assert_eq!(snapshot[1].name, "thread_name");
            rendered_styles.push(style_id as isize);
/// Revision 0 is always an Undo of the empty set of groups
}
        assert_eq!(Some(9), a.next_grapheme_offset(3));

    /// Returns the regions of the current selection.
        assert!(r.clone().slice(0, a.len()) == a_rope);
                match *other {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
                // merge logic.
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    session2: u32,
        let first_rev = engine.get_head_rev_id().token();
                self.do_drag(text, line, column, Affinity::default()),
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    }
    }

                client.replace_status(self.view_id, &json!(replace))
            self.pid == other.pid &&
                Some(i) => {
struct FullPriority {
        d
                cur_all_inserts = older_all_inserts;
enum MetadataType {

    #[test]
        assert_eq!(1, r.line_of_offset(a.len()));
                }
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);

        ");
            offset += 1;
    }
/// as opposed to thousands of revisions.
            CategoriesT::StaticArray(ref self_arr) => {
        }
            // These two will be different without using session IDs
    tombstones: Rope,
            Some(offset + len_utf8_from_first_byte(b))
        } else {
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();

impl MetadataType {
    pub fn enable_config(&self, config: Config) {
                        }
                // This could be done by explicitly overriding, or by tweaking the
/// * `categories` - A static array of static strings that tags the samples in

        // since one of the two deletes was gc'd this should re-do the one that wasn't
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
            // I think it's a precondition that this will never be called
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        }
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
            args: Some(SampleArgs {
/// # Examples
    pub fn push_str(&mut self, mut s: &str) {
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
        assert_eq!(0, a.lines_raw_all().count());
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
            ix = sel_end as isize;

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
    use super::*;
                            (inserts, deletes)
                           pristine: bool)
                        _ => break
//! `Engine::merge`, which is more powerful but considerably more complex.
        self.revs.iter().enumerate().rev()
            }
    1
    }

    }

        --#--
        s.is_char_boundary(offset)
            undo_group: 0,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    #[test]
            args: Some(SampleArgs {
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
/// Returns all the samples collected so far ordered chronologically by
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),

                            if !deletes.is_empty() {
                   r.lines_all().collect::<Vec<_>>());
    /// set with this function, which will make the revisions they create not have colliding IDs.
    }
        }
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    replace_changed: bool,
        // we add the special find highlights (1) and selection (0) styles first.
    }
            None => return "",
                }
                }
        }
            client.scroll_to(self.view_id, line, col);
            return ix;
    #[test]
        while let Err(incomp) = prev_boundary {
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
// The advantage of using a session ID over random numbers is that it can be
        false
                return None;
                self.do_gesture(text, line, col, ty),

            Assert(0, "adfc".to_owned()),
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
use delta::{Delta, InsertDelta};
            }
                    }
/// something_expensive();
    }
            None
                    result = cow_append(result, self.fragment);
pub fn samples_len() -> usize {
        let selection = SelRegion::new(0, text.len()).into();

        }
    fn basic_rev(i: usize) -> RevId {
            MetadataType::ProcessName {..} => "process_name",
        assert_eq!(0, a.lines_all().count());
    // of the union string length *before* the first revision.
        /// The set of groups toggled between undone and done.
    where S: serde::Serializer {
    end: usize,

            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
        }
    }
        assert_tokens(&rope, &[
    }
        self.set(new_pos);
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
        deserializer.deserialize_str(CategoriesTVisitor)
                true => x.end,
        -#-
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    // * grapheme clusters
        for region in self.selection.iter() {
        client.def_style(&style.to_json(ix));
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    /// Get revision id of head revision.
    {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
//     http://www.apache.org/licenses/LICENSE-2.0
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);

    #[cfg(feature = "benchmarks")]
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    type Err = ParseError;
    ns / 1000
        // move deleted or undone-inserted things from text to tombstones
        {
}
                        let mut line_cursor = Cursor::new(text, offset);
                    }
        -##-

                            if !inserts.is_empty() {
    /// The semantics are intended to match `str::lines()`.

impl fmt::Debug for Rope {
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
            samples: Mutex::new(FixedLifoDeque::new())
                    linewrap::rewrap_width(breaks, text, width_cache,
            }
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    /// 96 bits which is more than sufficient for this to never happen.
        text = new_text;
        }
            },
        }
/// The result of the closure.
///     something_else_expensive(result);
            return self.len();
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
    fn from_chrome_id(symbol: char) -> Self {
                          payload: Option<TracePayloadT>) -> Self
        // x, a, y, b, z, c
/// 1. Samples that span sections of code may be inserted on end instead of
            }
        min
        }
    #[cfg(feature = "benchmarks")]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

        // insert a character at the beginning
    /// Invalidates front-end's entire line cache, forcing a full render at the next

    #[bench]
                WrapWidth::None => (),
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
            inserts: Subset::new(0),
                        })
        assert_eq!(snapshot[7].name, "c");
    ///

        if let Some(occ) = closest_occurrence {
            if self.fragment.is_empty() {
    }
        let text_a = Rope::from("zcbd");
    {
        if let Some(sel) = new_sel {
    fn sample_name(&self) -> &'static str {
impl<'de> serde::Deserialize<'de> for CategoriesT {
                find_leaf_split_for_bulk(s)
    TRACE.instant_payload(name, categories, payload);
    replace: Option<Replace>,
    /// indicates a search for the next occurrence past the end of the file.
            utf16_size: count_utf16_code_units(s),
        engine.undo([2].iter().cloned().collect());
        assert_eq!(samples[1].name, "local pid");
            }

                if !inserts.is_empty() {

            match rev.edit {
            timestamp_us: ns_to_us(time::precise_time_ns()),
        let sample_name = to_cow_str(meta.sample_name());
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        Self::with_limit_count(size / size_of::<Sample>())
                    for (ei, e) in self.peers.iter().enumerate() {
        b.push_str(s);
        text = new_text;
//     http://www.apache.org/licenses/LICENSE-2.0
        if self.scroll_to.is_none() && wrap {
        for chunk in self.iter_chunks(start, end) {
    fn delta_rev_head_3() {
            return 0;
                           style: &Style) -> usize {
        d_builder.delete(Interval::new_closed_open(10, 36));

    #[test]
            "styles": styles,
}
    }
                        let mut word_cursor = WordCursor::new(text, region.max());
/// Enable tracing with a specific configuration. Tracing is disabled initially


            CategoriesT::StaticArray(ref self_arr) => {
        r.slice_to_string(0, r.len())

        // shouldn't do anything since it was double-deleted and one was GC'd
        for sample in all_samples.iter() {
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
        self.drag_state = Some(DragState {
    ///

                          payload: Option<TracePayloadT>) -> Self
            fragment: ""
                    let sel_start = cursor.pos();
        let (ins_delta, deletes) = delta.factor();
}
                    }
    ///
        if line > max_line {
#[inline]
impl Serialize for Delta<RopeInfo> {
/// Applies an optimization where it combines sequential revisions with the
        let inserts = parse_subset_list("
        assert_eq!(None, b.next_codepoint_offset(9));
        let new_deletes_from_union = {
                tid));
            let right_str = self[splitpoint..].to_owned();
        }

            s = &s[splitpoint..];
        self.len() >= MIN_LEAF
        if offset >= next_line_offset {
        },

    /// Offset of the point where the drag started.
    }
            panic!("line number {} beyond last line {}", line, max_line);
        self.replace = Some(Replace { chars, preserve_case });
        let mut result = json!({
        let utf8_offset = 19;



        self.drag_state = None;
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                    };
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);

        self.samples.lock().unwrap().limit()
    /// this returns the offset of the end of the rope. Arguments higher
            splitpoint
    pub fn enabled(config: Config) -> Self {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
/// let b = a.slice(1, 9);
    /// Set the selection to a new value.
          F: FnOnce() -> R
        }


    fn find_base_1() {
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    TRACE.block_payload(name, categories, payload)
/// Usage of static strings is encouraged for best performance to avoid copies.

    }
        let (ins_delta, deletes) = delta.factor();
    /// Updates the view after the text has been modified by the given `delta`.
        b if b < 0x80 => 1,
        let rev = Revision {
    #[serde(rename = "ts")]
        }
/// Applies an optimization where it combines sequential revisions with the

    deletes: Subset,
    }
        // TODO: simplify this through the use of scopeguard crate
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        let text = Rope::from("13456");
                Contents::Undo { .. } => panic!(),
    let mut s = Subset::new(head_len);

pub struct Config {
#[inline]
/// {
//! text.
            }
impl NodeInfo for RopeInfo {
    TRACE.enable();


    // use own breaks if present, or text if not (no line wrapping)
                } else if click_count == Some(2) {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

            for rev in &self.revs {
            min: offset,

        impl From<RopeDelta_> for Delta<RopeInfo> {
// Licensed under the Apache License, Version 2.0 (the "License");
            },
impl Config {
///
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            ix = iv.end() as isize;
        /// The set of groups toggled between undone and done.
            GestureType::RangeSelect => self.select_range(text, offset),
        // todo: for now only a single search query is supported however in the future
        let a = Rope::from("");
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
    //
        println!("{:#?}", b_delta_ops);

        a.lines_all().collect::<Vec<_>>());
                None => {
        self.find.iter().map(|find| {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            Merge(1,2),
        self.pending_render = pending
                    }
///
        let all_caret = self.selection.iter().all(|region| region.is_caret());
    }
            self.tid == other.tid &&
        max
    /// # Panics
    fn next_codepoint_offset_small() {
                            rendered_lines.push(line);
        for rev in self.revs[rev_index..].iter().rev() {
            match reverse {
            if region.is_caret() {
        }

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        /// Just the `symmetric_difference` (XOR) of the two sets.

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);


                        if !last_selection.is_caret() {
    let mut s = Subset::new(head_len);
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                    let transformed_deletes = deletes.transform_expand(&s);
    #[test]

        self.replace = Some(Replace { chars, preserve_case });
            retain_revs.insert(last.rev_id);
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// ties in edit priorities. Otherwise the results may be inconsistent.
    ///
    }
            b.push('b');
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
    }

impl NodeInfo for RopeInfo {
    }
    fn merge_max_undo_so_far() {
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
    (1, 0)
    fn find_common_1() {
                    if undone_groups.contains(undo_group) {
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
    /// New offset to be scrolled into position after an edit.
                            styles: &StyleMap, style_spans: &Spans<Style>,
    // ============== Merge script tests

            categories: Some(categories.into()),
    /// # Panics
        a.lines_all().collect::<Vec<_>>());
///     something_expensive()
    // There will probably never be a document with more than 4 billion edits
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
        };
            categories: Some(categories.into()),
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
            drag_state: None,
        match *self {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
                        ops.push(self.build_update_op("copy", None, seg.n));
    {


///     0
/// a.edit_str(1, 9, "era");
        let contents = Contents::Edit {
}
        let head2 = engine.get_head_rev_id().token();


/// The payload associated with any sample is by default a string but may be

    fn bench_get_pid(b: &mut Bencher) {
//     http://www.apache.org/licenses/LICENSE-2.0
        let last = max(last, 0) as usize;
    } else {

                    } else {

                                     payload: Option<TracePayloadT>,


            }
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
                leaf_offset = self.pos() - poffset;
    #[test]
    /// Sets the selection to a new value, without invalidating.
    samples: Mutex<FixedLifoDeque<Sample>>,
            None => {
            event_type: SampleEventType::CompleteDuration,
            Merge(0,2), Merge(1, 2),
        use self::MergeTestOp::*;
        for _ in 0..line_len {
        });
        d_builder.delete(Interval::new_closed_open(58, 61));
/// Revision will be used, which means only the (small) set of concurrent edits
pub fn samples_cloned_unsorted() -> Vec<Sample> {
        let deletes_from_union_a = parse_subset("-#---");
        self.hash(&mut hasher);


        }
            Merge(0,1),
/// an argument.
        // since one of the two deletes was gc'd this should re-do the one that wasn't
        let first_rev = engine.get_head_rev_id().token();
            // which we can do with another peer that inserts before a and merges.
    fn merge_simple_delete_1() {
                l = pl;
/// Revision will be used, which means only the (small) set of concurrent edits
        self.buffer_id
        -> Self
        // creation) is:
                         first_line: usize, last_line: usize, pristine: bool) {
    /// Invalidates the styles of the given range (start and end are offsets within
                }
    }
                if rev.max_undo_so_far < lowest_group {
    pub metadata_name: Option<StrCow>,
                //// if we aren't on a boundary we can't be at the end of the chunk

use std::str;
    }
    #[test]
    TRACE.instant_payload(name, categories, payload);

//! which is sufficient for asynchronous plugins that can only have one
        Merge(usize, usize),
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
                    } else {
                    selection.add_region(occ);

mod tests {

}
/// overhead tracing routine available.
            match rev.edit {
    /// Replacement string.
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    }
        in_base_units
    /// validate their input.
        engine.edit_rev(1, 3, new_head_2, d3);
        delta.serialize_field("els", &self.els)?;
    }
    deletes: Subset,
    pub fn sel_regions(&self) -> &[SelRegion] {
            None
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
    /// revision, and so needs a way to get the deletion set before then.
            type Value = CategoriesT;

    /// When was the sample started.
        cursor.prev_grapheme()
                self.set_selection_raw(text, selection);
                                deletes_bitxor: new_deletes_bitxor,
        self.size = size;
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        };
//
        for sample in all_samples.iter() {
                        first_sample_timestamp,
            &self.deletes_from_union, &old_deletes_from_union);
        if self.breaks.is_some() {
            while !s.is_char_boundary(splitpoint) {
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
                self.set_selection(text, SelRegion::caret(offset));
        let new_inserts = union_ins_delta.inserted_subset();
            Assert(1, "ab".to_owned()),
                    let sel_start = cursor.pos();


        }
        }
        }
            Assert(0, "ab".to_owned()),

            AssertMaxUndoSoFar(1,1),
        self.selection = sel;

                    self.do_gesture(text, line, column, GestureType::RangeSelect)

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
    /// than this will panic.
        } else if self.first_line + self.height <= line {
                return false;
    /// and currently in a debugging state.
    ProcessSortIndex { sort_index: i32 },
            'N' => SampleEventType::ObjectCreated,
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        } else { // no toggled groups, return past end
        let trace = Trace::disabled();
        }, new_text, new_tombstones, new_deletes_from_union)
            Assert(2, "b".to_owned()),
}
            end -= 1;
    {
    #[test]
                return offset;
            self.unset_find();
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
        self.height = last - first;
    let mut last_priority: Option<usize> = None;
                let mut peer = Engine::new(Rope::from(""));
    session2: u32,
            let _x = trace.block("something", &[]);
    /// Tracks whether find highlights should be rendered.
//! conceptually represents the current text and all edit history for that
        let b_rope = Rope::from(&b);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        engine.edit_rev(1, 1, first_rev, d1);
                tid));
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        json!({"test": value})
    }

        delta.serialize_field("base_len", &self.base_len)?;
    #[cfg(feature = "json_payload")]
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
                                  style_spans, &plan, pristine);
                edit: Contents::Edit {
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    fn compute_info(s: &String) -> Self {
}
    fn next(s: &String, offset: usize) -> Option<usize> {
        assert_eq!(trace.is_enabled(), true);
    /// Return the line number corresponding to the byte index `offset`.
}
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {

    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
    }
            Some(b)
            // I think it's a precondition that this will never be called
///
                l = nl;

    #[cfg(feature = "benchmarks")]

///
        self.replace.clone()
/// xi_trace::trace("something happened", &["rpc", "response"]);
}
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
        });
        let invalid = if all_caret {
            rendered_styles.push(sel_end as isize - sel_start as isize);

        let mut plan = RenderPlan::create(height, self.first_line, self.height);
            }
}

            SampleEventType::ObjectDestroyed => 'D',
/// Atomicity is implicit, putting the offset
                el.serialize_field(start)?;
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        }
            type Value = CategoriesT;
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
    {
        let new_head_2 = engine.get_head_rev_id().token();
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
            write!(f, "Rope({:?})", String::from(self))
        all_samples.push_back(sample);
    }
            categories: Some(categories.into()),
                if !inserts.is_empty() {
        engine.undo([].iter().cloned().collect());
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            Merge(2,0),
    /// Time complexity: O(log n)

    fn edit_rev_undo() {
/// Returns all the samples collected so far ordered chronologically by
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    {
            name: name.into(),
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            while !s.is_char_boundary(offset - len) {
        ##
    lines: usize,
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
            },
        ---#--
        Self {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    highlight_find: bool,
    /// Invalidates the styles of the given range (start and end are offsets within
///     0
        self.find.clear();
    }
            Assert(0, "acrbdz".to_owned()),
        revs.append(&mut revs_2);
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

    #[test]

    fn next(&mut self) -> Option<Cow<'a, str>> {
    pub(crate) fn has_pending_render(&self) -> bool {
        thread.name().map(|ref s| to_cow_str(s.to_string()))
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        Self {
        #------
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
/// # use xi_rope::Rope;
                if !inserts.is_empty() {
        if all_samples.is_empty() {
                    // TODO: update (rather than re-render) in cases of text valid
                    let end_of_line = match cursor.next::<LinesMetric>() {
    }
        gc_scenario(35,20);
    {

        a.lines_all().collect::<Vec<_>>());
        self.scroll_to_cursor(text);
        let first_rev = engine.get_head_rev_id().token();
                        };
                    None => return if result.is_empty() { None } else { Some(result) }
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
    }
}

    /// This is used to determined whether FindStatus should be sent to the frontend.
#[cfg(feature = "dict_payload")]
    }
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };


            Assert(0, "acpbdj".to_owned()),

        let a2 = Rope::from("a");
        assert_eq!(snapshot.len(), 9);
        trace.closure_payload("z", &["test"], || {},
    fn sample_name(&self) -> &'static str {
        self.tombstones = new_tombstones;

    ///
    }
    Matches
            Merge(0,2), Merge(1, 2),
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            // which we can do with another peer that inserts before a and merges.
    inner: LinesRaw<'a>
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        let mut sel = self.selection.clone();
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
    }
    use test::Bencher;
        fn run_op(&mut self, op: &MergeTestOp) {
            Assert(0, "b".to_owned()),
    }
///
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

        ");

        },

    #[cfg(feature = "benchmarks")]
    }
    }
        // spam cmd+z until the available undo history is exhausted
            self.truncate(splitpoint);
/// Usage of static strings is encouraged for best performance to avoid copies.
        });
            } else {
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        ).min_by_key(|x| {
                        let mut word_cursor = WordCursor::new(text, region.max());
impl Rope {

        let len = match first_rev.edit {
                    RopeDeltaElement_::Insert(s) =>
                self.drag_state = None;
}

    }
        self.revs.push(new_rev);
        }
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.

    // Render a single line, and advance cursors to next line.
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        let (new_text, new_tombstones) =
                //// if we aren't on a boundary we can't be at the end of the chunk
/// assert_eq!("herald", String::from(a));
enum MetadataType {
{
pub struct RevId {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                    .with_horiz(horiz)
///     something_else_expensive(result);
use std::borrow::Cow;
    /// Selects the next find match.
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// * `name` - A string that provides some meaningful name to this sample.
        for r in &self.revs[ix + 1..] {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
            write!(f, "{}", String::from(self))
    /// terminating newline.
        let mut result = Cow::from("");
                self.highlight_find = visible;
    // TODO: don't construct transform if subsets are empty
struct DeltaOp {
    #[test]
    // A colliding session will break merge invariants and the document will start crashing Xi.


        }
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        use self::MergeTestOp::*;
        !self.selection.regions_in_range(offset, offset).is_empty()
        }
        if let Some(lines) = lines {
    }
                } else if click_count == Some(2) {
extern crate serde_derive;
            Some(Cow::Owned(mut s)) => {
        let r = r + Rope::from(&b[MIN_LEAF..]);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        let mut selection = self.selection.clone();
            }),
                    to_payload(("some payload for the block"))));

            Assert(0, "zcbd".to_owned()),
            Assert(0, "ab".to_owned()),
        // rebase the delta to be on the head union instead of the base_rev union
/// # Arguments
        assert_tokens(&rope, &[
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
/// discussion on payload.
        (self.pid, self.timestamp_us).hash(state);
    {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn find_base_1() {
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        RevId { session1: 1, session2: 0, num: i as u32 }
use unicode_segmentation::GraphemeIncomplete;
        debug_subsets(&rearranged_inserts);
        assert_eq!(samples[0].name, "remote pid");
use client::Client;
            }
    pub fn enabled(config: Config) -> Self {
        if let Some(lines) = lines {
                    filename.to_str().map(|s| s.to_string())
        self.prev::<BaseMetric>();
    fn render_line(&self, client: &Client, styles: &StyleMap,
///
//! which is sufficient for asynchronous plugins that can only have one
            Sample::new_instant("remote pid", &[], None)];
        }
        if wrap_col > 0 {

    }
            }
    }
        self.rev_id_counter += 1;
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
                tid));
                let line = line.min(text.measure::<LinesMetric>() + 1);

    /// Only number of matches changed
        self.send_update_for_plan(text, client, styles,

            let mut len = 1;
        }, to_payload("test_get_samples_nested_trace"));


/// something_expensive();
    }
    }
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        assert_eq!(snapshot[0].name, "process_name");
        }
        if !self.is_point_in_selection(offset) {
            "ops": ops,
    }
                }
    /// Starts a drag operation.
pub fn len_utf8_from_first_byte(b: u8) -> usize {
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
        }
                        let n_skip = seg.their_line_num - line_num;
    }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },

                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        where S: Into<StrCow>, C: Into<CategoriesT>
            }

        let b_revs = basic_insert_ops(inserts, 2);
        // rebase delta to be on the base_rev union instead of the text
                priority, undo_group, deletes,
            FindPrevious { wrap_around, allow_same, modify_selection } =>

                    .with_affinity(affinity)
        engine.undo([].iter().cloned().collect());
        }


#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
            }, to_payload("test_get_samples_nested_trace"));
    inner: LinesRaw<'a>
use std::mem::size_of;
/// * `name` - A string that provides some meaningful name to this sample.
            // I think it's a precondition that this will never be called
use bytecount;
        // even though the actual sampling order (from timestamp of
        let mut d = TracePayloadT::with_capacity(1);
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    /// Determines whether the offset is in any selection (counting carets and
    #[inline]
/// # Arguments
                }
        let mut gc_dels = self.empty_subset_before_first_rev();
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        deserializer.deserialize_str(CategoriesTVisitor)
    Metadata
        let mut engine = Engine::new(Rope::from(TEST_STR));
}
        let offset = self.line_col_to_offset(text, line, col);
            Merge(1,2),


        }
        -##-
        self.revs.last().unwrap().max_undo_so_far
        let (iv, new_len) = delta.summary();
    /// Tracks whether there has been changes in find results or find parameters.
    /// Tracks whether find highlights should be rendered.
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
    }
        let inserts_3 = parse_subset_list("
    /// Invalidate the current selection. Note that we could be even more
            self.set_selection(text, sel);
        use self::MergeTestOp::*;
        rope.line_of_offset(20);
            Merge(0,2), Merge(1, 2),
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        assert_eq!(trace.is_enabled(), true);
    /// Callers are expected to validate their input.
use unicode_segmentation::GraphemeIncomplete;
    // partly because the reachability calculation would become more complicated (a

/// Returns the file name of the EXE if possible, otherwise the full path, or
///
            SampleEventType::Instant => 'i',
    fn can_fragment() -> bool {

                let (pl, poffset) = self.prev_leaf()?;
    /// height of visible portion
#[inline]
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
impl SampleEventType {
        }
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
impl Metric<RopeInfo> for BaseMetric {
        self.enabled.store(true, AtomicOrdering::Relaxed);
        if offset >= text.len() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    /// The revision history of the document
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    // * Unicode codepoints
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            } else if incomp == GraphemeIncomplete::NextChunk {
            }
        if offset == s.len() {
    pub fn disable(&self) {
    // Delta that deletes the right bits from the text
        self.timestamp_us == other.timestamp_us &&
/// * `categories` - A static array of static strings that tags the samples in
    samples: Mutex<FixedLifoDeque<Sample>>,
        /// along with the newline that triggered it.
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
    out

    }
            Assert(1, "ab".to_owned()),
        for i in 0..5_000 {
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
            AddSelectionAbove =>
                self.do_set_replace(chars, preserve_case),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
    // * Code units in some encoding

            None
    {
        --#--
///
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            Merge(2,1),
            inner: self.lines_raw(start, end)
    #[test]
}
        }
    /// Starts a drag operation.
    fn arr_eq(&self, other: &Vec<String>) -> bool {
                    } else {

        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        self.do_set_replace(replacement, false);
        assert_eq!(Some(6), a.next_codepoint_offset(3));
extern crate serde_derive;
            end += 1;
            end += 1;
            MetadataType::ProcessName {name} => (Some(name), None),

        let correct = parse_subset_list("
// distributed under the License is distributed on an "AS IS" BASIS,
                     modify_selection: &SelectionModifier) {
            }
        }
        let line = self.line_of_offset(text, offset);
    /// and currently in a debugging state.

#[inline]
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

        if let Some(ix) = style_map.lookup(style) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
    out
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,

        },
        let d = engine.delta_rev_head(after_first_edit);
        match *self {

        let mut sel = self.selection.clone();
            tid: sys_tid::current_tid().unwrap(),
        gc_scenario(35,20);
        }
    }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        true
    #[test]
    #[serde(skip_serializing_if = "Option::is_none")]
    /// Selects the next find match.
    /// None of the find parameters or number of matches changed.
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
fn clamp(x: usize, min: usize, max: usize) -> usize {
    let new_text = del_delta.apply(text);
        if self.idx <= self.current.unwrap().len() {
use rpc::{GestureType, MouseAction, SelectionModifier};
#[derive(Clone, Debug)]
    fn from_chrome_id(symbol: char) -> Self {
    #[test]
        }
    #[test]
/// {

                Some(Cow::from(s))
    }
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
                    }
            return self.len();
            event_type: SampleEventType::CompleteDuration,
                cur_all_inserts = older_all_inserts;
pub struct SampleGuard<'a> {
#[derive(Clone, Debug)]
    /// Only works well for ASCII, will probably not be maintained long-term.
                            Cursor::new(breaks, offset));
        let end = time::precise_time_ns();
                        if n_skip > 0 {

            pid: sys_pid::current_pid(),
            self.idx += 1;
// Licensed under the Apache License, Version 2.0 (the "License");
    #[test]
            Assert(1, "abefg".to_owned()),
}
        use self::MergeTestOp::*;
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    use std::collections::BTreeSet;
        engine.undo([1].iter().cloned().collect());
        first_line..(last_line + 1)
            find: Vec::new(),
        assert_eq!(samples[0].name, "remote pid");
        assert_eq!(snapshot[8].name, "c");
            if let Some(ref thread_name) = sample.thread_name {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    }
                metadata_sort_index: None,
        }
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
            } else if incomp == GraphemeIncomplete::NextChunk {
pub fn enable_tracing() {
    fn undo_3() {
    fn bench_trace_closure_payload(b: &mut Bencher) {
    /// Set the selection to a new value.
    #[test]
        let first = max(first, 0) as usize;
        // Note: for committing plugin edits, we probably want to know the priority
/// the `base_revs`. This allows the rest of the merge to operate on only
            Assert(0, "zcpbdj".to_owned()),
            }),
            None

    fn undo_2() {
        // the generated JSON.
{
/// fn something_else_expensive(value: u32) {
    }
        impl From<RopeDelta_> for Delta<RopeInfo> {
    #[inline]
                                deletes_bitxor: new_deletes_bitxor,
            }
/// Create a `Rope` from a `String`:
    StaticArray(&'static[&'static str]),
// distributed under the License is distributed on an "AS IS" BASIS,

    #[serde(skip_serializing_if = "Option::is_none")]
    }

        self.samples.lock().unwrap().limit()
        self.set_selection_raw(text, selection);
        self.find.clear();
            }
            self.tid == other.tid &&
// line iterators
            return false;
        _ => 4
            //let prev_pos = self.cursor.pos();
        assert_eq!(snapshot[4].name, "z");
#[derive(Serialize, Deserialize, Debug, Clone)]
/// Valid within a session. If there's a collision the most recent matching
        #------
        engine.edit_rev(1, 1, initial_rev, d1.clone());


        let d = engine.delta_rev_head(after_first_edit);
    fn utf16_code_units_metric() {
    ///
    /// Sorting priority between processes/threads in the view.
    }

            Merge(0,2), Merge(1, 2),
            Assert(0, "ab".to_owned()),

        let cur_deletes_from_union = &self.deletes_from_union;
        ).min_by_key(|x| {
    }
        Self {
        let res = find_base_index(&a, &b);
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        memrchr(b'\n', &s.as_bytes()[..offset])
    }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

                }
    }

}
    #[cfg(feature = "benchmarks")]
    #[cfg(feature = "json_payload")]
        let b_revs = basic_insert_ops(inserts, 2);
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        trace.closure_payload("x", &["test"], || {
    // Send the requested lines even if they're outside the current scroll region.
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    /// should be constructed via SampleGuard.
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {

        
        let mut b = line_cache_shadow::Builder::new();
    }
struct DeltaOp {
        let mut a = Rope::from("");


            self.collapse_selections(text);
            Some(region) => {
use std::fmt;
    #[cfg(feature = "benchmarks")]
                }
                    }
    use engine::*;
    max_undo_so_far: usize,
    }
    #[test]
use rope::{Rope, RopeInfo};
        assert_eq!(snapshot[3].name, "b");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            SampleEventType::AsyncInstant => 'n',
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
        gc_scenario(35,20);
impl Eq for Sample {}
        self.view_id
    #[should_panic]
        }

            pos

                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
        a.push('\n');
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        count_utf16_code_units(&s[..in_base_units])

use std::collections::hash_map::DefaultHasher;
        };
    }
                     modify_selection: &SelectionModifier) {
        MergeTestState::new(3).run_script(&script[..]);

    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    ObjectDestroyed,
        fn run_script(&mut self, script: &[MergeTestOp]) {
        // NOTE: we derive to an interim representation and then convert
        }
        } else {
        assert_eq!(2, a.offset_of_line(1));
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        self.scroll_to_cursor(text);
    #[test]
        let cur_deletes_from_union = &self.deletes_from_union;
                SelectionModifier::Set => self.set_selection(text, occ),

                    .with_horiz(horiz)
/// on program launch.
    }
        delta.serialize_field("base_len", &self.base_len)?;
    /// The session ID used to create new `RevId`s for edits made on this device
                            }
        // todo: for now only a single search query is supported however in the future
            AssertMaxUndoSoFar(1,3),
        let (new_text, new_tombstones) =
#[cfg(test)]
        assert_eq!(utf16_units, 20);


            Scroll(range) => self.set_scroll(range.first, range.last),
        }
        Self::with_limit_count(size / size_of::<Sample>())
    pub fn get_samples_limit(&self) -> usize {
        ];
/// let b = Rope::from("world");
    }
///
    move_delta.apply(tombstones)
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        let mut hasher = DefaultHasher::new();
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
///
                self.select_line(text, offset, line, true),

    }
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    }
        // a, b, y, z, c, x
                        word_cursor.select_word()
    /// The selection state for this view. Invariant: non-empty.
    }
    pub(crate) fn record(&self, sample: Sample) {
        ];
    #[test]

/// ```rust,ignore
                    // can only happen on empty input
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    ObjectCreated,
use delta::{Delta, InsertDelta};
        let mut sel = Selection::new();
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
                RenderTactic::Render => {
    // and partly because you need to retain more undo history, to supply input to the
            self.find.push(Find::new());

/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let a = Rope::from("a\rb\rc");
    fn is_ok_child(&self) -> bool {

        d_builder.build()
    /// Width in px units, requiring measurement by the front-end.
        // probably change as the recording internals change.
    }

        let snapshot = trace.samples_cloned_unsorted();


        base_subset.is_some() && base_subset == other_subset
use std::fmt;
///
            Assert(0, "acrpbdzj".to_owned()),
/// Valid within a session. If there's a collision the most recent matching
            };
    fn merge_idempotent() {
        use self::MergeTestOp::*;
    }
                            edit: Undo {
    DynamicArray(Vec<String>),
}
            Assert(1, "afc".to_owned()),
        for _ in 0..line_len {
        all_samples.reset_limit(config.max_samples());
    }
        );
        revs.append(&mut revs_2);
    #[serde(rename = "ph")]
    // TODO: a case can be made to hang this on Cursor instead

    }
        // +2 for exe & thread name.
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
///
        let script = vec![
        Self {
//

        let trace = Trace::disabled();
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            update["lines"] = json!(lines);

    #[test]
/// # Arguments
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
                        None
    // use own breaks if present, or text if not (no line wrapping)
        } else {
            base_sel: selection.clone(),


/// some way.
/// # Returns
            as_vec.push(Sample::new_metadata(
        let rope = Rope::from("hi\ni'm\nfour\nlines");

                }
        let snapshot = trace.samples_cloned_sorted();

    fn test_get_samples_nested_trace() {

    type Item = Cow<'a, str>;
        samples

                }
        // position after 'f' in four
            self.idx += 1;

            GestureType::RangeSelect => self.select_range(text, offset),
impl CategoriesT {
}
        // spam cmd+z until the available undo history is exhausted

#[cfg(test)]
        assert_eq!(trace.is_enabled(), true);
    #[test]
    }
            sel.add_region(region);
            false
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;

        // set last selection or word under current cursor as search query
                }
// Copyright 2016 The xi-editor Authors.
        } else if self.first_line + self.height <= line {
        while let Err(incomp) = next_boundary {
                Some(i) => {
                self.select_word(text, offset, false),

                let (pl, poffset) = self.prev_leaf()?;
        // position after 'f' in four

        for region in self.selection.iter() {
/// However, anything that can be converted into a Cow string can be passed as
            // These two will be different without using session IDs
    },

    #[cfg(feature = "benchmarks")]
/// Revision 0 is always an Undo of the empty set of groups
        let trace = Trace::enabled(Config::with_limit_count(20));
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
            None => return "",
    // transform representing the characters added by common revisions after a point.
        b.iter(|| black_box(trace.closure_payload(

        self.find_changed = FindStatusChange::Matches;
// See the License for the specific language governing permissions and
                priority, undo_group, deletes,
        trace.closure_payload("x", &["test"], || {
    TRACE.samples_cloned_sorted()
/// assert!("hello world" == String::from(a + b));
mod sys_pid;
        ");
    #[serde(default = "default_session", skip_serializing)]

#[inline]
/// an argument.
    }
            Assert(1, "apbj".to_owned()),

        let mut pos = self.pos();
        engine.edit_rev(0, 1, first_rev, build_delta_1());
            cur_len_utf8 += u.len_utf8();
    #[cfg(feature = "benchmarks")]
    ProcessSortIndex { sort_index: i32 },
        assert_eq!(trace.is_enabled(), true);
    //
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
    pub fn get_head(&self) -> &Rope {
        let script = vec![
    type Item = Cow<'a, str>;
    }
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
// easily delta-compressed later.
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
                metadata_sort_index: None,
    /// The empty string will yield a single empty slice. In all other cases, the
    fn test_disable_drops_all_samples() {
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
}
        assert_eq!(0, a.offset_of_line(0));
            Some(offset - len)
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
//! this central engine. It provides the ability to apply edits that depend on
        self.invalidate_selection(text);
    pub fn max_size_in_bytes(&self) -> usize {
    #[test]
        for &(sel_start, sel_end) in sel {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

    ///
            let c = i.to_string() + "\n";

        samples
    // and partly because you need to retain more undo history, to supply input to the
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    undo_group: usize,
                            deletes_bitxor
                Undo { toggled_groups, deletes_bitxor } => {

                self.do_find(text, chars, case_sensitive, regex, whole_words),

        assert_eq!(0, b.line_of_offset(1));
    /// if it is non-empty. It needs to be a separate commit rather than just
        ");
        self.subseq(iv)

        engine.undo([1,2].iter().cloned().collect());
/// feature makes the payload a `serde_json::Value` (additionally the library
        }
        let initial_rev = engine.get_head_rev_id().token();
pub struct SampleArgs {
        b if b < 0x80 => 1,
    // callers should be encouraged to use cursor instead
///
    fn eq_small() {
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
    ///
    #[test]
    // There will probably never be a document with more than 4 billion edits
/// # Examples
/// A rope data structure.
        debug_subsets(&rearranged_inserts);
use std::hash::{Hash, Hasher};
/// Indicates what changed in the find state.
    }
    fragment: &'a str
        if self.is_enabled() {
        let mut pos = self.pos();
        engine.undo([1].iter().cloned().collect());
            Some(offset - len)
            // d-expand by other
    // A colliding session will break merge invariants and the document will start crashing Xi.
            let start = self.line_of_offset(last_text, iv.start());
// line iterators

        }
    fn hash<H: Hasher>(&self, state: &mut H) {

                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    /// The maximum number of entries the tracing data should allow.  Total
    deletes: Subset,

    ///
        samples
        let mut all_samples = self.samples.lock().unwrap();
        let edit_iv = Interval::new_closed_open(start, end);
                    ops.push(self.build_update_op("invalidate", None, seg.n));
            Assert(0, "ab".to_owned()),
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        Ok(Delta::from(d))
pub type RevToken = u64;
            soln.push('b');
                let (nl, noffset) = self.next_leaf()?;
    fn arr_eq(&self, other: &Rhs) -> bool;
            rebased_deletes_from_union.union(to_delete)
    use delta::{Builder, Delta};
        assert_eq!(snapshot[1].name, "thread_name");
        let inserts = parse_subset_list("
        self.revs.iter().enumerate().rev()
/// `base_revs`, but modified so that they are in the same order but based on
            },
/// let a = Rope::from("hello ");
                        self.revs.push(Revision {
        println!("{:#?}", delta_ops);
            engine.edit_rev(0, 0, first_rev, delta);
            },
        /// Just the `symmetric_difference` (XOR) of the two sets.
            view_id: view_id,



        }
                if (flags & FLAG_SELECT) != 0 {

            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
    }
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {


        }
    fn to_payload(value: &'static str) -> &'static str {
              F: FnOnce() -> R
                        Some(end) => max(0, end - 1),
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
                    if retain_revs.contains(&rev.rev_id) {
        Self {
    /// Width in bytes (utf-8 code units).

            text: Rope::default(),
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
        };
        assert_eq!(rope.offset_of_line(1), 3);
        }
    }
            // I think it's a precondition that this will never be called
        assert!(a == a2);
    }
            trace.instant("c", &["test"]);
        ---#--

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    sample: Option<Sample>,

                    let transformed_inserts = inserts.transform_expand(&s);
    /// via process_name/thread_name respectively.

    #[serde(serialize_with = "serialize_event_type")]
            let mut word_cursor = WordCursor::new(text, offset);
pub fn len_utf8_from_first_byte(b: u8) -> usize {
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            self.push_leaf(s[..splitpoint].to_owned());
}

        assert_eq!(1, expand_by.len());
#[macro_use]
                where E: serde::de::Error

        assert_eq!(1, res);
    }
        deletes: Subset,
        for region in self.selection.iter() {
        // shouldn't do anything since it was double-deleted and one was GC'd
    #[test]


    pub(crate) fn record(&self, sample: Sample) {
            Assert(0, "acbd".to_owned()),
                let categories = v.split(",").map(|s| s.to_string()).collect();
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    edit: Contents,
        }
                }
}
        }
                    s = &s[..s.len() - 1];

        let mut style_map = style_map.borrow_mut();
    #[test]
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
struct FullPriority {
        let trace = Trace::enabled(Config::with_limit_count(11));
        });
    /// Returns a slice of the string from the byte range [`start`..`end`).

        let rearranged = rearrange(&revs, &base, 7);
                },
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),

            engine.undo(undos);
                    }
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
    }
        let initial_rev = engine.get_head_rev_id().token();
                        ops.push(self.build_update_op("copy", None, seg.n));
}
            ),
                                         self, text, modify);
    use rope::{Rope, RopeInfo};
impl<'a> From<&'a Rope> for String {
            }, to_payload("test_get_samples_nested_trace"));
        Engine {
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
            GestureType::MultiLineSelect =>
        }).collect::<Vec<FindStatus>>()
        assert_eq!(snapshot[7].name, "z");

        where S: Serializer
    }


//
        samples[0].timestamp_us = 10;
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.

    fn identity() -> Self {

                Contents::Edit {inserts, ..} => inserts,
            Assert(1, "apb".to_owned()),
            deletes_from_union = match rev.edit {
        self.set_selection(text, new_sel);
            result["cursor"] = json!(cursors);
            Assert(1, "ab".to_owned()),
    /// Callers are expected to validate their input.
    /// recomputing line wraps.
/// revisions not shared by both sides.

        engine.edit_rev(1, 3, new_head_2, d3);
        let sample_name = to_cow_str(meta.sample_name());

}
        --#--
                        deletes: transformed_deletes,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    priority: usize,
            if self.line_of_offset(text, offset) <= line {
    pub fn enable(&self) {
            duration_us: Some(ns_to_us(duration_ns)),

                            rev_id: rev.rev_id,
//     http://www.apache.org/licenses/LICENSE-2.0
        // interior of last line should be last line
        },
    for r in revs {
            "pristine": pristine,
            return self.len();
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
/// a.edit_str(1, 9, "era");
            let not_in_tombstones = self.deletes_from_union.complement();
    /// The `pristine` argument indicates whether or not the buffer has
// Low level functions
    } else {
            Assert(1, "zapbj".to_owned()),
    find: Vec<Find>,
            if !selection.is_empty() {
        }
    }
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    }
/// # Performance
        struct RopeDelta_ {
                    }
        b.iter(|| black_box(sys_tid::current_tid()));
    fn compute_deltas_1() {

            self.set_selection(text, selection);
        } else {
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {

            Merge(2,0),
}
        deletes: Subset,
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
        let mut all_samples = self.samples.lock().unwrap();
        for find in self.find.iter() {

    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    /// Returns a slice of the string from the byte range [`start`..`end`).

    fn goto_line(&mut self, text: &Rope, line: u64) {
                    };
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        let params = json!({
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    /// List of categories the event applies to.
                sel.add_region(SelRegion::new(last.start, offset));
    fn undo_4() {
///
            text: Rope::default(),
        };
    sample: Option<Sample>,
                // This could be done by explicitly overriding, or by tweaking the
                Contents::Undo { .. } => panic!(),
        }

    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
                         style_spans: &Spans<Style>) -> Vec<isize>
        a.lines_all().collect::<Vec<_>>());
    FlowStart,
    // TODO find the maximum base revision.
    #[test]
                    a.merge(b);
            // with offset == 0, but be defensive.
            undo_group: 0,
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
//
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
                    // of which undos were used to compute deletes_from_union in edits may be lost.

            s.as_bytes()[offset - 1] == b'\n'
                        self.revs.push(Revision {
        assert_eq!(0, b.line_of_offset(0));
        assert_eq!(snapshot[0].name, "process_name");
            }
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
enum FindStatusChange {
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        let closest_occurrence = self.find.iter().flat_map(|x|
        for find in self.find.iter() {
        }

        engine.edit_rev(1, 3, new_head_2, d3);
    fn merge_simple_delete_1() {
use std::str;
            rendered_styles.push((iv.start() as isize) - ix);
    }
extern crate test;
    {
extern crate time;
            // I think it's a precondition that this will never be called
        ------#
        next_boundary.unwrap_or(None)
    #[serde(serialize_with = "serialize_event_type")]
    TRACE.block(name, categories)
        assert_eq!(TEST_STR, String::from(engine.get_head()));

            // Snap to grapheme cluster boundary
            Some(Cow::Owned(mut s)) => {
        }
/// fn something_expensive() -> u32 {
    /// If the cursor is at the end of the rope, returns the empty string.
        let expand_by = compute_transforms(a_revs);
}
/// that sorted would be prohibitively expensive.
            }
                            let line = self.render_line(client, styles, text,
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        if !cursors.is_empty() {
        where S: Serializer
            self.truncate(splitpoint);
    }
    }
    pub fn slice(&self, start: usize, end: usize) -> Rope {
        self.drag_state = None;
    /// Generally racy since the underlying storage might be mutated in a separate thread.
        let mut to_undo = BTreeSet::new();
    #[bench]
        use self::MergeTestOp::*;
        if self.idx <= self.current.unwrap().len() {
        let mut result = json!({
    let mut out = Vec::new();
    ///
        }
            Copy(usize, usize),
    session2: u32,
        // likely be improved.
                        ops.push(self.build_update_op("invalidate", None, seg.n));
    find_changed: FindStatusChange,
        Some(self.cmp(other))
        let trace = Trace::enabled(Config::default());
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
                out.push((prio, inserts));
        d_builder.build()
    #[test]
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                Some(filename) => {

            return false;

                        Some(end) => max(0, end - 1),
    }
        assert_eq!(Some(9), a.next_grapheme_offset(3));
                self.do_gesture(text, line, col, ty),
    /// We attempt to reduce duplicate renders by setting a small timeout
    }
            // selection with interior
    /// Create a new Engine with a single edit that inserts `initial_contents`


            Merge(0,2), Merge(1, 2),
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            while !s.is_char_boundary(offset - len) {

}
    }
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    /// Sorting priority between processes/threads in the view.
    /// # Panics


            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        let replacement = match self.selection.last() {
/// See `trace_closure` for how the closure works and `trace_payload` for a
        assert_eq!(snapshot[3].name, "a");
        false

            let end = self.line_of_offset(last_text, iv.end()) + 1;
    // * grapheme clusters
    {
            offset += 1;
        });
        engine.edit_rev(1, 3, new_head_2, d3);
        }

    fn edit_rev_undo() {
            sample: None,
        self.view_id
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    /// Constructs a Duration sample.  For use via xi_trace::closure.
        let selection = SelRegion::new(0, text.len()).into();
        if let Some((l, offset)) = self.get_leaf() {

        engine.undo([1,3].iter().cloned().collect());

                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
    /// want to set the process name (if provided then sets the thread name).
    Bytes(usize),
    Width(f64),

        }
    fn bench_two_timestamps(b: &mut Bencher) {

impl PartialEq for Sample {
        } else {
    }
    fn arr_eq(&self, other: &Rhs) -> bool;

        while !s.is_empty() {
                   r.lines_all().collect::<Vec<_>>());
/// Valid within a session. If there's a collision the most recent matching
                Some(pos) => offset += pos + 1,
pub fn enable_tracing_with_config(config: Config) {
#[inline]
        }

    AsyncEnd,

    fn bench_trace_closure_payload(b: &mut Bencher) {
        let mut r = Rope::from("27");

    pub(crate) fn get_replace(&self) -> Option<Replace> {


        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            Assert(1, "pb".to_owned()),
            duration_us: Some(ns_to_us(duration_ns)),
            }
        engine.edit_rev(1, 1, first_rev, d1);
        MergeTestState::new(3).run_script(&script[..]);
/// some way.

    pub metadata_sort_index: Option<i32>,
            let pos = bc.next::<BreaksMetric>();
                if rev.max_undo_so_far < lowest_group {
pub fn trace<S, C>(name: S, categories: C)
        // todo: the correct Find instance needs to be updated with the new parameters
{
            // cursor

/// # Returns
{
        self.text = new_text;
                return None;
    /// Find parameters and number of matches changed.
        match cmd {
        peers: Vec<Engine>,
    buffer_id: BufferId,
        delta.serialize_field("els", &self.els)?;
            lc_shadow: LineCacheShadow::default(),
        let mut cursor = Cursor::new(self, offset);
        assert_eq!(snapshot[6].name, "z");
            Assert(2, "ab".to_owned()),
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
/// let a = Rope::from("hello ");
        }
        engine.undo([2].iter().cloned().collect());
                metadata_name: None,
fn initial_revision_counter() -> u32 {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        while !leaf.is_char_boundary(end) {
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
    /// Collapse all selections in this view into a single caret
/// rather than just this processe's samples).
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    replace_changed: bool,
        for i in 0..5_000 {
                    let transformed_inserts = inserts.transform_expand(&s);
        };
                    as_vec.push(Sample::new_metadata(

    ///
/// assert!("hello world" == String::from(a + b));
    fn eq(&self, other: &Sample) -> bool {
    pub fn enabled(config: Config) -> Self {
}

            self.event_type == other.event_type &&
impl PartialOrd for Sample {
                }
                }
    }
        ----
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    #[allow(dead_code)]
            Assert(0, "ab".to_owned()),
        assert_eq!(0, a.offset_of_line(0));
    #[test]
            // selection with interior
        let inserts_2 = parse_subset_list("
    num: u32,
/// let a = Rope::from("hello world");
        assert_eq!(utf8_offset, 9);
                // TODO could probably be more efficient by avoiding shuffling from head every time
                     modify_selection: &SelectionModifier) {
        /// The set of groups toggled between undone and done.
                    undo_group: i+1,
    /// ancestor in order to be mergeable.
    }
                            }
    type L = String;
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};

        engine.edit_rev(1, 3, new_head_2, d3);
    /// fine-grained in the case of multiple cursors, but we also want this
            'O' => SampleEventType::ObjectSnapshot,
    // for simplicity.
            thread_name: None,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                },
            let mut len = 1;
/// discussion on payload.
use delta::{Delta, DeltaElement};
/// ```
                Contents::Undo { .. } => panic!(),
        for &(trans_priority, ref trans_inserts) in &expand_by {

    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    }
            // I think it's a precondition that this will never be called
//! It enables support for full asynchronous and even peer-to-peer editing.
    }
        for i in 0..self.len() {

    Instant,
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
    ///
                        } else {

        expand_by = next_expand_by;
            FindPrevious { wrap_around, allow_same, modify_selection } =>
}
        let script = vec![
            SampleGuard::new(&self, name, categories, Some(payload.into()))
                    result = cow_append(result, &self.fragment[.. i + 1]);
                Rope::from(s1.clone()),
categories_from_constant_array!(6);
        let r = r + Rope::from(&b[MIN_LEAF..]);
///

            Assert(1, "arpb".to_owned()),
    /// height of visible portion

    fn bench_trace_closure_disabled(b: &mut Bencher) {
    }
    #[bench]
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    #[test]
                MergeTestOp::Merge(ai, bi) => {
/// # Performance
        assert_eq!(0, a.lines_raw_all().count());
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
            Move(movement) => self.do_move(text, movement, false),
        assert_eq!(1, b.line_of_offset(2));
}
                    Some(chunk) => self.fragment = chunk,
            Assert(0, "adc".to_owned()),
/// # Arguments
        for chunk in self.iter_chunks(start, end) {
    pub metadata_sort_index: Option<i32>,
    #[cfg(feature = "benchmarks")]
        let b_revs = basic_insert_ops(inserts, 2);
                    s = inserts.transform_union(&s);
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    }
        ];
        let script = vec![
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    }
#[cfg(test)]
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
impl Rope {
    // TODO: a case can be made to hang this on Cursor instead

/// Indicates what changed in the find state.
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
            {
                name, categories, None, start, end - start));
                self.set(pos);
            match reverse {

        engine.gc(&gc);
            Some(b)
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
    #[test]

    fn next_codepoint_offset_small() {
        // x, a, y, b, z, c

    revs: Vec<Revision>,
        let start = time::precise_time_ns();
                            ops.push(self.build_update_op("skip", None, n_skip));
        Self {
    }
#[macro_use]
/// Then offset=1 is invalid.
            // Go crazy
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        /// revision that were added by this revision.
}
    }
    /// Update front-end with any changes to view since the last time sent.
    #[test]
    /// concurrently it will have count `2` so that undoing one delete but not
                l = pl;
    /// Updates the view after the text has been modified by the given `delta`.
            }
            prev_boundary = c.prev_boundary(&l, leaf_offset);
/// assert_eq!("herald", String::from(a));
    /// # Panics
        }
    pub fn byte_at(&self, offset: usize) -> u8 {
    }
        deletes: Subset,
        let (mut l, mut offset) = self.get_leaf()?;
    /// Get previous codepoint before cursor position, and advance cursor backwards.
            SampleEventType::DurationBegin => 'B',

// Licensed under the Apache License, Version 2.0 (the "License");
    /// The maximum amount of space the tracing data will take up.  This does
impl StringArrayEq<[&'static str]> for Vec<String> {
/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(utf8_offset, 19);
    }
        };

        result
            trace: None,

        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    deletes_from_union: Subset,
                SelectionModifier::AddRemovingCurrent => {
        for op in &delta_ops {
            "something", &["benchmark"],
    fn can_fragment() -> bool { true }
        assert_eq!(utf16_units, 11);
    }
    {
                            }
        let a = Rope::concat(
    FlowInstant,
        result
            Merge(1,2),
            l[offset..].chars().next()
/// * `name` - A string that provides some meaningful name to this sample.
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
    }


            Assert(0, "zcbd".to_owned()),
// distributed under the License is distributed on an "AS IS" BASIS,
        let r = Rope::from(&a[..MAX_LEAF]);
    }
/// xi_trace::trace("something happened", &["rpc", "response"]);
        self.enabled.load(AtomicOrdering::Relaxed)

        a.lines_all().collect::<Vec<_>>());
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        if self.len() != other.len() {
        }
        Merge(usize, usize),
        assert_eq!(0, a.lines_raw_all().count());
            } else if incomp == GraphemeIncomplete::NextChunk {
use delta::{Delta, InsertDelta};

    {
    fn arr_eq(&self, other: &[&'static str]) -> bool {
                self.highlight_find = visible;
pub struct RopeInfo {
#[derive(Serialize, Deserialize, Clone, Debug)]
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let a = Rope::from("");
        if self.find.is_empty() {
#[inline]
                return None;
    #[test]
            SampleEventType::ObjectCreated => 'N',
            let pos = bc.next::<BreaksMetric>();
            samples: Mutex::new(FixedLifoDeque::new())
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
        let cur_deletes_from_union = &self.deletes_from_union;
    #[test]
                find_leaf_split_for_bulk(s)
            } else if incomp == GraphemeIncomplete::NextChunk {
        }
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
// should make this generic, but most leaf types aren't going to be sliceable

                        line_num = seg.their_line_num + seg.n;
struct FullPriority {
                RenderTactic::Preserve => {
}
    pub chars: String,
    {
    }
        // send updated find status only if there have been changes
            Assert(0, "acrbdz".to_owned()),
        self.wrap_col = WrapWidth::Width(self.size.width);
                out.push(DeltaOp {
        (Revision {
fn find_leaf_split_for_bulk(s: &str) -> usize {

               a.lines_all().collect::<Vec<_>>());
    /// The semantics are intended to match `str::lines()`.
    fn can_fragment() -> bool {
    #[test]
    if x < min {
            }

    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        }
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
                    if let Some(new_gc_dels) = new_gc_dels {
        assert_eq!(utf16_units, 17);
                engine.gc(&to_gc)
/// With `json_payload` feature:
                // sanitize input
        let end = time::precise_time_ns();
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        if before {
    }
    }
    find: Vec<Find>,
            self.unset_find();
        Self {
            rev_id, max_undo_so_far,
        samples.sort_unstable();
        if self.len() != other.len() {
                                                     "insert", node)
            AssertAll("zacpb".to_owned()),
        match self.selection.len() {
                sel.add_region(SelRegion::new(last.start, offset));


                    self.set_selection(text, selection);


                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
        assert_eq!("a", String::from(&tombstones_2));
        assert_eq!("zcpbdj", String::from(&text_2));
                    let full_path_str = full_path.into_string();
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
                    } else {
#[derive(Clone, Copy)]

    fn is_boundary(s: &String, offset: usize) -> bool {

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    pub fn get_samples_limit(&self) -> usize {
        plan.request_lines(first_line, last_line);
fn find_leaf_split_for_bulk(s: &str) -> usize {
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
/// # use xi_rope::Rope;
        let first_rev = &self.revs.first().unwrap();
            // shouldn't be called with this, but be defensive
        engine.undo([1,2].iter().cloned().collect());
                metadata_sort_index: None,
/// Stores the tracing data.
            Merge(0,2), Merge(1, 2),
        base_subset.is_some() && base_subset == other_subset
            Assert(1, "ab".to_owned()),
                        hls.push((sel_start_ix, sel_end_ix));
                    as_vec.push(Sample::new_metadata(
macro_rules! categories_from_constant_array {
    }
    type Item = u8;
        assert_eq!(snapshot[7].name, "z");
    utf16_size: usize,
            None => {

}
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        }

    /// This is used to determined whether FindStatus should be sent to the frontend.
    fn thread_name() -> Option<StrCow> {
    fn test_get_samples_nested_trace() {
            }
                    };
        let self_iv = Interval::new_closed_closed(0, self.len());
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
///
            let c = i.to_string() + "\n";
                    priority, undo_group,
impl Ord for Sample {
        MergeTestState::new(3).run_script(&script[..]);
    }
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        self.hash(&mut hasher);
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
            panic!("line number {} beyond last line {}", line, max_line);
    }

            }
        let a2 = Rope::from("a");
        let l_str = text.slice_to_string(start_pos, pos);
                out.push(DeltaOp {
    // in a single session.
            Some(region) => {
    #[bench]
        }
    /// No wrapping in effect.
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
                self.set_selection_raw(text, selection);
            Merge(1,0),
        ];
                //// if we aren't on a boundary we can't be at the end of the chunk
            "something", &["benchmark"],
    }

        let script = vec![
    fn bench_trace_closure(b: &mut Bencher) {
        self.enable_config(Config::default());

/// ```
        if !cursors.is_empty() {

    }
                        undone_groups = Cow::Owned(new_undone);
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            Merge(1,0),
{
    /// An iterator over the raw lines. The lines, except the last, include the
        r.slice_to_string(0, r.len())
                    }
const MIN_LEAF: usize = 511;
/// # Examples
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            self.record(Sample::new_instant(name, categories, None));
                                deletes.transform_shrink(&gc_dels))
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    find_changed: FindStatusChange,
    /// Selects a specific range (eg. when the user performs SHIFT + click).
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
    /// Replacement string.
        b.push_str(s);


fn exe_name() -> Option<String> {
            SampleGuard::new_disabled()
/// on program launch.
        }).collect()
        // since character was inserted after gc, editor gcs all undone things
//
            name: sample_name,
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
    #[test]
///

        let contents = Contents::Edit {
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    /// The state for replacing matches for this view.
    }
        assert!(a != b);
    #[test]
        let r = Rope::from(&a[..MAX_LEAF]);
    /// update cycle. This should be a last resort, updates should generally cause
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    }
        let text_with_inserts = text_ins_delta.apply(&self.text);
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        engine.edit_rev(1, edits+1, head, d1);
            }),

            timestamp_us: ns_to_us(time::precise_time_ns()),
    }
        let b_revs = basic_insert_ops(inserts, 2);

    #[test]
        }).collect();
        if self.cursor.pos() >= self.end {
        let mut all_samples = self.samples.lock().unwrap();
            result.push_str(chunk);

    fn len(&self) -> usize {
#[derive(PartialEq, Debug)]

    /// Splits current selections into lines.
        use self::MergeTestOp::*;
{
        assert_eq!(snapshot[7].name, "z");

                    }
    fn hash<H: Hasher>(&self, state: &mut H) {

    deletes: Subset,
/// State required to resolve a drag gesture into a selection.
}
                }

            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        // selection state, and for scrolling it into view if needed. This choice can
        --#--
}
    (out, text, tombstones, deletes_from_union)
            to_undo.insert(i+1);
use std::mem::size_of;
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    }
        if self.len() <= MAX_LEAF {
        ---#--

    }
/// Create an instantaneous sample with a payload.  The type the payload
    //TODO: implement iter_chunks using ranges and delete this
    #[serde(skip_serializing_if = "Option::is_none")]
// Unless required by applicable law or agreed to in writing, software
))]
    pub fn new_duration<S, C>(name: S,
            rev_id, max_undo_so_far,
            Assert(0, "cbd".to_owned()),
            SelectionIntoLines => self.do_split_selection_into_lines(text),

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
}
use edit_types::ViewEvent;
                self.drag_state = None;
    fn bench_trace_block_disabled(b: &mut Bencher) {
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    fn gc_scenario(edits: usize, max_undos: usize) {
        let subset_str = format!("{:#?}", expand_by[1].1);
            sel.add_region(
    new_without_default_derive,
    }
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
                          payload: Option<TracePayloadT>) -> Self
            }
        let mut engine = Engine::empty();
        // TODO: refine for upstream (caret appears on prev line)

    /// is optional.
        let first_rev = engine.get_head_rev_id().token();
                                            closure: F, payload: P) -> R
// distributed under the License is distributed on an "AS IS" BASIS,
    }
        if self.len() <= MAX_LEAF {
}
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
                (drag_state.max, min(offset, drag_state.min))
        #------
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    if x < min {
        deletes_bitxor: Subset,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },


    /// a point that should be scrolled into view.
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
                engine.gc(&to_gc)
            }
categories_from_constant_array!(0);
            utf16_size: 0,
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    pub tid: u64,
                    } else if !inserts.is_empty() {
        });
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    }
                max_undo_so_far: i,
{
// See the License for the specific language governing permissions and
    }
            Assert(1, "ab".to_owned()),
    use rope::{Rope, RopeInfo};
                    let mut e = &mut self.peers[ei];
                //// if we aren't on a boundary we can't be at the end of the chunk
                              duration_ns: u64) -> Self
    fn into_chrome_id(&self) -> char {
        if line < self.first_line {
}
            SampleGuard::new(&self, name, categories, None)
            a.push('a');
            SampleEventType::AsyncStart => 'b',
        revs.append(&mut revs_3);
            fragment: ""
        let expand_by = compute_transforms(a_revs);
        while let Err(incomp) = prev_boundary {
        let mut a = String::new();

    fn accumulate(&mut self, other: &Self) {
        }
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
            // trans-expand other by expanded so they have the same context

    /// None of the find parameters or number of matches changed.

categories_from_constant_array!(8);
    fn eq(&self, other: &CategoriesT) -> bool {
        let mut offset = 0;
///
            name: sample_name,
//! This module actually implements a mini Conflict-free Replicated Data Type

    pub fn next_codepoint(&mut self) -> Option<char> {
        let start_pos = start_of_line.pos();
use width_cache::WidthCache;
    use multiset::Subset;
        result
            pid: sys_pid::current_pid(),
            .map(|pos| pos + 1)
        self.timestamp_us == other.timestamp_us &&
            }
    }
            Assert(0, "b".to_owned()),
}
///     something_else_expensive(result);
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        let guard = Self {
        match cmd {
        let cursor = Cursor::new(self, offset);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
/// A guard that when dropped will update the Sample with the timestamp & then
        let start_pos = start_of_line.pos();
        let mut r = Rope::from("27");
        ]);

    }
            // cursor
use unicode_segmentation::GraphemeCursor;
        assert_eq!(snapshot[4].name, "z");
        if !cursors.is_empty() {
}
    /// Generally racy since the underlying storage might be mutated in a separate thread.
    #[serde(rename = "xi_payload")]
        }
            self.event_type == other.event_type &&
// distributed under the License is distributed on an "AS IS" BASIS,

    }
                    } else {

impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        }, deletes_from_union)
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
pub struct View {
            'E' => SampleEventType::DurationEnd,
            AssertAll("ac".to_owned()),
            self.unset_find();
    #[bench]
    None,
        self.set(new_pos);
        let mut b = TreeBuilder::new();
        }
}
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
                Contents::Edit {inserts, ..} => inserts,
            false
            } else {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
        /// Just the `symmetric_difference` (XOR) of the two sets.
                                                        style_spans, line_num);
    /// state and new offset.
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
        // NOTE 2: from_micros is currently in unstable so using new
            find_changed: FindStatusChange::None,
    #[test]
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
categories_from_constant_array!(6);
fn shuffle(text: &Rope, tombstones: &Rope,
            // cursor
    }

}


            Revision {

        let first_rev = engine.get_head_rev_id().token();
        // TODO: simplify this through the use of scopeguard crate
                let (last, rest) = self.sel_regions().split_last().unwrap();
            // trans-expand other by expanded so they have the same context
        engine
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
        }
    /// part of the initial contents since any two `Engine`s need a common
        ");
    FlowStart,
                (!region.is_upstream() && c == start_pos) ||
            match self.wrap_col {
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
mod tests {



        self.invalidate_selection(text);
    None,

#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
            let base_index = find_base_index(&self.revs, &other.revs);
        self.view_id
    /// assumed to be forward).
        self.send_update_for_plan(text, client, styles,
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        //};
    }
        b.push_str(s);
        where S: Into<StrCow>, C: Into<CategoriesT>

    fn can_fragment() -> bool { true }
            end += 1;
    fn gc_4() {
                                                                0, "copy", 2)?;
                        for line_num in start_line..end_line {
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.

        // rebase the deletion to be after the inserts instead of directly on the head union
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
}
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
            timestamp_us: ns_to_us(time::precise_time_ns()),
    #[test]
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    /// Return the byte offset corresponding to the line number `line`.
            self.mk_new_rev(priority, undo_group, base_rev, delta);
                            ops.push(self.build_update_op("skip", None, n_skip));

        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
            pos += 1;
        engine.gc(&gc);
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        if before {
                            rev_id: rev.rev_id,

            CategoriesT::DynamicArray(ref vec) => vec.join(sep),

        println!("{:#?}", b_delta_ops);
/// Disable tracing.  This clears all trace data (& frees the memory).
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

        let r = Rope::from(&a[..MAX_LEAF]);
        trace.instant("3", &["test"]);
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
        }
    pub fn get_head(&self) -> &Rope {
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
// you may not use this file except in compliance with the License.
    }
                }
use fixed_lifo_deque::FixedLifoDeque;
        }
}
}


#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    /// not account for any overhead of storing the data itself (i.e. pointer to

    }
        d.insert(StrCow::from("test"), StrCow::from(value));
/// # Examples
//
        let trace = Trace::enabled(Config::with_limit_count(10));
        let script = vec![
        self.replace.clone()
    /// Determines the current number of find results and search parameters to send them to
              F: FnOnce() -> R
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    }
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
            match *op {
            MergeTestState { peers }
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {

    #[bench]

    {
        self.lines(0, self.len())
        count_utf16_code_units(&s[..in_base_units])
                    let transformed_deletes = deletes.transform_expand(&s);
            }

            MetadataType::ProcessLabels {..} => "process_labels",
    let mut out = Vec::with_capacity(revs.len());
        if last_col == 0 && last_line > first_line {
                match *other {
                    priority, inserts, deletes,
        priority: usize,
        trace.closure_payload("y", &["test"], || {},
        (Revision {
        let expand_by = compute_transforms(a_revs);
        let res = find_common(&a, &b);
    fn into_chrome_id(&self) -> char {
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
    }
        samples[1].timestamp_us = 5;
/// ```
        self.set_selection_for_edit(text, new_sel);
        deletes_from_union = new_deletes_from_union;
}
                self.run_op(op);
/// between two utf8 code units that form a code point is considered invalid.
    }
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            let common = find_common(a_to_merge, b_to_merge);
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
        assert_eq!(TEST_STR, String::from(engine.get_head()));

                        ops.push(self.build_update_op("copy", None, seg.n));
}

}
    fn eq_med() {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
        }
/// A guard that when dropped will update the Sample with the timestamp & then
        b.push_str(s);
            Some(ref breaks) => {
                MergeTestOp::Merge(ai, bi) => {
    session_id: SessionId,
        self.set_selection(text, selection);
        while !leaf.is_char_boundary(end) {
        let text_with_inserts = text_inserts.apply(&text);
                text.offset_of_line(line)
        b.push('\n');
        /// and new deletes_from_union
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
/// ```rust,ignore

        engine.edit_rev(1, 1, first_rev, d1.clone());
    }
}
//! text.
        self.cursor.next_leaf();
            .map(|(i, _)| i)
        #[derive(Serialize, Deserialize)]
            'f' => SampleEventType::FlowEnd,
    }
// ======== Generic helpers
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    // TODO: switch to a persistent Set representation to avoid O(n) copying
                if !region.is_caret() {
                edit: Contents::Edit {
    pub fn set_dirty(&mut self, text: &Rope) {
            retain_revs.insert(last.rev_id);
                formatter.write_str("comma-separated strings")
/// record it.
use xi_rope::delta::Delta;
    /// Tracks whether there has been changes in find results or find parameters.

    }
        self.pending_render = pending
    #[test]
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
            scroll_to: Some(0),
            edit: Contents::Edit {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    /// Width in px units, requiring measurement by the front-end.
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        out.push(Revision {
    bytecount::count(s.as_bytes(), b'\n')


    #[bench]
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
            let horiz = None;
    /// Find parameters and number of matches changed.
            if self.fragment.is_empty() {
        assert_eq!(1, res);
        // invert the changes to deletes_from_union starting in the present and working backwards
        sel.collapse();
    sample_limit_count: usize
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
            Some(offset + len_utf8_from_first_byte(b))
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        assert_eq!(output, String::from(engine.get_head()));
    fn do_selection_for_replace(&mut self, text: &Rope) {
#[derive(Serialize, Deserialize, Debug)]
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),

                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    }

        engine.edit_rev(1, 1, first_rev, d1.clone());
            }
            next_boundary = c.next_boundary(&l, leaf_offset);
    fn measure(info: &RopeInfo, _: usize) -> usize {
}
            self.first_line = line;
        let offset = self.line_col_to_offset(text, line, col);
        /// Groups related edits together so that they are undone and re-done
    TRACE.get_samples_count()
    }
    fn test_disable_drops_all_samples() {
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
            priority: 0,
        }
        let l_str = text.slice_to_string(start_pos, pos);
}
    current: Option<&'a str>,
    }
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            engine.edit_rev(1, i+1, head, d);
    fn edit_rev_undo() {
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
    /// Selects an entire word and supports multi selection.
//! CRDT implementation techniques, because all operations are serialized in
        let first_rev = &self.revs.first().unwrap();
}
/// Atomicity is implicit, putting the offset
    trace: Option<&'a Trace>,
    TRACE.samples_cloned_sorted()
    use super::*;
        assert_eq!(Some(8), a.next_grapheme_offset(0));

        let a = Rope::from("a");
            }
    }
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
        assert_eq!(0, b.offset_of_line(0));
                        word_cursor.select_word()
    }
use std::cmp;
///
    #[serde(default = "default_session", skip_serializing)]
macro_rules! categories_from_constant_array {

//
        selection.add_region(region);
    ///

    /// revision, and so needs a way to get the deletion set before then.
        leaf.as_bytes()[pos]
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
    fn compute_transforms_2() {
        --#--

        }
pub struct Trace {
///
    FlowEnd,
extern crate time;
    #[test]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            client.scroll_to(self.view_id, line, col);
}
        }
            last_line -= 1;
        for rev in self.revs[rev_index..].iter().rev() {
    fn consume(self) -> (Option<String>, Option<i32>) {
    pub fn get_head(&self) -> &Rope {
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    #[derive(Clone, Debug)]
        let end = self.line_col_to_offset(text, line + 1, 0);
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)

    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    fn sample_name(&self) -> &'static str {
    session_id: SessionId,
/// `base_revs`, but modified so that they are in the same order but based on
        let mut engine = Engine::new(Rope::from(TEST_STR));
use std::cell::RefCell;
        if self.len() != other.len() {
        let (ins_delta, deletes) = delta.factor();
                for region in find.occurrences().regions_in_range(start_pos, pos) {
}
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
///
#[inline]
///
    #[bench]
    // partly because the reachability calculation would become more complicated (a
            Assert(0, "ab".to_owned()),
    pub(crate) fn get_replace(&self) -> Option<Replace> {
        // We somewhat arbitrarily choose the last region for setting the old-style

            self.first_line = line;


        }
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    }

                        let un_deleted = deletes_from_union.subtract(deletes);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]

/// stored as tracing could still be enabled but set with a limit of 0.
        &self.selection
        let (new_text, new_tombstones) =
// you may not use this file except in compliance with the License.


        assert_eq!(1, r.line_of_offset(a.len()));
    lc_shadow: LineCacheShadow,
    {
/// Base unit is utf8 code unit.
                        line_num = seg.their_line_num + seg.n;
        self.deletes_from_union_before_index(rev_index + 1, true)
        }
        engine.undo([2].iter().cloned().collect());
///
            self.set_selection(text, selection);
//! which is sufficient for asynchronous plugins that can only have one
    }
            Assert(0, "zcbd".to_owned()),
                },
    }
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
// Copyright 2016 The xi-editor Authors.
    session2: u32,
///
        let start = time::precise_time_ns();
        assert_eq!(snapshot[2].name, "x");
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
                None => {

        engine.undo([1].iter().cloned().collect());
            categories: Some(categories.into()),
    /// wherever there's a non-zero-count segment in `deletes_from_union`.

                if groups.contains(undo_group) {
        assert_eq!(utf16_units, 17);
#[derive(Serialize, Deserialize, Debug)]
        let mut selection = Selection::new();
        } else {
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
impl Sample {

    ///
        let first_rev = engine.get_head_rev_id().token();
    DynamicArray(Vec<String>),
    fn lines_raw_small() {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
                s.len()

        engine.edit_rev(1, edits+1, head, d1);

    /// Determine whether `offset` lies on a codepoint boundary.
    /// is optional.
                        MetadataType::ThreadName { name: thread_name.to_string() },
    /// vertical scroll position
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
{

        self.drag_state = None;
            let mut sample = self.sample.take().unwrap();
        }
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    }
///
        self.lines(0, self.len())
                    // we don't want new revisions before this to be transformed after us
#[cfg(feature = "benchmarks")]
/// Base unit is utf8 code unit.
    out
        }
        if line > max_line {
/// first can make it ~1.7x slower than a regular trace.
        fn new(count: usize) -> MergeTestState {
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            Gesture { line, col, ty } =>
        for _ in 0..in_measured_units {

        ");
        let rope = Rope::from("hi\ni'm\nfour\nlines");
/// configured via the `dict_payload` or `json_payload` features (there is an
        self.drag_state = Some(DragState { base_sel, offset, min, max });
                    if retain_revs.contains(&rev.rev_id) {
        let b = a.slice(1, 10);
            _ => return
// See the License for the specific language governing permissions and
            prev_boundary = c.prev_boundary(&l, leaf_offset);
    /// assumed to be forward).
        assert!(end <= leaf.len());
impl TreeBuilder<RopeInfo> {

        assert_eq!(snapshot[7].name, "z");
            match c.edit {
    pub args: Option<SampleArgs>
    rev_id: RevId,
            }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            Assert(0, "b".to_owned()),
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        self.text = new_text;
                None => {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            }
    }
    type Err = ParseError;
    session: SessionId,
    #[test]
impl PartialEq for CategoriesT {
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
                            rev_id: rev.rev_id,
        let (metadata_name, sort_index) = meta.consume();
impl From<Rope> for String {


    }
        };
    fn render_line(&self, client: &Client, styles: &StyleMap,
    }
    }
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    /// Selects all find matches.
    /// If `modify` is `true`, the selections are modified, otherwise the results
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    fn test_get_samples() {
        let mut ops = Vec::new();
    height: usize,
// easily delta-compressed later.
/// samples are ordered chronologically for several reasons:

    assert!(a[0].rev_id == b[0].rev_id);
            pos -= 1;
    #[inline]
        self.set_dirty(text);
    // Note: this function would need some work to handle retaining arbitrary revisions,
            name: name.into(),
pub fn is_enabled() -> bool {
/// A guard that when dropped will update the Sample with the timestamp & then
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    pub categories: Option<CategoriesT>,
            Revision {
            None
        assert_eq!(snapshot[8].name, "x");
impl<'de> serde::Deserialize<'de> for CategoriesT {
///
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
            },
    fn test_cross_process_samples() {
        for _i in 0..50 {
            Some(offset + len_utf8_from_first_byte(b))
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
/// Create an instantaneous sample with a payload.  The type the payload
            Some(region) => {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
    fn edit_rev_undo() {
            let (start, end) = if offset < drag_state.offset {
                }
/// The payload associated with any sample is by default a string but may be
            self.find.push(Find::new());
                metadata_name: None,
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
    /// after an edit is applied, to allow batching with any plugin updates.
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
                }
                // merge logic.

        if let Some(ix) = style_map.lookup(style) {
        {
    min: usize,
        assert_eq!(Some(3), a.next_codepoint_offset(1));
/// Stores the tracing data.
                    b.add_span(seg.n, 0, 0);
        self.lines(0, self.len())
        self.deletes_from_union = new_deletes_from_union;
            // corner and I'm lazy -cmyr
        self.len()
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    }
        }
        let edit_iv = Interval::new_closed_open(start, end);
                } else if click_count == Some(2) {
    /// height of visible portion
            Assert(0, "acpbdj".to_owned()),
        let mut result = Cow::from("");
use rope::{Rope, RopeInfo};


pub type SessionId = (u64, u32);
macro_rules! categories_from_constant_array {
///
        match cmd {
/// Base unit is utf8 code unit.
/// Indicates what changed in the find state.
        self.first_line = first;
                });
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
    Edit {
            self.breaks = None
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    /// Return the line number corresponding to the byte index `offset`.
            Merge(1,0),
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
pub struct RopeInfo {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    /// The line ending is stripped from the resulting string. The final line ending
// You may obtain a copy of the License at

                CategoriesT::StaticArray(c)

            match reverse {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
            self.first_line = line - (self.height - 1);

    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
                None => {
    enabled: AtomicBool,
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        let a = Rope::from("\n");
pub struct ByteIter<'a> {
            SampleEventType::FlowEnd => 'f',
                MetadataType::ProcessName {name: exe_name},

    /// is optional.
                    }
        let deletes_from_union_a = parse_subset("-#---");
                metadata_sort_index: None,
    }
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
/// However, anything that can be converted into a Cow string can be passed as
        self.timestamp_us.cmp(&other.timestamp_us)
    #[bench]

        let mut b = TreeBuilder::new();
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
/// from multiple distributed sources (i.e. you want to sort the merged result
        }
    /// Width in px units, requiring measurement by the front-end.
    }
    scroll_to: Option<usize>,
    #[test]
/// * `name` - A string that provides some meaningful name to this sample.
    /// and currently in a debugging state.

                        } else {
/// an argument.
    pub fn disable(&self) {
            revs: vec![rev],
enum FindStatusChange {
                let mut sel = Selection::new();
    }
    }
            let mut sel = drag_state.base_sel.clone();
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        assert_eq!(2, expand_by.len());
        }).collect();
        ---#--
                    // fast-forward this revision over all common ones after it
    }
        ");
            for i in 0..count {
                        MetadataType::ThreadName { name: thread_name.to_string() },
    }
    fn test_disable_drops_all_samples() {
}
impl<T: AsRef<str>> From<T> for Rope {
        // todo: for now only a single search query is supported however in the future
        if self.breaks.is_some() {
        while offset < l.len() && !l.is_char_boundary(offset) {
            Assert(0, "zcpbdj".to_owned()),
        if self.len() != other.len() {
        assert_eq!(a.len(), r.offset_of_line(1));
            min: offset,
        assert_eq!(utf16_units, 20);
        for seg in self.lc_shadow.iter_with_plan(plan) {
        }
    /// An iterator over the raw lines. The lines, except the last, include the
        }


    pub fn select_range(&mut self, text: &Rope, offset: usize) {
                            max_undo_so_far: rev.max_undo_so_far,
        ---#--
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
                        }
        RopeInfo {
        assert!(a.slice(0, 0) == empty);
                        Some(gc_dels.transform_shrink(&inserts))

                                          closure: F, payload: P)
            Assert(0, "acpbdj".to_owned()),
        // move deleted or undone-inserted things from text to tombstones
                    }
                priority: new_priority,
        None => {
    fn prev(s: &String, offset: usize) -> Option<usize> {
        assert_eq!(trace.is_enabled(), true);
    pub fn new_duration<S, C>(name: S,
impl View {

        // the front-end, but perhaps not for async edits.
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
                if rev.max_undo_so_far < lowest_group {
}
/// # Performance
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
            return Vec::with_capacity(0);
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
///
            SampleEventType::DurationEnd => 'E',
#[inline]

    }
    TRACE.block_payload(name, categories, payload)
        let _t = trace_block("View::wrap_width", &["core"]);
                                                     "insert", node)
        }
    }
impl<T: AsRef<str>> From<T> for Rope {
            Assert(0, "acpbdj".to_owned()),
        self.set_selection(text, selection);
        use self::MergeTestOp::*;
    pub fn new_duration_marker<S, C>(name: S,
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
    {
        }
    pub fn do_find_all(&mut self, text: &Rope) {
        where S: Into<StrCow>, C: Into<CategoriesT>
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
            Assert(1, "ab".to_owned()),
        // todo: this will be changed once multiple queries are supported

//
                                toggled_groups: &toggled_groups - gc_groups,

}
            while !s.is_char_boundary(splitpoint) {
                                  style_spans, &plan, pristine);
            return self.revs.len();
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                edit: Contents::Edit {
    }
                    let sel_start = cursor.pos();
    ///
        self.revs.reverse();
impl fmt::Debug for Rope {
        // selection state, and for scrolling it into view if needed. This choice can


            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
                        };
        assert_eq!(soln, String::from(engine.get_head()));
    }

        if self.idx <= self.current.unwrap().len() {
    TRACE.is_enabled()
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            'b' => SampleEventType::AsyncStart,
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
}
        use self::MergeTestOp::*;

    }
        }
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
        let mut retain_revs = BTreeSet::new();
    }
        }
            if inserts.is_empty() {
                              duration_ns: u64) -> Self
        let text = Rope::from("13456");
        // shouldn't do anything since it was double-deleted and one was GC'd
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
                    let after = new_full_priority >= full_priority;  // should never be ==
// Unless required by applicable law or agreed to in writing, software
        self.height
/// * `name` - A string that provides some meaningful name to this sample.
    }
    out
///
    /// Selects the next find match.
/// Create an instantaneous sample without any payload.  This is the lowest
    }
            rev_id: RevId { session1: 0, session2: 0, num: 0 },

    pub fn get_caret_offset(&self) -> Option<usize> {
    }
        assert_eq!(snapshot[0].name, "process_name");
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    } else {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
}
        assert_eq!(snapshot[8].name, "c");
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
#[derive(Serialize, Deserialize, Clone, Debug)]
                    // can only happen on empty input
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        let res = find_common(&a, &b);
        ];
            Assert(0, "acbd".to_owned()),
    ///
                        self.revs.push(Revision {
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
    }
        println!("{:#?}", delta_ops);
                            }
        ##

    fn gc_5() {
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    /// The line number is 0-based, thus this is equivalent to the count of newlines
/// Contains replacement string and replace options.
            Some(ref breaks) => {
/// a.edit_str(1, 9, "era");
            None => text.line_of_offset(offset)
        }
            let inserted = inserts.inserted_subset();
            }
            Some(b)
            Merge(0,1),
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
        assert_eq!(snapshot[0].name, "process_name");
        self.height = last - first;
                        } else {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
                            if !inserts.is_empty() {
    new_without_default_derive,
    /// An iterator over the raw lines. The lines, except the last, include the
            selection: SelRegion::caret(0).into(),
        samples[0].pid = 1;
        // same span exists in both sets (as when there is an active selection)
    ///
                    // TODO: update (rather than re-render) in cases of text valid
    pub fn enable_config(&self, config: Config) {
}

        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
                        inserts: transformed_inserts,
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
    }
        assert_eq!(2, expand_by.len());
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    ///

                    return i + 1; // +1 since we know the one we just found doesn't have it
    lines: usize,
                let (pl, poffset) = self.prev_leaf()?;
    }
        let script = vec![
        let new_sel = self.drag_state.as_ref().map(|drag_state| {

    type Item = Cow<'a, str>;
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
// See the License for the specific language governing permissions and
}
    fn delta_rev_head() {
/// None if an irrecoverable error occured.
        let mut cur_len_utf16 = 0;
            self.current = next_chunk;

                              start_ns: u64,
        let ix = style_map.add(style);
    pub fn disable(&self) {
use fixed_lifo_deque::FixedLifoDeque;
        let (new_text, new_tombstones) =
            HighlightFind { visible } => {
                    // of which undos were used to compute deletes_from_union in edits may be lost.
                    } else {
        memrchr(b'\n', &s.as_bytes()[..offset])
    // this should have the same behavior, but worse performance
        }
            height: 10,
    /// if it is non-empty. It needs to be a separate commit rather than just
        } else {
            }
        }
    fn is_ok_child(&self) -> bool {
            rendered_styles.push(sel_end as isize - sel_start as isize);
// You may obtain a copy of the License at
///
                }
    }
    fn offset_of_line_small() {
        use self::MergeTestOp::*;
    #[test]

                false => x.start
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
            AssertMaxUndoSoFar(1,3),

                    }
    /// this returns the offset of the end of the rope. Arguments higher
    }
///
use std::cmp::{min,max};
    /// a point that should be scrolled into view.
    fn from(s: T) -> Rope {
    }
                    let mut selection = self.selection.clone();
            rendered_styles.push(1);
    None,
    session: SessionId,

            inner: self.lines_raw(start, end)

        b if b < 0xe0 => 2,

    fn gc_4() {
#[derive(Clone, Copy)]
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        }
        MergeTestState::new(3).run_script(&script[..]);
        let a = Rope::from("\n");
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        where S: Into<StrCow>, C: Into<CategoriesT>
        let (mut l, mut offset) = self.get_leaf()?;
    }
                    let end_of_line = match cursor.next::<LinesMetric>() {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
                },
    fn bench_two_timestamps(b: &mut Bencher) {
        }
                                                          new_len, col),
// limitations under the License.

    ///
            last_line -= 1;
        self.tombstones = tombstones;
        let script = vec![
            }
    }
        self.timestamp_us == other.timestamp_us &&
        result

    type Item = Cow<'a, str>;

        }
            return None;
    /// The name of the event to be shown.
        let height = self.line_of_offset(text, text.len()) + 1;
/// revisions on top of the revisions represented by `expand_by`.
                metadata_name: None,
}
            Some(region) => {
}
        }
            last_line -= 1;

            .map(|(i, _)| i)
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
}
    }
        if f.alternate() {
/// See `trace_payload` for a more complete discussion.
        self.height = last - first;
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                CategoriesT::StaticArray(c)
        let a = Rope::from("");
        let mut cursors = Vec::new();


                self.do_gesture(text, line, col, ty),
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    fn prev(s: &String, offset: usize) -> Option<usize> {

        assert_eq!(TEST_STR, String::from(engine.get_head()));
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    fn merge_session_priorities() {
    pub payload: Option<TracePayloadT>,
            SampleGuard::new(&self, name, categories, Some(payload.into()))
            Cancel => self.do_cancel(text),
        }
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        for &(sel_start, sel_end) in sel {
                    if seg.validity == line_cache_shadow::ALL_VALID {
    #[allow(dead_code)]
            }

        self.subseq(iv)
    let mut out = Vec::with_capacity(b_new.len());
    pub fn set_dirty(&mut self, text: &Rope) {
    #[test]
pub struct Config {
use internal::find::FindStatus;
    /// the text).
    }
        // TODO: refine for upstream (caret appears on prev line)
                if is_base {
#[inline]
    }
                    };
    }
        let b = a.slice(1, 10);

        gc_scenario(4,3);
        self.timestamp_us == other.timestamp_us &&
/// }
                Undo { ref toggled_groups, ref deletes_bitxor } => {
        );
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
/// on program launch.
categories_from_constant_array!(9);
enum MetadataType {
        let mut selection = Selection::new();
            }
//! under `Engine::edit_rev`, which is considerably simpler than the usual

        // TODO: simplify this through the use of scopeguard crate
            // The deletes are already after our inserts, but we need to include the other inserts

        let trace = Trace::enabled(Config::with_limit_count(10));
        while !leaf.is_char_boundary(end) {
        self.text = new_text;
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    }
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        assert_eq!(utf8_offset, 19);
                if !region.is_caret() {
                        undone_groups = Cow::Owned(new_undone);
        a.lines_all().collect::<Vec<_>>());

                if (flags & FLAG_SELECT) != 0 {
            tid: tid,
extern crate lazy_static;
        assert_eq!(trace.get_samples_count(), 0);
                self.highlight_find = visible;
    #[test]
            .map(|pos| offset + pos + 1)
                WrapWidth::Width(px) =>
        match *self {
}
        let b = a.slice(1, 10);
            Assert(1, "abc".to_owned()),
                },
    /// Get next codepoint after cursor position, and advance cursor.
        let start = time::precise_time_ns();
                let mut sel = Selection::new();
    }


    ///
            GestureType::PointSelect => {
        assert!(a != b);
            MetadataType::ThreadName {name} => (Some(name), None),
/// could trigger incorrect behavior if they collide, so u64 is safe.

            MetadataType::ProcessName {..} => "process_name",
    }
            sample.event_type = SampleEventType::DurationEnd;
/// None if an irrecoverable error occured.
                    return Some(result);
        Self {
    /// Determines whether the offset is in any selection (counting carets and
    }

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
    /// Returns the visible line number containing the given offset.
            .map(|(i, _)| i)
        ---#-
    /// Selects all find matches.
        self.text = new_text;
                            }
/// 3. You may not care about them always being sorted if you're merging samples
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        Ok(exe_name) => {
        // A with ring, hangul, regional indicator "US"
        let trace = Trace::disabled();
            Assert(1, "arpbj".to_owned()),
        assert_eq!(samples[1].name, "local pid");
        for region in self.selection.iter() {
    #[serde(rename = "name")]
}
    type Output = Rope;

    }
        let guard = Self {
    }
        }
    /// An iterator over the raw lines. The lines, except the last, include the

        // Note: for committing plugin edits, we probably want to know the priority
    }
            rendered_styles.push(0);
        assert_eq!(snapshot[1].name, "thread_name");
    ($num_args: expr) => {
        Self {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                },
        client.update_view(self.view_id, &params);
                                gc_dels = gc_dels.transform_union(inserts);
            wrap_col: WrapWidth::None,
///
        let subset_str = format!("{:#?}", expand_by[0].1);
            wrap_col: WrapWidth::None,
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        Self::with_limit_bytes(1 * 1024 * 1024)
                },
        let mut result = Cow::from("");
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
        Subset::new(len)
            Assert(2, "b".to_owned()),
            event_type: SampleEventType::Metadata,
//
        // set last selection or word under current cursor as replacement string
//! a previously committed version of the text rather than the current text,
// Try to split at newline boundary (leaning left), if not, then split at codepoint
        };
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
                metadata_sort_index: sort_index,
        
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
        let s = String::deserialize(deserializer)?;
            } else {
}
    fn test_disable_drops_all_samples() {
        let mut engine = Engine::new(Rope::from(""));
        assert_eq!(utf8_offset, 9);
use unicode_segmentation::GraphemeIncomplete;
    }
        -> Result<CategoriesT, D::Error>
    #[cfg(feature = "benchmarks")]
// line iterators
        samples.sort_unstable();
        }
    }
        let trace = Trace::disabled();
}

        for find in &mut self.find {
            } else {
        let a = Rope::from("a");
                            deletes_bitxor
        let mut a = Rope::from("hello world");
        assert_eq!(0, a.line_of_offset(0));
        &self.text
        }
    }
        assert_eq!("#---#--", &subset_str);
    }
    fn can_fragment() -> bool { true }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        self.enabled.store(true, AtomicOrdering::Relaxed);
use unicode_segmentation::GraphemeCursor;
            client.scroll_to(self.view_id, line, col);
        self.scroll_to_cursor(text);

                        DeltaElement::Insert(Rope::from(s)),
                self.set_selection(text, SelRegion::caret(offset));
                last.1 = last.1.transform_union(&inserts);
        }
///
        let text = Rope::from("13456");
    },
            1 if self.selection[0].is_caret() => {
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {

            None => None
        ---#--
        // even though the actual sampling order (from timestamp of
        cursor.prev_grapheme()
                    let mut selection = self.selection.clone();
    }
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        for sample in all_samples.iter() {
}
            pid: sys_pid::current_pid(),
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
        if self.find.is_empty() {
                self.select_line(text, offset, line, true),

                return;

            }
            buffer_id: buffer_id,
    fn merge_insert_only_whiteboard() {
        assert_eq!(Some(2), b.next_codepoint_offset(0));
///
    /// if there is not at least one edit.
//
            self.args == other.args
        a.edit_str(1, 9, "era");
            // selection with interior

    }
///
}
}
        assert_eq!(None, a.prev_grapheme_offset(0));

        // the smallest values with which it still fails:
use unicode_segmentation::GraphemeCursor;
    }

/// let b = a.slice(1, 9);
        assert_eq!(None, a.next_grapheme_offset(17));
    }
        ];
        for region in self.selection.iter() {

                leaf_offset = self.pos() - noffset;
            cur_len_utf8 += u.len_utf8();
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());

/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
///
                            None
        }
        };
/// than a string that needs to be copied (or ~4.5x slower than a static string)
/// assert_eq!("llo wo", String::from(c));
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
        }
    }
            Assert(2, "ab".to_owned()),
                edit: Contents::Edit {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,

    }

        engine.undo([1,3].iter().cloned().collect());
        if b >= 0xf0 {
        } else {

    pub metadata_name: Option<StrCow>,
        if let Some(ref mut trace) = self.trace {
        self.text = new_text;
    /// This method is responsible for updating the cursors, and also for
            "op": op,
        let cursor = Cursor::new(self, offset);
            if self.line_of_offset(text, offset) <= line {
    height: usize,
        MergeTestState::new(4).run_script(&script[..]);

    /// The session ID used to create new `RevId`s for edits made on this device
        let trace = Trace::enabled(Config::default());

/// of Sample that determines order.
            return self.len();
                offset = prev;
                el.end()
            Merge(1,0),
        self.revs.last().unwrap().rev_id
        }
                    deletes: deletes.clone(),
            }),
    /// validate their input.
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
                out.push((prio, inserts));
    #[serde(rename = "sort_index")]
        delta.serialize_field("base_len", &self.base_len)?;
                },
        self.set_selection(text, SelRegion::caret(offset));
            //if self.cursor.is_boundary::<BaseMetric>() {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        assert_eq!(utf16_units, 9);
#[cfg(feature = "json_payload")]

#[derive(Serialize, Deserialize, Debug)]
            selection.delete_range(offset, offset, true);
    fn can_fragment() -> bool {

                            (inserts.transform_shrink(&gc_dels),
    cursor: Cursor<'a, RopeInfo>,
            let c = i.to_string() + "\n";

    /// Callers are expected to validate their input.
    fn drop(&mut self) {
        // todo: this will be changed once multiple queries are supported
    /// Selects an entire line and supports multi selection.
fn default_session() -> (u64,u32) {
    // since undo and gc replay history with transforms, we need an empty set
pub struct LinesMetric(usize);  // number of lines
/// Stores the relevant data about a sample for later serialization.
            self.find.push(Find::new());
    /// Replacement string.
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        rope.offset_of_line(5);

                                gc_dels = gc_dels.transform_union(inserts);
            Assert(0, "ab".to_owned()),
        let chars_left = (edits-max_undos)+1;
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    }
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {

        }, to_payload("test_get_samples_nested_trace"));
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
        engine.undo([2].iter().cloned().collect());
    #[inline]
use fixed_lifo_deque::FixedLifoDeque;
                        s = &s[..s.len() - 1];
        }
        trace.closure_payload("y", &["test"], || {},
    fn test_samples_closure() {
        let inserts_3 = parse_subset_list("
            result["cursor"] = json!(cursors);
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
        // send updated replace status if changed
    }
    #[cfg(feature = "benchmarks")]
    #[test]
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
    pub fn with_limit_count(limit: usize) -> Self {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        };
    #[bench]

    }
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    /// the frontend.
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    {
    }
///
            Merge(0,2), Merge(1, 2),
            lines: 0,
        }
/// bytes required to represent the codepoint.
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    {
    } else {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
/// feature makes the payload a `serde_json::Value` (additionally the library
    }
        let b = a.slice(1, 10);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
#[cfg(feature = "benchmarks")]
    #[inline]
        -> SampleGuard
    revs: Vec<Revision>,
/// Create an instantaneous sample with a payload.  The type the payload

    {
                    for (ei, e) in self.peers.iter().enumerate() {
        let mut cursor = Cursor::new(self, offset);
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
                    let (start, end) = self.peers.split_at_mut(ai);
    fn eq(&self, other: &CategoriesT) -> bool {
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    {
        }
use std::cmp;

    }
            }
    }
    /// Select entire buffer.
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        let all_caret = self.selection.iter().all(|region| region.is_caret());
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
        self.sample_limit_count * size_of::<Sample>()
    }
                },

use std::cmp;
            let first_rev = engine.get_head_rev_id().token();
    }
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        assert_eq!(trace.get_samples_count(), 0);
    find_leaf_split(s, MIN_LEAF)
        let rev = Revision {
        let first_rev = engine.get_head_rev_id().token();

        ");
//     http://www.apache.org/licenses/LICENSE-2.0
                                         self, text, modify);
    ThreadSortIndex { sort_index: i32 },
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        if self.len() <= MAX_LEAF {
    #[cfg(feature = "benchmarks")]
        }
            session: default_session(),
    pub fn get_head(&self) -> &Rope {
        let tombstones_a = Rope::from("a");
    /// Return the offset of the codepoint after `offset`.
        let ix = style_map.add(style);
        }
//
                    base_len: delta.base_len
        json!({"test": value})
        let r = Rope::from(&a[..MAX_LEAF]);
        cursor.next::<BaseMetric>()
    /// description for the invariant.
}
/// Internally, the implementation uses reference counting (not thread safe, though
                Undo { toggled_groups, deletes_bitxor } => {
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

        }

            Assert(0, "acbd".to_owned()),
        assert!(end <= leaf.len());
        }
                SelectionModifier::AddRemovingCurrent => {
                                  style_spans, &plan, pristine);

    ThreadName { name: String },
    }
        let a = Rope::from("\n");
        } else {
    #[bench]
        ---#--
        let line = self.line_of_offset(text, end);
    inner: LinesRaw<'a>
        all_samples.reset_limit(0);
    }
        let (mut l, mut offset) = self.get_leaf()?;

trait StringArrayEq<Rhs: ?Sized = Self> {

        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
pub fn samples_cloned_unsorted() -> Vec<Sample> {
        self.set_selection(text, selection);
    struct MergeTestState {
                len += 1;
          F: FnOnce() -> R
        }

        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// selection edges).
        match symbol {
        if line > max_line {
                    }
            },
                        undone_groups = Cow::Owned(new_undone);
            // about what wrapped.


/// # Examples

            event_type: event_type,
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let height = self.line_of_offset(text, text.len()) + 1;
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    }
/// Base unit is utf8 code unit.
    }
                        Err(e) => {
                //self.end - prev_pos
                inserts: new_inserts,
        match *self {
use std::mem::size_of;
        }
        // NOTE: we derive to an interim representation and then convert
            }
        }).collect::<Vec<FindStatus>>()
                    match full_path_str {
        let mut engine = Engine::new(Rope::from(TEST_STR));

        let head2 = engine.get_head_rev_id().token();
                c.provide_context(&pl, self.pos() - poffset);

                if (flags & FLAG_SELECT) != 0 {
        assert_eq!(trace.get_samples_limit(), 20);
            trace.closure_payload("y", &["test"], || {
        let trace = Trace::disabled();
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    /// Highlights are only rendered when search dialog is open.

    /// Sets the selection to a new value, without invalidating.
                    }
        self.set_selection_raw(text, sel.into());
                    } else {
    DurationEnd,
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
            DeltaElement::Copy(ref start, ref end) => {
            Merge(3,1), Merge(5,3),
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        let (new_text, new_tombstones) =
        s.is_char_boundary(offset)
            //leaf.len() - start_pos
        // This might be an over-specified test as it will
        if line < self.first_line {


/// fn something_else_expensive() {
            engine.undo(undos.clone());
                        let mut word_cursor = WordCursor::new(text, region.max());
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
}

        &self.selection
    fn rearrange_1() {
        }
    pub fn enable_config(&self, config: Config) {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    fn add(self, rhs: Rope) -> Rope {
            Assert(2, "adfc".to_owned()),
        trace.closure_payload("x", &["test"], || {
    // possible to fix it so that's not necessary.
            }
                break;
// Unless required by applicable law or agreed to in writing, software
    }
        self.tombstones = new_tombstones;
    fn prev_grapheme_offset() {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let deletes_from_union_a = parse_subset("-#---");
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
        sel.collapse();

        let a = Rope::from("");
                MergeTestOp::Assert(ei, ref correct) => {
}
        };

/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
use std::borrow::Cow;
        View {

    }
        let end = self.sel_regions().last().unwrap().end;
    }
    /// should be constructed via SampleGuard.
use xi_rope::delta::Delta;
        b.iter(|| black_box(time::precise_time_ns()));
        --#--
            Merge(0,2), Merge(1, 2),

    #[test]
            'i' => SampleEventType::Instant,
    fn consume(self) -> (Option<String>, Option<i32>) {
    }
            rendered_styles.push((sel_start as isize) - ix);
            Some(Cow::Owned(mut s)) => {
    }
                        deletes: transformed_deletes,
                self.set(pos);
        assert!(empty == empty);

    /// The line number is 0-based.

    let new_text = del_delta.apply(text);
pub type TracePayloadT = serde_json::Value;
            find.set_hls_dirty(false)
            }, to_payload("test_get_samples_nested_trace"));
    /// The process the sample was captured in.


                std::thread::sleep(std::time::Duration::new(0, 1000));
            'E' => SampleEventType::DurationEnd,
            false => Selection::new(),

            let _ = trace.block("test_samples_block", &["test"]);

    }
        let first_rev = engine.get_head_rev_id().token();

        b if b < 0xf0 => 3,
            engine.undo(undos.clone());
            None => {
//
        //for next line
        assert_eq!(rope.line_of_offset(3), 1);
            self.set_selection(text, sel);
    #[test]
        }
        json!({"test": value})
    selection: Selection,
                    s = s.transform_shrink(&transformed_inserts);
impl TreeBuilder<RopeInfo> {
                    sel.add_region(region);
            } else {
        (Revision {

                self.do_find(text, chars, case_sensitive, regex, whole_words),
///


    /// Only works well for ASCII, will probably not be maintained long-term.
                out.push(DeltaOp {
        self.replace = Some(Replace { chars, preserve_case });
                }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        AssertMaxUndoSoFar(usize, usize),
            't' => SampleEventType::FlowInstant,
                                     categories: C,
impl<'a> Iterator for ChunkIter<'a> {
            }
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    /// You could construct the "union string" from `text`, `tombstones` and
            }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    /// Sets the selection to a new value, without invalidating.
                                gc_dels = gc_dels.transform_expand(inserts);
        assert_eq!(b, String::from(a));
            if let Some(pos) = pos { start_of_line.set(pos) }
        samples[1].pid = 2;
}

            event_type: event_type,
        }
    /// Splits current selections into lines.
            l[offset..].chars().next()
    /// Returns the visible line number containing the given offset.

    },
        --#--

                        },
            Assert(5, "zacpb".to_owned()),
        let new_inserts = union_ins_delta.inserted_subset();


///
        let trace = Trace::enabled(Config::with_limit_count(10));
    assert!(!a.is_empty() && !b.is_empty());
    pub fn new_disabled() -> Self {
            max: offset,
impl serde::Serialize for CategoriesT {
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
/// See `trace_closure` for how the closure works and `trace_payload` for a
            SampleGuard::new_disabled()
    TRACE.closure(name, categories, closure)
        // x, a, y, b, z, c
}
use std::ops::Add;
}
            self.args == other.args
    }
pub fn count_newlines(s: &str) -> usize {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            let first_rev = engine.get_head_rev_id().token();
        if offset == s.len() {
        self.find_changed = FindStatusChange::Matches;
    #[bench]
            next_expand_by.push((trans_priority, new_trans_inserts));
                metadata_sort_index: None,
                payload: payload,
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
                    } else {
            } else {
        let revs = basic_insert_ops(inserts, 1);
    }
                                        &selections, &hls, style_spans);
        assert_tokens(&rope, &[
    /// ties in edit priorities. Otherwise the results may be inconsistent.
/// ```
        (Revision {
///
        let mut result = Cow::from("");
    fn gc_6() {

        let trace = Trace::enabled(Config::default());
                        let mut line_cursor = Cursor::new(text, offset);
pub fn is_enabled() -> bool {
    {
        #---
            //}
        engine.gc(&gc);
    StaticArray(&'static[&'static str]),
            result.push_str(chunk);
    /// Return the byte offset corresponding to the line number `line`.
    TRACE.block_payload(name, categories, payload)

                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
        assert_eq!(snapshot[2].name, "x");

        }
        }

fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
        Self {
            'N' => SampleEventType::ObjectCreated,
///
    /// Find what the `deletes_from_union` field in Engine would have been at the time


        let d = engine.delta_rev_head(first_rev);

            Assert(0, "adc".to_owned()),
                return false;
        fn new(count: usize) -> MergeTestState {
            // Do it the other way on the copy
    /// return if a delete is un-done or an insert is re- done.
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
    #[cfg(feature = "benchmarks")]
            Assert(1, "ab".to_owned()),
impl Eq for Sample {}
            to_undo.insert(i+1);
        };
            Copy(usize, usize),
            } else {
                              categories: C,
    where S: Into<StrCow>, C: Into<CategoriesT>
        if offset == s.len() {
impl<'de> Deserialize<'de> for Rope {
    pub fn token(&self) -> RevToken {
                },
// See the License for the specific language governing permissions and
///
        }
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
            // Do the merge one direction
// Copyright 2016 The xi-editor Authors.
        let mut cursor = Cursor::new(self, offset);

    }
        /// The subset of the characters of the union string from after this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let mut offset = 0;
    #[test]
    for rev in revs.iter().rev() {
    pub fn disabled() -> Self {
    pub metadata_sort_index: Option<i32>,
struct Revision {
        self.scroll_to_cursor(text);
    #[bench]

    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

            if cur_len_utf16 >= in_measured_units {

        where S: serde::Serializer
        if self.is_enabled() {
            Merge(0,2), Merge(1, 2),
                }

}

impl Serialize for Delta<RopeInfo> {
    }
pub fn enable_tracing() {
        self.find_changed = FindStatusChange::All;
    /// Constructs an instantaneous sample.
    /// The name of the event to be shown.
    // this is the cost contributed by the timestamp to trace()
                }
            'M' => SampleEventType::Metadata,
                }

    #[derive(Debug)]
            GestureType::ToggleSel => self.toggle_sel(text, offset),
mod tests {
#[derive(Clone, Copy)]
                    selection.add_region(occ);
                for region in find.occurrences().regions_in_range(start_pos, pos) {
            Merge(1,2),
/// Stores the relevant data about a sample for later serialization.
    }
}
            enabled: AtomicBool::new(false),
                priority: new_priority,
        let trace = Trace::enabled(Config::with_limit_count(10));
    #[bench]
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
///
    use multiset::Subset;
            Assert(0, "zacpb".to_owned()),
        self.text = text;
            let base_index = find_base_index(&self.revs, &other.revs);
    fn sample_name(&self) -> &'static str {
        let a = Rope::from("a\rb\rc");
            }

        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
        let mut engine = Engine::empty();
        if self.is_enabled() {
            b.push('b');
                    rev_id: rev.rev_id,


    // this is the cost contributed by the timestamp to
))]
    #[test]
    wrap_col: WrapWidth,

            Merge(0,2), Merge(1, 2),
    }
    #[test]
    fn add(self, rhs: Rope) -> Rope {
        b.push_str(new);
                    RopeDeltaElement_::Insert(s) =>
/// }
    // for simplicity.
                        sample.tid));
    {
        let text = Rope::from("13456");

            Merge(0,2), Merge(1, 2),
        let mut cursors = Vec::new();
        } else {

        } else { // no toggled groups, return past end

}
        assert_eq!(trace.get_samples_limit(), 0);
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    #[test]
    }
}

                        } else {
    /// The line number is 0-based.
                              to_payload("test_get_samples"));
            GestureType::PointSelect => {

                    new_deletes = new_deletes.transform_expand(inserts);
        });
/// ```
    /// than this will panic.
            .map(|(i, _)| i)
    #[cfg(feature = "benchmarks")]
    }
            SampleEventType::AsyncStart => 'b',
            max_undo_so_far,
    fn offset_of_line_small() {
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
            warn!("Failed to get path to current exe: {:?}", e);

        let trace = Trace::disabled();
                },
    #[test]
        where D: Deserializer<'de>,

fn exe_name() -> Option<String> {
        engine.undo([].iter().cloned().collect());

        Self {
            Assert(1, "ab".to_owned()),
                where E: serde::de::Error
        let (iv, new_len) = delta.summary();
    pub fn prev_codepoint(&mut self) -> Option<char> {
    fn eq(&self, other: &CategoriesT) -> bool {
    fn hash<H: Hasher>(&self, state: &mut H) {
        client.def_style(&style.to_json(ix));
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {

    // for simplicity.
        let a = Rope::from("a");

                } else {
    // and partly because you need to retain more undo history, to supply input to the
    inner: ChunkIter<'a>,
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);

//

        let text = Rope::from("13456");
            match memchr(b'\n', self.fragment.as_bytes()) {
            engine.edit_rev(1, i+1, head, d);
/// could trigger incorrect behavior if they collide, so u64 is safe.
                where E: serde::de::Error
        cursor.next::<BaseMetric>()
    pub fn set_size(&mut self, size: Size) {

        self.find_changed = FindStatusChange::Matches;
        let mut b = TreeBuilder::new();
    fn next(s: &String, offset: usize) -> Option<usize> {

                        for line_num in start_line..end_line {

            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
///
        let mut engine = Engine::new(Rope::from(TEST_STR));

        let mut a = String::new();
        let text_with_inserts = text_ins_delta.apply(&self.text);
        }
        (self.session1, self.session2)
            SampleEventType::DurationBegin => 'B',
            thread_name: Sample::thread_name(),
            Merge(0,2), Merge(1, 2),

                              payload: Option<TracePayloadT>,
    #[test]
        delta.serialize_field("els", &self.els)?;
        self.invalidate_selection(text);
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
            Assert(1, "abc".to_owned()),
        }
            None
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        rendered_styles
        self.utf16_size += other.utf16_size;

/// Given the inital byte of a UTF-8 codepoint, returns the number of
        // todo: this will be changed once multiple queries are supported
        // probably change as the recording internals change.

            Merge(3,1), Merge(5,3),
        let subset_str = format!("{:#?}", expand_by[1].1);
                              to_payload("test_get_samples"));


/// Get a slice of a `Rope`:
        Self {
            // I think it's a precondition that this will never be called
        }
    }
    //
        self.sample_limit_count * size_of::<Sample>()
        }
use delta::{Delta, DeltaElement};
        }
            SampleEventType::DurationEnd => 'E',
    fn bench_trace_block_payload(b: &mut Bencher) {
        self.subseq(iv)
            {
}
        /// The subset of the characters of the union string from after this

            SelectionForReplace => self.do_selection_for_replace(text),
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        self.find.iter().map(|find| {
use std::sync::Mutex;
    /// Storage for all the characters that have been deleted  but could
        AssertAll(String),
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
impl Engine {

    }

        if let Some(lines) = lines {
                    } else {
            None => None
        inserts.into_iter().enumerate().map(|(i, inserts)| {
        trace.instant("5", &["test"]);
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
            self.breaks = None
#[cfg(feature = "benchmarks")]
        let first_rev = engine.get_head_rev_id().token();
///
        let trace = Trace::enabled(Config::with_limit_count(10));
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        self.revs.last().unwrap().max_undo_so_far
/// Boundary is atomic and determined by codepoint boundary.
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
#[derive(Copy, Clone)]
        let trace = Trace::enabled(Config::with_limit_count(11));
        let mut sel = Selection::new();
        let d = engine.delta_rev_head(first_rev);
            HighlightFind { visible } => {
    /// Returns the largest undo group ID used so far
            let b = s.as_bytes()[offset];
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
const MAX_LEAF: usize = 1024;
    inner: LinesRaw<'a>
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
    1
        where S: Serializer
        cursor.next::<BaseMetric>()
            GestureType::MultiLineSelect =>
                first_sample_timestamp,
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
    fn render_line(&self, client: &Client, styles: &StyleMap,
                    .with_horiz(horiz)
            rendered_styles.push((iv.start() as isize) - ix);
            Merge(0,2), Merge(1, 2), Merge(3, 2),
            // with offset == 0, but be defensive.

        value
                    s = &s[..s.len() - 1];
const MIN_LEAF: usize = 511;
            base_rev: RevToken, delta: Delta<RopeInfo>) {
use bytecount;
                (drag_state.min, max(offset, drag_state.max))
        let new_head_2 = engine.get_head_rev_id().token();
/// # Arguments
impl<'a> Iterator for Lines<'a> {
    pub fn enable_config(&self, config: Config) {
categories_from_constant_array!(9);
    fn bench_trace_instant(b: &mut Bencher) {
    }
impl Sample {
        assert!(leaf.is_char_boundary(end));
        if initial_contents.len() > 0 {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
// Try to split at newline boundary (leaning left), if not, then split at codepoint

}
            }
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
use styles::{Style, ThemeStyleMap};
    }

                    as_vec.push(Sample::new_metadata(
        engine.gc(&gc);
/// However, anything that can be converted into a Cow string can be passed as
                Undo { ref toggled_groups, ref deletes_bitxor } => {
                    result = cow_append(result, &self.fragment[.. i + 1]);

        assert_eq!(soln, String::from(engine.get_head()));
        trace.instant("5", &["test"]);
    /// `text`. The count of a character in `deletes_from_union` represents
    /// the other doesn't make it re-appear.
        /// along with the newline that triggered it.
        b if b < 0xf0 => 3,
/// Returns the file name of the EXE if possible, otherwise the full path, or
        trace.instant("1", &["test"]);

///
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
        }
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
/// }
use xi_rope::tree::Cursor;
        let mut pos = self.pos();
                metadata_name: None,
// limitations under the License.
                    match full_path_str {
                (drag_state.max, min(offset, drag_state.min))
        let trace = Trace::enabled(Config::default());
        for find in self.find.iter() {
        let mut leaf_offset = pos - offset;
                if !region.is_caret() {
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
#[inline]
        if self.highlight_find {
        assert!(r.clone().slice(0, a.len()) == a_rope);
                for &region in rest {
    // transform representing the characters added by common revisions after a point.
    }
                for region in find.occurrences().regions_in_range(start_pos, pos) {

    }

        assert_eq!(correct, res);
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
        ");
            timestamp_us: ns_to_us(start_ns),
        // todo: for now only a single search query is supported however in the future
    undo_group: usize,
    {
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            if (c > start_pos && c < pos) ||
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        if let Some(ref mut trace) = self.trace {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    }
    ///
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
        ");

    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
categories_from_constant_array!(4);
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
                        self.revs.push(Revision {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        let mut samples = vec![
// See the License for the specific language governing permissions and
categories_from_constant_array!(4);
            Merge(0,1),
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
                None => {
                    if s.ends_with('\r') {

use std::str;
        (Revision {
            } else if incomp == GraphemeIncomplete::NextChunk {

    }
}
            SampleEventType::Metadata => 'M'

pub struct Replace {
    #[test]
const MAX_LEAF: usize = 1024;
            // with offset == 0, but be defensive.
            match modify_selection {
                    rev_id: rev.rev_id,
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        while !leaf.is_char_boundary(end) {
    }
    pub fn get_head_rev_id(&self) -> RevId {
        }
    pub fn disabled() -> Self {
    #[cfg(feature = "benchmarks")]
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
    }

        #------
    fn replace_small() {
        assert_eq!(rope.line_of_offset(0), 0);
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    }
    /// Selects the given region and supports multi selection.
    pub(crate) fn get_buffer_id(&self) -> BufferId {
            // On the next step we want things in expand_by to have op in the context
            'M' => SampleEventType::Metadata,
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
    fn next_rev_id(&self) -> RevId {
categories_from_constant_array!(10);
    fn cmp(&self, other: &Sample) -> cmp::Ordering {

/// an argument.
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
            Some(ref breaks) => {

        for _i in 0..50 {
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        // x, a, y, b, z, c
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
    /// Replacement string.

            self.record(Sample::new_duration(

        if self.current.is_none() {
    pub fn line_of_offset(&self, offset: usize) -> usize {
        trace.closure_payload("z", &["test"], || {},
                }
            }
            }
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    fn from_chrome_id(symbol: char) -> Self {
    ///
///
            return 0;

            let start = self.line_of_offset(last_text, iv.start());
    /// Tracks whether find highlights should be rendered.
        d
            let _x = trace.block("something", &[]);

#[macro_use]
        let rev = Revision {
        RevId { session1: 1, session2: 0, num: i as u32 }

    #[cfg(feature = "benchmarks")]
    fn bench_trace_instant(b: &mut Bencher) {
            self.pid == other.pid &&
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        true
// you may not use this file except in compliance with the License.
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    fn to_payload(value: &'static str) -> &'static str {
    // even worth the code complexity.
                            if !deletes.is_empty() {
    }
        }
        });
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        // A with ring, hangul, regional indicator "US"
        AssertAll(String),

/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
        assert_eq!(snapshot.len(), 5);
        }
                },
        // 1 for exe name & 1 for the thread name
            &self.deletes_from_union, &old_deletes_from_union);

    fn undo() {
    // encourage callers to use Cursor instead?
    /// This is a regression test to ensure that session IDs are used to break
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
//
    pub fn max_size_in_bytes(&self) -> usize {
    fn edit_rev_undo() {
/// However, anything that can be converted into a Cow string can be passed as
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        let a = Rope::from("a\nb\nc");
    s.serialize_char(ph.into_chrome_id())
}
    fn to_payload(value: &'static str) -> TracePayloadT {
                    // We're super-aggressive about dropping these; after gc, the history
            undone_groups: BTreeSet::new(),

    fragment: &'a str
        // additional tests for line indexing
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
                    for (ei, e) in self.peers.iter().enumerate() {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
            //if self.cursor.is_boundary::<BaseMetric>() {

    where D: serde::Deserializer<'de> {
    }
{
#![cfg_attr(feature = "benchmarks", feature(test))]
        self.send_update_for_plan(text, client, styles,
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
/// Represents the current state of a document and all of its history
    inner: LinesRaw<'a>
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {

            scroll_to: Some(0),
        }


    /// Determine whether `offset` lies on a codepoint boundary.
{
        assert_eq!(snapshot.len(), 9);
        if self.is_enabled() {

    fn measure(_: &RopeInfo, len: usize) -> usize {

//     http://www.apache.org/licenses/LICENSE-2.0
/// Returns all the samples collected so far.  There is no guarantee that the
    text: Rope,

            }
            match c.edit {
        trace.instant("1", &["test"]);
    }
        }
                let line = line.min(text.measure::<LinesMetric>() + 1);
                } else {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
pub struct BaseMetric(());
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
/// A size, in pixel units (not display pixels).
        }
                payload: payload,
    // TODO: switch to a persistent Set representation to avoid O(n) copying
                return None;
/// For example, take a string that starts with a 0xC2 byte.
        // 1 for exe name & 1 for the thread name



    #[test]
        let mut engine = Engine::new(Rope::from(TEST_STR));
    // TODO find the maximum base revision.
        // stable order since the resolution of timestamps is 1us.
                    if s.ends_with('\r') {
        tombstones = new_tombstones;
            l[offset..].chars().next()
            Assert(0, "adfc".to_owned()),
            els: Vec<RopeDeltaElement_>,
                    }
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
            let next_chunk = self.inner.next();
                        } else {
        engine.gc(&to_undo);
    }
        } else {
                                     event_type: SampleEventType)
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
            AssertAll("ac".to_owned()),
                //// if we aren't on a boundary we can't be at the end of the chunk
        assert_eq!(snapshot[4].name, "z");

        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
}
            Assert(1, "zapbj".to_owned()),
    ///
        }
            Merge(3, 0), Merge(4, 1), Merge(5, 2),


/// A rope data structure.
    }
    }
        self.push_str(&other[start..end]);
            }
        ];
            self.first_line = line - (self.height - 1);

            Merge(1,0),
                    } else if !inserts.is_empty() {
            'O' => SampleEventType::ObjectSnapshot,
                    // are empty, could send update removing the cursor.

}
        let script = vec![
        if offset >= text.len() {

    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
        gc_scenario(35,20);

            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
                                                        &mut line_cursor,

    #[test]
                c.provide_context(&pl, self.pos() - poffset);
    for rev in revs.iter().rev() {

    }
        b.iter(|| {
        let height = self.line_of_offset(text, text.len()) + 1;
        Assert(usize, String),
/// an argument.
use xi_trace::trace_block;
            HighlightFind { visible } => {
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    /// Toggles a caret at the given offset.
    /// Collapse all selections in this view into a single caret
        }
                payload: payload,
                        Ok(s) => Some(s),
        // insert `edits` letter "b"s in separate undo groups
        --#--
    fn scroll_to_cursor(&mut self, text: &Rope) {

    // * Unicode width (so CJK counts as 2)
    CompleteDuration,
        where S: Into<StrCow>, C: Into<CategoriesT>
    {
        let inserts_1 = parse_subset_list("
//! text.
                None => {
/// Computes a series of priorities and transforms for the deltas on the right
fn find_leaf_split_for_bulk(s: &str) -> usize {
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        if !self.lc_shadow.needs_render(plan) { return; }
    Undo {
                                     event_type: SampleEventType)
    }
    #[test]
    ThreadName { name: String },
        fn run_script(&mut self, script: &[MergeTestOp]) {
                              duration_ns: u64) -> Self
        engine.undo([1,2].iter().cloned().collect());
            }
                    // We're super-aggressive about dropping these; after gc, the history
/// xi_trace::trace("something happened", &["rpc", "response"]);
}
        let inserts = parse_subset_list("
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        ---#--
                    }
                rev_id: basic_rev(i+1),

                match *other {
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
use std::str;
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
                self.set(pos);

                        let end_line = start_line + seg.n;
        // A with ring, hangul, regional indicator "US"
// Unless required by applicable law or agreed to in writing, software
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
        engine.undo([1].iter().cloned().collect());
        assert_eq!(rope.line_of_offset(3), 1);
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        let mut revs = basic_insert_ops(inserts_1, 1);
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        Self {
            std::thread::sleep(std::time::Duration::new(0, 1000));
            's' => SampleEventType::FlowStart,
                    }

                                                        &mut line_cursor,
        let rev = Revision {
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        // insert `edits` letter "b"s in separate undo groups
                Some(Cow::from(s))
        if let Some(ix) = style_map.lookup(style) {
    }
// you may not use this file except in compliance with the License.
    }
        let first_rev = engine.get_head_rev_id().token();
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
    fn rebase_1() {
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
        for u in s.chars() {
        }
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
        }
        #------
    pub thread_name: Option<StrCow>,
                }
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
        let mut samples = vec![
                metadata_name: None,
    pub fn collapse_selections(&mut self, text: &Rope) {
                (drag_state.max, min(offset, drag_state.min))
    }
/// # Performance
            SampleEventType::DurationBegin => 'B',
        min
                    } else {
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);

        self.find.iter().map(|find| {
    /// indicates a search for the next occurrence past the end of the file.
            rendered_styles.push((sel_start as isize) - ix);
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
            };
        let expand_by = compute_transforms(revs);
            'D' => SampleEventType::ObjectDestroyed,
        if b >= 0xf0 {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.


        };
        let end = self.sel_regions().last().unwrap().end;
        match ty {
            let b = self.current.unwrap().as_bytes()[self.idx];
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
    }
///
                        if n_skip > 0 {
                    base_len: delta.base_len
            } else {
        // set last selection or word under current cursor as search query
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,

///
        // TODO: want to let caller retain more rev_id's.
        let expand_by = compute_transforms(revs);
    fn merge_whiteboard() {
    fn next(&mut self) -> Option<Cow<'a, str>> {
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
                max_undo_so_far: i,
    // TODO: don't construct transform if subsets are empty
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);

            max: offset,
                    };

/// 1. Samples that span sections of code may be inserted on end instead of
                        gc_dels = gc_dels.transform_expand(inserts);
        fn new(count: usize) -> MergeTestState {
use edit_types::ViewEvent;
        self.set_selection(text, sel);
        }
    #[inline]
// limitations under the License.

                                        &selections, &hls, style_spans);
impl Serialize for Rope {
// See the License for the specific language governing permissions and
            }
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        let mut rendered_styles = Vec::new();

        as_vec
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
                    let transformed_inserts = inserts.transform_expand(&s);
// See the License for the specific language governing permissions and
        // shouldn't do anything since it was double-deleted and one was GC'd
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
    #[inline]
    /// We attempt to reduce duplicate renders by setting a small timeout
        };
                        } else {
    /// Invalidates front-end's entire line cache, forcing a full render at the next
    fn next(s: &String, offset: usize) -> Option<usize> {
/// Creates a duration sample that measures how long the closure took to execute.
    #[serde(rename = "cat")]
    /// should be as unlikely to collide as two random u64s.
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        assert_eq!(utf16_units, 17);
    #[test]
    }
    ProcessName { name: String },
        match cmd {
        Lines {
    }
#[derive(Clone, Debug, PartialEq, Eq)]
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    }
/// ```rust

            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));


            Assert(3, "ab".to_owned()),

    }

                    }
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        d.insert(StrCow::from("test"), StrCow::from(value));
                    text.slice_to_string(start, end)
extern crate serde_json;
    }
        offset
    }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
    }
/// Revision will be used, which means only the (small) set of concurrent edits
        max

        let rope = Rope::from("hi\ni'm\nfour\nlines");
        if before {
    // trace_block()/trace_closure

            thread_name: Sample::thread_name(),
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
            els: Vec<RopeDeltaElement_>,
        for (iv, style) in style_spans.iter() {
        } else {
    /// The state for replacing matches for this view.
/// assert_eq!("herald", String::from(a));
        let a = Rope::concat(
    }
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
                }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
#[derive(PartialEq, Debug)]
            pending_render: false,
                            }
/// for single user cases, used by serde and ::empty
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        View {
#![cfg_attr(feature = "cargo-clippy", allow(
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
                        Some(end) => max(0, end - 1),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        where D: serde::Deserializer<'de>
    fn offset_of_line_panic() {
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    fn find_base_1() {
                Some(filename) => {
                }
/// See `trace_closure` for how the closure works and `trace_payload` for a
}
/// discussion on payload.
    fn to_payload(value: &'static str) -> &'static str {
#[inline]
            SampleGuard::new_disabled()
use std::fmt;
            match reverse {

            rendered_styles.push(style_id as isize);
use linewrap;
}
    }
            thread_name: Sample::thread_name(),
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
            None
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));

    }

    ///
        // insert character at end, when this test was added, it panic'd here

        first_line..(last_line + 1)
/// Usage of static strings is encouraged for best performance to avoid copies.
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
}
        let mut all_samples = self.samples.lock().unwrap();
        assert_eq!(None, a.prev_grapheme_offset(0));
    // TODO: a case can be made to hang this on Cursor instead


    }
    fn delta_rev_head() {
    let mut out = Vec::with_capacity(b_new.len());
            if self[i] != other[i] {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
                            max_undo_so_far: rev.max_undo_so_far,
        }
            engine.undo(to_undo.clone());
    pub fn new_duration_marker<S, C>(name: S,
pub struct Utf16CodeUnitsMetric(usize);
        let end = self.line_col_to_offset(text, line + 1, 0);
    }
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
    }

                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
/// Base unit is utf8 code unit.

    /// Sets the selection to a new value, without invalidating.
    }

}

    fn compute_info(s: &String) -> Self {
                    let (start, end) = {
            }
        // insert `edits` letter "b"s in separate undo groups
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        let trace = Trace::enabled(Config::default());

pub struct Utf16CodeUnitsMetric(usize);
    }
    fn compute_transforms_2() {
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
                Delta {
        where D: serde::Deserializer<'de>

        engine.edit_rev(1, 2, initial_rev, d1.clone());
}
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        // since character was inserted after gc, editor gcs all undone things
        #------
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());

        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
    }
            cur_len_utf8 += u.len_utf8();
                        Some(end) => max(0, end - 1),
        let mut retain_revs = BTreeSet::new();
        b if b < 0xe0 => 2,
    /// Selects a specific range (eg. when the user performs SHIFT + click).
                    if !deletes.is_empty() {
                tid));
        let new_head_2 = engine.get_head_rev_id().token();
        let height = self.line_of_offset(text, text.len()) + 1;
            Merge(0,2), Merge(1, 2),
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
                name, categories, Some(payload.into()), start, end - start));
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
        // a, b, y, z, c, x
    }

use std::borrow::Cow;
    }
                        let n_skip = seg.their_line_num - line_num;

    fn bench_trace_closure_disabled(b: &mut Bencher) {
        MergeTestState::new(3).run_script(&script[..]);
    pub fn get_samples_limit(&self) -> usize {

        assert_eq!(Some(8), a.next_grapheme_offset(0));
impl<'a> From<&'a Rope> for String {

        };
}
                    priority, undo_group,
    }
        }
                Some(pos) => offset += pos + 1,
    fn basic_rev(i: usize) -> RevId {
        self.len()
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    fn lines_small() {
        let trace = Trace::enabled(Config::default());
    /// Note: `edit` and `edit_str` may be merged, using traits.
        where S: Into<StrCow>, C: Into<CategoriesT>
        fn new(count: usize) -> MergeTestState {
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
use bytecount;
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
    move_delta.apply(tombstones)
        as_vec.extend(all_samples.iter().cloned());
        let inserts = parse_subset_list("
impl Serialize for Delta<RopeInfo> {
        #------
            let not_in_tombstones = self.deletes_from_union.complement();
            name: name.into(),

    pub fn set_dirty(&mut self, text: &Rope) {
        assert_eq!(snapshot[5].name, "z");

#[inline]
            find.set_hls_dirty(false)
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
    pub fn next_codepoint(&mut self) -> Option<char> {
    /// The `pristine` argument indicates whether or not the buffer has
        // send updated find status only if there have been changes
    }
                        b.add_span(seg.n, 0, 0);
                let line = line.min(text.measure::<LinesMetric>() + 1);
impl serde::Serialize for CategoriesT {
            if cur_len_utf16 >= in_measured_units {
/// let b = a.slice(1, 9);
    /// the text).
            }
            }
            }, to_payload("test_get_sorted_samples"));
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
        };
        // clamp to end of line
            // Do the merge one direction
    current: Option<&'a str>,
pub struct ByteIter<'a> {
        let all_caret = self.selection.iter().all(|region| region.is_caret());
//! A rope data structure with a line count metric and (soon) other useful
        }
    }
            // if using breaks update cursor
            self.find.push(Find::new());

        /// The subset of the characters of the union string from after this
        }
            s.as_bytes()[offset - 1] == b'\n'
            Assert(1, "zpbj".to_owned()),

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        assert_eq!(Some(6), a.next_codepoint_offset(3));
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
        self.lines(0, self.len())
        }
    #[test]
        {
    /// Return the offset of the codepoint after `offset`.
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        if let Some(edit) = contents {
    fn test_samples_pulse() {
        } else {
            b.push_str(&c);
pub fn trace<S, C>(name: S, categories: C)
            Merge(0,2), Merge(1, 2),
            }
impl RevId {
        b.add_span(height, 0, 0);

/// }

    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
    fn thread_name() -> Option<StrCow> {
    }


    fn len(&self) -> usize {
    fn undo_2() {
        let base_sel = Selection::new();
        assert_eq!(trace.get_samples_limit(), 20);
        let mut b = TreeBuilder::new();
    /// Width in bytes (utf-8 code units).
        assert_eq!(snapshot[2].name, "x");
    TRACE.samples_cloned_unsorted()
                peer.set_session_id(((i*1000) as u64, 0));
        samples.sort_unstable();
        next_expand_by = Vec::with_capacity(expand_by.len());
    }
/// # Arguments
        engine.edit_rev(1, 1, first_rev, d1.clone());
    }
/// # Arguments
    }
        // interior of last line should be last line
    #[cfg(feature = "benchmarks")]
        deletes_from_union
/// How tracing should be configured.
        engine.undo([1].iter().cloned().collect());
    }
    /// that are currently deleted, and thus in `tombstones` rather than
    #[test]
        trace.record(guard.sample.as_ref().unwrap().clone());

            Assert(0, "acrpbdzj".to_owned()),
    /// This is a regression test to ensure that session IDs are used to break
    buffer_id: BufferId,
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    ///
        let ix = style_map.add(style);
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
/// # Returns
    fn is_boundary(s: &String, offset: usize) -> bool {
                for region in find.occurrences().regions_in_range(start_pos, pos) {
            }
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
        d_builder.delete(Interval::new_closed_open(10, 36));
            self.first_line = line - (self.height - 1);
    }
                let (nl, noffset) = self.next_leaf()?;
            Rope::from(s1.clone()),
pub fn len_utf8_from_first_byte(b: u8) -> usize {
        self.replace = Some(Replace { chars, preserve_case });
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
                        line_num = seg.their_line_num + seg.n;
        let b_rope = Rope::from(&b);
/// let a = Rope::from("hello ");
        let _t = trace_block("View::wrap_width", &["core"]);
        self.rev_id_counter += 1;
            selection: SelRegion::caret(0).into(),
#[derive(Clone, Copy)]
            let mut len = 1;
        } else {
        engine.undo([2].iter().cloned().collect());
        //} else {
        undo_group: usize,
            thread_name: Sample::thread_name(),

        // creation) is:
        let next_line_offset = self.offset_of_line(text, line + 1);
        assert_eq!("#---#--", &subset_str);
    }
        debug_subsets(&rearranged_inserts);
    fn merge_priorities() {
    }

        } else {
    fn len(&self) -> usize {
            // with offset == s.len(), but be defensive.
        self.set_selection(text, sel);
            cur_len_utf8 += u.len_utf8();
}
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        assert_eq!(2, b.offset_of_line(1));
        // We could probably reduce the cloning of selections by being clever.
    // * Unicode width (so CJK counts as 2)

        self.set_dirty(text);
    fn next_codepoint_offset_small() {
        rope.offset_of_line(5);
    TRACE.closure(name, categories, closure)
    }
                              start_ns: u64,
    /// Determines whether the offset is in any selection (counting carets and
    {
    // * grapheme clusters
        ]);
        let mut retain_revs = BTreeSet::new();
        assert_eq!(0, r.line_of_offset(a.len() - 1));
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        }
        self.scroll_to = Some(end);
}
    }
    /// Set the selection to a new value.
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.

}
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                    let full_path_str = full_path.into_string();
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        self.height
        }
}
        trace.instant("2", &["test"]);
            },
impl RevId {
    }
            revs: vec![rev],
            Assert(5, "zacpb".to_owned()),
        engine.undo([1].iter().cloned().collect());
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
    #[test]
// limitations under the License.
    fn next_codepoint_offset_small() {
                    let new_gc_dels = if inserts.is_empty() {
    /// # Panics
//! CRDT implementation techniques, because all operations are serialized in
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
/// ```rust
                    match full_path_str {
        assert!(r != b_rope + a_rope);


        use self::MergeTestOp::*;
            Rope::concat(
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    /// All the selection regions other than the one being dragged.
        let expand_by = compute_transforms(a_revs);
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
                } else {
        let first_rev = engine.get_head_rev_id().token();
        struct RopeDelta_ {
pub type Rope = Node<RopeInfo>;
        self.wrap_col = WrapWidth::Width(self.size.width);
    /// An arbitrary payload to associate with the sample.  The type is
use std::str;
    /// Does a drag gesture, setting the selection from a combination of the drag
        // a, b, y, z, c, x
pub struct LinesRaw<'a> {
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    /// Sets the selection to a new value, invalidating the line cache as needed.
    #[serde(rename = "sort_index")]
                                deletes_bitxor: new_deletes_bitxor,

/// Usage of static strings is encouraged for best performance to avoid copies.
            // The deletes are already after our inserts, but we need to include the other inserts
                                gc_dels = gc_dels.transform_union(inserts);
    }
    /// Width in bytes (utf-8 code units).
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    }
        (Revision {
        if let Some(occ) = closest_occurrence {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    #[should_panic]
        self.lines += other.lines;
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
                    return None;
        self.size = size;
    /// The maximum amount of space the tracing data will take up.  This does
        // multiple queries; select closest occurrence
        r.slice_to_string(0, r.len())
            pos += 1;
/// Base unit is utf8 code unit.
            MetadataType::ProcessName {..} => "process_name",
            x.next_occurrence(text, reverse, wrapped, &self.selection)
            find_changed: FindStatusChange::None,
                Ok(CategoriesT::DynamicArray(categories))
        // if we have active find highlights, we don't collapse selections
            match seg.tactic {
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        }
                });
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    // TODO: don't construct transform if subsets are empty
        hasher.finish()
        enum RopeDeltaElement_ {
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;

        ");
extern crate lazy_static;
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    }

        assert_eq!(utf8_offset, 19);
pub struct SampleArgs {
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        self.set_selection(text, sel);
        let mut engine = Engine::new(Rope::from(TEST_STR));
            let splitpoint = if s.len() > MAX_LEAF {
        ");
            size: Size::default(),
        trace.record(guard.sample.as_ref().unwrap().clone());
        };

            let deletes = Subset::new(inserts.len());
}
        let height = self.line_of_offset(text, text.len()) + 1;
        // selection state, and for scrolling it into view if needed. This choice can

{
                let mut cursor = Cursor::new(&text, region.min());
    }
        if self.is_enabled() {

                }
                    }
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),

    }
/// ```
            }
        // Note: for committing plugin edits, we probably want to know the priority
            SampleEventType::Metadata => 'M'
        assert_eq!(utf16_units, 20);
#[inline]
    pub fn session_id(&self) -> SessionId {
            }
        

            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);

            timestamp_us: ns_to_us(timestamp_ns),
        let subset_str = format!("{:#?}", expand_by[1].1);
// Licensed under the Apache License, Version 2.0 (the "License");
            }
        let region = SelRegion::caret(offset);

            // recurse at most once; this doesn't feel great but I wrote myself into a
                        priority, undo_group,
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
#[inline]
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
                },
    }
    {
        self.set_selection(text, new_sel);
    /// Callers are expected to validate their input.
    /// The name of the event to be shown.
    /// # Panics
/// Base unit is utf8 code unit.

            deletes_from_union,
                        word_cursor.select_word()
    DynamicArray(Vec<String>),
        let snapshot = trace.samples_cloned_sorted();
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
                        } else {
            Assert(1, "arpb".to_owned()),
        }
            revs: vec![rev],
    fn compute_deltas_1() {
        info.lines
    /// End of the region selected when drag was started.
        let b = Rope::from("b");
//! An engine for handling edits (possibly from async sources) and undo. It
        self.send_update_for_plan(text, client, styles,
        let initial_rev = engine.get_head_rev_id().token();

    pub fn instant<S, C>(&self, name: S, categories: C)
// Licensed under the Apache License, Version 2.0 (the "License");
    // partly because the reachability calculation would become more complicated (a
    // maybe explore grabbing leaf? would require api in tree
/// # Arguments
impl Trace {
        let new_head = engine.get_head_rev_id().token();
//
use std::mem::size_of;
        assert_eq!(snapshot[3].name, "b");
    pub fn default() -> Self {
        samples
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        let mut leaf_offset = pos - offset;
        assert_eq!(trace.get_samples_limit(), 0);

}
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
#[cfg(feature = "dict_payload")]

        }
    }
            // I think it's a precondition that this will never be called
#[cfg(test)]
    /// assumed to be forward).
categories_from_constant_array!(0);
                        Ok(s) => Some(s),
        assert!(leaf.is_char_boundary(end));
        d_builder.build()
                    };

    }
        let d = engine.delta_rev_head(after_first_edit);
///
                len += 1;
                }

                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
/// as opposed to thousands of revisions.
/// between two utf8 code units that form a code point is considered invalid.
    // TODO: a case can be made to hang this on Cursor instead
            SampleEventType::AsyncEnd => 'e',
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
        a.lines_all().collect::<Vec<_>>());
                SelectionModifier::AddRemovingCurrent => {
                selection.add_region(SelRegion::caret(region.max()));
        assert_eq!(trace.get_samples_limit(), 11);
        self.size = size;
pub struct RevId {
            rendered_styles.push((sel_start as isize) - ix);
        let a = Rope::from("a\nb\nc");
    #[inline]
fn shuffle(text: &Rope, tombstones: &Rope,
    find: Vec<Find>,
use std::string::ParseError;
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
#[derive(Clone, Debug, PartialEq, Eq)]
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
            Some(Cow::Owned(mut s)) => {
        self.set_selection_for_edit(text, new_sel);
}
    /// Tracks whether find highlights should be rendered.
use std::fmt;
        loop {
    fn edit_rev_undo_2() {
    fn replace_small() {
    #[test]
        let d = engine.delta_rev_head(first_rev);
        -##-
        samples.sort();
        }
    /// Invalidates front-end's entire line cache, forcing a full render at the next
/// * `name` - A string that provides some meaningful name to this sample.
                                gc_dels = gc_dels.transform_expand(inserts);
            return false;
                    // can only happen on empty input
        let mut end = start_pos + len;
}
                                         self, text, modify);
    /// Storage for all the characters that have been deleted  but could
    }
        }
        #[derive(Serialize, Deserialize)]
        if self.find.is_empty() {
        ");
        // even though the actual sampling order (from timestamp of
            } else {
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
// you may not use this file except in compliance with the License.
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
    #[test]
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    }

                inserts: new_inserts,
}
        assert_eq!(2, a.line_of_offset(5));
// Try to split at newline boundary (leaning left), if not, then split at codepoint

                // sanitize input
        let mut engine = Engine::new(Rope::from(""));
            GestureType::WordSelect =>
    #[allow(dead_code)]
    }
                self.drag_state = None;
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        /// The set of groups toggled between undone and done.

        if let Some(breaks) = self.breaks.as_mut() {
        engine.edit_rev(1, 3, new_head_2, d3);
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    }
        }
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
    fn bench_get_tid(b: &mut Bencher) {
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
            AssertMaxUndoSoFar(1,1),
            }
        let mut d = TracePayloadT::with_capacity(1);
        }
        Self {
        let mut selections = Vec::new();
    {
                }
    #[test]
            Assert(0, "zacbd".to_owned()),
#[inline]
    #[test]
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let a = Rope::concat(
        Self {
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
        let start = time::precise_time_ns();
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        if self.find.is_empty() {

/// beginning.
        }
            utf16_size: 0,
    }
                peers.push(peer);
        let b = a.slice(1, 10);
    }
            Assert(1, "pb".to_owned()),
                }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    pub fn byte_at(&self, offset: usize) -> u8 {
        let mut b = String::new();
}
    {
    }
        }
    /// Only number of matches changed
//
                MergeTestOp::Assert(ei, ref correct) => {
            }
        self.enabled.store(false, AtomicOrdering::Relaxed);
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
                out.push((prio, inserts));
                formatter.write_str("comma-separated strings")
impl<'a> Drop for SampleGuard<'a> {
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
    ($num_args: expr) => {
    /// Get text of a given revision, if it can be found.
    #[serde(rename = "ts")]
                    b.add_span(seg.n, 0, 0);
            write!(f, "{}", String::from(self))

        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    }

        let height = self.line_of_offset(text, text.len()) + 1;
            _ => return
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        let rearranged = rearrange(&revs, &base, 7);
        for &(trans_priority, ref trans_inserts) in &expand_by {
    }
    }
/// A size, in pixel units (not display pixels).

            // TODO: on double or triple click, quantize offset to requested granularity.


    ///
/// See `trace_payload` for a more complete discussion.
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
            splitpoint
        let script = vec![
                        })
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
    /// and currently in a debugging state.
                        let end_line = start_line + seg.n;
                            None
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());

            Assert(2, "b".to_owned()),
    where S: serde::Serializer {
        count_utf16_code_units(&s[..in_base_units])
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
        /// The subset of the characters of the union string from after this
    fn undo_2() {
            base_sel: selection.clone(),
        let mut engine = Engine::new(Rope::from(TEST_STR));
            self.idx += 1;

        let (start, end) = {
                    }
        prev_boundary.unwrap_or(None)
    }
            write!(f, "{}", String::from(self))
categories_from_constant_array!(7);

/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
        ");
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
            //} else {
            timestamp_us: ns_to_us(time::precise_time_ns()),
                           styles: &StyleMap, style_spans: &Spans<Style>,
            None
    ///
            min: offset,
                }
            }
/// an argument.

            let a_to_merge = &self.revs[base_index..];
        assert_eq!(0, b.line_of_offset(0));
        self.start_drag(offset, region.start, region.end);
        Ok(Delta::from(d))

/// xi_trace::trace("something happened", &["rpc", "response"]);
        println!("{:#?}", b_delta_ops);
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        engine.edit_rev(1, 1, first_rev, build_delta_1());

{
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
                pos = leaf_offset + pl.len();


            thread_name: None,

        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
                deletes: new_deletes,
        let rev = Revision {
            DeltaElement::Insert(ref node) =>
    ///
///

        };
                    s = &s[..s.len() - 1];
                },
            }
        };
    // for simplicity.
    pub tid: u64,
            timestamp_us: ns_to_us(start_ns),
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
        while offset < l.len() && !l.is_char_boundary(offset) {
    fn merge_idempotent() {
    /// Constructs a Duration sample.  For use via xi_trace::closure.
            //self.cursor.set(self.end);

            duration_us: None,
    }
        cur_len_utf8
            sample_limit_count: limit
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            utf16_size: count_utf16_code_units(s),

#![cfg_attr(feature = "benchmarks", feature(test))]
                        let mut line_cursor = Cursor::new(text, offset);
    /// Selects an entire word and supports multi selection.

                selections.push((sel_start_ix, sel_end_ix));
    }

            } else {
        }
            Gesture { line, col, ty } =>
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)

use std::str;

        self.set(new_pos);
        match self.breaks {
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
pub type StrCow = Cow<'static, str>;
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
    fn from(c: Vec<String>) -> CategoriesT {
        self.find.iter().map(|find| {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
    TRACE.block_payload(name, categories, payload)
                            deletes_bitxor.transform_shrink(&gc_dels)
                self.do_find(text, chars, case_sensitive, regex, whole_words),
        -> Self
                Some(Cow::from(s))
        }
        deletes_bitxor: Subset,

            r = op.inserts.apply(&r);
    }
    pub fn do_find_all(&mut self, text: &Rope) {
        let deletes_from_union_b = parse_subset("-#---");
impl RevId {
        let result = closure();
            write!(f, "{}", String::from(self))
        }
pub struct ByteIter<'a> {
    //TODO: implement lines_raw using ranges and delete this
            panic!("line number {} beyond last line {}", line, max_line);
        engine.edit_rev(1, 2, first_rev, d1.clone());
        // even though the actual sampling order (from timestamp of

    #[cfg(feature = "benchmarks")]
                offset = prev;
        engine.undo([].iter().cloned().collect());
    #[serde(deserialize_with = "deserialize_event_type")]
/// Usage of static strings is encouraged for best performance to avoid copies.
// Copyright 2016 The xi-editor Authors.
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
            session: default_session(),
    /// If the cursor is at the end of the rope, returns the empty string.
}

                }
categories_from_constant_array!(7);
    {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                let offset = self.selection[0].start;
            self.collapse_selections(text);
    fn can_fragment() -> bool {
    }
            breaks: None,
    /// Selects all find matches.
    }
                            edit: Undo {
        debug_subsets(&rearranged_inserts);
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
#[cfg(test)]
        }
                return offset;
                priority, undo_group, deletes,
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};

    ///
        assert_eq!(1, a.line_of_offset(3));
    pub fn sel_regions(&self) -> &[SelRegion] {
    #[test]
        samples.sort_unstable();
            to_payload("some description of the trace"))));
        assert_eq!(snapshot[2].name, "x");
        let mut cursor = Cursor::new(self, offset);
        }
        }
            // with offset == 0, but be defensive.
}
    fn lines_small() {
categories_from_constant_array!(3);
            }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    samples: Mutex<FixedLifoDeque<Sample>>,
                    to_payload(("some description of the closure")))));
            l[offset..].chars().next()
    session: SessionId,
            sample: Some(Sample::new_duration_marker(
    fn goto_line(&mut self, text: &Rope, line: u64) {
        where S: Into<StrCow>, C: Into<CategoriesT>
                warn!("Usage of click is deprecated; use do_gesture");
///
use std::cmp::{min,max};
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
                    };
pub struct Sample {

        let first_rev = engine.get_head_rev_id().token();
        let script = vec![
    pub fn token(&self) -> RevToken {
        if !selection.regions_in_range(offset, offset).is_empty() {
            name: name.into(),
    deletes_from_union: Subset,
    }
            }
                                                                0, "copy", 2)?;
    }
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        };
        assert_eq!("#-####-", &subset_str);
                self.do_selection_for_find(text, case_sensitive),
    pub fn with_limit_bytes(size: usize) -> Self {
        let mut selections = Vec::new();
mod tests {


    pub chars: String,
    rev_id_counter: u32,
            Assert(0, "ab".to_owned()),

                }
#[cfg(test)]
pub struct Engine {
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    max_undo_so_far: usize,
        // TODO: simplify this through the use of scopeguard crate
        let deletes_from_union_b = parse_subset("-#---");

            if self.fragment.is_empty() {
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        Self {
                },
    /// this returns the offset of the end of the rope. Arguments higher
    fn undo() {

{
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);

    pub fn lines_all(&self) -> Lines {
        // current recording mechanism should see:
/// Contains replacement string and replace options.
                    inserts: ins,
}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

        }
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        let d = RopeDelta_::deserialize(deserializer)?;
{
                    // can only happen on empty input
            let to_delete = if undone { &new_inserts } else { &new_deletes };
            }
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
            l[offset..].chars().next()
                    let mut e = &mut self.peers[ei];
    }
                            (inserts.transform_shrink(&gc_dels),
        }
                len += 1;
            Some(ref breaks) => {
                last.1 = last.1.transform_union(&inserts);
            if let Some(pos) = pos { start_of_line.set(pos) }
        }
/// overhead tracing routine available.
        None => {
                    return None;
        let first_rev = engine.get_head_rev_id().token();
        while let Err(incomp) = prev_boundary {
        self.revs.append(&mut new_revs);

    }
        engine.edit_rev(1, 3, new_head_2, d3);
            // Do it the other way on the copy
    } else if x < max {
///
            SampleEventType::FlowStart => 's',
            Copy(usize, usize),
        if self.cursor.pos() >= self.end {
///
            }
            rendered_styles.push((iv.start() as isize) - ix);
        for _ in 0..(edits-max_undos) {
    }
        } else {
    }
        /// The subset of the characters of the union string from after this
enum WrapWidth {
            self.set_selection(text, selection);
/// Returns the file name of the EXE if possible, otherwise the full path, or


    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
            sample.event_type = SampleEventType::DurationEnd;
}
impl Eq for CategoriesT {}
    }

        }
    for rev in revs.iter().rev() {
                    if invert_undos {
        let first_rev = engine.get_head_rev_id().token();
            // recurse at most once; this doesn't feel great but I wrote myself into a
        if self.highlight_find {
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
                    text.slice_to_string(start, end)
            Assert(1, "arpbzj".to_owned()),
                self.do_set_replace(chars, preserve_case),
        for r in &self.revs[ix + 1..] {
        let mut selection = Selection::new();
            let horiz = None;
            if region.is_caret() {
pub fn is_enabled() -> bool {
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
    #[test]
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        assert_eq!(snapshot[6].name, "z");
    }
        let styles = self.render_styles(client, styles, start_pos, pos,
                    let after = new_full_priority >= full_priority;  // should never be ==
            Assert(0, "ab".to_owned()),
    #[serde(skip_serializing_if = "Option::is_none")]
                payload: payload,
        let result = closure();
        let mut cursor = Cursor::new(self, offset);
    ///
    fn gc_2() {
        self.deletes_from_union = new_deletes_from_union;
            }
    }
        engine.undo([3].iter().cloned().collect());
    lc_shadow: LineCacheShadow,
            SampleGuard::new(&self, name, categories, None)
                    self.fragment = &self.fragment[i + 1 ..];
        gc_scenario(35,20);
    /// ancestor in order to be mergeable.
        }

#[derive(Clone, Debug)]
/// fn something_else_expensive(value: u32) {
        // todo: for now only a single search query is supported however in the future
        };
    }
    #[cfg(feature = "benchmarks")]
            Assert(1, "apb".to_owned()),
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    fn test_ser_de() {
    }
#[derive(Copy, Clone)]
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
/// None if an irrecoverable error occured.
        });
                //// if we aren't on a boundary we can't be at the end of the chunk
            match c.edit {
    session1: u64,
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
                            edit: Undo {
/// ```
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
    /// Exposed for unit tests only.
    /// this returns the offset of the end of the rope. Arguments higher
/// `base_revs`, but modified so that they are in the same order but based on
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    #[test]
    }
    offset: usize,
                         start: usize, end: usize, sel: &[(usize, usize)],
    fn from_chrome_id(symbol: char) -> Self {
            new_deletes = new_deletes.transform_expand(&new_inserts);
// you may not use this file except in compliance with the License.

    }
                                deletes,
    where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            // Do the merge one direction

        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    /// Returns a slice of the string from the byte range [`start`..`end`).
}
                    }
//     http://www.apache.org/licenses/LICENSE-2.0
                        } else {
}
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    /// The maximum number of entries the tracing data should allow.  Total
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
                    return None;
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
        assert_eq!(snapshot[3].name, "a");
                let categories = v.split(",").map(|s| s.to_string()).collect();
        b.add_span(height, 0, 0);
            next_boundary = c.next_boundary(&l, leaf_offset);
/// some way.
        selection.add_region(region);
    pub args: Option<SampleArgs>
        if self.len() != other.len() {
            Merge(0,1),
        ];
    for rev in revs.iter().rev() {
        self.len() >= MIN_LEAF
        result
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
            } else {
                    let new_gc_dels = if inserts.is_empty() {
        // NOTE 2: from_micros is currently in unstable so using new
    }
            Assert(0, "ab".to_owned()),
    {

    }

    }
            name: sample_name,
        }

    ///
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    #[test]
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
            Assert(0, "acpbdj".to_owned()),
        let mut a = Rope::from("");
    /// Width in bytes (utf-8 code units).
        assert_eq!(1, r.line_of_offset(r.len() - 1));
        as_vec.extend(all_samples.iter().cloned());

        self.selection = sel;

// Licensed under the Apache License, Version 2.0 (the "License");
        engine.gc(&gc);
                    as_vec.push(Sample::new_metadata(

    }



    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        engine.undo([1,2].iter().cloned().collect());
        assert_eq!(Some(10), a.next_codepoint_offset(6));
use std::ops::Range;
        let script = vec![
        // and it only needs to be consistent over one execution.
    //
            Assert(0, "zcbd".to_owned()),
    /// This is used to determined whether FindStatus should be sent to the frontend.
        let rope = Rope::from("hi\ni'm\nfour\nlines");

                // TODO could probably be more efficient by avoiding shuffling from head every time
    // TODO: replace this with a version of `lines` that accepts a range
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
    #[cfg(feature = "benchmarks")]
                selection.add_region(SelRegion::caret(region.max()));
                    self.set_selection(text, selection);


use xi_rope::delta::Delta;
        }, to_payload("test_get_sorted_samples"));
///
        for seg in self.lc_shadow.iter_with_plan(plan) {

                        });
                    } else {
                        }
    pub fn push_str(&mut self, mut s: &str) {
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
            }
    let mut last_priority: Option<usize> = None;
        AssertAll(String),
/// Enable tracing with a specific configuration. Tracing is disabled initially
        engine.undo([].iter().cloned().collect());
    }
}

                metadata_name: None,
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
                            rev_id: rev.rev_id,
            };
    fn next_grapheme_offset() {
        let trace = Trace::disabled();
    fn bench_trace_block_disabled(b: &mut Bencher) {
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);

    #[test]
}
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
        assert_eq!(correct, rearranged_inserts);
    }
// you may not use this file except in compliance with the License.
///
/// Then offset=1 is invalid.
            Merge(0,2),
            self.wrap_col = WrapWidth::Bytes(wrap_col);

        let _t = trace_block("View::wrap_width", &["core"]);
        let is_base = base_revs.contains(&rev.rev_id);
    /// An arbitrary payload to associate with the sample.  The type is
    }
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        };
        samples[1].timestamp_us = 5;

        let inserted = inserts.inserted_subset();
        let mut result = json!({
                    }
    fn merge_priorities() {
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
            a = a + Rope::from(&c);
    /// Sets the selection to a new value, invalidating the line cache as needed.
        self.deletes_from_union = deletes_from_union;
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        /// The subset of the characters of the union string from after this
        assert_eq!(trace.get_samples_count(), 0);
    }
    /// not account for any overhead of storing the data itself (i.e. pointer to
    }
    // * grapheme clusters
            let pos = bc.next::<BreaksMetric>();

                    let (start, end) = {
#[inline]
        next_expand_by = Vec::with_capacity(expand_by.len());
}
/// a.edit_str(1, 9, "era");
        let line = self.line_of_offset(text, offset);
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
///
                                deletes,
    /// Exposed for unit tests only.
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
    replace: Option<Replace>,
        (Revision {
    fn merge_max_undo_so_far() {
        rope.line_of_offset(20);
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        b.push_str(s);
use std::collections::BTreeSet;
                                gc_dels = gc_dels.transform_expand(inserts);
/// ```
            }

    fn build_delta_1() -> Delta<RopeInfo> {
    /// Invalidates the styles of the given range (start and end are offsets within

    fn identity() -> Self {
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
    // Send the requested lines even if they're outside the current scroll region.
    #[bench]
    /// Each instance represents a separate search query.
            &rebased_deletes_from_union, &new_deletes_from_union);
            return ix;
        assert_eq!(snapshot[2].name, "x");
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
    }
        Self {
impl<'a> Drop for SampleGuard<'a> {
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        where S: serde::Serializer
                        .map(DeltaElement::from).collect(),
/// Boundary is atomic and determined by codepoint boundary.
/// # Arguments

    #[test]
            Assert(1, "arpbzj".to_owned()),
                            edit: Undo {

/// # Examples

            Merge(2,1),
    pub fn token(&self) -> RevToken {
#[derive(Serialize, Deserialize, Debug, Clone)]
                             client: &Client, style_spans: &Spans<Style>)
#[inline]
    #[cfg(feature = "benchmarks")]
    #[test]
    fn delta_rev_head() {
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
use rpc::{GestureType, MouseAction, SelectionModifier};
    }
    #[test]
    fn bench_trace_closure_payload(b: &mut Bencher) {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

}
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
    #[cfg(feature = "benchmarks")]

#[derive(Clone, Debug, PartialEq, Eq)]
fn shuffle(text: &Rope, tombstones: &Rope,
        }
                        &mut rest[bi - ai - 1]
    /// The maximum number of samples that should be stored.
                self.set_dirty(text);
    // Send the requested lines even if they're outside the current scroll region.
    ///
            'E' => SampleEventType::DurationEnd,
        assert_eq!(rope.line_of_offset(15), 3);
    }
                            }
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
    #[test]
        self.pending_render
        &leaf[offset..end]
    }
    /// Returns the largest undo group ID used so far
        } else if line == max_line {
    pub fn max_size_in_bytes(&self) -> usize {
        a.edit_str(1, 9, "era");
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
#[derive(Clone, Copy)]
                }
    }
        deletes_from_union
use selection::{Affinity, Selection, SelRegion};
        cursor.next_grapheme()
    pub name: StrCow,
use std::str::FromStr;
    #[cfg(feature = "benchmarks")]
            Assert(1, "ab".to_owned()),
            Rope::from(s1.clone()),
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    #[cfg(feature = "benchmarks")]
use unicode_segmentation::GraphemeCursor;
pub fn samples_cloned_sorted() -> Vec<Sample> {
    #[test]
                last_priority = Some(priority);
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
impl Serialize for Delta<RopeInfo> {

        self.revs.iter().enumerate().rev()
}
    fn edit_rev_undo_3() {
                    let full_path = exe_name.into_os_string();

    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
pub struct LinesMetric(usize);  // number of lines
    }
                peer.set_session_id(((i*1000) as u64, 0));
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
                    Some(Contents::Edit {

        memchr(b'\n', &s.as_bytes()[offset..])
            // recurse at most once; this doesn't feel great but I wrote myself into a
                    // are empty, could send update removing the cursor.
                    Some(chunk) => self.fragment = chunk,
    }
        if !self.is_enabled() {
            priority: 0,
        r.slice_to_string(0, r.len())
        engine.edit_rev(1, 1, first_rev, build_delta_1());
///     0

    fn eq(&self, other: &CategoriesT) -> bool {
struct Revision {
                    let e = &mut self.peers[ei];
        }
#[inline]
pub enum CategoriesT {
            duration_us: None,
        where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!(1, res);
        assert_eq!(None, a.prev_grapheme_offset(0));
        let mut all_samples = self.samples.lock().unwrap();
            self.record(Sample::new_instant(name, categories, None));
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
            match reverse {
        let s = String::deserialize(deserializer)?;
        let mut all_samples = self.samples.lock().unwrap();
    /// of the chunks is indeterminate but for large strings will generally be
            args: Some(SampleArgs {
//! A rope data structure with a line count metric and (soon) other useful
            inner: self.lines_raw(start, end)
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    }
               a.lines_all().collect::<Vec<_>>());
                        }
        let d = engine.delta_rev_head(first_rev);

        for find in &mut self.find {

    }
        // and it only needs to be consistent over one execution.
    }
        } else if self.first_line + self.height <= line {
        let mut hasher = DefaultHasher::new();
        let (metadata_name, sort_index) = meta.consume();
        let a = Rope::concat(
///     0
        soln.push('f');
        let deletes_from_union_a = parse_subset("-#---");
                RenderTactic::Render => {
            "text": &l_str,
        let utf8_offset = 19;
    /// Generally racy since the underlying storage might be mutated in a separate thread.
    }
            let style_id = self.get_or_def_style_id(client, styles, &style);
    #[bench]
        self.drag_state = None;
trait StringArrayEq<Rhs: ?Sized = Self> {
}
        assert_eq!(utf16_units, 20);

        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

        }, deletes_from_union)
    }
        assert_eq!(snapshot.len(), 5);
            self.pid == other.pid &&
        } else { // no toggled groups, return past end
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);

        } else { // no toggled groups, return past end
        let mut cur_len_utf16 = 0;
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            Assert(1, "arpbzj".to_owned()),
        -> SampleGuard
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
            }
        } else {
        let new_head_2 = engine.get_head_rev_id().token();
    /// point. Used to optimize undo to not look further back.
    #[test]
    }
/// assert_eq!("ello wor", String::from(&b));
                SelectionModifier::AddRemovingCurrent => {
            if let Some(replace) = self.get_replace() {
                                gc_dels = gc_dels.transform_expand(inserts);
            sel
#[inline]
    session_id: SessionId,
    {
    pub fn new_disabled() -> Self {
}
#[derive(Clone, Debug, PartialEq, Eq)]
            .map_or(0, |ref s| s.timestamp_us);
    fn prev_codepoint_offset_small() {
                        undone_groups = Cow::Owned(new_undone);
/// Find an index before which everything is the same
        #------
    #[should_panic]
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
            Revision {
        let l_str = text.slice_to_string(start_pos, pos);
            'X' => SampleEventType::CompleteDuration,
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    // TODO find the maximum base revision.
            let inserted = inserts.inserted_subset();
    {
    /// Move the selection by the given movement. Return value is the offset of
        let thread = std::thread::current();
        let b = a.slice(2, 4);
        // move deleted or undone-inserted things from text to tombstones
                    new_deletes = new_deletes.transform_expand(inserts);
            }
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
        let r = Rope::from(&a[..MAX_LEAF]);
/// Replace part of a `Rope`:
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        ]);
// The advantage of using a session ID over random numbers is that it can be
        let offset = self.line_col_to_offset(text, line as usize, 0);
        // creation) is:
            Some(ref breaks) => {
                      delta: &Delta<RopeInfo>, client: &Client,
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
/// ```rust
    #[test]
                MetadataType::ProcessName {name: exe_name},
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    ///
        if self.find.is_empty() {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
            Assert(3, "ab".to_owned()),
///
            } else {
/// Base unit is utf8 code unit.
        }
        let inserts = parse_subset_list("
        let (new_text, new_tombstones) =

            replace: None,
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        }
        }
        assert_eq!(utf8_offset, 19);
                        let (inserts, deletes) = if gc_dels.is_empty() {
    }
/// * `name` - A string that provides some meaningful name to this sample.
    }

        assert_eq!(snapshot[8].name, "c");
    /// Tracks whether this view has been scheduled to render.
        let sample_name = to_cow_str(meta.sample_name());
            if let Edit { ref inserts, .. } = rev.edit {

//! This module actually implements a mini Conflict-free Replicated Data Type
            GestureType::MultiLineSelect =>
    pub fn push_str(&mut self, mut s: &str) {
    ///
    type Item = Cow<'a, str>;
            Merge(1,0),
    }
        // rebase the delta to be on the head union instead of the base_rev union
                for region in find.occurrences().regions_in_range(start_pos, pos) {
        delta.serialize_field("base_len", &self.base_len)?;
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
        self.tombstones = new_tombstones;
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);

struct DeltaOp {
    #[cfg(feature = "benchmarks")]
    }
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        assert_eq!(rope.line_of_offset(0), 0);
    TRACE.is_enabled()
        let mut engine = Engine::new(Rope::from(TEST_STR));
    fn accumulate(&mut self, other: &Self) {
categories_from_constant_array!(7);
        let contents = Contents::Edit {
}
    #[test]
    pub fn offset_of_line(&self, line: usize) -> usize {
    /// Determines whether the offset is in any selection (counting carets and
        assert_eq!(rope.offset_of_line(0), 0);
    }
                    result = cow_append(result, self.fragment);
        });
    deletes: Subset,
        let mut d_builder = Builder::new(TEST_STR.len());
                    }
    /// Get next codepoint after cursor position, and advance cursor.
            args: Some(SampleArgs {
                //// if we aren't on a boundary we can't be at the end of the chunk
                if is_base {
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        let trace = Trace::enabled(Config::default());
        // even though the actual sampling order (from timestamp of

            &rebased_deletes_from_union, &new_deletes_from_union);
    pub fn offset_of_line(&self, line: usize) -> usize {
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,

        MergeTestState::new(3).run_script(&script[..]);
            offset,
        if let Some(sel) = new_sel {
    /// The maximum number of entries the tracing data should allow.  Total
impl From<Vec<String>> for CategoriesT {

    pub metadata_name: Option<StrCow>,
}
                RenderTactic::Discard => {
/// }

        ]);
                     modify_selection: &SelectionModifier) {
            wrap_col: WrapWidth::None,
            deletes_from_union,

        let mut hasher = DefaultHasher::new();

    pub(crate) fn unset_find(&mut self) {
    /// Selects all find matches.
    {
                let offset = self.selection[0].start;

                self.start_drag(offset, offset, offset);
    /// should be as unlikely to collide as two random u64s.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    }
/// fn something_expensive() {
pub type TracePayloadT = StrCow;
            Assert(0, "zcbd".to_owned()),
    /// No wrapping in effect.
        }
    }
    DynamicArray(Vec<String>),
    }
    #[test]
    }
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
                self.set_selection_raw(text, selection);

            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;

//
        false
        assert!(r != a_rope);
                    priority, inserts, deletes,
        #------

}
    #[test]
    // * Code units in some encoding


        }

            Assert(1, "zpbj".to_owned()),
            trace.closure_payload("y", &["test"], || {
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {

    }
                },
    ///
            name: sample_name,
    /// Get text of a given revision, if it can be found.
        assert_eq!(None, a.prev_grapheme_offset(0));
                                deletes_bitxor: new_deletes_bitxor,

        if !self.is_enabled() {
        // a, b, y, z, c, x
/// The result of the closure.
    TRACE.instant_payload(name, categories, payload);

/// something_expensive();
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        let script = vec![
            name: sample_name,
//

        self.undone_groups = groups;
    }
            sample_limit_count: limit
        }
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        let last = max(last, 0) as usize;
                (drag_state.min, max(offset, drag_state.max))
            splitpoint


        let line = self.line_of_offset(text, end);
/// However, anything that can be converted into a Cow string can be passed as
            selection: SelRegion::caret(0).into(),
        }
        let mut selection = Selection::new();
                continue;
    }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
                        let (inserts, deletes) = if gc_dels.is_empty() {
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
                            max_undo_so_far: rev.max_undo_so_far,
        }
    }
                            styles: &StyleMap, style_spans: &Spans<Style>,
                }
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
impl Eq for CategoriesT {}
impl StringArrayEq<[&'static str]> for Vec<String> {

            // about what wrapped.
        let end = self.sel_regions().last().unwrap().end;
    } else {
    pub fn get_head_rev_id(&self) -> RevId {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
/// Usage of static strings is encouraged for best performance to avoid copies.
                        deletes: transformed_deletes,
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    #[cfg(feature = "benchmarks")]
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        let plan = RenderPlan::create(height, self.first_line, self.height);

    use test::Bencher;
        let line_len = MAX_LEAF + MIN_LEAF - 1;

    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    }
        let style = style_map.merge_with_default(style);

        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);

///

            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },

    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
                        };
                        } else {
            .map(|(i, _)| i)
    pub fn session_id(&self) -> SessionId {
    fn do_cancel(&mut self, text: &Rope) {

    #[serde(default = "default_session", skip_serializing)]
        let mut gc_dels = self.empty_subset_before_first_rev();
        let tombstones = Rope::from("27");
        }
            thread_name: Sample::thread_name(),

                          payload: Option<TracePayloadT>) -> Self
    // this is the cost contributed by the timestamp to
}
    ///

        assert_eq!(trace.get_samples_limit(), 11);
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
                let mut sel = Selection::new();
    let mut s = Subset::new(head_len);
            },


            first_line: 0,
            }
            rendered_styles.push((sel_start as isize) - ix);
    pub fn join(&self, sep: &str) -> String {
        let script = vec![
            Some(offset + len_utf8_from_first_byte(b))
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        let first_rev = engine.get_head_rev_id().token();
                        } else {
/// # Performance
        }

                    inserts: ins,
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
    pub fn with_limit_bytes(size: usize) -> Self {
// easily delta-compressed later.
        out.push(Revision {
            "op": op,
                            (inserts, deletes)
        count_utf16_code_units(&s[..in_base_units])
            // copy the current state
        if let Some(ix) = style_map.lookup(style) {
        }
#[inline]

    fn merge_idempotent() {

        if offset == 0 {
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    }
use client::Client;
        // position after 'f' in four
            word_cursor.select_word()
impl Trace {

        for u in s.chars() {
    /// Invalidates the styles of the given range (start and end are offsets within
{
                false => x.start
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        let inserted = inserts.inserted_subset();
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        }
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
        println!("{:#?}", delta_ops);
    /// Front end's line cache state for this view. See the `LineCacheShadow`

        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        where S: Into<StrCow>, C: Into<CategoriesT>
    sample: Option<Sample>,
        assert_eq!(rope.offset_of_line(4), rope.len());
impl Eq for CategoriesT {}
        let mut b = String::new();
    new_without_default_derive,
            Merge(1,2),
        if !self.is_point_in_selection(offset) {
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
            } else {
#[cfg(feature = "dict_payload")]
}
            FindNext { wrap_around, allow_same, modify_selection } =>
        priority: usize,
    }

                }
use movement::{Movement, region_movement, selection_movement};
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                }
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        // todo: for now only a single search query is supported however in the future
impl PartialEq for Sample {
                   r.lines_all().collect::<Vec<_>>());
        for region in self.selection.regions_in_range(start_pos, pos) {
        -##-
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    }
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
    #[test]
                        if !last_selection.is_caret() {
                            (inserts.transform_shrink(&gc_dels),
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        }
                    }
        let start_pos = start_of_line.pos();

    }

            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

                SelRegion::new(start, end)
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    ///
        deletes_from_union
    #[test]
                        line_num = seg.their_line_num + seg.n;
            Assert(0, "ab".to_owned()),
    }
#[derive(Clone, Debug, PartialEq, Eq)]

                    let new_gc_dels = if inserts.is_empty() {
            // TODO: on double or triple click, quantize offset to requested granularity.
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
            }
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
    }
        deletes_from_union = new_deletes_from_union;


        len
        let mut selections = Vec::new();
            client.scroll_to(self.view_id, line, col);

/// samples are ordered chronologically for several reasons:
    #[test]
        engine.undo([1].iter().cloned().collect());
    fn prev(s: &String, offset: usize) -> Option<usize> {
        if let Some(exe_name) = exe_name() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        self.drag_state = None;
}
//
        d.insert(StrCow::from("test"), StrCow::from(value));
        if let Some(lines) = lines {
                    self.do_gesture(text, line, column, GestureType::PointSelect)

        last_line += if last_col > 0 { 1 } else { 0 };
        }
///     something_expensive()
        }
    pub fn offset_of_line(&self, line: usize) -> usize {
    }
            SampleEventType::AsyncInstant => 'n',
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        let new_head = engine.get_head_rev_id().token();
        let initial_rev = engine.get_head_rev_id().token();
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        assert_eq!("herald", String::from(a));


        }
    ///
        let script = vec![
        }

    /// Storage for all the characters that have been deleted  but could
    }
            Merge(0,1),

    fn test_get_samples() {


    }
            undo_group: 0,
    #[bench]
        MergeTestState::new(2).run_script(&script[..]);
        assert_eq!(utf8_offset, 13);
            //} else {
    }
        a.push('\n');
        let max_line = self.measure::<LinesMetric>() + 1;
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
        assert_eq!(snapshot[4].name, "z");
use std::hash::{Hash, Hasher};
            GestureType::MultiWordSelect =>
impl MetadataType {
        }
    pub fn get_samples_limit(&self) -> usize {

}
    pub fn offset_of_line(&self, line: usize) -> usize {
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
            }),
    let mut utf16_count = 0;
    }
        // since character was inserted after gc, editor gcs all undone things
//! An engine for handling edits (possibly from async sources) and undo. It
        let end = self.line_col_to_offset(text, line + 1, 0);
        let inserts = parse_subset_list("
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    s.serialize_char(ph.into_chrome_id())
                    text.slice_to_string(start, end)
    #[test]
                return None;
        }
                s.len()
        a.lines_all().collect::<Vec<_>>());
        // NOTE: we derive to an interim representation and then convert
        self.lines_raw(0, self.len())
    #[test]
// See the License for the specific language governing permissions and
        let first_rev = engine.get_head_rev_id().token();
    None,
                warn!("Usage of click is deprecated; use do_gesture");
    pub fn with_limit_count(limit: usize) -> Self {
            None => None
            if region.is_caret() {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
                        b.add_span(seg.n, 0, 0);

        self.set_selection(text, sel);
        all_samples.reset_limit(config.max_samples());

        let mut selection = Selection::new();

    pub fn new_duration<S, C>(name: S,

                        _ => break
pub fn trace<S, C>(name: S, categories: C)
    #[test]
    }
            }
                metadata_name: None,
                        if n_skip > 0 {
    /// Replacement string.
                (region.is_upstream() && c == pos) ||
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
            // if using breaks update cursor
    for r in revs {
            SelectionForReplace => self.do_selection_for_replace(text),
        assert!(a != b);

            SampleGuard::new(&self, name, categories, Some(payload.into()))
            //if self.cursor.is_boundary::<BaseMetric>() {
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
                    };
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        // position after 'f' in four

        let rope = Rope::from("hi\ni'm\nfour\nlines");
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
            .map(|pos| pos + 1)
    sample: Option<Sample>,
        }
            None
        trace.closure_payload("x", &["test"], || (),
/// However, anything that can be converted into a Cow string can be passed as
        where D: serde::Deserializer<'de>
        rope.offset_of_line(5);
        // This might be an over-specified test as it will


        let (first_line, _) = self.offset_to_line_col(text, region.min());
                    e.edit_rev(p, u, head, delta.clone());
    // trace_block()/trace_closure
        if let Some(sel) = new_sel {
        } else {
            }
        let d = engine.delta_rev_head(first_rev);
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
        let mut b = TreeBuilder::new();
            return false;
#[derive(Clone, Copy)]
            Assert(0, "b".to_owned()),
    }
        let first_rev = engine.get_head_rev_id().token();
    DurationBegin,
    #[derive(Debug)]


        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
                        let _ = s.pop();
        let b = a.slice(1, 10);
            GestureType::MultiLineSelect =>
            Insert(String),
categories_from_constant_array!(6);
        // invert the changes to deletes_from_union starting in the present and working backwards

        assert_eq!(Some(0), a.prev_grapheme_offset(3));
//
        (Revision {
impl Config {
#[macro_use]
    }
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
extern crate test;
        let trace = Trace::disabled();
            "ops": ops,
pub enum SampleEventType {
    fn do_cancel(&mut self, text: &Rope) {
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);


        for _ in 0..line_len {
        ");
        let r = Rope::from(&a[..MAX_LEAF]);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
}
        let tombstones_b = Rope::from("a");
        for _ in 0..line_len {
    }
        assert_eq!(r.len(), r.offset_of_line(2));
            AssertAll("ac".to_owned()),
                }
        b.iter(|| {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        }
            'i' => SampleEventType::Instant,
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
///
        info.lines

    }
    }
    /// this returns the offset of the end of the rope. Arguments higher
    #[bench]
        engine.undo([3].iter().cloned().collect());
    #[cfg(feature = "benchmarks")]
        Merge(usize, usize),
/// For example, take a string that starts with a 0xC2 byte.
            }
/// an argument.
    /// Returns the regions of the current selection.
                name, categories, None, start, end - start));


    #[test]
                                gc_dels = gc_dels.transform_expand(inserts);
            }

        leaf.as_bytes()[pos]
/// configured via the `dict_payload` or `json_payload` features (there is an
            inserts = inserts.transform_expand(trans_inserts, after);

    ObjectCreated,
    /// Tracks whether there has been changes in find results or find parameters.
    pub(crate) fn get_view_id(&self) -> ViewId {

        while offset < l.len() && !l.is_char_boundary(offset) {
}
        offset

        self.set_dirty(text);
    }
            }, to_payload("test_get_sorted_samples"));
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
                let line = line.min(text.measure::<LinesMetric>() + 1);

            l[offset..].chars().next()

    fn from(c: Vec<String>) -> CategoriesT {
                            }
    fn accumulate(&mut self, other: &Self) {
        // A with ring, hangul, regional indicator "US"
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
            enabled: AtomicBool::new(false),
            self.record(Sample::new_instant(name, categories, None));
            Some(region) => {

}
            }),
            while !s.is_char_boundary(splitpoint) {
    fn bench_get_tid(b: &mut Bencher) {
                            (inserts, deletes)

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();


/// Contains replacement string and replace options.
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
}
        }
        ];
                    let (start, end) = self.peers.split_at_mut(ai);
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        }, to_payload("test_get_sorted_samples"));
    }
        }
    TRACE.is_enabled()
    }
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
        /// and new deletes_from_union
    pub fn collapse_selections(&mut self, text: &Rope) {
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
            Merge(1,0),
#[derive(Serialize, Deserialize, Debug)]
use xi_rope::tree::Cursor;
            // copy the current state
        }
            DeltaElement::Copy(ref start, ref end) => {


            let mut word_cursor = WordCursor::new(text, offset);
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    }
    fn eq_small() {
        // TODO: simplify this through the use of scopeguard crate
    /// No wrapping in effect.
        assert_eq!(a.len(), r.offset_of_line(1));


    #[test]
/// typing a paragraph) will be combined into a single segment in a transform

        Self {
            Merge(0,1),
        assert_eq!(0, b.line_of_offset(1));

        trace.disable();
                RenderTactic::Preserve => {
/// ```
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let text_with_inserts = text_ins_delta.apply(&self.text);
}
    fn gc_5() {
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            AddSelectionAbove =>
        #---
#[inline]
        let mut r = Rope::from("27");
            match c.edit {
                if is_base {
                                                          new_len, col),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
                    let _ = s.pop();
            last_line -= 1;
// limitations under the License.
            }
        let a = Rope::from("a\nb\nc");
        fn run_op(&mut self, op: &MergeTestOp) {
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        assert_eq!(snapshot[5].name, "b");
        rope.offset_of_line(5);
    }
    /// You could construct the "union string" from `text`, `tombstones` and
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
    current: Option<&'a str>,
    /// End of the region selected when drag was started.
                              to_payload("test_get_samples"));
    fn edit_rev_undo_2() {
        assert_eq!(0, b.offset_of_line(0));
    #[serde(rename = "xi_payload")]
        let new_head = engine.get_head_rev_id().token();
//
        let (start, end) = {
        let tombstones = Rope::from("27");
    fn gc_5() {
        let params = json!({
        // send updated find status only if there have been changes
    ///
///
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    }
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            s.as_bytes()[offset - 1] == b'\n'
                        first_sample_timestamp,
        assert_eq!(snapshot[1].name, "thread_name");
        offset
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
    /// New offset to be scrolled into position after an edit.
        });
                self.set_dirty(text);
        // ensure that when the samples are sorted by time they come out in a
        next_boundary.unwrap_or(None)
                } else if click_count == Some(3) {
use xi_rope::delta::Delta;
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
// You may obtain a copy of the License at
use unicode_segmentation::GraphemeIncomplete;
//     http://www.apache.org/licenses/LICENSE-2.0
                self.set_dirty(text);
        engine.undo([1,2].iter().cloned().collect());
        b if b < 0xf0 => 3,

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                            if !deletes.is_empty() {
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    #[serde(rename = "ts")]
        if self.is_enabled() {
        cur_len_utf8
            'N' => SampleEventType::ObjectCreated,
        // NOTE 2: from_micros is currently in unstable so using new
            // Snap to grapheme cluster boundary
    fn line_of_offset_panic() {
    }
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        AssertAll(String),
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                         hls: &[(usize, usize)],
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
        let chars_left = (edits-max_undos)+1;
    fn bench_trace_block_disabled(b: &mut Bencher) {
    }
                        &mut rest[bi - ai - 1]
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        if let Some(exe_name) = exe_name() {
}
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    #[bench]
    }

    }
/// Returns the file name of the EXE if possible, otherwise the full path, or
            b.push('b');
                            }
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
    /// New offset to be scrolled into position after an edit.
        self.find_changed = FindStatusChange::Matches;
        Self {
/// let mut a = Rope::from("hello world");
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            text: Rope::default(),
        trace.closure_payload("x", &["test"], || (),
        (Revision {
#[macro_use]
        ---#--
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
                                         self, text, modify);
        update
    }
                         start: usize, end: usize, sel: &[(usize, usize)],
    }
    }
/// Measured unit is utf8 code unit.
/// Usage of static strings is encouraged for best performance to avoid copies.
        } else {
        b.push(self);
                } else if click_count == Some(3) {
                            if !inserts.is_empty() {
    fn gc_scenario(edits: usize, max_undos: usize) {
#![cfg_attr(feature = "benchmarks", feature(test))]

        revs.append(&mut revs_3);
use xi_rope::delta::Delta;
    /// The state for finding text for this view.
        engine.edit_rev(1, edits+1, head, d1);
            ModifySelection(movement) => self.do_move(text, movement, true),
        /// Used to order concurrent inserts, for example auto-indentation
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    }
            inserts: Subset::new(0),
                MergeTestOp::AssertAll(ref correct) => {
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        trace.instant("2", &["test"]);
                        },
    use multiset::Subset;
                    let _ = s.pop();
    /// The line number is 0-based.

    /// Move the selection by the given movement. Return value is the offset of
    }
                self.do_find(text, chars, case_sensitive, regex, whole_words),
                offset = prev;
    }
        deletes: Subset,

        assert!(a != b);
        let mut line_num = 0;  // tracks old line cache
    }
        // update only find highlights affected by change
    #[allow(dead_code)]
            AssertMaxUndoSoFar(0,2),
        trace.instant("2", &["test"]);
    }
            self.next::<BaseMetric>();
/// Also note: in addition to the `From` traits described below, this module


                           style: &Style) -> usize {
///

            match c.edit {
/// the session ID component of a `RevId`
            trace.closure_payload("y", &["test"], || {
        let expand_by = compute_transforms(a_revs);
            }
        },
        a.push('\n');
        let trace = Trace::enabled(Config::default());
            }
        assert_eq!(4, a.offset_of_line(2));
impl<'de> serde::Deserialize<'de> for CategoriesT {
                },
        let mut engine = Engine::new(Rope::from(TEST_STR));
}

            self.find.push(Find::new());
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let mut cursors = Vec::new();
    }
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
            GestureType::LineSelect =>
    }
    }
            if region.is_caret() {
                _ => { }
}

        let script = vec![
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
    }
        let trace = Trace::disabled();
        self.utf16_size += other.utf16_size;

    Bytes(usize),
use delta::{Delta, InsertDelta};
                }
        assert_eq!(snapshot[6].name, "z");
    fn eq(&self, other: &Sample) -> bool {
    pub width: f64,
    offset: usize,
        /// The subset of the characters of the union string from after this
    /// Splits current selections into lines.
/// are shared.
                MetadataType::ProcessName {name: exe_name},
        assert_eq!(snapshot[0].name, "process_name");
    /// List of categories the event applies to.
        }, new_text, new_tombstones, new_deletes_from_union)
//     http://www.apache.org/licenses/LICENSE-2.0

    pub fn new(initial_contents: Rope) -> Engine {
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());

            for &occurrence in find.occurrences().iter() {

            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    ///

            l[offset..].chars().next()
    }
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
            Assert(0, "acrbd".to_owned()),
//! There is also a full CRDT merge operation implemented under
        // current recording mechanism should see:
        assert_eq!(0, a.offset_of_line(0));
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
/// feature makes the payload a `serde_json::Value` (additionally the library
        ];
            Assert(2, "adfc".to_owned()),

        b.push('\n');
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
            Merge(2,0),
        let (leaf, pos) = cursor.get_leaf().unwrap();
    if x < min {

                    }


            false => Selection::new(),
                        .map(DeltaElement::from).collect(),
        println!("{:#?}", b_delta_ops);
            max: offset,
        /// together. For example, an auto-indent insertion would be un-done
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        #------
            Click(MouseAction { line, column, flags, click_count }) => {
impl FromStr for Rope {
        value
        }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                                          closure: F, payload: P)

            pos += 1;
        let height = self.line_of_offset(text, text.len()) + 1;
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
#[cfg(feature = "json_payload")]
    fn len(&self) -> usize {

        }
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    pub fn token(&self) -> RevToken {
            inserts: Subset::new(0),
struct Revision {
    view_id: ViewId,
        let mut retain_revs = BTreeSet::new();
        assert_eq!(snapshot[7].name, "c");
    }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        };
/// }
    fn add(self, rhs: Rope) -> Rope {


            enabled: AtomicBool::new(false),
    }
                self.select_word(text, offset, true)
                    if s.ends_with('\r') {
        MergeTestState::new(3).run_script(&script[..]);
            Merge(1,0),


            Assert(0, "adfc".to_owned()),

    /// This case is a regression test reproducing a panic I found while using the UI.
    }
///

    #[should_panic]
            's' => SampleEventType::FlowStart,
/// acquires a dependency on the `serde_json` crate.
    #[serde(skip_serializing_if = "Option::is_none")]
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
        self.subseq(iv)
/// }

    }
        let first_rev = engine.get_head_rev_id().token();
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);

            deletes: Subset::new(0),
        let expand_by = compute_transforms(revs);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    FlowInstant,
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            while !s.is_char_boundary(offset - len) {
            Assert(2, "ab".to_owned()),
/// ```
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
                self.select_word(text, offset, false),
                         style_spans: &Spans<Style>) -> Vec<isize>
                            max_undo_so_far: rev.max_undo_so_far,
    fn can_fragment() -> bool { true }
    TRACE.is_enabled()
        }
        for chunk in self.iter_chunks(start, end) {

impl From<Rope> for String {
    fn to_payload(value: &'static str) -> &'static str {
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {

        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
categories_from_constant_array!(6);
            },

                    let transformed_deletes = deletes.transform_expand(&s);
        assert_eq!(utf8_offset, 9);

    /// Exposed for unit tests only.
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
                        let end_line = start_line + seg.n;
    pub timestamp_us: u64,

        assert_eq!(Some(2), b.prev_codepoint_offset(5));
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size

    #[cfg(feature = "benchmarks")]
                }
    #[test]
                                                          new_len, col),
                                                    self.size.width));
    base_sel: Selection,
        }
}
        ");
            let (start, end) = if offset < drag_state.offset {
                                toggled_groups: &toggled_groups - gc_groups,
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
// ======== Merge helpers
        ");
            } else {
                      delta: &Delta<RopeInfo>, client: &Client,
        let sample_name = to_cow_str(meta.sample_name());
            AssertMaxUndoSoFar(1,1),
        let mut line_num = 0;  // tracks old line cache
extern crate log;
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
                warn!("Usage of click is deprecated; use do_gesture");


                    } else {
        r.slice_to_string(0, r.len())
// utility function to clamp a value within the given range
        self.sample_limit_count
            },


    fn invalidate_selection(&mut self, text: &Rope) {
            // Do it the other way on the copy
        }

        if self.find.is_empty() {

///
            None
        engine.undo([1,2].iter().cloned().collect());
    }
    #[test]
    #[serde(rename = "xi_payload")]
            // copy the current state
        count_newlines(&s[..in_base_units])
        let mut ops = Vec::new();

                }


/// See `trace_payload` for a more complete discussion.
        self.undone_groups = groups;
        assert_eq!(r.len(), r.offset_of_line(2));

                    if undone_groups.contains(undo_group) {
impl TreeBuilder<RopeInfo> {
        b.push('\n');
    }
        Self {
// Licensed under the Apache License, Version 2.0 (the "License");
        if let Some((l, offset)) = self.get_leaf() {
            None
    pub width: f64,
    /// The thread the sample was captured on.  Omitted for Metadata events that
                    return Some(result);
    /// Find the first revision that could be affected by toggling a set of undo groups
                    let sel_start = cursor.pos();
            Move(movement) => self.do_move(text, movement, false),
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(snapshot[0].name, "process_name");

    fn arr_eq(&self, other: &[&'static str]) -> bool {
        rope.line_of_offset(20);
            return 0;
        ).min_by_key(|x| {
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                } else {
        } else {
    ///
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    /// Selects an entire word and supports multi selection.
            rebased_deletes_from_union.union(to_delete)
    rev_id: RevId,
                }

        ids.iter().cloned().map(|i| {

        a.push('\n');
    type Err = ParseError;
                        .map(DeltaElement::from).collect(),
        let a = Rope::from("a\rb\rc");
        self.timestamp_us == other.timestamp_us &&
    }
                Some(i) => {
/// Disable tracing.  This clears all trace data (& frees the memory).

    ///

        offset
        let d = RopeDelta_::deserialize(deserializer)?;
        }
                    result = cow_append(result, self.fragment);
        }
            pos -= 1;
    /// ties in edit priorities. Otherwise the results may be inconsistent.
    session1: u64,
    fn undo_3() {
        x
        let trace = Trace::enabled(Config::default());
            }),

    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    // * Unicode width (so CJK counts as 2)
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
    pub timestamp_us: u64,
    #[test]
        s.is_char_boundary(offset)
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        }
    TRACE.instant(name, categories);
                        }
 //additional cursor features
    }
        #------
        for _ in 0..in_measured_units {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        where D: Deserializer<'de>,
                    }
            if !s.is_empty() {
    }
    pub duration_us: Option<u64>,
    fn offset_of_line_panic() {
        match self.breaks {
    }
    fn bench_trace_block(b: &mut Bencher) {
    // this is the cost contributed by the timestamp to trace()
            Assert(1, "ab".to_owned()),
                client.replace_status(self.view_id, &json!(replace))
    #[test]
        result
    fn prev(s: &String, offset: usize) -> Option<usize> {
        // This might be an over-specified test as it will

    fn from(s: T) -> Rope {
        // TODO: simplify this through the use of scopeguard crate
                    selection.add_region(occ);
        self.find_changed = FindStatusChange::Matches;
        let a = Rope::from("a\rb\rc");
        }
use edit_types::ViewEvent;
        gc_scenario(4,3);

            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
                    "something", &["benchmark"], || {},
    (out, text, tombstones, deletes_from_union)
                if s.ends_with('\n') {
        --#--
    // * Unicode codepoints
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
//! `Engine::merge`, which is more powerful but considerably more complex.
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
/// first can make it ~1.7x slower than a regular trace.
        // current recording mechanism should see:
    }
            match memchr(b'\n', self.fragment.as_bytes()) {
    ///
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    /// Returns a slice of the string from the byte range [`start`..`end`).
}
            // shouldn't be called with this, but be defensive
impl<'a> Cursor<'a, RopeInfo> {
    }

    highlight_find: bool,
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    pub thread_name: Option<StrCow>,

    }
impl<'de> serde::Deserialize<'de> for CategoriesT {
    }
            samples: Mutex::new(FixedLifoDeque::new())
                    // of which undos were used to compute deletes_from_union in edits may be lost.
    move_delta.apply(tombstones)
    #[test]
use selection::{Affinity, Selection, SelRegion};
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));

        // of the delta so we can set the cursor before or after the edit, as needed.
        let first_sample_timestamp = all_samples.front()
            ix = iv.end() as isize;
        let mut line_num = 0;  // tracks old line cache
                        Some(end) => max(0, end - 1),
                    b.add_span(seg.n, 0, 0);
        assert_eq!(rope.offset_of_line(4), rope.len());

                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
            self.collapse_selections(text);
    use std::collections::BTreeSet;
            .map(|(i, _)| i)
    #[test]
    session2: u32,
            //}
}
                    }
    #[test]

            let max_undo = self.max_undo_group_id();
        // is the new edit in an undo group that was already undone due to concurrency?
    #[test]
                    };
}
                    let transformed_inserts = inserts.transform_expand(&s);
            b.push('b');
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
        assert_eq!(snapshot[4].name, "y");
/// However, anything that can be converted into a Cow string can be passed as
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
}
        -##-
use std::fmt;

    }
                if is_base {
            let to_delete = if undone { &new_inserts } else { &new_deletes };
    /// This is used to determined whether FindStatus should be sent to the frontend.
    #[test]
        gc_scenario(4,3);
    #[bench]
            if inserts.is_empty() {
        for mut find in self.find.iter_mut() {
                    text.slice_to_string(region.min(), region.max())


                self.select_line(text, offset, line, false),
            trace.closure("test_samples_closure", &["test"], || {});
        assert_eq!("#---#--", &subset_str);
                    let e = &mut self.peers[ei];
const MIN_LEAF: usize = 511;
        assert_eq!(utf8_offset, 9);
        use self::MergeTestOp::*;

        (Revision {
    }
use std::fmt;
    find: Vec<Find>,
            Gesture { line, col, ty } =>
    #[test]

        self.deletes_from_union = new_deletes_from_union;
                    if !deletes.is_empty() {
        }
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
    ///
            Assert(0, "zacpbdj".to_owned()),
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
                self.set_dirty(text);
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let tombstones_a = Rope::from("a");

            //leaf.len() - start_pos
    /// is optional.

            }
            Merge(5,4),
        } else {
    fn bench_trace_block_payload(b: &mut Bencher) {
}
use std::collections::BTreeSet;
                metadata_sort_index: None,
        while let Err(incomp) = next_boundary {
            ix = sel_end as isize;
        let line = self.line_of_offset(text, offset);
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
            sel.add_region(
    }
//
        // +2 for exe & thread name
// ======== Merge helpers
            None => None
            match exe_name.clone().file_name() {

        }
    /// List of categories the event applies to.


                    }
    /// If `modify` is `true`, the selections are modified, otherwise the results
    out.as_mut_slice().reverse();
        assert_eq!(Some(3), a.next_grapheme_offset(0));
    /// they would be if they hadn't been deleted.
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
    {
    inner: ChunkIter<'a>,
    }
        }
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        b.iter(|| {
    }
        assert_eq!(utf8_offset, 19);
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};


    sample: Option<Sample>,
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let max_line = self.measure::<LinesMetric>() + 1;
    // possible to fix it so that's not necessary.
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        let (mut l, mut offset) = self.get_leaf()?;
            cursor: Cursor::new(self, start),
                        first_sample_timestamp,
        for _ in 0..line_len {

                    let (mut a, rest) = end.split_first_mut().unwrap();
        count_newlines(&s[..in_base_units])
    fn line_offsets() {
        let r = Rope::from(&a[..MAX_LEAF]);
        if self.len() != other.len() {

        Lines {
                    sel.add_region(region);
            't' => SampleEventType::FlowInstant,

        ];
        };
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
        engine.gc(&gc);

//
    }
            }
        if offset >= next_line_offset {
    }
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure

    //TODO: implement iter_chunks using ranges and delete this
            inner: self.iter_chunks(start, end),

        b.set_dirty(true);
    #[serde(serialize_with = "serialize_event_type")]
    }
            Merge(1,2),
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    }
        for region in self.selection.regions_in_range(start_pos, pos) {
    /// Width in px units, requiring measurement by the front-end.
        }
//
    }
    #[bench]
    #[serde(skip_serializing_if = "Option::is_none")]
            Assert(0, "acrbdz".to_owned()),
            return;
    fn identity() -> Self {

    /// Tracks whether find highlights should be rendered.
    // this is the cost contributed by the timestamp to
    fn bench_trace_block_disabled(b: &mut Bencher) {
    }
            deletes_from_union,
/// # Performance
struct DeltaOp {
        assert_eq!(2, a.line_of_offset(4));

///
    }

        d_builder.delete(Interval::new_closed_open(58, 61));
        let revs = basic_insert_ops(inserts, 1);
            Assert(0, "acbd".to_owned()),
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
        // a, b, y, z, c, x
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        assert_eq!(1, a.line_of_offset(3));
    fn edit_rev_concurrent() {

        MergeTestState::new(2).run_script(&script[..]);
        assert_eq!(0, a.line_of_offset(1));
/// Atomicity is implicit, putting the offset
        }
        self.push_str(&other[start..end]);


    /// Exposed for unit tests only.
                self.run_op(op);
/// an argument.
        }
    }

// You may obtain a copy of the License at
// Additional APIs custom to strings
    }
/// });
                    };
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        let after_first_edit = engine.get_head_rev_id().token();

            .map(|(i, _)| i)
        assert_eq!(correct, rearranged_inserts);
    }
        engine.undo([1,2].iter().cloned().collect());
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
        // Any edit cancels a drag. This is good behavior for edits initiated through
        self.set_selection(text, sel);
        self.revs.append(&mut new_revs);
    fn do_selection_for_replace(&mut self, text: &Rope) {
            pid: sys_pid::current_pid(),
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
            None
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
    }
        use std::hash::{Hash, Hasher};

    /// Get the contents of the document at a given revision number
    /// If `line` is equal to one plus the current number of lines,
    /// of individual region movements become carets.
use styles::{Style, ThemeStyleMap};
                            deletes_bitxor
    pub fn new_duration_marker<S, C>(name: S,
        all_samples.reset_limit(0);
        ----#

/// fn something_expensive() {


    /// Exposed for unit tests only.
                self.select_word(text, offset, false),
        }
/// * `name` - A string that provides some meaningful name to this sample.
///
                name, categories, None, start, end - start));
        let mut revs = basic_insert_ops(inserts_1, 1);
        b.push('\n');
            for (i, op) in script.iter().enumerate() {
    height: usize,
            duration_us: None,
    fn utf16_code_units_metric() {
        }
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,

                        priority, undo_group,
            categories: Some(categories.into()),

}
    fn utf16_code_units_metric() {
        use self::MergeTestOp::*;
impl Eq for Sample {}
//! There is also a full CRDT merge operation implemented under
    {
            deletes = deletes.transform_expand(&new_trans_inserts);
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
                },
        // rebase the deletion to be after the inserts instead of directly on the head union
        }
                        let _ = s.pop();
            self.shrink_to_fit();
    // and partly because you need to retain more undo history, to supply input to the
    }

        {
                    s = &s[..s.len() - 1];
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());

            self.next()
}


        Assert(usize, String),
            Merge(1,0), Merge(2,0),
use internal::find::FindStatus;
        // position after 'f' in four
                SelRegion::new(start, end)
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
                          payload: Option<TracePayloadT>) -> Self
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
//     http://www.apache.org/licenses/LICENSE-2.0
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
// utility function to clamp a value within the given range
    /// the pid or the tid depends on the name of the event
            for find in self.find.iter() {
        },
    }
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        let script = vec![
        let head_rev = &self.revs.last().unwrap();
    fn bench_trace_instant(b: &mut Bencher) {
extern crate libc;
    /// We attempt to reduce duplicate renders by setting a small timeout


                } else {
// limitations under the License.
    StaticArray(&'static[&'static str]),
///

            Merge(1,0), Merge(2,0),
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Assert(0, "ab".to_owned()),
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
    {
        cur_len_utf8

    TRACE.closure(name, categories, closure)
    #[should_panic]
    #[serde(skip_serializing_if = "Option::is_none")]
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
/// Indicates what changed in the find state.
        a.push('\n');
            }
        let a = Rope::from("a\nb\n");
            't' => SampleEventType::FlowInstant,
use std::sync::Mutex;

        // the smallest values with which it still fails:
        if b >= 0xf0 {
    /// Sorting priority between processes/threads in the view.
        ----
        }).collect();

    }
            r = op.inserts.apply(&r);
                        })
use std;
        engine.edit_rev(0, 2, first_rev, build_delta_2());

                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
            Merge(1,2),
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);

                    }
                }
                    self.fragment = &self.fragment[i + 1 ..];

                        }
    // TODO make this faster somehow?
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        // insert a character at the beginning
                for region in find.occurrences().regions_in_range(start_pos, pos) {
    selection: Selection,
        while !s.is_empty() {
    }
use tabs::{ViewId, BufferId};
}
/// Usage of static strings is encouraged for best performance to avoid copies.
    Matches
    #[cfg(feature = "benchmarks")]

        self.replace_changed = true;

        self.text = new_text;
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    rev_id_counter: u32,
        while let Err(incomp) = next_boundary {

// line iterators

                false => x.start
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
    }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
    /// Replacement string.
            inserts = inserts.transform_expand(trans_inserts, after);
    pub fn default() -> Self {
// You may obtain a copy of the License at
    #[bench]
                    let head = e.get_head_rev_id().token();
//
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size

            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
pub struct LinesMetric(usize);  // number of lines
            black_box(time::precise_time_ns());
    }

// ======== Generic helpers
        // spam cmd+z until the available undo history is exhausted
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
            undone_groups: BTreeSet::new(),

            SelectAll => self.select_all(text),

                while cursor.pos() < region.max() {
        self.set_selection(text, SelRegion::caret(offset));
        } else {
        use self::MergeTestOp::*;
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
    let mut out = Vec::with_capacity(revs.len());
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        }
        -> SampleGuard
                                gc_dels = gc_dels.union(deletes);
            .map(|pos| offset + pos + 1)
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
        assert!(r != b_rope + a_rope);
        engine.undo([3].iter().cloned().collect());
        trace.closure_payload("x", &["test"], || {
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        let height = self.line_of_offset(text, text.len()) + 1;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
/// # Examples

// you may not use this file except in compliance with the License.
/// Base unit is utf8 code unit.
enum MetadataType {
    ///
        } else {
    /// borrowed from the rope.
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
    }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
/// ```
            last_line -= 1;
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
    }
                }
    lc_shadow: LineCacheShadow,
        let script = vec![
    fn next(&mut self) -> Option<u8> {
///

fn find_leaf_split(s: &str, minsplit: usize) -> usize {
                   whole_words: bool) {
    /// The current contents of the document as would be displayed on screen
                        let n_skip = seg.their_line_num - line_num;
#[cfg(test)]

                },
                match self.inner.next() {
/// associated performance hit across the board for turning it on).
// ======== Merge helpers

    }
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
    }
    AsyncEnd,
/// An element in a `RopeDelta`.
               a.lines_all().collect::<Vec<_>>());
    /// Tracks whether this view has been scheduled to render.
                }

    pub(crate) fn get_replace(&self) -> Option<Replace> {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
enum WrapWidth {


        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);

            MetadataType::ProcessLabels {..} => "process_labels",
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed



                    }

    pub fn lines_raw_all(&self) -> LinesRaw {
    pub pid: u64,
        Ok(b.build())
            'N' => SampleEventType::ObjectCreated,
                },
        let mut engine = Engine::new(Rope::from(TEST_STR));
    ///

impl<'de> Deserialize<'de> for Rope {


        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {

    /// assumed to be forward).
        }
    #[test]
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    let mut out = Vec::with_capacity(revs.len());
    /// For safety, this will panic if any revisions have already been added to the Engine.
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
                    let (start, end) = {
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
            find.set_hls_dirty(false)
            // Snap to grapheme cluster boundary
        // TODO: refine for upstream (caret appears on prev line)
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

                self.select_line(text, offset, line, false),

    // Note: this function would need some work to handle retaining arbitrary revisions,
    /// Selects an entire word and supports multi selection.
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
                if groups.contains(undo_group) {
        trace.closure_payload("z", &["test"], || {},
        let contents = match rev.edit {
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
        ]);
        }
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
            } else if incomp == GraphemeIncomplete::PrevChunk {
//! This module actually implements a mini Conflict-free Replicated Data Type
                           styles: &StyleMap, style_spans: &Spans<Style>,
        selection.add_region(region);
        assert_eq!(Some(0), b.prev_codepoint_offset(2));

///
        fn run_script(&mut self, script: &[MergeTestOp]) {
        }
        let new_deletes_from_union = {
        assert!(empty == empty);
            let c = region.end;
            Merge(2,3),
    let mut out = Vec::with_capacity(revs.len());


        self.lines_raw(0, self.len())
/// fn something_expensive() {

            base_sel: selection.clone(),
        let mut engine = Engine::new(Rope::from(""));
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
///
        if !new_inserts.is_empty() {
            timestamp_us: ns_to_us(time::precise_time_ns()),

    TRACE.get_samples_count()
                true => x.end,
                },
    fn drop(&mut self) {
        assert_eq!(0, b.line_of_offset(0));
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            for (i, op) in script.iter().enumerate() {

    // callers should be encouraged to use cursor instead
        }
            Assert(0, "acrbd".to_owned()),
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    /// This function will panic if `offset > self.len()`. Callers are expected to
#[macro_use]
                // TODO: small nit, merged region should be backward if end < start.
    if x < min {

    /// Note: `edit` and `edit_str` may be merged, using traits.
        while offset < l.len() && !l.is_char_boundary(offset) {
    // There will probably never be a document with more than 4 billion edits
        ---#--
    }
    replace: Option<Replace>,

        let s = String::deserialize(deserializer)?;

    fn find_common_1() {
        }
                                                                0, "copy", 2)?;
        // TODO(vlovich): optimize this path to use the Complete event type



    pub fn disabled() -> Self {
            .map(|pos| pos + 1)
            }

        (line, offset - self.offset_of_line(text, line))
        MergeTestState::new(2).run_script(&script[..]);
mod tests {
            }
        // even though the actual sampling order (from timestamp of
        let mut leaf_offset = pos - offset;
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
            let matches_only = self.find_changed == FindStatusChange::Matches;
    fn do_selection_for_replace(&mut self, text: &Rope) {
        let mut ix = 0;
    /// in the range of 511-1024 bytes.
/// supported as an optimization when only one reference exists, making the
enum Contents {
    {
    /// This case is a regression test reproducing a panic I found while using the UI.
        }
impl Metric<RopeInfo> for LinesMetric {
                if self.fragment.is_empty() {
                    }
/// # Arguments
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    // recompute the prefix up to where the history diverges, but it's not clear that's
/// ```
                Contents::Edit {inserts, ..} => inserts,
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
        }
        let _t = trace_block("View::wrap_width", &["core"]);
            match rev.edit {

        let trace = Trace::enabled(Config::with_limit_count(10));
        self.len()
///

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Assert(0, "zcpbdj".to_owned()),
        assert_eq!(trace.get_samples_limit(), 0);
                if rev.max_undo_so_far < lowest_group {
            MetadataType::ThreadName {..} => "thread_name",

pub type RopeDeltaElement = DeltaElement<RopeInfo>;
        // creation) is:

}
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        engine.undo([1].iter().cloned().collect());
                text.offset_of_line(line)
use find::Find;
    // * Actual measurement in text layout
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
            }
        Cow::from(a.into_owned() + b)

// You may obtain a copy of the License at
    sample_limit_count: usize
                match self.inner.next() {
            // with offset == 0, but be defensive.
            match seg.tactic {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    type Item = &'a str;
            Assert(1, "ab".to_owned()),
        for i in 0..edits {
                                                     "insert", node)
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        Self::with_limit_bytes(1 * 1024 * 1024)
            lc_shadow: LineCacheShadow::default(),
            Assert(1, "pb".to_owned()),
        }
/// typing a paragraph) will be combined into a single segment in a transform
                    let b = if bi < ai {
}
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    let mut utf16_count = 0;
                // TODO: small nit, merged region should be backward if end < start.

        self.revs.push(new_rev);
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        let trace = Trace::enabled(Config::default());
    pub pid: u64,
                    } else {
    #[test]
/// assert!("hello world" == String::from(a + b));
use fixed_lifo_deque::FixedLifoDeque;
impl<'de> serde::Deserialize<'de> for CategoriesT {
                    result = cow_append(result, self.fragment);

    fn gc() {
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            args: Some(SampleArgs {
pub struct LinesRaw<'a> {
            update["lines"] = json!(lines);
        let end = time::precise_time_ns();
        }
        assert_eq!(0, a.line_of_offset(1));
}

    selection: Selection,
impl Engine {
    /// they would be if they hadn't been deleted.
        let mut b = TreeBuilder::new();
        // and it only needs to be consistent over one execution.
    /// This is a regression test to ensure that session IDs are used to break
#[inline]
use std::cmp;
        base_subset.is_some() && base_subset == other_subset
        assert_eq!(snapshot[6].name, "z");
                        priority, undo_group,
            match memchr(b'\n', self.fragment.as_bytes()) {
        let mut b = line_cache_shadow::Builder::new();
        }
        }
    #[bench]
/// discussion on payload.
    #[test]
    }
    let mut utf16_count = 0;
/// beginning.
            for &occurrence in find.occurrences().iter() {
        let text = Rope::from("13456");
            Some(b)
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    }
        let mut result = String::new();


    }
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        }
    }
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        if let Some(new_scroll_pos) = self.scroll_to.take() {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                    }
            let _x = trace.block("something", &[]);
                    "something", &["benchmark"],
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        }
                Undo { toggled_groups, deletes_bitxor } => {
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),

    use super::*;
pub type StrCow = Cow<'static, str>;
    }
    pub fn empty() -> Engine {
        assert_eq!(Some(10), a.next_codepoint_offset(6));
                let mut peer = Engine::new(Rope::from(""));
        let offset = self.line_col_to_offset(text, line as usize, col as usize);

            let b = s.as_bytes()[offset];
/// How tracing should be configured.
        let trace = Trace::disabled();
            match self.wrap_col {
                    a.merge(b);
                    Some(chunk) => self.fragment = chunk,
}
        Err(ref e) => {
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);

            update["lines"] = json!(lines);

            }
    fn prev(s: &String, offset: usize) -> Option<usize> {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    fn next_grapheme_offset() {
    }
    /// Update front-end with any changes to view since the last time sent.
        } else {
                Some(i) => {
impl Hash for Sample {
        false
    use test::black_box;
    TRACE.enable();
            fragment: ""
#[inline]
                Rope::from(s1.clone()),
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
            undone_groups: BTreeSet::new(),
// limitations under the License.
        let trace = Trace::enabled(Config::with_limit_count(10));
            } else {
        }
        }



#[cfg(feature = "json_payload")]
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));

use interval::Interval;
        if !self.is_enabled() {
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
            tombstones: Rope::default(),
    TRACE.instant(name, categories);
            end += 1;

            AddSelectionBelow =>
            if let Some(replace) = self.get_replace() {
        a.push('\n');
    /// Tests that merging again when there are no new revisions does nothing
    pub preserve_case: bool

        (self.session1, self.session2)
            }
        engine.gc(&gc);
            end,
        let script = vec![
                formatter.write_str("comma-separated strings")
            }

    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
    }
        }
            self.record(Sample::new_duration(

    }
    pub fn get_head_rev_id(&self) -> RevId {
        }
    }
        /// Used to store a reversible difference between the old

        match *self {
            Assert(0, "ab".to_owned()),
        self.session = session;
            Some(ref breaks) => {
#[derive(Clone, Copy)]
            let a_to_merge = &self.revs[base_index..];
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[derive(Debug)]
            },
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
                   r.lines_all().collect::<Vec<_>>());
/// fn something_expensive() {
        if let Some((l, offset)) = self.get_leaf() {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
                CategoriesT::StaticArray(c)
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
    #[cfg(feature = "benchmarks")]
    fn undo_2() {
    /// Return the offset of the codepoint after `offset`.
    /// The maximum number of samples that should be stored.
            GestureType::WordSelect =>
    }
                    // TODO: update (rather than re-render) in cases of text valid
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    }
    /// Storage for all the characters that have been deleted  but could
            max: offset,
                metadata_sort_index: None,
                            }
                Some(pos) => offset += pos + 1,
        }
    #[serde(skip_serializing_if = "Option::is_none")]

                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
                self.do_gesture(text, line, col, ty),
            if let GraphemeIncomplete::PreContext(_) = incomp {
                                gc_dels = gc_dels.union(deletes);
        self.first_line = first;
        let cur_deletes_from_union = &self.deletes_from_union;
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        self.rev_id_counter += 1;
    /// wherever there's a non-zero-count segment in `deletes_from_union`.

    let mut next_expand_by = Vec::with_capacity(expand_by.len());

    pub(crate) fn unset_find(&mut self) {
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        assert_eq!(utf8_offset, 13);
    {
    -> SampleGuard<'a>
}
    }
            }
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
}
/// ```
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
#[inline]
}
        self.revs.last().unwrap().rev_id
            GotoLine { line } => self.goto_line(text, line),
/// ```
/// ```
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
    }
            }
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
        let style = style_map.merge_with_default(style);
use edit_types::ViewEvent;

    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
    // This computes undo all the way from the beginning. An optimization would be to not
        assert_eq!(2, expand_by.len());

        Self {
/// Disable tracing.  This clears all trace data (& frees the memory).
        for rev in &self.revs[rev_index + 1..] {
                None => {

pub struct Replace {
            Assert(2, "afc".to_owned()),

            Assert(1, "arpb".to_owned()),
            size: Size::default(),
                    };
}
            Merge(0,2), Merge(1, 2),
        engine.edit_rev(1, 1, initial_rev, d1.clone());
                    let new_gc_dels = if inserts.is_empty() {
}

}
            }
        }).collect();
        let text = Rope::from("13456");
    }

    ObjectDestroyed,
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
    /// Exposed for unit tests only.
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    #[cfg(feature = "benchmarks")]
    fn test_disable_drops_all_samples() {
// The advantage of using a session ID over random numbers is that it can be
        assert_eq!(0, b.line_of_offset(0));
                    if !inserts.is_empty() {
///
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Cancel => self.do_cancel(text),
        }
        let b = Rope::from("b");

/// ```
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
                    let (start, end) = {
        }).collect()
            AssertMaxUndoSoFar(1,3),
        self.text = text;
    pub fn new_duration<S, C>(name: S,

                // This could be done by explicitly overriding, or by tweaking the
///
//! An engine for handling edits (possibly from async sources) and undo. It
use styles::{Style, ThemeStyleMap};
        revs.append(&mut revs_2);
///
        Assert(usize, String),
    /// Returns the visible line number containing the given offset.
        Assert(usize, String),
        // TODO: simplify this through the use of scopeguard crate

        self.text = new_text;
///



        b if b < 0xe0 => 2,

}
                warn!("Usage of click is deprecated; use do_gesture");
                MergeTestOp::AssertAll(ref correct) => {
}

    fn lines_med() {
impl Leaf for String {
                }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
    let mut s = Subset::new(head_len);
#[derive(Clone, Copy)]
    //TODO: implement iter_chunks using ranges and delete this
            for (i, op) in script.iter().enumerate() {

        let line = self.line_of_offset(text, offset);
    TRACE.is_enabled()
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
//     http://www.apache.org/licenses/LICENSE-2.0
#[cfg(test)]
mod sys_tid;
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
                self.run_op(op);
                    let full_path_str = full_path.into_string();
            inner: self.iter_chunks(start, end),
#[derive(Clone, Debug, PartialEq, Eq)]

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
            None
pub struct Sample {
            Assert(1, "pbj".to_owned()),
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());

    }
        use std::hash::{Hash, Hasher};
        let trace = Trace::enabled(Config::with_limit_count(10));
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
    //TODO: implement iter_chunks using ranges and delete this
        ];
        let next_line_offset = self.offset_of_line(text, line + 1);
    /// they would be if they hadn't been deleted.
        self.revs.push(new_rev);
        a.push('\n');
    StaticArray(&'static[&'static str]),
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
            }
    /// The name of the event to be shown.
        ---#--
        let subset_str = format!("{:#?}", expand_by[0].1);
            }
categories_from_constant_array!(10);
///
}
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
            };
                out.push((prio, inserts));
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
{
            rendered_styles.push(sel_end as isize - sel_start as isize);
    }
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),

    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    /// The process the sample was captured in.

        assert_eq!(1, expand_by[0].0.priority);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {

    }
/// implementation as efficient as a mutable version.
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
            }

///
        if !cursors.is_empty() {
}
use movement::{Movement, region_movement, selection_movement};
}

                sel
/// discussion on payload.
            prev_boundary = c.prev_boundary(&l, leaf_offset);
    fn build_delta_2() -> Delta<RopeInfo> {
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    #[cfg(feature = "benchmarks")]
            event_type: SampleEventType::Metadata,
    sample: Option<Sample>,
            }
        }
    /// Sets the selection to a new value, invalidating the line cache as needed.
    fn gc_6() {
    fn gc_6() {
    fn offset_of_line_panic() {
    pub fn sel_regions(&self) -> &[SelRegion] {
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
            Merge(0,2), Merge(1, 2),
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
                SelectionModifier::AddRemovingCurrent => {
/// Base unit is utf8 code unit.
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
            };

        engine
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
}
                payload: None,
        // a, b, y, z, c, x

/// let b = Rope::from("world");
        let mut retain_revs = BTreeSet::new();
            return ix;
}
            if self[i] != other[i] {
    }
        assert_eq!(rope.offset_of_line(0), 0);
    1
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy

    new_without_default_derive,
}
    }
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
        self.view_id
            name: name.into(),
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        // multiple queries; select closest occurrence

            Click(MouseAction { line, column, flags, click_count }) => {
    /// None of the find parameters or number of matches changed.
    /// part of the initial contents since any two `Engine`s need a common
            "pristine": pristine,
        self.invalidate_selection(text);
    }
}
    /// # Panics


        assert_eq!(2, a.line_of_offset(5));
            let style_id = self.get_or_def_style_id(client, styles, &style);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                SelectionModifier::Set => self.set_selection(text, occ),
    }
    {
        trace.closure_payload("y", &["test"], || {},
    TRACE.samples_cloned_unsorted()


/// some way.

    TRACE.instant_payload(name, categories, payload);
        Some(self.cmp(other))
    #[test]
/// from the new revisions on the left.
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        let deletes_from_union_a = parse_subset("-#---");
            }
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
                len += 1;
}
        assert_eq!(snapshot[5].name, "z");
        for rev in &self.revs[first_candidate..] {
    fn next(&mut self) -> Option<u8> {
use std::cmp::{min,max};
    } else if x < max {
        assert_tokens(&rope, &[
        Ok(Rope::from(s))
impl SampleEventType {

    fn next(s: &String, offset: usize) -> Option<usize> {
        // TODO: simplify this through the use of scopeguard crate
                self.start_drag(offset, offset, offset);

        };
        self.lines(0, self.len())
    #[test]
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
        assert_eq!(utf16_units, 11);
        engine.edit_rev(1, 2, first_rev, d1.clone());
        }
        }
    pub fn lines_raw_all(&self) -> LinesRaw {

                        for line_num in start_line..end_line {
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {


    /// Front end's line cache state for this view. See the `LineCacheShadow`
        let result = closure();
    ///

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            Insert(String),
        assert_eq!(Some(9), b.next_codepoint_offset(5));
            base_rev: RevToken, delta: Delta<RopeInfo>) {
            self.current = next_chunk;
    }
    #[test]
            end += 1;
    }
    fn test_get_sorted_samples() {
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        assert_eq!(trace.get_samples_count(), 0);
    {
        let mut b = TreeBuilder::new();
            FindNext { wrap_around, allow_same, modify_selection } =>
    // TODO make this faster somehow?
        *self = b.build();
                    // can only happen on empty input

                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// finer grain invalidation.
    pub fn lines_raw_all(&self) -> LinesRaw {
use word_boundaries::WordCursor;
            if i >= max_undos {
                priority: new_priority,
                        MetadataType::ThreadName { name: thread_name.to_string() },
    }

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// # Examples
            a = a + Rope::from(&c);
        }
        if !cursors.is_empty() {
    }
        let mut a = Rope::from("hello world");

/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    fn line_of_offset_panic() {
    #[test]

        }
            let b = s.as_bytes()[offset];
        MergeTestState::new(3).run_script(&script[..]);
    }
// See the License for the specific language governing permissions and
        let height = self.line_of_offset(text, text.len()) + 1;
    #[test]
/// * `name` - A string that provides some meaningful name to this sample.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            .map(|pos| offset + pos + 1)
            SampleEventType::ObjectDestroyed => 'D',
                println!("running {:?} at index {}", op, i);
use internal::find::FindStatus;
    fn test_disable_drops_all_samples() {
            Merge(2,0),


    /// Create a new Engine with a single edit that inserts `initial_contents`
                let mut peer = Engine::new(Rope::from(""));
            match c.edit {
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                let mut sel = Selection::new();
    text: Rope,
    }

            pid: sys_pid::current_pid(),
        where D: Deserializer<'de>,
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
                Rope::from(s1.clone()),
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
                });
    fn merge_associative() {
    /// in the slice up to `offset`.
                         styles: &StyleMap, style_spans: &Spans<Style>,
    /// vertical scroll position
        self.len() >= MIN_LEAF
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
const MIN_LEAF: usize = 511;
    pub fn enable_config(&self, config: Config) {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
/// let mut a = Rope::from("hello world");
    }
        // creation) is:
    }
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
            b.push_str(&c);
        assert_tokens(&rope, &[
fn count_utf16_code_units(s: &str) -> usize {
    // transform representing the characters added by common revisions after a point.
        assert_eq!(trace.get_samples_count(), 0);
        assert_eq!(rope.offset_of_line(4), rope.len());
    pub fn max_undo_group_id(&self) -> usize {

        assert_eq!(Some(6), a.next_codepoint_offset(3));
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        };
        assert_eq!("herald", String::from(a));
        // TODO: refine for upstream (caret appears on prev line)
    /// method to be fast even when the selection is large.
        // 1 MB
        if self.replace_changed {
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
                }
            .map_or(0, |ref s| s.timestamp_us);
    }

            Assert(1, "abefg".to_owned()),
/// The payload associated with any sample is by default a string but may be
                    }
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
                if !region.is_caret() {
/// The result of the closure.
            Assert(0, "acbd".to_owned()),
        let first_rev = &self.revs.first().unwrap();
    #[serde(skip_serializing_if = "Option::is_none")]
        if self.len() <= MAX_LEAF {
    fn to_payload(value: &'static str) -> TracePayloadT {
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    /// Replacement string.
            duration_us: None,
        self.join(",").serialize(serializer)
//! this central engine. It provides the ability to apply edits that depend on
/// * `name` - A string that provides some meaningful name to this sample.
        let mut sel = self.selection.clone();
    // TODO: a case can be made to hang this on Cursor instead
        ]);
        let mut pos = self.pos();
/// * `name` - A string that provides some meaningful name to this sample.
            }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    /// Callers are expected to validate their input.
/// # Examples
        }
    }
        while !leaf.is_char_boundary(end) {
        }
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
impl StringArrayEq<[&'static str]> for Vec<String> {

        for rev in &self.revs[rev_index + 1..] {
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
                },
    }
        -> SampleGuard
pub type RevToken = u64;
    FlowEnd,
    }
        }
pub struct LinesMetric(usize);  // number of lines
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
                    self.set_selection(text, selection);
            SampleEventType::FlowStart => 's',
        self.iter_chunks(0, self.len())
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        let a = Rope::from("a\nb\nc");
        }
    }
        }
                sel
        delta.serialize_field("els", &self.els)?;
                }

                        deletes_from_union = deletes_from_union.transform_union(inserts);
            Merge(0,2), Merge(1, 2),
    impl MergeTestState {
        engine.gc(&gc);
    #[serde(rename = "ph")]
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        }
        }
        b.build()
            CategoriesT::StaticArray(ref self_arr) => {
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// that sorted would be prohibitively expensive.
        trace.closure_payload("x", &["test"], || (),
        next_boundary.unwrap_or(None)
    /// of individual region movements become carets.

            // I think it's a precondition that this will never be called
        assert_eq!(2, a.line_of_offset(5));
        });
            Assert(0, "bdc".to_owned()),
}
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
            if let Some(pos) = pos { start_of_line.set(pos) }
        }
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
        }

            Merge(0,2), Merge(1, 2),
        let trace = Trace::enabled(Config::with_limit_count(10));
    /// slices will be nonempty.
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
    }
    // transform representing the characters added by common revisions after a point.
                                                        soft_breaks.as_mut(),
            } else {
        let mut a = Rope::from("");


                            }
            }
    }
        // interior of first line should be first line
            self.shrink_to_fit();

    fn is_boundary(s: &String, offset: usize) -> bool {
    fn bench_trace_closure_payload(b: &mut Bencher) {
        }
                let (nl, noffset) = self.next_leaf()?;
                self.find_changed = FindStatusChange::All;

            'b' => SampleEventType::AsyncStart,
/// acquires a dependency on the `serde_json` crate.

            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        }
        let deletes_from_union = Subset::new(0);
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
        debug_subsets(&rearranged_inserts);


            // Go crazy
            'D' => SampleEventType::ObjectDestroyed,
    fn test_disable_drops_all_samples() {
                        DeltaElement::Insert(Rope::from(s)),
                    if sel_end_ix > sel_start_ix {
            AssertMaxUndoSoFar(1,1),
            Assert(2, "ab".to_owned()),
    offset: usize,
    }
        } else {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    #[test]
        let d = engine.delta_rev_head(after_first_edit);
    ObjectDestroyed,
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
    fn prev_codepoint_offset_small() {
        ");
                        word_cursor.select_word()

    #[cfg(feature = "benchmarks")]
        }
/// Find an index before which everything is the same
            self.wrap_col = WrapWidth::Bytes(wrap_col);
    Matches
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
            Sample::new_instant("local pid", &[], None),
        let script = vec![
    /// Move the selection by the given movement. Return value is the offset of
                            max_undo_so_far: rev.max_undo_so_far,
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    fn sample_name(&self) -> &'static str {


// distributed under the License is distributed on an "AS IS" BASIS,
// ======== Generic helpers
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);

        self.start_drag(offset, region.start, region.end);
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
            Assert(0, "acrpbdzj".to_owned()),
        let start_pos = start_of_line.pos();
    /// Determines the current number of find results and search parameters to send them to
                    self.fragment = "";
    /// Create a new Engine with a single edit that inserts `initial_contents`
        match *self {
                    }
                            ops.push(self.build_update_op("skip", None, n_skip));
}
            }
        if last_col == 0 && last_line > first_line {
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
///     something_else_expensive(result);
    }

        Err(ref e) => {
    {
            Some(offset - len)
        samples.sort_unstable();
///
        }
            let mut sample = self.sample.take().unwrap();
                        self.revs.push(Revision {
            MetadataType::ProcessLabels {..} => (None, None)
        if self.len() <= MAX_LEAF {
    /// When was the sample started.
        let utf8_offset = 9;
    }
        let tombstones_a = Rope::from("a");
    }
/// See `trace_closure` for how the closure works and `trace_payload` for a
                s.len()
            for (i,rev) in self.revs.iter().enumerate().rev() {
/// Transform `revs`, which doesn't include information on the actual content of the operations,
// distributed under the License is distributed on an "AS IS" BASIS,
#[inline]
        d_builder.build()
                    let full_path_str = full_path.into_string();
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
            deletes: Subset::new(0),



        self.set_selection_raw(text, sel.into());

    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    #[test]
            }
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        };
        // probably change as the recording internals change.
                    if invert_undos {
        self.timestamp_us == other.timestamp_us &&
                let (ins, _) = delta.factor();
/// discussion on payload.
            let b = self.current.unwrap().as_bytes()[self.idx];
            self.truncate(splitpoint);


        let mut next_boundary = c.next_boundary(&l, leaf_offset);
            for find in self.find.iter() {
        Self {
                    }
    }
        }
        let trace = Trace::disabled();
        AssertMaxUndoSoFar(usize, usize),
                    rev_id: rev.rev_id,
    fn next(s: &String, offset: usize) -> Option<usize> {
        self.invalidate_selection(text);
        assert_eq!(1, res);
        if self.find.is_empty() {
        }, to_payload("test_get_sorted_samples"));
            return 0;
        trace.instant("5", &["test"]);

    }
        }, deletes_from_union)
    type Err = ParseError;
impl Eq for Sample {}
        Self::with_limit_count(size / size_of::<Sample>())
categories_from_constant_array!(8);
    }

            s.as_bytes()[offset - 1] == b'\n'
        let new_head_2 = engine.get_head_rev_id().token();
            Assert(1, "bdefg".to_owned()),
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
            .map(|pos| offset + pos + 1)

    fn delta_rev_head() {
        expand_by = next_expand_by;
        });
        assert_eq!(0, b.offset_of_line(0));

            Merge(0,2), Merge(1, 2),
// distributed under the License is distributed on an "AS IS" BASIS,
        let line = line as usize;
    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        let expand_by = compute_transforms(a_revs);
            Merge(1,2),

impl From<Vec<String>> for CategoriesT {

/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    // recompute the prefix up to where the history diverges, but it's not clear that's
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
                              start_ns: u64,
    }
            );
}
use xi_rope::interval::Interval;

            self.idx += 1;

use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
#[derive(Clone, Copy)]
            Merge(1,0),
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
            self.lc_shadow.edit(start, end, new_end - start);

    #[bench]

        };
}
            timestamp_us: ns_to_us(time::precise_time_ns()),
//! CRDT implementation techniques, because all operations are serialized in
    scroll_to: Option<usize>,
        let mut d_builder = Builder::new(TEST_STR.len());
    fn from(r: Rope) -> String {
            // TODO: on double or triple click, quantize offset to requested granularity.

    ///
            let mut sel = drag_state.base_sel.clone();
        let start_pos = start_of_line.pos();
        Self::with_limit_bytes(1 * 1024 * 1024)
        let result = closure();
extern crate log;
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
            end += 1;
            ix = iv.end() as isize;
            Click(MouseAction { line, column, flags, click_count }) => {
        fn run_script(&mut self, script: &[MergeTestOp]) {
    #[test]
    }
            to_undo.insert(i+1);


        assert_eq!(a.len(), r.offset_of_line(1));
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
                                           client, iv, new_len, px),
    }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
            "op": op,
            // cursor
        let inserts = parse_subset_list("
categories_from_constant_array!(4);
// See the License for the specific language governing permissions and
    fn gc_2() {
    out.as_mut_slice().reverse();
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
                }

    /// Sorting priority between processes/threads in the view.
        assert_eq!(snapshot.len(), 9);
    pub fn offset_of_line(&self, line: usize) -> usize {
    /// This function does not perform any scrolling.
            tombstones: Rope::default(),
            }
    }
/// Returns all the samples collected so far ordered chronologically by
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
                                deletes_bitxor: new_deletes_bitxor,
    }
            return 0;
        where S: Into<StrCow>, C: Into<CategoriesT>
            }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        a.lines_all().collect::<Vec<_>>());
        let mut cursor = Cursor::new(self, offset);
        }
        let mut cur_len_utf8 = 0;
    }
        let trace = Trace::enabled(Config::with_limit_count(10));

    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        revs.append(&mut revs_3);


                    self.do_gesture(text, line, column, GestureType::LineSelect)
    /// The maximum number of samples that should be stored.
    pub fn new_duration<S, C>(name: S,
    pub(crate) fn record(&self, sample: Sample) {
/// that sorted would be prohibitively expensive.
    /// inserted, including the ones that were later deleted, in the locations
            },
                Some(Cow::from(s))
// Copyright 2016 The xi-editor Authors.
        result
    #[test]
    }
            pid: sys_pid::current_pid(),
        }
fn ns_to_us(ns: u64) -> u64 {

                    to_payload(("some description of the closure")))));
    }
    }

#[macro_use]
            // recurse at most once; this doesn't feel great but I wrote myself into a
            }

    {
            Cancel => self.do_cancel(text),
    #[test]
    /// Each instance represents a separate search query.

}
    /// Highlights are only rendered when search dialog is open.
                                         self, text, modify);
}
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
        // we add the special find highlights (1) and selection (0) styles first.
use std::cmp::{min,max};
/// from the new revisions on the left.
    #[cfg(feature = "benchmarks")]
        let trace = Trace::disabled();
            min: offset,
        let mut hls = Vec::new();
                    Some(Contents::Edit {

/// that sorted would be prohibitively expensive.
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
/// }
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    }
{

                max_undo_so_far: i,
        }
#[inline]
    fn test_disable_drops_all_samples() {
        //};
    }
        let mut a = String::new();
        }
        /// Groups related edits together so that they are undone and re-done
            timestamp_us: ns_to_us(timestamp_ns),
    bytecount::count(s.as_bytes(), b'\n')
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
                self.start_drag(offset, offset, offset);
    offset: usize,
use find::Find;
    }
                                toggled_groups: &toggled_groups - gc_groups,
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
}
        ]);
        });
        assert_eq!(1, expand_by[0].0.priority);

    #[test]
    }
        assert_eq!(trace.get_samples_limit(), 0);
                (drag_state.min, max(offset, drag_state.max))
/// # use xi_rope::Rope;

    /// Time complexity: technically O(n log n), but the constant factor is so
    fn bench_get_pid(b: &mut Bencher) {
    #[test]
        Self {
            // I think it's a precondition that this will never be called
    fn next(&mut self) -> Option<Cow<'a, str>> {
            rendered_styles.push(sel_end as isize - sel_start as isize);
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
                    };

        }
            false
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            Assert(1, "arpb".to_owned()),
    trace: Option<&'a Trace>,
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        let last = max(last, 0) as usize;
    pub fn scroll_height(&self) -> usize {
    } else {
}
    AsyncEnd,
use xi_trace::trace_block;

        assert_eq!(a.len(), r.offset_of_line(1));

            SampleEventType::AsyncEnd => 'e',
                if self.fragment.is_empty() {
            black_box(time::precise_time_ns());
    #[allow(dead_code)]
    }
            AddSelectionAbove =>
    }
            //let prev_pos = self.cursor.pos();
#[derive(Clone, Copy)]
        // set last selection or word under current cursor as search query
    }
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
            let mut peers = Vec::with_capacity(count);

                    linewrap::rewrap_width(breaks, text, width_cache,
    /// This function will panic if `offset > self.len()`. Callers are expected to
                match self.inner.next() {
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    fn next(&mut self) -> Option<Cow<'a, str>> {
                   whole_words: bool) {
    fn add(self, rhs: Rope) -> Rope {
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
use xi_rope::interval::Interval;
/// record it.
    {
                        });
        ix
        engine.undo([1,3].iter().cloned().collect());
    //TODO: implement lines_raw using ranges and delete this
    ///
                        &mut start[bi]
            AssertAll("ac".to_owned()),
                name, categories, payload, SampleEventType::DurationBegin)),
    fn thread_name() -> Option<StrCow> {
            let not_in_tombstones = self.deletes_from_union.complement();
    #[bench]
/// # Examples
        }).collect()
        b if b < 0xf0 => 3,

        } else {
    }
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
                Some(Cow::from(s))


                Edit { priority, undo_group, inserts, deletes } => {
        }
            Assert(1, "ab".to_owned()),
    pub fn disabled() -> Self {
///
            self.set_selection(text, sel);
///
    /// revision, and so needs a way to get the deletion set before then.
        // We add selection after find because we want it to be preferred if the
                                                        &mut line_cursor,
        self.set_selection_for_edit(text, new_sel);
        x
                    new_deletes = new_deletes.transform_expand(inserts);


        let result = closure();
                if !region.is_caret() {
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    pub thread_name: Option<StrCow>,
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        assert_eq!(trace.get_samples_count(), 0);
    #[cfg(feature = "benchmarks")]
    fn test_samples_block() {
    }

/// # Returns
/// ```
    /// This function will panic if `offset > self.len()`. Callers are expected to
        self.lines_raw(0, self.len())
            return false;
    /// Only number of matches changed
                        Ok(s) => Some(s),
        let ix = style_map.add(style);

    pub width: f64,
        }
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
    }
            if self.line_of_offset(text, offset) <= line {
    #[bench]

        if last_col == 0 && last_line > first_line {
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    #[test]

            None => return "",
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        assert_tokens(&rope, &[

        assert_eq!(soln, String::from(engine.get_head()));
            for &occurrence in find.occurrences().iter() {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    /// validate their input.
        samples[0].pid = 1;
        assert_eq!(snapshot[4].name, "z");
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
                        None
                engine.gc(&to_gc)
    type Err = ParseError;
            pos -= 1;
    fn lines_small() {
        }).collect::<Vec<FindStatus>>()

    }
                     modify_selection: &SelectionModifier) {
        Some(pos) => minsplit + pos,
/// assert_eq!("llo wo", String::from(c));
        {
                              start_ns: u64,
            }
    // allowing us to use the same method to insert the text into the tombstones.
                   style_spans: &Spans<Style>, line_num: usize) -> Value
use delta::{Delta, DeltaElement};
        let initial_rev = engine.get_head_rev_id().token();


        // move deleted or undone-inserted things from text to tombstones
            CategoriesT::StaticArray(ref self_arr) => {
    fn from(r: &Rope) -> String {
        let line_len = MAX_LEAF + MIN_LEAF - 1;
            }
    // possible to fix it so that's not necessary.
    }
    use test::black_box;
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
    pub fn set_session_id(&mut self, session: SessionId) {
    #[test]

            inner: self.iter_chunks(start, end),
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }
            self.mk_new_rev(priority, undo_group, base_rev, delta);
            sel.add_region(new_region);
        delta.serialize_field("els", &self.els)?;
    //
    let new_text = del_delta.apply(text);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        // only one of the deletes was gc'd, the other should still be in effect
            Merge(1,0),
        ix

//! A rope data structure with a line count metric and (soon) other useful
    #[bench]

            // I think it's a precondition that this will never be called
        assert_eq!(1, a.line_of_offset(2));
        }
    /// finer grain invalidation.
/// discussion on payload.
        assert_eq!(snapshot[1].name, "thread_name");
    for rev in revs.iter().rev() {
            warn!("Failed to get path to current exe: {:?}", e);
            replace: None,
/// }
///
        {
                                  style_spans, &plan, pristine);
    }
        deserializer.deserialize_str(CategoriesTVisitor)
        self.find_changed = FindStatusChange::Matches;
    /// We attempt to reduce duplicate renders by setting a small timeout
    /// is optional.
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).

                    priority, inserts, deletes,

    }
    }
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
    }
    pub args: Option<SampleArgs>
/// Stores the relevant data about a sample for later serialization.
    }
                    self.do_gesture(text, line, column, GestureType::LineSelect)
/// Revision 0 is always an Undo of the empty set of groups

            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),

fn ns_to_us(ns: u64) -> u64 {
            Click(MouseAction { line, column, flags, click_count }) => {
        let new_head_2 = engine.get_head_rev_id().token();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn merge_max_undo_so_far() {
}
    /// a point that should be scrolled into view.
}
    /// point. Used to optimize undo to not look further back.

        let mut engine = Engine::new(Rope::from(TEST_STR));
            }
        assert_eq!(correct, rearranged_inserts);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
}
/// ```
    }
    #[test]

        let d = engine.delta_rev_head(first_rev);
        assert_eq!(Some(1), a.prev_codepoint_offset(3));

/// * `name` - A string that provides some meaningful name to this sample.
        // creation) is:

use rope::{Rope, RopeInfo};
            Merge(0,2), Merge(1, 2),
                } else {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    end: usize,
    }
    }
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

/// However, anything that can be converted into a Cow string can be passed as
            SampleEventType::CompleteDuration => 'X',
    /// assumed to be forward).

            self.current = next_chunk;
                        priority, undo_group,
    /// from the rope.
                CategoriesT::StaticArray(c)
        client.update_view(self.view_id, &params);
extern crate serde_derive;
        engine.undo([1,2].iter().cloned().collect());
                CategoriesT::StaticArray(c)


    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
    if a.is_empty() {
    // This computes undo all the way from the beginning. An optimization would be to not
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        match self.breaks {
            Assert(0, "zcbd".to_owned()),

            rev_id, max_undo_so_far,
//! a previously committed version of the text rather than the current text,
                                                          new_len, col),
        } else {
                    if s.ends_with('\r') {
///

    #[derive(Clone, Debug)]
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    /// via process_name/thread_name respectively.
/// See `trace_closure` for how the closure works and `trace_payload` for a
}
    /// The maximum number of bytes the tracing data should take up.  This limit
        let start = time::precise_time_ns();
                        });
                            deletes_bitxor
        let subset_str = format!("{:#?}", expand_by[0].1);
            _ => return
                return;
        }
            max_undo_so_far,

            a = a + Rope::from(&c);
            inner: self.lines_raw(start, end)
                last_priority = Some(priority);
    pub fn max_undo_group_id(&self) -> usize {
        }
        ];
        use self::MergeTestOp::*;

    }
        // +2 for exe & thread name.
}
            find.update_highlights(text, delta);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    #[serde(rename = "ts")]
        }

    current: Option<&'a str>,
    #[bench]
        self.scroll_to_cursor(text);
    },
        match self.breaks {
    }

        b.iter(|| black_box(trace.closure_payload(
        where S: Into<StrCow>, C: Into<CategoriesT>
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
/// A flag used to indicate when legacy actions should modify selections
                    "something", &["benchmark"],
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    /// Start of the region selected when drag was started (region is
    }
    }
    pub fn next_grapheme(&mut self) -> Option<usize> {
        // TODO(vlovich): optimize this path to use the Complete event type
            &self.deletes_from_union, &old_deletes_from_union);
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {

    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
            }
    fn from(r: Rope) -> String {
        let expand_by = compute_transforms(revs);
        }
                WrapWidth::Width(px) =>
    }
        #[derive(Serialize, Deserialize)]

categories_from_constant_array!(8);
                }
            // recurse at most once; this doesn't feel great but I wrote myself into a
}
}
    pub fn empty() -> Engine {
    /// No wrapping in effect.
        ");
    /// in the slice up to `offset`.
        }
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        };
            let sel = {
            deletes = deletes.transform_expand(&new_trans_inserts);
    #[serde(skip_serializing_if = "Option::is_none")]
            None => {
    }

                }

            lines: count_newlines(s),
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
                        word_cursor.select_word()
        self.set_selection_for_edit(text, new_sel);
        self.revs.last().unwrap().max_undo_so_far

    fn basic_rev(i: usize) -> RevId {

    for r in revs {
            AssertMaxUndoSoFar(1,1),
    /// indicates a search for the next occurrence past the end of the file.
extern crate libc;
        let r = Rope::from(&a[..MAX_LEAF]);
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
            b.push_str(&c);
        match self.selection.len() {

        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
    fn undo_3() {
    /// Exposed for unit tests.
        }
    fn delta_rev_head() {

    #[test]
        /// Used to store a reversible difference between the old
    }

    }
    fn bench_single_timestamp(b: &mut Bencher) {
        self.scroll_to = Some(end);

    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let mut result = String::new();

///
            let expand_by = compute_transforms(a_new);
        let mut b = TreeBuilder::new();
        Self {
        for _i in 0..50 {
            AddSelectionAbove =>
    /// Replacement string.
/// State required to resolve a drag gesture into a selection.
            deletes_from_union,
            end,
                           styles: &StyleMap, style_spans: &Spans<Style>,
/// Revision will be used, which means only the (small) set of concurrent edits

                    if !inserts.is_empty() {
            "something", &["benchmark"],
        }, new_text, new_tombstones, new_deletes_from_union)
            Gesture { line, col, ty } =>
                warn!("Usage of click is deprecated; use do_gesture");
    cursor: Cursor<'a, RopeInfo>,
            //if self.cursor.is_boundary::<BaseMetric>() {
use std::hash::{Hash, Hasher};
        }
    type Err = ParseError;

            SampleEventType::ObjectCreated => 'N',

                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    #[bench]

use std::cell::RefCell;
        let head2 = engine.get_head_rev_id().token();
    fn merge_session_priorities() {
pub struct LinesRaw<'a> {
        }
    where S: serde::Serializer {
        // expand by each in expand_by

        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        let text_inserts = inserts.transform_shrink(&deletes_from_union);

                            edit: Undo {

        self.revs.last().unwrap().max_undo_so_far
pub struct RopeInfo {
    }
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

    ///
        self.drag_state = Some(DragState {
        let r = Rope::from(&a[..MAX_LEAF]);
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
}
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                                        &selections, &hls, style_spans);
            Assert(5, "zacpb".to_owned()),


            Merge(0,2), Merge(1, 2),

        let inserts_3 = parse_subset_list("
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
    pub fn prev_grapheme(&mut self) -> Option<usize> {
#![cfg_attr(feature = "benchmarks", feature(test))]
/// from multiple distributed sources (i.e. you want to sort the merged result
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    }

          F: FnOnce() -> R

            self.current = None;
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
            }
            height: 10,
        plan.request_lines(first_line, last_line);


#[cfg(feature = "dict_payload")]
            args: Some(SampleArgs {
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
    ///
        ##

    }
            engine.edit_rev(0, 0, first_rev, delta);



            Assert(0, "ab".to_owned()),
        assert_tokens(&rope, &[
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
            }, to_payload("test_get_samples_nested_trace"));
        }

        /// Groups related edits together so that they are undone and re-done
}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
// See the License for the specific language governing permissions and
    /// description for the invariant.
        engine.undo([1,3].iter().cloned().collect());
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
        let replacement = match self.selection.last() {
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
// you may not use this file except in compliance with the License.
    #[allow(dead_code)]
        // We add selection after find because we want it to be preferred if the
            for rev in &self.revs {
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);



            let common = find_common(a_to_merge, b_to_merge);
        leaf.as_bytes()[pos]
/// Find an index before which everything is the same
        Self {

#[inline]
                        self.revs.push(Revision {

/// with.  By default, the type is string-like just like name.  If compiled with
            type Value = CategoriesT;
            }),
        if let Contents::Edit {priority, inserts, .. } = r.edit {
        where D: Deserializer<'de>,
}
/// required). Mutations are generally copy-on-write, though in-place edits are
                    priority, inserts, deletes,
        // if self.end is inside this chunk, verify that it is a codepoint boundary
                    as_vec.push(Sample::new_metadata(
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
    // * grapheme clusters
                    }
    fn test_get_sorted_samples() {
impl Engine {
            Assert(1, "ab".to_owned()),
pub type RopeDelta = Delta<RopeInfo>;
                    let full_path = exe_name.into_os_string();
//!
        -> Result<CategoriesT, D::Error>

    }
    /// An iterator over the raw lines. The lines, except the last, include the
    #[inline]
    }
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
/// Base unit is utf8 code unit.
        }
/// }
        --#--

    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        self.revs.iter().enumerate().rev()
                        b.add_span(seg.n, 0, 0);
        let mut engine = Engine::new(Rope::from(TEST_STR));

// line iterators
        count_utf16_code_units(&s[..in_base_units])
extern crate serde_json;
        //} else {
// Unless required by applicable law or agreed to in writing, software
    /// The current contents of the document as would be displayed on screen
        self.revs.iter().enumerate().rev()
    }
        }
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
                            None
                println!("running {:?} at index {}", op, i);
        let mut engine = Engine::new(Rope::from(TEST_STR));
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
                    // TODO: update (rather than re-render) in cases of text valid
pub type RevToken = u64;
            self.name == other.name &&
/// version of Ropes, and if there are many copies of similar strings, the common parts
        let script = vec![
                metadata_sort_index: None,

            let c = i.to_string() + "\n";

        engine.undo([1].iter().cloned().collect());


            }
            }
use interval::Interval;
pub type RopeDeltaElement = DeltaElement<RopeInfo>;

                    }

        *self = b.build();
    fn identity() -> Self {
        }

        }
        b.build()
    #[serde(rename = "name")]
    }
        }

/// than a string that needs to be copied (or ~4.5x slower than a static string)
    fn gc_2() {
        }
        if let Some(ix) = style_map.lookup(style) {
/// first can make it ~1.7x slower than a regular trace.
    pub fn instant<S, C>(&self, name: S, categories: C)
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
}
    pub fn lines_all(&self) -> Lines {
    }
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
        (self.pid, self.timestamp_us).hash(state);
            // with offset == s.len(), but be defensive.
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
                        Cow::Owned(un_deleted.transform_shrink(inserts))

                      delta: &Delta<RopeInfo>, client: &Client,
    }
    }
            DeltaElement::Insert(ref node) =>
        for &region in self.sel_regions() {
                            if !deletes.is_empty() {
        let last = max(last, 0) as usize;
    #[allow(dead_code)]
        // of the delta so we can set the cursor before or after the edit, as needed.
        -##-
            engine.undo(to_undo.clone());
            self.mk_new_rev(priority, undo_group, base_rev, delta);
    fn offset_of_line_panic() {
                self.select_line(text, offset, line, true),

        assert_eq!(0, b.line_of_offset(0));
    fn is_boundary(s: &String, offset: usize) -> bool {
    }
        } else {
// Low level functions
#[derive(Clone, Debug)]
        fn new(count: usize) -> MergeTestState {
        samples.sort_unstable();
                match *other {
        }
                    if seg.validity == line_cache_shadow::ALL_VALID {
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
}
pub type RopeDelta = Delta<RopeInfo>;
        ids.iter().cloned().map(|i| {
    for rev in revs.iter().rev() {
/// 1. Samples that span sections of code may be inserted on end instead of
    }
            }
        trace.closure_payload("y", &["test"], || {},
                                  style_spans, &plan, pristine);
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                            deletes_bitxor
        if initial_contents.len() > 0 {
            // which we can do with another peer that inserts before a and merges.
    type Err = ParseError;
    pub fn instant<S, C>(&self, name: S, categories: C)
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
    pub fn select_all(&mut self, text: &Rope) {
        trace.closure_payload("x", &["test"], || (),
        }
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));

            session: default_session(),
                    selection.add_region(occ);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    ProcessLabels { labels: String },
            }
        let trace = Trace::enabled(Config::with_limit_count(10));
                        first_sample_timestamp,
    }
    /// from the rope.
    #[test]
}
            if self.line_of_offset(text, offset) <= line {
    offset: usize,
        let b = a.slice(1, 10);
        engine.undo([1,2].iter().cloned().collect());
        soln.push('f');
    }
/// fn something_expensive() -> u32 {
        inserts.into_iter().enumerate().map(|(i, inserts)| {
//
    {

        engine.edit_rev(1, edits+1, head, d1);
// Licensed under the Apache License, Version 2.0 (the "License");
        while !leaf.is_char_boundary(end) {
    #[bench]
        self.utf16_size += other.utf16_size;
            Assert(1, "apbj".to_owned()),
        let first_rev = engine.get_head_rev_id().token();
        }

        assert_eq!(2, a.line_of_offset(5));
                match *other {
            Some(offset - len)
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },

                selection.add_region(SelRegion::caret(region.max()));
use std::str::FromStr;
        engine.edit_rev(1, 2, new_head, d2);
                            let line = self.render_line(client, styles, text,
        let mut gc_dels = self.empty_subset_before_first_rev();
        if self.is_enabled() {
                },
            for rev in &self.revs {
            // On the next step we want things in expand_by to have op in the context
    fn bench_trace_closure(b: &mut Bencher) {
    }
                            plan: &RenderPlan, pristine: bool)

    /// Return the byte offset corresponding to the line number `line`.

            Merge(0,2), Merge(1, 2),
        assert_eq!(Some(6), a.next_codepoint_offset(3));
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    // TODO: maybe refactor this API to take a toggle set
    inner: ChunkIter<'a>,
    // of the union string length *before* the first revision.
    #[test]

            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            Assert(0, "b".to_owned()),
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
            b.push_str(&c);
/// Represents the current state of a document and all of its history
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        );
        if self.len() != other.len() {

            }
    #[test]

        ---#--
    fn from(c: Vec<String>) -> CategoriesT {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        assert_tokens(&rope, &[
    }
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
                MergeTestOp::Assert(ei, ref correct) => {

        engine.edit_rev(0, 2, first_rev, build_delta_2());
        samples[0].pid = 1;
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
                });
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);



        let mut engine = Engine::new(Rope::from(TEST_STR));
/// # Examples
            line_cache_shadow::CURSOR_VALID
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
        use self::MergeTestOp::*;
            pid: sys_pid::current_pid(),
use std::borrow::Cow;

/// Conceptually, see the diagram below, with `.` being base revs and `n` being
        for sample in all_samples.iter() {
    rev_id: RevId,

        for chunk in self.iter_chunks(start, end) {
                leaf_offset = self.pos() - noffset;
        match self.breaks {
    #[test]
                    "something", &["benchmark"], || {},
}
// distributed under the License is distributed on an "AS IS" BASIS,

}
        for rev in self.revs[rev_index..].iter().rev() {
            Assert(1, "apb".to_owned()),
        }
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);

            find.unset();

                }
        use self::MergeTestOp::*;
        /// The subset of the characters of the union string from after this
                match self.inner.next() {
}
            Contents::Undo { .. } => panic!("can't merge undo yet"),

            Assert(0, "acrpbdzj".to_owned()),
        self.len()
    /// The thread the sample was captured on.  Omitted for Metadata events that
        self.lc_shadow = b.build();
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
macro_rules! categories_from_constant_array {
    #[test]
    /// Offset of the point where the drag started.
/// * `name` - A string that provides some meaningful name to this sample.
    #[serde(skip_serializing_if = "Option::is_none")]
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    }
/// Create an instantaneous sample without any payload.  This is the lowest
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
        self.selection = sel;
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        for region in self.selection.iter() {

    pub fn next_grapheme(&mut self) -> Option<usize> {
impl Config {

        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
            None
                }
                }
/// Valid within a session. If there's a collision the most recent matching
        let rearranged = rearrange(&revs, &base, 7);
    }
}
    }

    fn bench_get_pid(b: &mut Bencher) {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
                    if sel_end_ix > sel_start_ix {
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
            SelectAll => self.select_all(text),
        let styles = self.render_styles(client, styles, start_pos, pos,
    fn from(r: &Rope) -> String {
//! info.

#[derive(Clone, Debug)]
impl CategoriesT {
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
            event_type: SampleEventType::Instant,
    }
                MergeTestOp::Assert(ei, ref correct) => {
        }

        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();

    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.

    }
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    out

                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
    inner: ChunkIter<'a>,

            Merge(0,2), Merge(1, 2),
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);

        assert_eq!(snapshot[2].name, "x");
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    #[test]
                }
    }
        }
    }
    fn edit_rev_undo() {
    TRACE.enable_config(config);
        };
                    return Some(result);
        let result = closure();


use memchr::{memrchr, memchr};
        } else if self.first_line + self.height <= line {
        let new_head = engine.get_head_rev_id().token();
        let invalid = if all_caret {
                    s = inserts.transform_union(&s);
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
            }
        let utf8_offset = 19;
        let l_str = text.slice_to_string(start_pos, pos);
                false => x.start
/// Returns all the samples collected so far.  There is no guarantee that the
            b.push('b');
        for i in 0..self.len() {
        }
fn default_session() -> (u64,u32) {

        // todo: for now only a single search query is supported however in the future
                Contents::Undo { .. } => panic!(),
            Assert(0, "acbd".to_owned()),
            }
            let c = region.end;
        // NOTE 2: from_micros is currently in unstable so using new
        engine.undo([1,3].iter().cloned().collect());
            match exe_name.clone().file_name() {
                    // of which undos were used to compute deletes_from_union in edits may be lost.
    }
/// }
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
        prev_boundary.unwrap_or(None)

    #[serde(skip_serializing)]
        b.iter(|| sys_pid::current_pid());
                    if seg.validity == line_cache_shadow::ALL_VALID {
        let delta = Delta::synthesize(&self.tombstones,
    fn next(&mut self) -> Option<Cow<'a, str>> {
            _ => return
        let last = max(last, 0) as usize;
}
        let mut gc_dels = self.empty_subset_before_first_rev();


    /// terminating newline.
impl Ord for Sample {
            Assert(0, "ab".to_owned()),
                            max_undo_so_far: rev.max_undo_so_far,

        let snapshot = trace.samples_cloned_unsorted();
            utf16_size: 0,

    }
        let (new_text, new_tombstones) =
        assert_eq!(trace.is_enabled(), true);

        engine.edit_rev(0, 2, first_rev, build_delta_2());
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        first_line..(last_line + 1)
            SampleEventType::AsyncInstant => 'n',
        // Note: for committing plugin edits, we probably want to know the priority
    /// The maximum number of bytes the tracing data should take up.  This limit

        assert_eq!(2, b.offset_of_line(1));
        self.lc_shadow = b.build();

                len += 1;

/// samples are ordered chronologically for several reasons:
    use test::black_box;
        let inserts_2 = parse_subset_list("
/// xi_trace::trace("something happened", &["rpc", "response"]);
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        delta.serialize_field("base_len", &self.base_len)?;
#[cfg(test)]
            tid: sys_tid::current_tid().unwrap(),
impl PartialEq for Sample {
        trace.record(guard.sample.as_ref().unwrap().clone());
        if line < self.first_line {
//! pending edit in flight each.
            }
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// between two utf8 code units that form a code point is considered invalid.

        b.iter(|| black_box(trace.block("something", &["benchmark"])));
                }
    fn edit_rev_undo_3() {
        assert_eq!("#---#--", &subset_str);
    }

                    match full_path_str {
            Find { chars, case_sensitive, regex, whole_words } =>
categories_from_constant_array!(2);
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        self.hash(&mut hasher);

            if let Edit { priority, ref inserts, .. } = r.edit {
                            }
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {

        self.scroll_to_cursor(text);
    fn edit_rev_undo() {

                    }
/// Applies an optimization where it combines sequential revisions with the
            result.push_str(chunk);

    /// The state for finding text for this view.
    /// assumed to be forward).

                metadata_name: None,
            match self.wrap_col {
            'N' => SampleEventType::ObjectCreated,
                println!("running {:?} at index {}", op, i);
        b.push_str(new);
        let first_rev = engine.get_head_rev_id().token();
                                gc_dels = gc_dels.transform_expand(inserts);
                // should be removed in favor of do_gesture
        }
            let _x = trace.block("something", &[]);
                leaf_offset = self.pos() - poffset;
    pub categories: Option<CategoriesT>,
    }
        (line, offset - self.offset_of_line(text, line))
        use self::MergeTestOp::*;
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        self.replace_changed = true;


impl fmt::Debug for Rope {
                edit: Contents::Edit {
                if s.ends_with('\n') {
    Metadata
    #[test]
        Err(ref e) => {
/// some way.
    /// Sets the selection to a new value, invalidating the line cache as needed.
    }
    /// inserted, including the ones that were later deleted, in the locations
        -##-
            x.next_occurrence(text, reverse, wrapped, &self.selection)
        engine.undo([1].iter().cloned().collect());
    }
    #[test]
///
                self.start_drag(offset, offset, offset);

                metadata_sort_index: None,
                                                        &mut line_cursor,

        let trace = Trace::disabled();
#[inline]
impl Add<Rope> for Rope {
        } else {
//See ../docs/MetricsAndBoundaries.md for more information.
    /// The incrementing revision number counter for this session used for `RevId`s

        let d = engine.delta_rev_head(first_rev);
    /// This is a `Subset` of the "union string" representing the characters
                        let un_deleted = deletes_from_union.subtract(deletes);
            event_type: SampleEventType::Instant,
            sample: Some(Sample::new_duration_marker(
    use engine::*;

        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
        });
    }
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
        b.push('\n');
    -> SampleGuard<'a>
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
            utf16_size: 0,
            return None;
        assert_eq!(snapshot[7].name, "c");
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                    let e = &mut self.peers[ei];

    match std::env::current_exe() {
                },
    /// Note: `edit` and `edit_str` may be merged, using traits.
}
/// });
        let script = vec![

}
        ---#--
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            as_vec.push(Sample::new_metadata(
}
    // How should we count "column"? Valid choices include:
        for u in s.chars() {
                Ok(CategoriesT::DynamicArray(categories))
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    }
            _ => None

}
        let (start, end) = {
            trace.closure("test_samples_closure", &["test"], || {});
        base_subset.is_some() && base_subset == other_subset
    #[test]

        trace.instant("5", &["test"]);
    use interval::Interval;
            event_type: SampleEventType::CompleteDuration,
    }
                    "something", &["benchmark"],
        match *self {
                el.end()
        } else {
                                                    style_spans, client,
                false => x.start
            SelectAll => self.select_all(text),
        for _ in 0..in_measured_units {
        inserts: Subset,
                if is_base {
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
}
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
            Assert(0, "acpbdj".to_owned()),
    // TODO: this should be a Cow
// Copyright 2018 The xi-editor Authors.
    }
        where D: Deserializer<'de>,

            'i' => SampleEventType::Instant,
                    selection.add_region(occ);
}
//
/// `base_revs`, but modified so that they are in the same order but based on
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
// Copyright 2016 The xi-editor Authors.

        // insert a character at the beginning
    let mut last_priority: Option<usize> = None;
}
    /// The `pristine` argument indicates whether or not the buffer has
        }
    }
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
//     http://www.apache.org/licenses/LICENSE-2.0
    fn measure(_: &RopeInfo, len: usize) -> usize {
        max
        }
    #[allow(dead_code)]

    /// Returns a tuple of a new `Revision` representing the edit based on the
        assert_eq!(samples[0].name, "remote pid");
            self.set_dirty(text);
        -##-
            let common = find_common(a_to_merge, b_to_merge);
        }
            let base_index = find_base_index(&self.revs, &other.revs);
        /// Just the `symmetric_difference` (XOR) of the two sets.
            }
    pub event_type: SampleEventType,

            //}

    // in a single session.
/// Internally, the implementation uses reference counting (not thread safe, though
        }

    out
        } else {

            self.tid == other.tid &&
        let subset_str = format!("{:#?}", expand_by[1].1);
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        as_vec.extend(all_samples.iter().cloned());
            Merge(0,1), // the merge from the whiteboard scan

        let d = engine.delta_rev_head(first_rev);
    }
    fn merge_simple_delete_1() {
            fragment: ""
    pub duration_us: Option<u64>,
pub fn samples_cloned_unsorted() -> Vec<Sample> {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
                    for (ei, e) in self.peers.iter().enumerate() {
            }
            } else {
    }
                        .map(DeltaElement::from).collect(),
        let styles = self.render_styles(client, styles, start_pos, pos,
        self.find_changed = FindStatusChange::All;

        deletes_from_union
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
    {
            end -= 1;
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        for sample in all_samples.iter() {
    }
        assert_eq!(rope.line_of_offset(15), 3);
fn initial_revision_counter() -> u32 {

        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        // only one of the deletes was gc'd, the other should still be in effect
impl serde::Serialize for CategoriesT {
            }
                    } else {
    fn merge_priorities() {
        min
                Undo { ref toggled_groups, ref deletes_bitxor } => {
                el.serialize_field(start)?;
            },
        let mut all_samples = self.samples.lock().unwrap();
    #[test]
/// revisions not shared by both sides.
        count_utf16_code_units(&s[..in_base_units])
        engine.edit_rev(1, 2, initial_rev, d1.clone());
                            (inserts, deletes)
        let r = Rope::from(&a[..MAX_LEAF]);
#[derive(Serialize, Deserialize, Debug)]
    /// Update front-end with any changes to view since the last time sent.
    }
            }

                    } else {
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
                self.select_line(text, offset, line, false),
        let cursor = Cursor::new(self, offset);
use interval::Interval;
            self.current = next_chunk;
    fn undo_5() {
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
            Merge(1,0),
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
            SelectionIntoLines => self.do_split_selection_into_lines(text),
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            }, to_payload("test_get_sorted_samples"));
            let _ = trace.block("test_samples_block", &["test"]);
        ");
        assert_eq!(trace.get_samples_count(), 0);
    /// indicates a search for the next occurrence past the end of the file.
use std::collections::BTreeSet;
                undo_group,
impl RevId {
        let mut b = String::new();
    {
#[inline]
    CompleteDuration,
        while let Err(incomp) = prev_boundary {
    }
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));

    assert!(!a.is_empty() && !b.is_empty());

                let (last, rest) = self.sel_regions().split_last().unwrap();
            std::thread::sleep(std::time::Duration::new(0, 1000));
    breaks: Option<Breaks>,
/// let a = Rope::from("hello ");
        assert_eq!(Some(10), a.next_codepoint_offset(6));
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
    #[cfg(feature = "benchmarks")]
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
    /// Generate line breaks based on width measurement. Currently batch-mode,
        assert_eq!(utf8_offset, 19);
        let edit_iv = Interval::new_closed_open(start, end);
/// ```
///
///     something_expensive()
impl<'a> Cursor<'a, RopeInfo> {
#[inline]
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            match *op {
            false => Selection::new(),
        }


}
        ");
            Merge(1,0),
                        } else {
            Assert(1, "pbj".to_owned()),
                }
        ------#
pub struct RevId {
        let tombstones = Rope::from("27");
/// Tracing is disabled initially on program launch.
        // even though the actual sampling order (from timestamp of

pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        self.utf16_size += other.utf16_size;
        assert_eq!(2, r.line_of_offset(r.len()));
impl Rope {
        } else {
        }
    ///
        self.tombstones = new_tombstones;
                            }



        let mut all_samples = self.samples.lock().unwrap();
        b.iter(|| sys_pid::current_pid());
    // in a single session.

/// `dict_payload` then a Rust HashMap is expected while the `json_payload`


// ======== Merge helpers
            let max_undo = self.max_undo_group_id();
        }

            FindNext { wrap_around, allow_same, modify_selection } =>
        }
        self.revs.reverse();
            Merge(0,1),
        d_builder.delete(Interval::new_closed_open(58, 61));
    ///
/// Create a `Rope` from a `String`:

            'n' => SampleEventType::AsyncInstant,
    }
            self.push_leaf(s[..splitpoint].to_owned());
                        line_num = seg.their_line_num + seg.n;
use xi_trace::trace_block;
        }
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// unsaved changes.
    /// Returns the regions of the current selection.
                std::thread::sleep(std::time::Duration::new(0, 1000));
    /// Storage for all the characters that have been deleted  but could
/// Indicates what changed in the find state.
            find_changed: FindStatusChange::None,
            find_changed: FindStatusChange::None,

        }
        s.is_char_boundary(offset)
            let _ = trace.block("test_samples_block", &["test"]);
                        let offset = self.offset_of_line(text, start_line);
}
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
}
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
// You may obtain a copy of the License at
                }
        }

        },
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        let first_rev = engine.get_head_rev_id().token();
        if self.current.is_none() {
pub struct Sample {

    #[test]
    /// that are currently deleted, and thus in `tombstones` rather than
        assert_eq!(samples[1].name, "local pid");
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    /// Time complexity: O(log n)
    scroll_to: Option<usize>,
            Assert(1, "acpbdj".to_owned()),
        let mut selection = Selection::new();
                            Cursor::new(breaks, offset));
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
    }
/// version of Ropes, and if there are many copies of similar strings, the common parts
        assert_eq!(snapshot[1].name, "thread_name");
// See the License for the specific language governing permissions and
/// A guard that when dropped will update the Sample with the timestamp & then
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        }
    pub fn session_id(&self) -> SessionId {
                find_leaf_split_for_bulk(s)
        (Revision {
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
    fn compute_deltas_1() {
    }
            duration_us: None,
        engine.undo([1,2].iter().cloned().collect());
    }
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        rope.line_of_offset(20);
    fn arr_eq(&self, other: &[&'static str]) -> bool {
    /// from the rope.
pub struct RopeInfo {
/// Measured unit is utf8 code unit.

        assert_eq!(Some(0), b.prev_codepoint_offset(2));
    }
extern crate test;
            let b = s.as_bytes()[offset];
/// # Examples
        let ix = style_map.add(style);
            } else {
pub struct LinesMetric(usize);  // number of lines
pub type TracePayloadT = StrCow;
        }
        }
    }
                      delta: &Delta<RopeInfo>, client: &Client,

        if let Some(breaks) = self.breaks.as_mut() {
        self.set_selection(text, sel);
    }
        //} else {
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        }
            }
///
    }
        use self::MergeTestOp::*;
        match *self {
                      width_cache: &mut WidthCache, keep_selections: bool)
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
            pending_render: false,
    /// Tracks whether this view has been scheduled to render.
impl<'a> SampleGuard<'a> {
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
        Subset::new(len)
                Contents::Undo { .. } => panic!(),
                rev_id: basic_rev(i),
            MergeTestState { peers }
                        let mut line_cursor = Cursor::new(text, offset);
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
                //// if we aren't on a boundary we can't be at the end of the chunk
        // This might be an over-specified test as it will
                    e.edit_rev(p, u, head, delta.clone());
        self.drag_state = Some(DragState {
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        let mut all_samples = self.samples.lock().unwrap();
/// ```
            }
                        })
    fn len(&self) -> usize {
            .map(|pos| pos + 1)
    fn merge_associative() {

        if self.idx <= self.current.unwrap().len() {
        let a = Rope::from("");
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        assert!(a == a2);
        match self.inner.next() {
/// creation.  Roughly corresponds to start_ns but instead there's a

        let first_rev = engine.get_head_rev_id().token();
                let categories = v.split(",").map(|s| s.to_string()).collect();
impl Engine {
        Cow::from(b)
                            rendered_lines.push(line);
                                     event_type: SampleEventType)
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
        self.enabled.store(false, AtomicOrdering::Relaxed);
        assert_eq!("-###-", &subset_str);
///

        } else {
        all_samples.reset_limit(0);
            inserts: Subset::new(0),
    #[test]
                out.push((prio, inserts));
                    // TODO: update (rather than re-render) in cases of text valid
/// * `categories` - A static array of static strings that tags the samples in
                    .with_horiz(horiz)
    type Item = u8;

            if let Edit { ref inserts, .. } = rev.edit {
            return false;
        // the generated JSON.
                Some(filename) => {
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
    /// in the range of 511-1024 bytes.
    }
            return Vec::with_capacity(0);
use xi_trace::trace_block;

            }
/// monotonically increasing single global integer (when tracing) per creation
        }
    }
        engine.edit_rev(1, 3, new_head_2, d3);
            GotoLine { line } => self.goto_line(text, line),
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            Some((l, off)) => (l, off),
    }
    pub fn new_duration_marker<S, C>(name: S,
        use self::MergeTestOp::*;
                Contents::Edit {inserts, ..} => inserts,
fn find_leaf_split_for_bulk(s: &str) -> usize {
            self.find.push(Find::new());
/// discussion on payload.
            }
        assert!(r != b_rope + a_rope);
            Assert(1, "pb".to_owned()),
        }
/// Returns all the samples collected so far.  There is no guarantee that the
    #[test]

    enum MergeTestOp {
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
/// ```
            cursor: Cursor::new(self, start),
    fn edit_rev_simple() {


        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
            categories: Some(categories.into()),
    }
            rendered_styles.push(sel_end as isize - sel_start as isize);
    }

                        hls.push((sel_start_ix, sel_end_ix));
            "text": &l_str,
                s.len()
            SampleGuard::new(&self, name, categories, Some(payload.into()))
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    /// Returns a slice of the string from the byte range [`start`..`end`).
/// overhead tracing routine available.
use linewrap;
            Some(Cow::Borrowed(mut s)) => {
            pid: sys_pid::current_pid(),
                    let (mut a, rest) = end.split_first_mut().unwrap();
    #[test]
        let line = self.line_of_offset(text, offset);
    All,
                        deletes_from_union = deletes_from_union.union(deletes);
        // set last selection or word under current cursor as replacement string
        let expand_by = compute_transforms(revs);
            // Do the merge one direction
        let first_rev = engine.get_head_rev_id().token();
        engine.undo([1].iter().cloned().collect());
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    }


///
pub type SessionId = (u64, u32);
                                        &selections, &hls, style_spans);
///

    /// in the range of 511-1024 bytes.
// limitations under the License.
    /// Splits current selections into lines.
    use multiset::Subset;
        }

            Contents::Undo { .. } => panic!("can't merge undo yet"),
        if self.is_enabled() {

    find_leaf_split(s, MIN_LEAF)
            priority: 0,
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
                    let new_gc_dels = if inserts.is_empty() {
    fn bench_single_timestamp(b: &mut Bencher) {
            }
                    }
            Some(region) => {
    }
                    if !inserts.is_empty() {
        }
        if self.find.is_empty() {
                           style: &Style) -> usize {
            'M' => SampleEventType::Metadata,
                },


        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));

    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
                if s.ends_with('\n') {
        ];
        RevId { session1: 1, session2: 0, num: i as u32 }
    }
    fn into_chrome_id(&self) -> char {
                        if n_skip > 0 {
            tid: sys_tid::current_tid().unwrap(),
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
    pub(crate) fn record(&self, sample: Sample) {
    /// Get text of head revision.
///
        // only one of the deletes was gc'd, the other should still be in effect
    }
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));

    fn rebase_1() {
    /// A delta that, when applied to `base_rev`, results in the current head. Panics

        gc_scenario(35,20);
        } else {
            Merge(5,4),

            }
    TRACE.block(name, categories)
    fn delta_rev_head() {
            "ops": ops,
                        line_num = seg.their_line_num + seg.n;
        ChunkIter {
            a.push('a');
pub enum SampleEventType {
    fn consume(self) -> (Option<String>, Option<i32>) {
/// }
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
            self.pid == other.pid &&
    /// Determines the current number of find results and search parameters to send them to
        let deletes_from_union_b = parse_subset("-#---");
        } else {
    }


    /// The state for replacing matches for this view.
impl PartialOrd for Sample {
    fn offset_of_line_small() {
                      width_cache: &mut WidthCache, keep_selections: bool)
        assert_eq!(snapshot[0].name, "process_name");
        let snapshot = trace.samples_cloned_sorted();
                    let (start, end) = {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        self.pending_render
        // is the new edit in an undo group that was already undone due to concurrency?
                let (nl, noffset) = self.next_leaf()?;
        assert_eq!(Some(17), a.next_grapheme_offset(9));
        }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            inner: self.lines_raw(start, end)


        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
/// an argument.
        let mut next_boundary = c.next_boundary(&l, leaf_offset);

            end,
                let (pl, poffset) = self.prev_leaf()?;
    }
        peers: Vec<Engine>,
    }
impl<'a> Drop for SampleGuard<'a> {
        memrchr(b'\n', &s.as_bytes()[..offset])
            }
    #[allow(dead_code)]
            Some(offset - len)
    fn offset_of_line_panic() {


    #[cfg(feature = "benchmarks")]
impl Serialize for Delta<RopeInfo> {

        let a_revs = basic_insert_ops(inserts.clone(), 1);

    /// selection edges).
    /// of the chunks is indeterminate but for large strings will generally be
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        debug_subsets(&rebased_inserts);
        --#--
        // A with ring, hangul, regional indicator "US"
                selections.push((sel_start_ix, sel_end_ix));
    fn into_chrome_id(&self) -> char {
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    }
        // NOTE 2: from_micros is currently in unstable so using new
            rendered_styles.push(style_id as isize);
/// the session ID component of a `RevId`
        assert_eq!(1, r.line_of_offset(r.len() - 1));
        assert_eq!(b, String::from(a));
                let mut peer = Engine::new(Rope::from(""));
    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
/// # Arguments
    use rope::{Rope, RopeInfo};
#[must_use]
        if offset == 0 {
    }
    }
/// Valid within a session. If there's a collision the most recent matching
    }
// Unless required by applicable law or agreed to in writing, software
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
                    let transformed_inserts = inserts.transform_expand(&s);
        where S: Into<StrCow>, C: Into<CategoriesT>
    fn delta_rev_head() {
}
    base_sel: Selection,

    }
        }
        // even though the actual sampling order (from timestamp of
fn count_utf16_code_units(s: &str) -> usize {
}
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
impl Eq for Sample {}
}
            SampleEventType::FlowInstant => 't',
        },
        assert_eq!(2, r.line_of_offset(r.len()));
    }
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
    }

                Contents::Edit {inserts, ..} => inserts,
}
        //};
        d_builder.build()
                Contents::Edit {inserts, ..} => inserts,
use fixed_lifo_deque::FixedLifoDeque;
        }
                                                        style_spans, line_num);
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            trace.closure("something", &[], || ());
        }

        while !s.is_empty() {
    }
        let start = time::precise_time_ns();
                continue;


            't' => SampleEventType::FlowInstant,
            Some(offset - len)
/// some way.
    fn bench_trace_closure_payload(b: &mut Bencher) {
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
                            styles: &StyleMap, style_spans: &Spans<Style>,
        b.add_span(height, 0, 0);
        &self.text

            a = a + Rope::from(&c);
        //};
        MergeTestState::new(2).run_script(&script[..]);
        s.is_char_boundary(offset)
    }

            if self[i] != other[i] {
/// ```rust
        assert_eq!(1, b.line_of_offset(2));
    TRACE.is_enabled()
        }
        assert_eq!(snapshot[8].name, "c");
            // TODO: finer grain invalidation for the line wrapping, needs info
    /// Tracks whether this view has been scheduled to render.
        // a, b, y, z, c, x
                    match full_path_str {
            rendered_styles.push(sel_end as isize - sel_start as isize);
//! `Engine::merge`, which is more powerful but considerably more complex.
        let mut plan = RenderPlan::create(height, self.first_line, self.height);

    /// Collapse all selections in this view into a single caret
                }

    }
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    }
            if let Some(replace) = self.get_replace() {
    #[test]
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
/// stored as tracing could still be enabled but set with a limit of 0.
        b.push('\n');
        // shouldn't do anything since it was double-deleted and one was GC'd
    }
    }
        self.send_update_for_plan(text, client, styles,
    /// Create a new Engine with a single edit that inserts `initial_contents`
    /// Offset of the point where the drag started.
        engine.undo([].iter().cloned().collect());

use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    #[test]
        self.set_dirty(text);
            match reverse {
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
fn find_leaf_split_for_merge(s: &str) -> usize {
            'M' => SampleEventType::Metadata,
    /// List of categories the event applies to.
pub struct LinesRaw<'a> {
//! pending edit in flight each.
            Move(movement) => self.do_move(text, movement, false),
        let (new_text, new_tombstones) =
            },
    #[bench]
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    /// Each instance represents a separate search query.
/// # use xi_rope::Rope;

//! a previously committed version of the text rather than the current text,
            selection: SelRegion::caret(0).into(),
fn ns_to_us(ns: u64) -> u64 {
        let mut d_builder = Builder::new(TEST_STR.len());

    // and partly because you need to retain more undo history, to supply input to the
    fn merge_whiteboard() {
            x.next_occurrence(text, reverse, wrapped, &self.selection)
    fn can_fragment() -> bool { true }
                edit: contents.clone()
            Merge(0,2), Merge(1, 2),
            // I think it's a precondition that this will never be called
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },

        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
            x.next_occurrence(text, reverse, wrapped, &self.selection)
            1 if self.selection[0].is_caret() => {
        /// Just the `symmetric_difference` (XOR) of the two sets.
            while !s.is_char_boundary(offset - len) {
        let a = Rope::from("a\nb\n");
        //} else {
    // possible to fix it so that's not necessary.

    }
    /// Generally racy since the underlying storage might be mutated in a separate thread.
    }
                    linewrap::rewrap_width(breaks, text, width_cache,


use serde_json::Value;
    fn line_offsets() {
{
                        let end_line = start_line + seg.n;
        });
/// Creates a duration sample that measures how long the closure took to execute.
        delta.apply(&self.text)
/// same priority into one transform to decrease the number of transforms that

    /// Tracks whether the replacement string or replace parameters changed.
        where S: Into<StrCow>, C: Into<CategoriesT>

}
    fn prev(s: &String, offset: usize) -> Option<usize> {
            None
        if last_col == 0 && last_line > first_line {
        ");
        }
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            std::thread::sleep(std::time::Duration::new(0, 1000));
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
        let mut b = String::new();
    #[cfg(feature = "benchmarks")]
        Self::with_limit_bytes(1 * 1024 * 1024)
            {
                        let start_line = seg.our_line_num;
    fn next(&mut self) -> Option<u8> {
                            warn!("Failed to get string representation: {:?}", e);
        // set last selection or word under current cursor as replacement string
        use self::ViewEvent::*;
    }
        }
    #[bench]
            pending_render: false,
                              duration_ns: u64) -> Self
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
}
    }
        // position after 'f' in four
            utf16_count += 1;
                    to_payload(("some description of the closure")))));
    }
        engine.undo([1,2].iter().cloned().collect());

        for region in self.selection.regions_in_range(start_pos, pos) {
                                           client, iv, new_len, px),
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]

impl PartialEq for Sample {


/// # Performance
    }
        }
        if let Contents::Edit {priority, inserts, .. } = r.edit {
// limitations under the License.

    // There will probably never be a document with more than 4 billion edits
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);

        engine.undo([1,2].iter().cloned().collect());
            if inserts.is_empty() {
    }
}
        for _ in 0..line_len {
    #[test]
}
#[cfg(test)]
        inserts.into_iter().enumerate().map(|(i, inserts)| {
    find_changed: FindStatusChange,
        } else {
//
            engine.undo(undos);

        b if b < 0xf0 => 3,
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
            sample_limit_count: limit

    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    ///
    }
            "pristine": pristine,
    #[test]
        }
        self.iter_chunks(0, self.len())
    /// No wrapping in effect.
pub struct Config {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    max: usize,
    #[test]
    // for simplicity.
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            Assert(1, "ab".to_owned()),
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        let selection = SelRegion::new(0, text.len()).into();
            None
///
    #[test]

        //for next line
        self.set_selection_raw(text, selection);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
                    s = &s[..s.len() - 1];
//
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
                        let new_deletes_bitxor = if gc_dels.is_empty() {
    fn bench_trace_closure_disabled(b: &mut Bencher) {
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
fn clamp(x: usize, min: usize, max: usize) -> usize {
        Ok(Rope::from(s))
/// * `name` - A string that provides some meaningful name to this sample.
    }
/// Usage of static strings is encouraged for best performance to avoid copies.

        assert_eq!(utf8_offset, 19);
            false => Selection::new(),
            }


/// revisions not shared by both sides.
        if self.replace_changed {
        self.text = text;
        assert_eq!(utf16_units, 9);
    /// The maximum number of bytes the tracing data should take up.  This limit
    }
        }
//!
    (out, text, tombstones, deletes_from_union)
/// }
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
            name: name.into(),
        for i in 1..(s1.len() * 3) {
                                                    self.size.width));


    fn consume(self) -> (Option<String>, Option<i32>) {
    }
        let mut ix = 0;
    let mut out = Vec::with_capacity(b_new.len());
        fn run_op(&mut self, op: &MergeTestOp) {
                        ops.push(self.build_update_op("copy", None, seg.n));
            Merge(0,2), Merge(1, 2),
        b.push_str(s);
}
        self.replace = Some(Replace { chars, preserve_case });
/// });
                    // We're super-aggressive about dropping these; after gc, the history

                    }
        where D: serde::Deserializer<'de>

                if s.ends_with('\n') {
            Some(Cow::Borrowed(mut s)) => {


/// have to be considered in `rebase` substantially for normal editing
/// the `base_revs`. This allows the rest of the merge to operate on only
        } else {
        b.iter(|| {
    // transform representing the characters added by common revisions after a point.
    fn scroll_to_cursor(&mut self, text: &Rope) {
                                gc_dels = gc_dels.union(deletes);
pub fn is_enabled() -> bool {
                        _ => break
                undo_group,
                        &mut rest[bi - ai - 1]
#[cfg(feature = "benchmarks")]
        if (b as i8) >= -0x40 {
            trace.record(sample);
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        assert_eq!(1, r.line_of_offset(a.len()));
                let mut sel = Selection::new();
    #[test]
            None => {
// distributed under the License is distributed on an "AS IS" BASIS,
            Some(offset + len_utf8_from_first_byte(b))
    fn from_chrome_id(symbol: char) -> Self {
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
        });
        cursor.next_grapheme()
        let mut cursor = Cursor::new(self, offset);

        false
            drag_state: None,
        let (start, end) = iv.start_end();
impl PartialOrd for Sample {
    }
    /// The incrementing revision number counter for this session used for `RevId`s
        assert_eq!(rope.offset_of_line(0), 0);
                           pristine: bool)
            Merge(2,0),
        Ok(Delta::from(d))

                            edit: Edit {
    #[inline]
// you may not use this file except in compliance with the License.
            Assert(1, "abc".to_owned()),
            let a_to_merge = &self.revs[base_index..];
    }
    ///
    }
            self.find.push(Find::new());

    fn merge_simple_delete_1() {
                Contents::Undo { .. } => panic!(),
        }
    }
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        let mut a = String::new();
    use interval::Interval;
        let trace = Trace::enabled(Config::default());
            thread_name: Sample::thread_name(),
    pub timestamp_us: u64,
        if offset >= next_line_offset {
use std::borrow::Cow;
    }
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
                      delta: &Delta<RopeInfo>, client: &Client,
        };
                }
        assert_eq!(snapshot[2].name, "a");

            Assert(1, "afc".to_owned()),

        ---#--
                    self.fragment = "";
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        if initial_contents.len() > 0 {

        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    }
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
/// Base unit is utf8 code unit.
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
                    }
    fn next_grapheme_offset() {
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
                }
/// Returns the file name of the EXE if possible, otherwise the full path, or
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
    replace_changed: bool,
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
                        }

            match modify_selection {
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)

    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
            Assert(1, "arpb".to_owned()),
impl StringArrayEq<[&'static str]> for Vec<String> {
    fn delta_rev_head_2() {
        assert_eq!(trace.get_samples_count(), 0);

                (drag_state.max, min(offset, drag_state.min))

// you may not use this file except in compliance with the License.
use fixed_lifo_deque::FixedLifoDeque;
    deletes: Subset,
                        undone_groups = Cow::Owned(new_undone);
/// # Arguments
    revs: Vec<Revision>,
        priority: usize,

}
            Merge(1,0),
        assert_eq!(rope.offset_of_line(4), rope.len());
    // of the union string length *before* the first revision.
        assert!(leaf.is_char_boundary(end));
    // * Unicode width (so CJK counts as 2)

            for &occurrence in find.occurrences().iter() {
            GestureType::MultiWordSelect =>

    }
///
        assert_eq!(snapshot[2].name, "a");
        info.lines
        assert_eq!(rope.offset_of_line(1), 3);
pub struct Size {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

#[derive(Serialize, Deserialize, Debug)]
    pub fn new(initial_contents: Rope) -> Engine {
}
}

        //};

            view_id: view_id,
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {

/// Disable tracing.  This clears all trace data (& frees the memory).
    out
        });
                let (pl, poffset) = self.prev_leaf()?;
struct Revision {
        ];
    }
/// between two utf8 code units that form a code point is considered invalid.
    /// This case is a regression test reproducing a panic I found while using the UI.
/// ```
        MergeTestState::new(2).run_script(&script[..]);
    ///
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
}
        revs.append(&mut revs_2);
    fn test_samples_block() {
                    if s.ends_with('\r') {
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    max: usize,
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        }
        let head_rev = &self.revs.last().unwrap();
        MergeTestState::new(3).run_script(&script[..]);
            SampleEventType::Instant => 'i',
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
                },
}
    fn compute_deltas_1() {
impl TreeBuilder<RopeInfo> {
            let mut len = 1;
        // since character was inserted after gc, editor gcs all undone things
    move_delta.apply(tombstones)
            "ops": ops,
/// implementation as efficient as a mutable version.
    #[test]
    /// Returns the regions of the current selection.
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            Merge(0,1),
        // set last selection or word under current cursor as replacement string
/// Tracing is disabled initially on program launch.
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        if !before {
            Merge(2,0),
        use self::MergeTestOp::*;
        engine.edit_rev(1, edits+1, head2, d2);
    #[allow(dead_code)]
            Replace { chars, preserve_case } =>
    /// set with this function, which will make the revisions they create not have colliding IDs.
        result
        } else {
                metadata_name: None,
                }
        let mut a = Rope::from("hello world");
    {
#[inline]
        assert_eq!("-###-", &subset_str);
            thread_name: None,
    fn compute_info(s: &String) -> Self {
                    selection.add_region(occ);
        let end = self.line_col_to_offset(text, line + 1, 0);
                (region.is_upstream() && c == pos) ||
    }

    let mut out = Vec::with_capacity(b_new.len());
    scroll_to: Option<usize>,
    }
    }
            pos -= 1;

            },
    rev_id: RevId,
        // if self.end is inside this chunk, verify that it is a codepoint boundary
        if offset == s.len() {
        let mut gc_dels = self.empty_subset_before_first_rev();
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    #[cfg(feature = "json_payload")]

        d

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))


        assert!(r != a_rope);

            word_cursor.select_word()
    }
        }


    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        self.deletes_from_union = new_deletes_from_union;
        assert_eq!(snapshot[4].name, "y");

    for &b in s.as_bytes() {
use std::ops::Add;
                for &region in rest {
    fn edit_rev_undo_3() {


        self.buffer_id
            let sel = {
            }
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
    #[serde(rename = "cat")]
    // even worth the code complexity.
}

    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        #------
    }
        // NOTE: we derive to an interim representation and then convert
                        };


        for &region in self.sel_regions() {
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        assert_tokens(&rope, &[

        enum RopeDeltaElement_ {
    /// Get text of a given revision, if it can be found.
                    let end_of_line = match cursor.next::<LinesMetric>() {

                    };
                // Deprecated (kept for client compatibility):
            // I think it's a precondition that this will never be called
                    self.set_selection(text, selection);
        // Note: for committing plugin edits, we probably want to know the priority
        memrchr(b'\n', &s.as_bytes()[..offset])
    fn next_codepoint_offset_small() {
///
        if self.find_changed != FindStatusChange::None {

            pos -= 1;
    pub categories: Option<CategoriesT>,
}
    // encourage callers to use Cursor instead?
        // creation) is:
    }
        let subset_str = format!("{:#?}", expand_by[0].1);
//! text.
                        let mut line_cursor = Cursor::new(text, offset);
#[inline]
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
                           style: &Style) -> usize {
    #[test]
            for i in 0..count {
            Sample::new_instant("local pid", &[], None),
        Err(ref e) => {
    TRACE.instant(name, categories);
        };
/// some way.

    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
            while !s.is_char_boundary(splitpoint) {
// utility function to clamp a value within the given range
        }


        assert_eq!(snapshot[0].name, "process_name");
        assert_eq!(2, a.line_of_offset(5));
        // 1 MB
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        delta.end()
                        first_sample_timestamp,
        samples[1].pid = 2;
            if inserts.is_empty() {
    pub height: f64,
        let s = String::deserialize(deserializer)?;
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        json!({"test": value})
impl fmt::Debug for Rope {
    #[cfg(feature = "benchmarks")]
        assert_eq!(None, a.next_grapheme_offset(17));

    }
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
    }
    #[bench]
        let a = Rope::from("a\nb\n");
        hasher.finish()
// You may obtain a copy of the License at
            Assert(0, "ab".to_owned()),
                        if self.undone_groups.contains(undo_group) {
    }
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
            Some(Cow::Owned(mut s)) => {
        fn run_script(&mut self, script: &[MergeTestOp]) {
        self.pending_render
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
#[macro_use]
    /// The line number is 0-based, thus this is equivalent to the count of newlines

                        if n_skip > 0 {
        let mut to_undo = BTreeSet::new();
use word_boundaries::WordCursor;
            write!(f, "{}", String::from(self))
        self.find_changed = FindStatusChange::Matches;
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
///
    Matches
    /// want to set the process name (if provided then sets the thread name).
        let rearranged = rearrange(&revs, &base, 7);
    #[bench]
/// A rope data structure.
    }
            }
                        DeltaElement::Copy(start, end),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
    pub fn max_size_in_bytes(&self) -> usize {
/// # Examples
        thread.name().map(|ref s| to_cow_str(s.to_string()))
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    }
        ");
        let a = Rope::from("a\r\nb\r\nc");
        if s.len() <= MAX_LEAF {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
//! under `Engine::edit_rev`, which is considerably simpler than the usual
    #[serde(skip_serializing_if = "Option::is_none")]
    fn bench_trace_closure_disabled(b: &mut Bencher) {
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            Merge(5,4),
///
        -#-
        self.find.iter().map(|find| {
            name: name.into(),

    #[cfg(feature = "dict_payload")]
                    Some(Contents::Edit {
pub struct Engine {
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
    }
            warn!("Failed to get path to current exe: {:?}", e);
            }
            SampleEventType::Instant => 'i',

/// Create an instantaneous sample with a payload.  The type the payload
#[inline]

    /// When was the sample started.
        while !leaf.is_char_boundary(end) {
        b.push(self);
        for u in s.chars() {
        self.scroll_to = Some(end);
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
/// let c = b.slice(1, 7);
        leaf.as_bytes()[pos]
// you may not use this file except in compliance with the License.
    }
    }
        let deletes_from_union_b = parse_subset("-#---");
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
pub struct ByteIter<'a> {
        memrchr(b'\n', &s.as_bytes()[..offset])
    }
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                        if !last_selection.is_caret() {
use std::ops::Range;
    }
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

use std::fmt;
        Cow::from(a.into_owned() + b)
    }
impl TreeBuilder<RopeInfo> {
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
/// some way.
pub fn disable_tracing() {
                if s.ends_with('\n') {
    None,
                        let offset = self.offset_of_line(text, start_line);
    /// All the selection regions other than the one being dragged.
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the

        }
                self.do_find(text, chars, case_sensitive, regex, whole_words),
        self.set_selection_raw(text, sel.into());
    }

    fn bench_single_timestamp(b: &mut Bencher) {
    session: SessionId,
        ---#--
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
                (!region.is_upstream() && c == start_pos) ||

            offset -= 1;
use unicode_segmentation::GraphemeIncomplete;
        }
    fn deserialize<D>(deserializer: D)
    pub event_type: SampleEventType,
    selection: Selection,
                self.set_selection_raw(text, selection);
        // We somewhat arbitrarily choose the last region for setting the old-style
        assert_eq!(snapshot[3].name, "a");
// You may obtain a copy of the License at
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
    }
        self.set(new_pos);
                    };
        self.find_changed = FindStatusChange::All;
    /// Sets the selection to a new value, without invalidating.

        ---#--

    fn merge_whiteboard() {

    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]

    }

        let delta = Delta::synthesize(&self.tombstones,
        b.iter(|| black_box(trace.closure_payload(
    }
        assert_eq!(Some(10), a.next_codepoint_offset(6));
            let mut peers = Vec::with_capacity(count);
                peers.push(peer);
        }
pub struct Size {
        next_expand_by = Vec::with_capacity(expand_by.len());
        assert_eq!(correct, res);
            // which we can do with another peer that inserts before a and merges.

                splitpoint -= 1;
/// });
            rev_id: self.next_rev_id(),
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
    /// Update front-end with any changes to view since the last time sent.
        samples[0].timestamp_us = 10;
            Sample::new_instant("local pid", &[], None),
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    fn compute_transforms_2() {
}
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    ///

        -> Self
// See the License for the specific language governing permissions and
    /// Set the selection to a new value.


                            None
    #[test]
    }
        self.set_selection(text, sel);
            }, to_payload("test_get_sorted_samples"));
        MergeTestState::new(3).run_script(&script[..]);
/// See `trace_payload` for a more complete discussion.
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
               a.lines_all().collect::<Vec<_>>());
            Merge(0,1),
    fn merge_simple_delete_2() {
    enabled: AtomicBool,
        assert_eq!(Some(3), a.next_grapheme_offset(0));
            let head = engine.get_head_rev_id().token();
    All,
        }
    //
                    } else {

        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
    /// The session ID used to create new `RevId`s for edits made on this device
            }
use std::cmp::{min,max};
                SelectionModifier::Add => {
        }
/// See `trace_payload` for a more complete discussion.
    #[test]

        engine.undo([1].iter().cloned().collect());
    pub fn disable(&self) {
    impl MergeTestState {
        let mut a = Rope::from("hello world");
/// 3. You may not care about them always being sorted if you're merging samples
            None
        }
    /// Get the Subset to delete from the current union string in order to obtain a revision's content

    /// Width in px units, requiring measurement by the front-end.
        self.revs.append(&mut new_revs);
            // TODO: on double or triple click, quantize offset to requested granularity.

    /// borrowed from the rope.
                    }
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
    // * Actual measurement in text layout
            }
                edit: contents.clone()
        if f.alternate() {
    pub fn next_codepoint(&mut self) -> Option<char> {
    fn next(&mut self) -> Option<u8> {
        match *self {
/// let b = Rope::from("world");
                        // no need to un-delete undone inserts since we'll just shrink them out
            // Snap to grapheme cluster boundary
        // creation) is:
        engine.undo([].iter().cloned().collect());
        guard

        let mut d_builder = Builder::new(TEST_STR.len());
/// fn something_expensive() -> u32 {
            undone_groups: BTreeSet::new(),
            self.set_dirty(text);

        let (mut l, mut offset) = self.get_leaf()?;
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        }
        }
        trace.disable();
            'e' => SampleEventType::AsyncEnd,
// Copyright 2016 The xi-editor Authors.
    #[test]
                where E: serde::de::Error
            Assert(3, "ab".to_owned()),
    fn compute_deltas_1() {
    #[inline]
    inner: LinesRaw<'a>

        engine.undo([2].iter().cloned().collect());
        match ty {

    #[test]
        assert_tokens(&rope, &[
                        }
    }
// Licensed under the Apache License, Version 2.0 (the "License");
            sample: None,
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        a.lines_all().collect::<Vec<_>>());
// limitations under the License.
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
        }
//! a previously committed version of the text rather than the current text,
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        engine.edit_rev(1, 1, first_rev, d1.clone());
    /// state and new offset.
//! which is sufficient for asynchronous plugins that can only have one
                                gc_dels = gc_dels.transform_union(inserts);

    }

/// some way.
        assert_eq!(0, r.line_of_offset(a.len() - 1));
            Merge(1,0),
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

            Assert(0, "acbd".to_owned()),
        // x, a, y, b, z, c
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    pub fn scroll_height(&self) -> usize {
    pub fn prev_codepoint(&mut self) -> Option<char> {
        }

        let (leaf, offset) = match self.get_leaf() {
                        if self.undone_groups.contains(undo_group) {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    /// a point that should be scrolled into view.
        engine.edit_rev(1, 1, first_rev, d1.clone());

extern crate log;
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
    fn gc_6() {
        #------
            let _ = trace.block("test_samples_block", &["test"]);

                for &region in rest {
///
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        assert_eq!(snapshot[7].name, "c");
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        }
categories_from_constant_array!(3);
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    }
use linewrap;
    }
        assert_eq!(5, a.offset_of_line(3));
            duration_us: Some(ns_to_us(duration_ns)),
    session: SessionId,
}
            self.wrap_col = WrapWidth::Bytes(wrap_col);
    }
        let a = Rope::from("a\rb\rc");
            // These two will be different without using session IDs

        where S: Into<StrCow>, C: Into<CategoriesT>


            Merge(5,4),
        // TODO: simplify this through the use of scopeguard crate
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        }
    enabled: AtomicBool,
            tid: sys_tid::current_tid().unwrap(),
        let inserts_3 = parse_subset_list("


}

                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
    }
    pub(crate) fn record(&self, sample: Sample) {
    fn edit_rev_concurrent() {
                let mut peer = Engine::new(Rope::from(""));
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {

            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
/// 1. Samples that span sections of code may be inserted on end instead of
        /// Groups related edits together so that they are undone and re-done
/// # Arguments
        trace.closure_payload("z", &["test"], || {},
            ix = sel_end as isize;
            None
            }
    pub(crate) fn get_buffer_id(&self) -> BufferId {
        // stable order since the resolution of timestamps is 1us.
///
                payload: payload,
                SelectionModifier::Add => {
        assert_eq!(snapshot[1].name, "thread_name");
// Additional APIs custom to strings
            }
    //TODO: implement lines_raw using ranges and delete this
        if offset == s.len() {
                name, categories, Some(payload.into()), start, end - start));
    }
        // todo: this will be changed once multiple queries are supported
        let text_b = Rope::from("zpbj");
            };
        let _t = trace_block("View::wrap_width", &["core"]);

        }
            next_expand_by.push((trans_priority, new_trans_inserts));

use internal::find::FindStatus;
        let mut selection = Selection::new();
                            if !deletes.is_empty() {

    find_leaf_split(s, MIN_LEAF)
    fn next_grapheme_offset() {

        } else {

    /// validate their input.
                        let (inserts, deletes) = if gc_dels.is_empty() {
/// let a = Rope::from("hello world");
    use test::Bencher;
        // +2 for exe & thread name
        // +2 for exe & thread name.

        where S: Into<StrCow>, C: Into<CategoriesT>
        for op in &delta_ops {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
}
    }
    CompleteDuration,
    /// Selects the next find match.
}
                inserts: new_inserts,
    fn compute_transforms_1() {
    use test::Bencher;
/// some way.
        // insert `edits` letter "b"s in separate undo groups
        where S: serde::Serializer
        }
            rev_id_counter: 1,
        let mut samples = vec![
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // reachability calculation.
        let first_rev = engine.get_head_rev_id().token();
        samples[0].timestamp_us = 10;
        memrchr(b'\n', &s.as_bytes()[..offset])
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        let result = closure();
        assert_eq!(snapshot[2].name, "x");
        undo_group: usize,
    {
            tid: sys_tid::current_tid().unwrap(),

                        let n_skip = seg.their_line_num - line_num;
    #[should_panic]
/// # Examples
/// Measured unit is newline amount.
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));


        let height = self.line_of_offset(text, text.len()) + 1;
                metadata_name: None,
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

    #[bench]
                }
    //
        assert_eq!(snapshot[2].name, "x");
/// with.  By default, the type is string-like just like name.  If compiled with
        assert_eq!("zcpbdj", String::from(&text_2));
/// a.edit_str(1, 9, "era");
    }
            SampleEventType::AsyncStart => 'b',
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
    fn merge_simple_delete_2() {
        b.iter(|| {
impl Hash for Sample {

        }
    }
                inserts: inserted,
        let (start, end) = iv.start_end();
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R

        let a = Rope::from("\n");
// Copyright 2018 The xi-editor Authors.
            highlight_find: false,

                                undo_group,

    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        }
        // 1 for exe name & 1 for the thread name

    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    #[test]
    fn thread_name() -> Option<StrCow> {
    #[cfg(feature = "benchmarks")]
    }
    }
        if self.len() <= MAX_LEAF {
        self.text = text;
        }
        // x, a, y, b, z, c
            base_rev: RevToken, delta: Delta<RopeInfo>) {
            Assert(2, "b".to_owned()),
                                     payload: Option<TracePayloadT>,
            } else {
            },
        // since one of the two deletes was gc'd this should undo the one that wasn't

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
            Assert(1, "zpbj".to_owned()),

            self.lc_shadow.edit(start, end, new_end - start);
                    }
        -> SampleGuard
                (region.is_upstream() && c == pos) ||
            base_rev: RevToken, delta: Delta<RopeInfo>) {
/// }

        // TODO: may make this method take the iv directly
    #[test]
        // move deleted or undone-inserted things from text to tombstones
            Assert(3, "ab".to_owned()),
                    let transformed_inserts = inserts.transform_expand(&s);
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    enum MergeTestOp {
    pub fn prev_grapheme(&mut self) -> Option<usize> {
    {
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));

        // expand by each in expand_by
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        assert_eq!(rope.line_of_offset(0), 0);
        // and it only needs to be consistent over one execution.
                            ops.push(self.build_update_op("skip", None, n_skip));

            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
                }
        let mut all_samples = self.samples.lock().unwrap();
        // find the lowest toggled undo group number
        }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            event_type: SampleEventType::Metadata,
            utf16_size: 0,
}
        ---#--
//! pending edit in flight each.
    /// Updates the view after the text has been modified by the given `delta`.
    }
                         style_spans: &Spans<Style>) -> Vec<isize>
        assert_eq!(0, a.lines_raw_all().count());
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
            self.set_selection(text, selection);
        }
        s.is_char_boundary(offset)
            // TODO: on double or triple click, quantize offset to requested granularity.
    }
        a.lines_all().collect::<Vec<_>>());
use std::ops::Add;
        use serde::de::Visitor;
        assert_eq!(rope.line_of_offset(0), 0);
    }
        let next_line_offset = self.offset_of_line(text, line + 1);
}
    }
        if self.scroll_to.is_none() && wrap {
        // x, a, y, b, z, c
        }
            let common = find_common(a_to_merge, b_to_merge);
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    // for simplicity.

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            let _ = trace.block("test_samples_block", &["test"]);
        engine.edit_rev(0, 2, first_rev, build_delta_2());



/// Then offset=1 is invalid.
    pub fn new_instant<S, C>(name: S, categories: C,

    }
        assert_eq!("herald", String::from(a));
                    }
        let (iv, new_len) = delta.summary();
            // copy the current state
    }
    pub fn max_samples(&self) -> usize {
        self.lc_shadow = b.build();
    /// in the range of 511-1024 bytes.
            find.find_status(matches_only)
            if let Some(replace) = self.get_replace() {
        for region in self.selection.regions_in_range(start_pos, pos) {
        assert_eq!(correct, rebased_inserts);
        #[derive(Serialize, Deserialize)]
            }
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);

    }
    }
            for (i,rev) in self.revs.iter().enumerate().rev() {

/// Returns the operations in `revs` that don't have their `rev_id` in
    fn eq_small() {

        }, to_payload("test_get_samples_nested_trace"));
    /// The name of the event to be shown.
        let revs = basic_insert_ops(inserts, 1);

                    to_payload(("some payload for the block"))));
            SampleEventType::Metadata => 'M'
use unicode_segmentation::GraphemeCursor;
        -##-
pub struct Size {
        match symbol {
        let mut pos = self.pos();
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    for rev in revs.iter().rev() {
        // if self.end is inside this chunk, verify that it is a codepoint boundary

            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    TRACE.closure_payload(name, categories, closure, payload)
        assert_eq!(snapshot.len(), 9);
///
                                inserts,
            utf16_count += 1;
            rev_id, max_undo_so_far,
        // This might be an over-specified test as it will
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
        let trace = Trace::enabled(Config::with_limit_count(10));
        rendered_styles
            // about what wrapped.
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
    {
    /// Get the line range of a selected region.
        let trace = Trace::enabled(Config::with_limit_count(10));
impl Rope {
    }
        Some(&leaf[start_pos .. end])

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
                Some(i) => {
        //for next line
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        let b_revs = basic_insert_ops(inserts, 2);
            black_box(trace.block_payload(
}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    #[test]


        }
// Unless required by applicable law or agreed to in writing, software
//! CRDT implementation techniques, because all operations are serialized in
    fn merge_associative() {

        if self.is_enabled() {
            cur_len_utf8 += u.len_utf8();
    // Send the requested lines even if they're outside the current scroll region.
        where S: Into<StrCow>, C: Into<CategoriesT>

/// Replace part of a `Rope`:
        if self.len() != other.len() {
            Assert(0, "zacpbdj".to_owned()),
}




            let b = s.as_bytes()[offset];
        assert_eq!(snapshot[8].name, "c");
#[inline]
    pub fn set_session_id(&mut self, session: SessionId) {
                edit: contents.clone()
    }
            }
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
    /// set with this function, which will make the revisions they create not have colliding IDs.

impl Sample {
            new_deletes = new_deletes.transform_expand(&new_inserts);
/// Then offset=1 is invalid.
    }
        }
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    /// The state for replacing matches for this view.
/// Find an index before which everything is the same
    pub tid: u64,
        /// Used to store a reversible difference between the old
#[cfg(feature = "dict_payload")]
        let (new_text, new_tombstones) =

            }

        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        ");
    /// Find parameters and number of matches changed.
                    let _ = s.pop();
    /// Invalidate the current selection. Note that we could be even more

    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
    }
        MergeTestState::new(6).run_script(&script[..]);
        let mut soln = String::from("h");
use std::cmp;
/// # Returns
        let new_head = engine.get_head_rev_id().token();
                if (flags & FLAG_SELECT) != 0 {

        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
                              to_payload("test_get_samples"));
fn shuffle(text: &Rope, tombstones: &Rope,
            drag_state: None,
            1 if self.selection[0].is_caret() => {
                el.serialize_field(start)?;
        if self.idx <= self.current.unwrap().len() {
                RenderTactic::Discard => {
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

                                                    style_spans, client,
    #[allow(dead_code)]
                warn!("Usage of click is deprecated; use do_gesture");
extern crate serde;
///
    }
        assert_eq!(snapshot[4].name, "y");
        while offset < l.len() && !l.is_char_boundary(offset) {
                         start: usize, end: usize, sel: &[(usize, usize)],
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    fn test_trace_disabled() {
                (drag_state.max, min(offset, drag_state.min))
    /// The process the sample was captured in.
        s.is_char_boundary(offset)
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
        while offset < l.len() && !l.is_char_boundary(offset) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        let trace = Trace::enabled(Config::default());
    pub fn undo(&mut self, groups: BTreeSet<usize>) {

            max_undo_so_far,
        }
/// some way.
        let mut ix = 0;
    }
        let mut cursor = Cursor::new(self, offset);
    fn from_chrome_id(symbol: char) -> Self {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            "something", &["benchmark"],
            }
                MergeTestOp::AssertAll(ref correct) => {
        assert_eq!(snapshot[0].name, "process_name");
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    }
            CategoriesT::DynamicArray(ref self_arr) => {
    }
        hasher.finish()
            let matches_only = self.find_changed == FindStatusChange::Matches;
    fn test_cross_process_samples() {
    #[test]
            lc_shadow: LineCacheShadow::default(),
        assert_eq!(snapshot[5].name, "z");
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                         style_spans: &Spans<Style>) -> Vec<isize>
use std::borrow::Cow;
        let new_sel = selection_movement(movement, &self.selection,

    TRACE.is_enabled()
            if (c > start_pos && c < pos) ||
        } else {
#[derive(Clone, Debug)]
            }
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        engine.edit_rev(1, 2, new_head, d2);
    pub fn merge(&mut self, other: &Engine) {
            Assert(3, "ab".to_owned()),
///
pub struct Lines<'a> {
        let script = vec![
            first_line: 0,
///
//
        use serde::de::Visitor;
        /// revision that were added by this revision.
    /// List of categories the event applies to.
        /// Used to store a reversible difference between the old

            return Vec::with_capacity(0);
    /// The state for finding text for this view.
    // TODO: a case can be made to hang this on Cursor instead
        b.set_dirty(true);
        while offset < l.len() && !l.is_char_boundary(offset) {

            self.find.push(Find::new());
                self.do_drag(text, line, column, Affinity::default()),
        }
}
/// std::mem::drop(trace_guard); // finalize explicitly if

    }
        /// Groups related edits together so that they are undone and re-done
        let cursor = Cursor::new(self, offset);


impl<'a> Drop for SampleGuard<'a> {
        // 1 MB
    #[test]
                                inserts,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
pub enum CategoriesT {
        assert_eq!("zcpbdj", String::from(&text_2));
    Undo {
    fn empty_subset_before_first_rev(&self) -> Subset {
                            rendered_lines.push(line);
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
            Merge(0,2), Merge(1, 2),
            Assert(1, "afc".to_owned()),
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");

        if let Some(ix) = style_map.lookup(style) {
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
fn clamp(x: usize, min: usize, max: usize) -> usize {
                    let (mut a, rest) = end.split_first_mut().unwrap();
        self.deletes_from_union = new_deletes_from_union;
    }
        // rebase insertions on text and apply
        self.utf16_size += other.utf16_size;

            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
    #[serde(deserialize_with = "deserialize_event_type")]
/// returned value is dropped.  `trace_closure` may be prettier to read.

            offset -= 1;
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),

        let initial_rev = engine.get_head_rev_id().token();
            timestamp_us: ns_to_us(start_ns),
///
fn exe_name() -> Option<String> {
                    }
            Some(offset + len_utf8_from_first_byte(b))
            // Do the merge one direction
/// Base unit is utf8 code unit.

        ];
mod tests {
    }
                std::thread::sleep(std::time::Duration::new(0, 1000));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                self.do_set_replace(chars, preserve_case),
    /// Selects an entire line and supports multi selection.
    Edit {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        self.enabled.load(AtomicOrdering::Relaxed)
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
//
    }

                Contents::Undo { .. } => panic!(),

    /// Invalidates the styles of the given range (start and end are offsets within
    }
    current: Option<&'a str>,
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        let trace = Trace::disabled();
        }

    /// Sorting priority between processes/threads in the view.
        use std::hash::{Hash, Hasher};
            let head = engine.get_head_rev_id().token();
        // +2 for exe & thread name.
        // and it only needs to be consistent over one execution.
    }
                    Some(chunk) => self.fragment = chunk,
///
            Assert(0, "cbd".to_owned()),
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
impl<'a> Iterator for ByteIter<'a> {
        engine.undo([].iter().cloned().collect());

                        let un_deleted = deletes_from_union.subtract(deletes);

        }
    pub fn enable_config(&self, config: Config) {
    }
    let mut out = Vec::with_capacity(b_new.len());
    #[allow(dead_code)]
    }

                    priority, inserts, deletes,
    }
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
//! which is sufficient for asynchronous plugins that can only have one
///
        *self = b.build();
    }
            Some(offset + len_utf8_from_first_byte(b))
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
    fn compute_info(s: &String) -> Self {
        match self.breaks {
    #[bench]
{
/// 3. You may not care about them always being sorted if you're merging samples
                },
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                name, categories, Some(payload.into()), start, end - start));
        let search_query = match self.selection.last() {
}
    TRACE.samples_cloned_unsorted()
        let mut cursors = Vec::new();
                self.add_selection_by_movement(text, Movement::Down),
            Assert(1, "apbj".to_owned()),
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
    fn deserialize<D>(deserializer: D)
use tabs::{ViewId, BufferId};
// Unless required by applicable law or agreed to in writing, software
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        engine.edit_rev(1, edits+1, head, d1);
        Cow::from(b)
            let splitpoint = find_leaf_split_for_merge(self);
                    }
    // reachability calculation.
#[inline]
    }
        trace.closure_payload("x", &["test"], || (),
        let mut selections = Vec::new();

    }
    pub pid: u64,
            // TODO: finer grain invalidation for the line wrapping, needs info
                deletes: new_deletes,
        } else {
                while cursor.pos() < region.max() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
        self.buffer_id
enum WrapWidth {
    #[derive(Clone, Debug)]
        // set last selection or word under current cursor as search query
    /// Width in bytes (utf-8 code units).
        self.set_selection(text, new_sel);
        }
    }
        let mut b = TreeBuilder::new();
pub fn is_enabled() -> bool {

        assert_eq!(snapshot[4].name, "y");

        self.session = session;
        let mut r = Rope::from("27");

    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
impl<'a> Iterator for Lines<'a> {
    }
            enabled: AtomicBool::new(false),

                let (pl, poffset) = self.prev_leaf()?;
/// ```
///
        assert_eq!(trace.get_samples_limit(), 20);
        d_builder.build()
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            match c.edit {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
    }
    impl MergeTestState {
            Merge(3,1), Merge(5,3),
}
        // position after 'f' in four
impl Serialize for DeltaElement<RopeInfo> {
        Some(self.cmp(other))
    view_id: ViewId,
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        cursor.next_grapheme()
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));

                name, categories, payload, SampleEventType::DurationBegin)),
impl fmt::Debug for Rope {

        // We add selection after find because we want it to be preferred if the
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
    1
    }
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    use rope::{Rope, RopeInfo};
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    pub fn get_caret_offset(&self) -> Option<usize> {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
                peer.set_session_id(((i*1000) as u64, 0));
    /// If `modify` is `true`, the selections are modified, otherwise the results
    /// The state for finding text for this view.
}
        });
    bytecount::count(s.as_bytes(), b'\n')
    }
// you may not use this file except in compliance with the License.
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        let col = col as usize;
                              to_payload("test_get_samples"));
        assert!(end <= leaf.len());
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
        let rev = Revision {
        samples[0].pid = 1;
// Unless required by applicable law or agreed to in writing, software
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        let guard = Self {
/// associated performance hit across the board for turning it on).
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
// You may obtain a copy of the License at
                client.replace_status(self.view_id, &json!(replace))
    pub fn byte_at(&self, offset: usize) -> u8 {
            Assert(1, "arpbj".to_owned()),
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
    }
}
    let mut s = Subset::new(head_len);
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        b.push_str(new);
            AssertAll("zacpb".to_owned()),
    }
    (out, text, tombstones, deletes_from_union)
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
/// Returns all the samples collected so far ordered chronologically by
    pub fn collapse_selections(&mut self, text: &Rope) {
                              to_payload("test_get_samples"));
        assert_eq!(None, b.prev_codepoint_offset(0));
    fn from(c: Vec<String>) -> CategoriesT {
        !self.selection.regions_in_range(offset, offset).is_empty()
            if inserts.is_empty() {
/// Usage of static strings is encouraged for best performance to avoid copies.
        }
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
                serializer.serialize_newtype_variant("DeltaElement", 1,
        result
struct DeltaOp {
    // This computes undo all the way from the beginning. An optimization would be to not
    /// how many times it has been deleted, so if a character is deleted twice
        use self::ViewEvent::*;
    pub pid: u64,


        }
            s = &s[splitpoint..];

        assert_eq!(2, expand_by[1].0.priority);
            }
    }
    pub fn do_find_all(&mut self, text: &Rope) {

        b.add_span(height, 0, 0);
        Some(pos) => minsplit + pos,
    pub fn get_head(&self) -> &Rope {

    },
        d_builder.build()

    }
        assert_eq!(1, a.line_of_offset(2));
        self.revs.push(new_rev);
    pub payload: Option<TracePayloadT>,
    fn bench_get_pid(b: &mut Bencher) {
                } else {
            last_line -= 1;
                    result = cow_append(result, self.fragment);

        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
    fn to_payload(value: &'static str) -> TracePayloadT {
    // in a single session.
categories_from_constant_array!(4);
            engine.undo(undos.clone());
    }
                self.find_changed = FindStatusChange::All;
        let revs = basic_insert_ops(inserts, 1);
        tombstones = new_tombstones;
#[derive(Serialize, Deserialize, Debug)]
            'N' => SampleEventType::ObjectCreated,
                   r.lines_all().collect::<Vec<_>>());
                              to_payload("test_get_samples"));
        struct CategoriesTVisitor;
            let _ = trace.block("test_samples_block", &["test"]);
            }
        update
        let trace = Trace::enabled(Config::with_limit_count(10));

        // insert `edits` letter "b"s in separate undo groups
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    /// slices will be nonempty.
        where S: Into<StrCow>, C: Into<CategoriesT>
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
    }
    }
    fn from_chrome_id(symbol: char) -> Self {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
            while !s.is_char_boundary(offset - len) {
        fn run_script(&mut self, script: &[MergeTestOp]) {
                }
        use self::MergeTestOp::*;
            // corner and I'm lazy -cmyr
            let after = full_priority >= trans_priority;  // should never be ==
    pub fn max_undo_group_id(&self) -> usize {
        }
                    s = inserts.transform_union(&s);
    fn merge_max_undo_so_far() {
    pub fn byte_at(&self, offset: usize) -> u8 {
        match *self {

    fn lines_med() {
    fn rearrange_1() {
        assert!(a.slice(0, 0) == empty);
    }
    pub fn lines_all(&self) -> Lines {
        assert_eq!(trace.get_samples_count(), 0);
impl<'a> Iterator for ChunkIter<'a> {
                    s = inserts.transform_union(&s);
            Some(offset + len_utf8_from_first_byte(b))
    ///
            }

            tid: sys_tid::current_tid().unwrap(),
#[derive(PartialEq, Debug)]
    }
/// The visual width of the buffer for the purpose of word wrapping.
    StaticArray(&'static[&'static str]),
    fn empty_subset_before_first_rev(&self) -> Subset {
    }
            trace.closure_payload("y", &["test"], || {
pub fn disable_tracing() {
    #[test]
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");

    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
                        if n_skip > 0 {
        self.send_update_for_plan(text, client, styles,
            r = op.inserts.apply(&r);
        }

                (!region.is_upstream() && c == start_pos) ||
    // allowing us to use the same method to insert the text into the tombstones.
            to_payload("some description of the trace"))));
        cursor.next::<BaseMetric>()
    #[test]
    AsyncStart,
            .map_or(0, |ref s| s.timestamp_us);
        let mut end = start_pos + len;
        self.session = session;
    enum MergeTestOp {
        });
/// An element in a `RopeDelta`.
    /// a point that should be scrolled into view.

    }
/// Replace part of a `Rope`:
        let inserts_2 = parse_subset_list("
    ns / 1000
    /// If the cursor is at the end of the leaf, advances to the next leaf.
    #[cfg(feature = "benchmarks")]
    }
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));

                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        }

    /// Updates the view after the text has been modified by the given `delta`.
                        };
            // TODO: on double or triple click, quantize offset to requested granularity.
            }
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            'O' => SampleEventType::ObjectSnapshot,
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
    if x < min {

        for rev in &self.revs[first_candidate..] {
                    for (ei, e) in self.peers.iter().enumerate() {
use movement::{Movement, region_movement, selection_movement};
    }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

    /// that are currently deleted, and thus in `tombstones` rather than
/// creation.  Roughly corresponds to start_ns but instead there's a
            }
        b.push_str(new);
                            }
            MetadataType::ProcessLabels {..} => (None, None)
            Assert(1, "arpb".to_owned()),
        let r = Rope::from(&a[..MAX_LEAF]);
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        // TODO: refine for upstream (caret appears on prev line)
        if self.len() != other.len() {
    fn prev(s: &String, offset: usize) -> Option<usize> {

        all_samples.reset_limit(0);
    }
        let mut cursor = Cursor::new(self, offset);
                Rope::from(s1.clone()),
use width_cache::WidthCache;
        } else {
            if let GraphemeIncomplete::PreContext(_) = incomp {
    #[test]
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        b.push(rhs);
    /// The largest undo group number of any edit in the history up to this
        use self::MergeTestOp::*;
            rendered_styles.push(sel_end as isize - sel_start as isize);
            'f' => SampleEventType::FlowEnd,
        use self::MergeTestOp::*;
        }
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
            Merge(0,1),
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                cur_all_inserts = older_all_inserts;
    /// Constructs a Duration sample.  For use via xi_trace::closure.
                MergeTestOp::AssertAll(ref correct) => {
            'O' => SampleEventType::ObjectSnapshot,
        samples[0].timestamp_us = 10;
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },

    {
            SampleGuard::new(&self, name, categories, None)
        let mut engine = Engine::new(Rope::from(TEST_STR));

    /// this returns the offset of the end of the rope. Arguments higher
    /// Selects an entire line and supports multi selection.
/// configured via the `dict_payload` or `json_payload` features (there is an
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`



        self.send_update_for_plan(text, client, styles,
pub struct LinesRaw<'a> {
    }
}

            pos -= 1;
    }

    }
            Merge(1,2),
                Some(Cow::from(s))
        match symbol {
                            let line = self.render_line(client, styles, text,
        engine
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            selection.delete_range(offset, offset, true);
//
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                metadata_name: None,
/// are shared.
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);

    ///
        let delta = Delta::synthesize(&self.tombstones,

///
        use serde::de::Visitor;
            Assert(0, "acbd".to_owned()),
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
    pub fn session_id(&self) -> SessionId {
    /// Toggles a caret at the given offset.
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        priority: usize,
    }
        let expand_by = compute_transforms(a_revs);
            self.find.push(Find::new());
    TRACE.get_samples_count()
        engine.undo([].iter().cloned().collect());
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    /// selection edges).
            let splitpoint = find_leaf_split_for_merge(self);
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
                        .map(DeltaElement::from).collect(),

        for i in ((edits-max_undos)..edits).rev() {

        };
    }
            AssertMaxUndoSoFar(0,3),
        if !before {
                                toggled_groups: &toggled_groups - gc_groups,
            max_undo_so_far: 0,
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        // todo: this will be changed once multiple queries are supported
    }
            Assert(1, "zapbj".to_owned()),

                        }
        let a = Rope::from("a\nb\nc");
    // maybe explore grabbing leaf? would require api in tree
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
                            ops.push(self.build_update_op("skip", None, n_skip));
// distributed under the License is distributed on an "AS IS" BASIS,
struct FullPriority {

        let deletes_from_union_a = parse_subset("-#---");
        RopeInfo {
        }

    /// Selects an entire line and supports multi selection.
    }
            Rope::concat(
                        deletes_from_union = deletes_from_union.transform_union(inserts);
        Subset::new(len)
impl SampleEventType {
        self.drag_state = None;
        let a = Rope::from("");
    ///
        self.drag_state = None;
/// Disable tracing.  This clears all trace data (& frees the memory).
        Ok(Rope::from(s))
        if let Some(ix) = style_map.lookup(style) {
    /// Get the line range of a selected region.
        let d = engine.delta_rev_head(after_first_edit);
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.

        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
use memchr::{memrchr, memchr};
        assert_eq!(utf16_units, 9);
        self.set_dirty(text);

            false
#[inline]
            let sel = {
        d_builder.build()
            "styles": styles,

            trace.instant("test_samples_pulse", &["test"]);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
const MAX_LEAF: usize = 1024;
    #[cfg(feature = "benchmarks")]
                        if n_skip > 0 {
                        hls.push((sel_start_ix, sel_end_ix));
                        deletes_from_union = deletes_from_union.union(deletes);
// Unless required by applicable law or agreed to in writing, software
/// Returns the operations in `revs` that don't have their `rev_id` in
    inserts: InsertDelta<RopeInfo>,
        b if b < 0xf0 => 3,
        b.iter(|| black_box(time::precise_time_ns()));
        let inserts = parse_subset_list("
        min
    #[serde(rename = "xi_payload")]
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
            None
            name: name.into(),

        b.push('\n');
    fn merge_idempotent() {
        let trace = Trace::enabled(Config::default());


    /// If the cursor is at the end of the leaf, advances to the next leaf.
/// Boundary is trailing and determined by a newline char.
        revs.append(&mut revs_2);
            let expand_by = compute_transforms(a_new);
            }
        }
                                                          new_len, col),
    /// Generally racy since the underlying storage might be mutated in a separate thread.
                }
/// are shared.
    /// This function will panic if `offset > self.len()`. Callers are expected to
    /// Callers are expected to validate their input.
            for find in self.find.iter() {
            Assert(1, "ab".to_owned()),

// you may not use this file except in compliance with the License.
    assert!(!a.is_empty() && !b.is_empty());
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
        MergeTestState::new(3).run_script(&script[..]);
            Copy(usize, usize),
                    }
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
//See ../docs/MetricsAndBoundaries.md for more information.

        });
                if !inserts.is_empty() {
/// fn something_expensive() {
///
            } else {
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
            inner: self.lines_raw(start, end)
        let mut cursor = Cursor::new(self, offset);
        d_builder.build()
            find.find_status(matches_only)
            first_line: 0,
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        }
    use super::*;
    ThreadName { name: String },
        assert_eq!(correct, rearranged_inserts);
            }
        }
        d.insert(StrCow::from("test"), StrCow::from(value));
        engine.undo([].iter().cloned().collect());
    #[test]
    fn compute_info(s: &String) -> Self {
#[macro_use]
            max_undo_so_far: 0,
use internal::find::FindStatus;
            Merge(0,1),
/// Measured unit is utf8 code unit.
        for &region in self.sel_regions() {
                self.do_selection_for_find(text, case_sensitive),
        trace.disable();
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        cursor.next::<BaseMetric>()
    {
        assert_eq!(None, a.next_codepoint_offset(10));
// Copyright 2016 The xi-editor Authors.
    fn sample_name(&self) -> &'static str {
    }
/// beginning.
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
/// let b = Rope::from("world");
            CategoriesT::StaticArray(ref arr) => arr.join(sep),

        engine.undo([].iter().cloned().collect());
        cursor.is_boundary::<BaseMetric>()
            lines: count_newlines(s),
    /// the other doesn't make it re-appear.

    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    pub fn slice(&self, start: usize, end: usize) -> Rope {

        ----#
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));

        }
        for &region in self.sel_regions() {
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
use interval::Interval;
    pub fn get_samples_count(&self) -> usize {
}
    pub fn set_size(&mut self, size: Size) {
        }
        if let Some(sel) = new_sel {
                }
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    pub fn token(&self) -> RevToken {
///

        }
/// ```
    /// Tests that priorities are used to break ties correctly
        let line = line as usize;

}
        x
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            rendered_styles.push((sel_start as isize) - ix);
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
    ///
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
///
}
        let revs = basic_insert_ops(inserts, 1);
        // rebase insertions on text and apply
        let text_b = Rope::from("zpbj");
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
///
        assert_eq!(0, a.line_of_offset(1));

        let b_rope = Rope::from(&b);
                    } else {

        assert_eq!(utf8_offset, 9);
    }
        // and it only needs to be consistent over one execution.
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(snapshot[3].name, "b");
use std::hash::{Hash, Hasher};
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        }
}
}

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                }
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
    pub fn max_undo_group_id(&self) -> usize {

impl From<Rope> for String {

    pub fn set_dirty(&mut self, text: &Rope) {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
pub struct Engine {
        where S: Serializer
    pending_render: bool,
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
        self.set_selection_raw(text, selection);

                        let n_skip = seg.their_line_num - line_num;
        for _ in 0..line_len {
    #[test]
    #[test]
        if self.find.is_empty() {
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        }
    pub fn lines_raw_all(&self) -> LinesRaw {
    num: u32,
        let new_head = engine.get_head_rev_id().token();
impl View {
        let tombstones_a = Rope::from("a");
///
            trace.record(sample);
extern crate serde_derive;
    }
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
    }
        let mut samples = self.samples_cloned_unsorted();
        b.push('\n');
        ");
        let deletes_from_union = Subset::new(0);



        use self::MergeTestOp::*;
                        deletes: transformed_deletes,
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {

            trace.instant("c", &["test"]);
            Merge(0,2), Merge(1, 2),
                },
    #[test]
    /// The selection state for this view. Invariant: non-empty.
        };
        if f.alternate() {
            inner: self.lines_raw(start, end)
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
            min: offset,
        assert_eq!(0, b.offset_of_line(0));
    #[test]
    fn merge_whiteboard() {
            let _ = trace.block("test_samples_block", &["test"]);
        }
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
            Assert(0, "acrbdz".to_owned()),
        if !self.is_enabled() {
    }
            } else if incomp == GraphemeIncomplete::NextChunk {
        let params = json!({
        self.drag_state = None;
        cursor.next::<BaseMetric>()
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
        true
            offset -= 1;
struct DragState {
        if self.scroll_to.is_none() && wrap {
enum MetadataType {
/// on program launch.
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
            enabled: AtomicBool::new(true),
    #[cfg(feature = "dict_payload")]

    }
        assert_eq!(snapshot[8].name, "c");

        self.drag_state = None;
    fn build_delta_2() -> Delta<RopeInfo> {
                }
                        let _ = s.pop();
/// than a string that needs to be copied (or ~4.5x slower than a static string)
            // I think it's a precondition that this will never be called
    // transform representing the characters added by common revisions after a point.
    fn line_of_offset_panic() {
        b if b < 0x80 => 1,
            let style_id = self.get_or_def_style_id(client, styles, &style);
 //additional cursor features
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
}

        use self::MergeTestOp::*;
///
    /// state and new offset.
                s.len()
                        let start_line = seg.our_line_num;
        }
        let mut revs = basic_insert_ops(inserts_1, 1);

            end -= 1;
}
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
                MergeTestOp::Assert(ei, ref correct) => {
            } else if incomp == GraphemeIncomplete::NextChunk {
/// Enable tracing with the default configuration.  See Config::default.
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    fn basic_rev(i: usize) -> RevId {
#[inline]

    fn bench_trace_instant_disabled(b: &mut Bencher) {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
// limitations under the License.
/// for single user cases, used by serde and ::empty
        } else {
/// * `categories` - A static array of static strings that tags the samples in
                self.add_selection_by_movement(text, Movement::Down),
        assert_eq!(rope.offset_of_line(1), 3);
        assert_eq!(trace.get_samples_count(), 1);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    use multiset::Subset;
        selection.add_region(region);

        }
    #[bench]
    }
                self.do_drag(text, line, column, Affinity::default()),

        // NOTE: 1 us sleeps are inserted as the first line of a closure to
            }

        }
        }
        let text_with_inserts = text_inserts.apply(&text);
                        line_num = seg.their_line_num + seg.n;
        self.text = new_text;
    let mut out = Vec::with_capacity(b_new.len());
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
            SampleEventType::ObjectCreated => 'N',
        assert_eq!(samples[0].name, "remote pid");
    }
    use multiset::Subset;
            None => text.line_of_offset(offset)
            }
        let edit_iv = Interval::new_closed_open(start, end);
//     http://www.apache.org/licenses/LICENSE-2.0
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
    pub metadata_name: Option<StrCow>,
    /// this returns the offset of the end of the rope. Arguments higher
        ----
    // TODO: switch to a persistent Set representation to avoid O(n) copying
    pub fn empty() -> Engine {
            let mut peers = Vec::with_capacity(count);
    new_without_default_derive,
    {
        }
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        if let Some(ix) = style_map.lookup(style) {
            .map(|(i, _)| i)
            'O' => SampleEventType::ObjectSnapshot,
    }
    // trace_block()/trace_closure
    }
    /// End of the region selected when drag was started.
        self.selection = sel;
    }
        let tid = all_samples.front()
    ///
            SampleEventType::ObjectCreated => 'N',
                std::thread::sleep(std::time::Duration::new(0, 1000));

        while offset < l.len() && !l.is_char_boundary(offset) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
        if let Some((l, offset)) = self.get_leaf() {
/// ```
                    // We're super-aggressive about dropping these; after gc, the history
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
    }
    }
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        None => {
/// The payload associated with any sample is by default a string but may be
            //} else {
impl Eq for Sample {}
        use self::MergeTestOp::*;
        let b_revs = basic_insert_ops(inserts, 2);
/// some way.
                });
/// });
///
/// Computes a series of priorities and transforms for the deltas on the right
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    #[cfg(feature = "benchmarks")]
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            ix = sel_end as isize;
            black_box(trace.block_payload(
            None => return "",
        let res = find_base_index(&a, &b);
                name, categories, Some(payload.into()), start, end - start));
#[derive(Serialize, Deserialize, Debug)]
                self.add_selection_by_movement(text, Movement::Down),
            Merge(5,4),
    // How should we count "column"? Valid choices include:
#[inline]

        self.view_id
    fn compute_transforms_1() {

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
                        None
        self.size = size;

///
            view_id: view_id,
            );

        for find in self.find.iter() {
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    /// Exposed for unit tests.
        self.find_changed = FindStatusChange::Matches;
                            ops.push(self.build_update_op("skip", None, n_skip));
        let new_head_2 = engine.get_head_rev_id().token();
/// A size, in pixel units (not display pixels).
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

    impl MergeTestState {
              F: FnOnce() -> R
        let search_query = match self.selection.last() {
            offset = text.len();
    //
            SelectionIntoLines => self.do_split_selection_into_lines(text),
    }
    }

            max_undo_so_far,
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    }
        for sample in all_samples.iter() {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {

        assert_eq!(Some(0), b.prev_codepoint_offset(2));
///
        }
        self.send_update_for_plan(text, client, styles,
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
            self.first_line = line - (self.height - 1);
pub fn len_utf8_from_first_byte(b: u8) -> usize {


        self.selection = sel;
                    RopeDeltaElement_::Copy(start, end) =>

                Some(Cow::from(s))
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
        while let Err(incomp) = next_boundary {
    }
    }
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
    pub fn scroll_height(&self) -> usize {
        let a = Rope::from("\n");
            // I think it's a precondition that this will never be called
    }
            },
        debug_subsets(&rearranged_inserts);
        if offset >= text.len() {
            rendered_styles.push(style_id as isize);
        let edit_iv = Interval::new_closed_open(start, end);
                    }
    highlight_find: bool,
///
        if !self.is_enabled() {
        ---#--
    /// fine-grained in the case of multiple cursors, but we also want this
        hasher.finish()
        let closest_occurrence = self.find.iter().flat_map(|x|
    {
    FlowEnd,
        assert_eq!(TEST_STR, String::from(engine.get_head()));
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)

/// {
            }),
    /// the heap, counters, etc); just the data itself.
                Ok(CategoriesT::DynamicArray(categories))
    }
    }
/// Stores the tracing data.
#![cfg_attr(feature = "benchmarks", feature(test))]
    #[test]
                return;
/// from multiple distributed sources (i.e. you want to sort the merged result
        assert_eq!(0, r.line_of_offset(a.len() - 1));
    for rev in revs.iter().rev() {
    fn offset_of_line_small() {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        let mut cur_len_utf16 = 0;
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {

}
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        // rebase delta to be on the base_rev union instead of the text
        assert_eq!(1, expand_by[0].0.priority);
            args: Some(SampleArgs {

            HighlightFind { visible } => {

macro_rules! categories_from_constant_array {
            find_changed: FindStatusChange::None,
                return offset;
            event_type: SampleEventType::Instant,
/// Measured unit is newline amount.
        engine.edit_rev(1, edits+1, head, d1);
///
                    // we don't want new revisions before this to be transformed after us


                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
                    e.edit_rev(p, u, head, delta.clone());
                                gc_dels = gc_dels.transform_expand(inserts);
///
            Some(ref breaks) => {
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
    lc_shadow: LineCacheShadow,
            find.find_status(matches_only)
        }

        self.set_selection(text, selection);
pub type TracePayloadT = StrCow;
        while !leaf.is_char_boundary(end) {
            FindNext { wrap_around, allow_same, modify_selection } =>
    /// This is a regression test to ensure that session IDs are used to break
categories_from_constant_array!(7);
// you may not use this file except in compliance with the License.
pub struct Trace {
    #[inline]

        }
    /// What kind of sample this is.
        assert_eq!(4, a.offset_of_line(2));
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
}

        let mut engine = Engine::new(Rope::from(""));
        let replacement = match self.selection.last() {
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    }
            let (start, end) = if offset < drag_state.offset {

impl SampleEventType {
    #[cfg(feature = "benchmarks")]
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    }
        b if b < 0x80 => 1,
    /// Returns the visible line number containing the given offset.
            }
            } else {
        inserts.into_iter().enumerate().map(|(i, inserts)| {
        assert!(a != empty);
    Edit {
        let mut a = Rope::from("");
    /// Find the first revision that could be affected by toggling a set of undo groups
        for seg in self.lc_shadow.iter_with_plan(plan) {
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
        for i in 0..edits {
    // * Unicode width (so CJK counts as 2)
            event_type: SampleEventType::Instant,
    #[bench]
    }
        self.prev::<BaseMetric>();
        match *self {
        let line = self.line_of_offset(text, end);


    /// in the range of 511-1024 bytes.
            }
    fn do_cancel(&mut self, text: &Rope) {
                out.push((prio, inserts));
// See the License for the specific language governing permissions and
            categories: Some(categories.into()),
    #[bench]
    }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
            if let Some(ref thread_name) = sample.thread_name {

pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        );
            if inserts.is_empty() {
            samples: Mutex::new(FixedLifoDeque::new())
            utf16_size: 0,
            Merge(1,0),
    // reachability calculation.
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        assert_eq!(snapshot[7].name, "c");
        assert_eq!(rope.line_of_offset(0), 0);
                            deletes_bitxor
            r = op.inserts.apply(&r);
        let trace = Trace::enabled(Config::with_limit_count(10));
        match symbol {
                None => {
        let next_line_offset = self.offset_of_line(text, line + 1);
        let mut engine = Engine::new(Rope::from(TEST_STR));
            CategoriesT::StaticArray(ref self_arr) => {
#[derive(Clone, Copy)]
    #[serde(skip_serializing)]

        }
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
    pub fn select_all(&mut self, text: &Rope) {
        }
/// a.edit_str(1, 9, "era");
        }
    /// via process_name/thread_name respectively.
pub struct Sample {
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
impl View {

            match rev.edit {
        self.find_changed = FindStatusChange::All;
/// Measured unit is newline amount.
                self.add_selection_by_movement(text, Movement::Down),
    }
        self.height = last - first;

/// the `base_revs`. This allows the rest of the merge to operate on only
    pub fn do_find_all(&mut self, text: &Rope) {
            write!(f, "{}", String::from(self))
        }

    }
impl<'a> SampleGuard<'a> {
                last.1 = last.1.transform_union(&inserts);
                            edit: Edit {
        let script = vec![


fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
        assert_eq!(trace.get_samples_limit(), 20);
            _ => return
            SelectionIntoLines => self.do_split_selection_into_lines(text),

        self.find_changed = FindStatusChange::None;
                    self.do_gesture(text, line, column, GestureType::WordSelect)
        assert_eq!(None, a.prev_grapheme_offset(0));

            self.wrap_col = WrapWidth::Bytes(wrap_col);
            Assert(1, "cb".to_owned()),
    }
            let first_rev = engine.get_head_rev_id().token();
                        let un_deleted = deletes_from_union.subtract(deletes);
        for i in 0..self.len() {
    priority: usize,
            black_box(time::precise_time_ns());
        where S: Into<StrCow>, C: Into<CategoriesT>
    /// Returns the byte offset corresponding to the line `line`.
/// * `name` - A string that provides some meaningful name to this sample.
pub enum SampleEventType {
            self.next()
        }
            lines: count_newlines(s),

                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
/// Then offset=1 is invalid.
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
        ---#--
    fn build_delta_1() -> Delta<RopeInfo> {

            let pos = bc.next::<BreaksMetric>();
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,

}
        ];
    s.serialize_char(ph.into_chrome_id())
                                          closure: F, payload: P)
            enabled: AtomicBool::new(false),
            'N' => SampleEventType::ObjectCreated,
}
                //self.end - prev_pos
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference

            Merge(1,0),
    }
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
                last.1 = last.1.transform_union(&inserts);
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
    find: Vec<Find>,
    let mut out = Vec::with_capacity(revs.len());
        let height = self.line_of_offset(text, text.len()) + 1;
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            Merge(2,0),
    fn invalidate_selection(&mut self, text: &Rope) {
    find_leaf_split(s, MIN_LEAF)
/// # Examples
                self.do_selection_for_find(text, case_sensitive),
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
                MergeTestOp::Assert(ei, ref correct) => {
        Ok(exe_name) => {
#[macro_use]
    ///
            }
    }
/// Usage of static strings is encouraged for best performance to avoid copies.


    fn edit_rev_concurrent() {
    /// Callers are expected to validate their input.
            SampleEventType::AsyncStart => 'b',
use xi_rope::spans::Spans;
/// fn something_expensive() -> u32 {
        if self.idx <= self.current.unwrap().len() {
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
        let next_line_offset = self.offset_of_line(text, line + 1);
    /// Toggles a caret at the given offset.
        // the generated JSON.
                self.do_gesture(text, line, col, ty),
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    deletes_from_union: Subset,
/// supported as an optimization when only one reference exists, making the
    /// Tracks whether there has been changes in find results or find parameters.
                max_undo_so_far: i,
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
        let correct = parse_subset_list("

        };
const MAX_LEAF: usize = 1024;
            SampleEventType::FlowStart => 's',
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        }

        self.tombstones = new_tombstones;
    }

                            let line = self.render_line(client, styles, text,
        let mut cursor = Cursor::new(self, offset);
    }
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
                Delta {
/// # Arguments
            Merge(4,3),
    /// Get revision id of head revision.
                payload: payload,
use linewrap;
    /// Only works well for ASCII, will probably not be maintained long-term.
        } else {
            None => {
                        };
        let mut r = Rope::from("27");

        let next_line_offset = self.offset_of_line(text, line + 1);
                    } else if !inserts.is_empty() {
        if self.idx <= self.current.unwrap().len() {
}
        self.do_set_replace(replacement, false);
///
    #[bench]
            .map(|(i, _)| i)
        assert!(self.current.is_some());
    }
    current: Option<&'a str>,
/// Valid within a session. If there's a collision the most recent matching
    #[test]
            Merge(0,1),
/// # Returns
                            edit: Undo {
        use self::MergeTestOp::*;
    text: Rope,
            }
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
            Assert(0, "cbd".to_owned()),
        if self.find.is_empty() {
        }
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    #[test]
    utf16_size: usize,
        }

        println!("{:#?}", delta_ops);
    // * grapheme clusters
            return Vec::with_capacity(0);
}
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
        //for next line
                    "something", &["benchmark"],
//     http://www.apache.org/licenses/LICENSE-2.0
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
            Revision {
        let subset_str = format!("{:#?}", expand_by[0].1);
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");

            rendered_styles.push((sel_start as isize) - ix);
        impl From<RopeDelta_> for Delta<RopeInfo> {
pub fn samples_cloned_unsorted() -> Vec<Sample> {
    pub fn get_head_rev_id(&self) -> RevId {
        self.enabled.store(false, AtomicOrdering::Relaxed);
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        assert_eq!(2, a.line_of_offset(4));
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        let b = a.slice(1, 10);
            Assert(0, "acpbdj".to_owned()),
    /// New offset to be scrolled into position after an edit.
                metadata_name: None,
/// # Performance
        // insert character at end, when this test was added, it panic'd here
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
/// fn something_expensive() {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    #[test]
            for find in self.find.iter() {
// Copyright 2016 The xi-editor Authors.

                out.push((prio, inserts));
        assert!(self.current.is_some());
        }

            match exe_name.clone().file_name() {
    // use own breaks if present, or text if not (no line wrapping)
            undo_group: 0,
    fn bench_get_tid(b: &mut Bencher) {

    offset: usize,
        let a = Rope::from("a\nb\n");
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let b = a.slice(1, 10);
    {
        let mut style_map = style_map.borrow_mut();
    }
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
                                                        soft_breaks.as_mut(),
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
                    let mut selection = self.selection.clone();

    /// update cycle. This should be a last resort, updates should generally cause
        // todo: this will be changed once multiple queries are supported
        // send updated replace status if changed
    }
}
                    };
    {
    //TODO: implement iter_chunks using ranges and delete this
                        let mut line_cursor = Cursor::new(text, offset);
    #[test]
    utf16_size: usize,
            SampleEventType::AsyncStart => 'b',
    }
    /// The maximum amount of space the tracing data will take up.  This does
    /// recomputing line wraps.
                false => x.start
        });
    /// from the rope.
    /// End of the region selected when drag was started.
//! CRDT implementation techniques, because all operations are serialized in

            }
                metadata_sort_index: None,
        }
        assert_eq!(0, b.line_of_offset(0));
    use std::collections::BTreeSet;
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
                }
impl<'a> Iterator for ChunkIter<'a> {
}
    /// description for the invariant.
categories_from_constant_array!(9);
    #[serde(skip_serializing_if = "Option::is_none")]
                        DeltaElement::Insert(Rope::from(s)),
//See ../docs/MetricsAndBoundaries.md for more information.

        Cow::from(b)
    /// borrowed from the rope.
pub type StrCow = Cow<'static, str>;
                            max_undo_so_far: rev.max_undo_so_far,
                let (last, rest) = self.sel_regions().split_last().unwrap();
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
impl fmt::Debug for Rope {
    #[test]
        // a, b, y, z, c, x
    }
        offset
                if groups.contains(undo_group) {
    pub fn max_undo_group_id(&self) -> usize {
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
///     something_else_expensive(result);

    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        // insert `edits` letter "b"s in separate undo groups
    height: usize,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
}

    #[bench]
            Merge(0,2), Merge(1, 2),
                    return i + 1; // +1 since we know the one we just found doesn't have it
}


        /// The set of groups toggled between undone and done.
}
                            None
}
        d_builder.delete(Interval::new_closed_open(10, 36));
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
                // sanitize input

                let (ins, _) = delta.factor();
        assert_eq!("herald", String::from(a));


        self.find_changed = FindStatusChange::Matches;
        for i in 0..edits {
mod sys_pid;
        assert_eq!(samples[0].name, "remote pid");
///
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        }
                              categories: C,
                } else {
    }
                    priority, undo_group,
            let to_delete = if undone { &new_inserts } else { &new_deletes };


    }
        }
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        // We add selection after find because we want it to be preferred if the

    fn gc_4() {
        ]);
        max

            panic!("line number {} beyond last line {}", line, max_line);
use std::ops::Range;
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        }
                RenderTactic::Preserve => {
        peers: Vec<Engine>,
impl<'a> From<&'a Rope> for String {
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
            if (c > start_pos && c < pos) ||
        let initial_rev = engine.get_head_rev_id().token();

        b.build()

            rendered_styles.push((iv.start() as isize) - ix);
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    }
        let (leaf, pos) = cursor.get_leaf().unwrap();
        Ok(Delta::from(d))
        assert_eq!(1, r.line_of_offset(a.len()));
        assert_eq!(2, a.line_of_offset(5));
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));


                self.push_leaf(s.to_owned());
// Licensed under the Apache License, Version 2.0 (the "License");
}
        let script = vec![
        }
    /// Time complexity: technically O(n log n), but the constant factor is so

    session_id: SessionId,
    fn test_trace_disabled() {
        trace.instant("4", &["test"]);
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            }

    rev_id: RevId,
            None
mod tests {
            SampleEventType::ObjectSnapshot => 'O',
            'B' => SampleEventType::DurationBegin,
                                                     "insert", node)

            {
        }
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
        let mut ops = Vec::new();
        -##-
/// some way.
                }
                cur_all_inserts = older_all_inserts;
/// * `name` - A string that provides some meaningful name to this sample.

                            ops.push(self.build_update_op("skip", None, n_skip));
    fn from(c: Vec<String>) -> CategoriesT {
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    // allowing us to use the same method to insert the text into the tombstones.
                // TODO create InsertDelta directly and more efficiently instead of factoring

        assert_eq!(0, b.line_of_offset(1));
        let mut cursor = Cursor::new(self, offset);
            s = &s[splitpoint..];
        let s = String::deserialize(deserializer)?;
        assert_eq!(snapshot[1].name, "thread_name");
                            }

#[macro_use]
    fn edit_rev_concurrent() {
// You may obtain a copy of the License at
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);

    }
    let inverse_tombstones_map = old_deletes_from_union.complement();
    }
pub fn samples_cloned_unsorted() -> Vec<Sample> {
}
impl MetadataType {

        // even though the actual sampling order (from timestamp of
        ---#-

        let first = max(first, 0) as usize;
    }
        let new_head_2 = engine.get_head_rev_id().token();
        }
        let trace = Trace::enabled(Config::default());
}
                        word_cursor.select_word()
    }

            }
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
    // There will probably never be a document with more than 4 billion edits
        assert_eq!(Some(3), a.next_codepoint_offset(1));
        let mut selections = Vec::new();
        }
    }
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        // +2 for exe & thread name
mod tests {
    }
            args: Some(SampleArgs {
#[cfg(feature = "benchmarks")]
        // move deleted or undone-inserted things from text to tombstones
        let delta = Delta::synthesize(&self.tombstones,
impl NodeInfo for RopeInfo {
            .map(|(i, _)| i)
                    if s.ends_with('\r') {
/// have to be considered in `rebase` substantially for normal editing

    {
/// Internally, the implementation uses reference counting (not thread safe, though
use internal::find::FindStatus;
            word_cursor.select_word()
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
        assert!(self.current.is_some());

        engine.gc(&gc);

            pid: sys_pid::current_pid(),
    where D: serde::Deserializer<'de> {
            trace: Some(&trace),
/// required). Mutations are generally copy-on-write, though in-place edits are
    fn bench_single_timestamp(b: &mut Bencher) {
        // We add selection after find because we want it to be preferred if the
    }
        assert_eq!(snapshot[6].name, "z");
/// ```
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    ///
                        }
                    let (start, end) = self.peers.split_at_mut(ai);

                self.set(pos);
            Assert(2, "ab".to_owned()),
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
    ThreadSortIndex { sort_index: i32 },
        assert_eq!(2, expand_by[1].0.priority);
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
// you may not use this file except in compliance with the License.
                        word_cursor.select_word()

            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),


        let new_head = engine.get_head_rev_id().token();

        let snapshot = trace.samples_cloned_unsorted();
        let end = time::precise_time_ns();
    Bytes(usize),

/// conversions in both directions.
                              to_payload("test_get_samples"));
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
                break;
        info.utf16_size
            revs: vec![rev],
    fn lines_raw_small() {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
    match std::env::current_exe() {
        first_line..(last_line + 1)
            SampleEventType::FlowInstant => 't',
    #[test]

/// assert!("hello world" == String::from(a + b));
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    /// Tests that priorities are used to break ties correctly
            Move(movement) => self.do_move(text, movement, false),
                self.do_set_replace(chars, preserve_case),
    }
/// as opposed to thousands of revisions.
        RopeInfo {
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        engine.edit_rev(1, 2, new_head, d2);
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
            Merge(1,2),
        for u in s.chars() {

fn exe_name() -> Option<String> {
            revs: vec![rev],
    deletes_from_union: Subset,

///
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    fn drop(&mut self) {
        let a = Rope::from("a\nb\nc");
    }
            b.push_str(&c);
                match *other {
use std::mem::size_of;
/// See `trace_payload` for a more complete discussion.

    identity_op,

    /// Get previous codepoint before cursor position, and advance cursor backwards.
                    undo_group: i+1,
            "text": &l_str,
                Some(pos) => offset += pos + 1,

        engine.edit_rev(1, edits+1, head, d1);
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    }
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            Assert(0, "b".to_owned()),
    ObjectSnapshot,
    // recompute the prefix up to where the history diverges, but it's not clear that's
                                inserts,


    #[test]
                            (inserts, deletes)
/// For example, take a string that starts with a 0xC2 byte.
                Contents::Edit {inserts, ..} => inserts,
    }
            tid: sys_tid::current_tid().unwrap(),
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
    }
    /// Returns a slice of the string from the byte range [`start`..`end`).
        // shouldn't do anything since it was double-deleted and one was GC'd
    }
//     http://www.apache.org/licenses/LICENSE-2.0
            if let Some(pos) = pos { start_of_line.set(pos) }
        self.samples.lock().unwrap().len()

use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
// line iterators
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
/// Applies an optimization where it combines sequential revisions with the
    }
    find: Vec<Find>,
        let subset_str = format!("{:#?}", expand_by[0].1);

    }
impl Metric<RopeInfo> for LinesMetric {
        } else {
    }
                metadata_name: None,
        if self.is_enabled() {

#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
}
        // NOTE: we derive to an interim representation and then convert
            .map_or(0, |ref s| s.timestamp_us);
    fn test_samples_closure() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },


                // Deprecated (kept for client compatibility):
pub type TracePayloadT = serde_json::Value;
            max: offset,
            // to replicate whiteboard, z must be before a tombstone
        if b >= 0xf0 {
    }
                }
            Assert(2, "ab".to_owned()),
        
}
        }
        ]);

        let result = closure();
/// samples are ordered chronologically for several reasons:
        use self::MergeTestOp::*;
                        let offset = self.offset_of_line(text, start_line);

        self.deletes_from_union = deletes_from_union;
pub struct LinesRaw<'a> {
        if let Some(lines) = lines {
                    if retain_revs.contains(&rev.rev_id) {
            self.current = None;
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
                    to_payload(("some description of the closure")))));
    enabled: AtomicBool,
    #[test]
                    }
}
    #[test]
    pub fn is_enabled(&self) -> bool {
                priority, undo_group, deletes,
            max: offset,
    assert!(!a.is_empty() && !b.is_empty());
    fn gc_2() {
            sel.add_region(new_region);
    /// in the slice up to `offset`.
        self.replace_changed = true;
    fn accumulate(&mut self, other: &Self) {
}
}
        let res = find_common(&a, &b);
    }
    }
                        s = &s[..s.len() - 1];
    #[bench]
            self.start_drag(offset, offset, offset);
}
                        let end_line = start_line + seg.n;

            Assert(1, "abefg".to_owned()),
}
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
}
            self.categories == other.categories &&
        MergeTestState::new(6).run_script(&script[..]);
    {
            undo_group: 0,
        self.start_drag(offset, region.start, region.end);
        !self.selection.regions_in_range(offset, offset).is_empty()
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {

        true
        assert_eq!(trace.get_samples_count(), 0);
            cur_len_utf8 += u.len_utf8();
    // revision might hold content from an undo group that would otherwise be gc'ed),
                edit: Contents::Edit {
    None,

    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {

        self.set_selection_raw(text, selection);

        }
    // revision might hold content from an undo group that would otherwise be gc'ed),
        if let Some(sel) = new_sel {

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    DynamicArray(Vec<String>),
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.

    #[test]
        self.replace = Some(Replace { chars, preserve_case });
    fn bench_trace_block(b: &mut Bencher) {
    /// Merge the new content from another Engine into this one with a CRDT merge
    ProcessLabels { labels: String },
        }
            let right_str = self[splitpoint..].to_owned();


        let mut all_samples = self.samples.lock().unwrap();
    fn arr_eq(&self, other: &[&'static str]) -> bool {
}
                edit: Contents::Edit {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        for find in &mut self.find {

            return None;
        engine.edit_rev(1, edits+1, head2, d2);
/// ```
    }
    /// None of the find parameters or number of matches changed.
        let mut b = TreeBuilder::new();

    {

        let mut delta = serializer.serialize_struct("Delta", 2)?;
    }
    view_id: ViewId,

}
            self.record(Sample::new_duration(
        } else {
    fn from(c: Vec<String>) -> CategoriesT {
                            if !inserts.is_empty() {
            } else {
        engine.edit_rev(1, 1, first_rev, d1.clone());
                                deletes.transform_shrink(&gc_dels))
                                                        &mut line_cursor,
        } else { // no toggled groups, return past end
    }


        let trace = Trace::enabled(Config::with_limit_count(10));
                if self.fragment.is_empty() {
        assert_eq!(None, a.prev_codepoint_offset(0));
                        priority, undo_group,
            match memchr(b'\n', &s.as_bytes()[offset..]) {
    #[cfg(feature = "json_payload")]
/// Create a `Rope` from a `String`:
            },
    }
    for r in revs {
        self.lc_shadow = b.build();
    fn measure(_: &RopeInfo, len: usize) -> usize {
        // insert character at end, when this test was added, it panic'd here
        // This might be an over-specified test as it will
        }
/// fn something_else_expensive() {
        let first_rev = engine.get_head_rev_id().token();
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            session: default_session(),

            AddSelectionAbove =>
                    if seg.validity == line_cache_shadow::ALL_VALID {
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
        engine.gc(&gc);
        assert_eq!(5, a.offset_of_line(3));
    find: Vec<Find>,

use selection::{Affinity, Selection, SelRegion};
            &rebased_deletes_from_union, &new_deletes_from_union);
        assert_eq!(a.len(), r.offset_of_line(1));
        if !before {
            trace: None,
        // clamp to end of line

    ///
            return false;
    fn prev_codepoint_offset_small() {
// Copyright 2018 The xi-editor Authors.
            SampleEventType::FlowEnd => 'f',
                self.drag_state = None;
            SampleEventType::DurationEnd => 'E',
    /// This is a regression test to ensure that session IDs are used to break
    }
                    // TODO: update (rather than re-render) in cases of text valid
        }, to_payload("test_get_sorted_samples"));
            Merge(0,2), Merge(1, 2),
            Rope::concat(
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    ///

    pub fn max_samples(&self) -> usize {
categories_from_constant_array!(9);

}
    }
    // TODO: a case can be made to hang this on Cursor instead
    rev_id_counter: u32,
/// An element in a `RopeDelta`.
///
        assert_eq!(2, expand_by.len());
/// something_expensive();
    /// the text).
            }
fn shuffle(text: &Rope, tombstones: &Rope,
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
/// A guard that when dropped will update the Sample with the timestamp & then
                    }
        }
    }
            sel.add_region(region);
            FindPrevious { wrap_around, allow_same, modify_selection } =>
                    let e = &mut self.peers[ei];
    pub fn enable(&self) {
    /// Each instance represents a separate search query.
///
type StyleMap = RefCell<ThemeStyleMap>;
        if !self.is_point_in_selection(offset) {
                    // can only happen on empty input
    {
    #[test]
        self.buffer_id
        if line < self.first_line {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            engine.edit_rev(1, i+1, head, d);
    fn from(s: T) -> Rope {

    fn gc_scenario(edits: usize, max_undos: usize) {
    }
extern crate time;
        for _ in 0..line_len {
    }
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
                    if undone_groups.contains(undo_group) {
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
    }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        assert!(r != a_rope);

                let (pl, poffset) = self.prev_leaf()?;

    fn can_fragment() -> bool { true }

            'b' => SampleEventType::AsyncStart,
    fn identity() -> Self {
        let mut hasher = DefaultHasher::new();
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    // callers should be encouraged to use cursor instead
    match std::env::current_exe() {
        });
        }
        let head2 = engine.get_head_rev_id().token();
            }
            if !s.is_empty() {
    }
        ----

                    }
        impl From<RopeDelta_> for Delta<RopeInfo> {
        if s.len() <= MAX_LEAF {
        println!("{:#?}", delta_ops);
// limitations under the License.
        } else {
            }
/// ```rust
        update
    // A colliding session will break merge invariants and the document will start crashing Xi.
            self.shrink_to_fit();
                        }
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        let mut a = Rope::from("hello world");
        };
    find_leaf_split(s, MIN_LEAF)
    pub args: Option<SampleArgs>
                Rope::from(s1.clone()),
            AssertAll("ac".to_owned()),
/// Create an instantaneous sample with a payload.  The type the payload
                } else {
    }
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    /// Selects the given region and supports multi selection.
        /// revision that were deleted by this revision.
        let s = String::deserialize(deserializer)?;
//! pending edit in flight each.
        }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            self.record(Sample::new_instant(name, categories, None));
#[inline]
    {
    fn next_codepoint_offset_small() {
            cursor: Cursor::new(self, start),
// limitations under the License.
    }

        assert_eq!(1, b.line_of_offset(2));
    }
            Assert(1, "afc".to_owned()),
///
    pub(crate) fn has_pending_render(&self) -> bool {
    }
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    #[test]
        assert_eq!(snapshot[6].name, "z");
        memchr(b'\n', &s.as_bytes()[offset..])
        where S: Into<StrCow>, C: Into<CategoriesT>
#[derive(Clone, Debug)]
            Assert(1, "ab".to_owned()),

        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {

    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
#[macro_use]
}
fn shuffle(text: &Rope, tombstones: &Rope,
        let a = Rope::from("\n");

///

                }
        a.edit_str(1, 9, "era");
    pub height: f64,
    }
    s.serialize_char(ph.into_chrome_id())
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
        assert_eq!(rope.line_of_offset(15), 3);
/// 3. You may not care about them always being sorted if you're merging samples
        peers: Vec<Engine>,
/// from multiple distributed sources (i.e. you want to sort the merged result

            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
    /// Find the first revision that could be affected by toggling a set of undo groups
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                        &mut start[bi]
                    self.do_gesture(text, line, column, GestureType::PointSelect)
    fn lines_small() {
    }

/// some way.
                el.serialize_field(start)?;
    {



    }
        assert_eq!(2, b.offset_of_line(1));
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
                first_sample_timestamp,
                self.push_leaf(s.to_owned());
        _ => 4
        engine.gc(&gc);
/// Stores the tracing data.
            CategoriesT::DynamicArray(ref self_arr) => {
            update["lines"] = json!(lines);
                }
        // x, a, y, b, z, c
        // shouldn't do anything since it was double-deleted and one was GC'd
impl MetadataType {


            name: name.into(),
            if self[i] != other[i] {
}
    // for simplicity.
        use self::MergeTestOp::*;
    /// The semantics are intended to match `str::lines()`.
        assert_eq!(snapshot[4].name, "y");
{
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        let mut selection = Selection::new();
        engine.undo([1,2].iter().cloned().collect());

        // if self.end is inside this chunk, verify that it is a codepoint boundary
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
            let not_in_tombstones = self.deletes_from_union.complement();
impl From<Vec<String>> for CategoriesT {
        engine.gc(&gc);
        engine.undo([1].iter().cloned().collect());
                    let (mut a, rest) = end.split_first_mut().unwrap();
    }
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
        
}
                    to_payload(("some description of the closure")))));

    /// Returns a tuple of a new `Revision` representing the edit based on the
            find.set_hls_dirty(false)


                }
            GestureType::PointSelect => {
        } else {
        assert_eq!(rope.line_of_offset(0), 0);
                    };
        let contents = Contents::Edit {
        update
pub struct RopeInfo {
                // sanitize input
    fn do_cancel(&mut self, text: &Rope) {
        let tombstones_a = Rope::from("a");
    /// than this will panic.

        delta.serialize_field("base_len", &self.base_len)?;
    identity_op,
                   whole_words: bool) {
            if self[i] != other[i] {
        self.set(new_pos);
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
            rendered_styles.push(1);
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {


/// (such as insert, delete, substring) are O(log n). This module provides an immutable
        self.samples.lock().unwrap().len()
#[inline]

        let col = col as usize;
        for rev in &self.revs[first_candidate..] {
            inserts: Subset::new(0),
    // There will probably never be a document with more than 4 billion edits
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
#[inline]
            None
    pub(crate) fn record(&self, sample: Sample) {
        }
    /// The empty string will yield a single empty slice. In all other cases, the
}
        let mut engine = Engine::new(Rope::from(TEST_STR));
            Assert(2, "afc".to_owned()),
        trace.closure_payload("x", &["test"], || (),
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
        }
    /// unsaved changes.
            "pristine": pristine,

        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
    ($num_args: expr) => {
            }
//
    1
        (Revision {
    tombstones: Rope,
        all_samples.push_back(sample);
    }
            }
        self.set_selection(text, sel);
    CompleteDuration,
        assert_eq!(None, a.prev_codepoint_offset(0));
///
        /// revision that were added by this revision.
}
    fn test_get_samples() {


        engine.gc(&gc);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

    fn can_fragment() -> bool { false }
    }
/// A rope data structure.

                                  style_spans, &plan, pristine);
                metadata_sort_index: None,
        let mut samples = vec![
        /// The subset of the characters of the union string from after this

//
                }
        if !cursors.is_empty() {
    fn test_samples_block() {
    {
        self.selection = sel;
}
        LinesRaw {
        if self.len() != other.len() {
//     http://www.apache.org/licenses/LICENSE-2.0

            thread_name: Sample::thread_name(),
        prev_boundary.unwrap_or(None)

                len += 1;
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
/// overhead tracing routine available.
    ///
        assert_eq!(0, a.lines_all().count());
//! under `Engine::edit_rev`, which is considerably simpler than the usual
    #[test]
    /// this returns the offset of the end of the rope. Arguments higher
        let new_head = engine.get_head_rev_id().token();
            &self.deletes_from_union, &old_deletes_from_union);
        let mut engine = Engine::new(Rope::from(TEST_STR));
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
        first_line..(last_line + 1)
    }
        ];
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
            engine.undo(to_undo.clone());
    /// The process the sample was captured in.
        // rather than emitting an explicit start/stop to reduce the size of
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
    }

            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    a_ids.intersection(&b_ids).cloned().collect()
    /// via process_name/thread_name respectively.
            }
    {

        if let Some((l, offset)) = self.get_leaf() {
                if groups.contains(undo_group) {
    fn lines_small() {
    }
                let line = line.min(text.measure::<LinesMetric>() + 1);
    use test::Bencher;
        }
        if self.find_changed != FindStatusChange::None {

                let categories = v.split(",").map(|s| s.to_string()).collect();
        self.lc_shadow = b.build();
    }
        &leaf[offset..end]
                pos = leaf_offset + nl.len();

}

    fn line_offsets() {
        engine.gc(&gc);
    }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

    }
    #[serde(rename = "dur")]
    }
        self.deletes_from_union = deletes_from_union;
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
impl<'a> Iterator for Lines<'a> {
    /// height of visible portion
                undo_group,
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        b.set_dirty(true);
/// from the new revisions on the left.
    pub fn get_samples_count(&self) -> usize {
    fn test_get_samples_nested_trace() {
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
/// std::mem::drop(trace_guard); // finalize explicitly if

        let script = vec![
            Assert(0, "zacpb".to_owned()),
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        assert_eq!(rope.line_of_offset(3), 1);
    fn into_chrome_id(&self) -> char {

        for chunk in self.iter_chunks(start, end) {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
// you may not use this file except in compliance with the License.
            ix = sel_end as isize;

    #[test]
    #[bench]
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
            // corner and I'm lazy -cmyr
}
            rendered_styles.push(sel_end as isize - sel_start as isize);
    fn from_chrome_id(symbol: char) -> Self {
    pub timestamp_us: u64,


    // maybe explore grabbing leaf? would require api in tree

    fn bench_get_pid(b: &mut Bencher) {
        self.samples.lock().unwrap().len()
        // since one of the two deletes was gc'd this should undo the one that wasn't
        let inserts_2 = parse_subset_list("
        // x, a, y, b, z, c
//     http://www.apache.org/licenses/LICENSE-2.0
        b.push_str(new);
        x
                    if !inserts.is_empty() {
            undone_groups: BTreeSet::new(),
    {

        }
            self.start_drag(offset, offset, offset);
        let inserts = parse_subset_list("
    }
    AsyncInstant,

        let mut result = Cow::from("");
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        let start_pos = start_of_line.pos();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

        }, deletes_from_union)
    fn is_ok_child(&self) -> bool {
        // +2 for exe & thread name.
    //TODO: implement iter_chunks using ranges and delete this
                }
pub type RevToken = u64;
                engine.gc(&to_gc)
            'O' => SampleEventType::ObjectSnapshot,
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        let a = Rope::from("\n");
    }
    #[test]
    /// recomputing line wraps.
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
}
}
    #[test]
        } else {
        self.set_selection_raw(text, selection);
            thread_name: Sample::thread_name(),


    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
struct Revision {
        b.add_span(height, 0, 0);
                    if seg.validity == line_cache_shadow::ALL_VALID {
}
/// patterns. Any large runs of typing in the same place by the same user (e.g
    }

        if let Some(last) = self.revs.last() {
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());

            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {


/// Usage of static strings is encouraged for best performance to avoid copies.
            self.tid == other.tid &&

        let mut d_builder = Builder::new(TEST_STR.len());


impl Add<Rope> for Rope {
            &rebased_deletes_from_union, &new_deletes_from_union);
    min: usize,
                self.set(pos);
        let mut d_builder = Builder::new(TEST_STR.len());

        let last = max(last, 0) as usize;
use tabs::{ViewId, BufferId};
            }
            Merge(1,0),
    /// The `pristine` argument indicates whether or not the buffer has

                }
        }
    edit: Contents,
    }
        let first_sample_timestamp = all_samples.front()
        // creation) is:
    }

            // which we can do with another peer that inserts before a and merges.
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        where S: Serializer

    utf16_count
            utf16_count += 1;
    fn to_payload(value: &'static str) -> TracePayloadT {
                if !inserts.is_empty() {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

        });
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        let height = self.line_of_offset(text, text.len()) + 1;
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
use xi_rope::delta::Delta;
/// ```
    }

use interval::Interval;
        if offset == 0 {
            tombstones: Rope::default(),
        -> R
        let a = Rope::from("\n");
            MetadataType::ProcessName {..} => "process_name",
    ProcessSortIndex { sort_index: i32 },
                match elem {
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
                self.push_leaf(s.to_owned());
const FLAG_SELECT: u64 = 2;

        self.revs.iter().enumerate().rev()

    #[cfg(feature = "benchmarks")]
    #[test]
        }

        assert_eq!(Some(1), a.prev_codepoint_offset(3));
///
}
                                                    style_spans, client,
            base_sel: selection.clone(),
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        let is_base = base_revs.contains(&rev.rev_id);
impl<'a> Cursor<'a, RopeInfo> {
const MAX_LEAF: usize = 1024;

    pub fn new_duration<S, C>(name: S,
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        let initial_rev = engine.get_head_rev_id().token();
    fn to_payload(value: &'static str) -> TracePayloadT {
        let snapshot = trace.samples_cloned_unsorted();
        assert_eq!(snapshot[8].name, "c");
            }
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
        }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
        assert_tokens(&rope, &[
                         start: usize, end: usize, sel: &[(usize, usize)],
        self.convert_metrics::<LinesMetric, BaseMetric>(line)

            Assert(1, "arpb".to_owned()),
    /// This method is responsible for updating the cursors, and also for
        if !new_inserts.is_empty() {
                        deletes_from_union = deletes_from_union.union(deletes);
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        let trace = Trace::disabled();
        let new_sel = selection_movement(movement, &self.selection,
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        AssertMaxUndoSoFar(usize, usize),
                    selection.add_region(occ);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
/// Get a slice of a `Rope`:
    /// ancestor in order to be mergeable.
    fn can_fragment() -> bool { false }
        self.selection = sel;
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
            }
            for find in self.find.iter() {
            't' => SampleEventType::FlowInstant,
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
                    return None;
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
/// Usage of static strings is encouraged for best performance to avoid copies.
/// * `categories` - A static array of static strings that tags the samples in
#[macro_use]


categories_from_constant_array!(4);
            undone_groups: BTreeSet::new(),
        engine.undo([1].iter().cloned().collect());
///
            };
        }
    fn gc_4() {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

            deletes_from_union = match rev.edit {
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        }
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
impl Hash for Sample {
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                                priority,
            Some(Cow::Borrowed(mut s)) => {
        let first_rev = engine.get_head_rev_id().token();
            args: Some(SampleArgs {
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
// Copyright 2016 The xi-editor Authors.
        priority: usize,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let mut pos = self.pos();
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
            Assert(1, "pb".to_owned()),
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    fn gc_3() {
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
    }
        }

    /// recomputing line wraps.
        delta.end()
        let mut cursors = Vec::new();
    }
    }

    // TODO: insert from keyboard or input method shouldn't break undo group,
        b.push('\n');
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        engine.undo([1].iter().cloned().collect());
        assert_eq!(None, a.prev_grapheme_offset(0));
                        let (inserts, deletes) = if gc_dels.is_empty() {

#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]

        }
        self.set(new_pos);
    ///
            if let Some(replace) = self.get_replace() {
        let mut sel = self.selection.clone();

        }

                        .map(DeltaElement::from).collect(),
        cursor.prev_grapheme()
/// A size, in pixel units (not display pixels).
    #[bench]
            categories: Some(categories.into()),

                    if let Some(last_selection) = self.selection.last() {
                _ => panic!("to_base_units called with arg too large")
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
                    // fast-forward this revision over all common ones after it
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
use std::collections::BTreeSet;
                return offset;
///

    #[cfg(feature = "benchmarks")]
pub struct Utf16CodeUnitsMetric(usize);
    }
            let expand_by = compute_transforms(a_new);
            Merge(0,2), Merge(1, 2),
macro_rules! categories_from_constant_array {
        // rebase insertions on text and apply

                        None if cursor.pos() == text.len() => cursor.pos(),
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
            GestureType::MultiLineSelect =>
    FlowStart,
    fn gc_5() {
            // trans-expand other by expanded so they have the same context
    fn into_chrome_id(&self) -> char {
    }

        let first_rev = engine.get_head_rev_id().token();
impl<'a> Cursor<'a, RopeInfo> {

            },
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
        if f.alternate() {
        println!("{:#?}", b_delta_ops);
}
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
            }
        }
        if self.find.is_empty() {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,

    // There will probably never be a document with more than 4 billion edits

    fn next_rev_id(&self) -> RevId {
    ///
    // and partly because you need to retain more undo history, to supply input to the
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
    highlight_find: bool,
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
    /// Updates the view after the text has been modified by the given `delta`.
        for _i in 0..50 {
    let mut s = Subset::new(head_len);
        String::from(&r)
/// same priority into one transform to decrease the number of transforms that
        for _ in 0..line_len {
    // * Actual measurement in text layout
            Assert(1, "zpbj".to_owned()),
    pub fn enable(&self) {
                    Some(chunk) => self.fragment = chunk,
    /// the frontend.
/// between two utf8 code units that form a code point is considered invalid.
#[inline]
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
    type L = String;
            return false;

            SampleEventType::FlowStart => 's',
            engine.edit_rev(1, i+1, head, d);
    }
    /// the pid or the tid depends on the name of the event
        //};
            Merge(2,0),

        if self.is_enabled() {
    fn gc() {

    size: Size,
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {

#[derive(PartialEq, Debug)]
                    text.slice_to_string(start, end)
                    .with_affinity(affinity)
        for find in self.find.iter() {
            Assert(1, "pb".to_owned()),
    }
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
    pub categories: Option<CategoriesT>,

}
            // TODO: finer grain invalidation for the line wrapping, needs info
    replace: Option<Replace>,
            timestamp_us: ns_to_us(time::precise_time_ns()),
        &self.selection
        self.enabled.store(true, AtomicOrdering::Relaxed);
        if self.is_enabled() {
        let search_query = match self.selection.last() {
    #[bench]
const FLAG_SELECT: u64 = 2;
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        assert_eq!(utf16_units, 20);
// distributed under the License is distributed on an "AS IS" BASIS,
            offset += 1;
    }
/// See `trace_closure` for how the closure works and `trace_payload` for a
                    priority, undo_group,
    idx: usize,
        } else {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
                MergeTestOp::AssertAll(ref correct) => {
        // NOTE: we derive to an interim representation and then convert
            .map(|(i, _)| i)
}
            ix = sel_end as isize;
//! It enables support for full asynchronous and even peer-to-peer editing.
/// However, anything that can be converted into a Cow string can be passed as
impl<'a> SampleGuard<'a> {
            Assert(3, "ab".to_owned()),
        assert_eq!("#---#--", &subset_str);

        assert_eq!(0, b.offset_of_line(0));
impl<'a> SampleGuard<'a> {
                len += 1;
        b.push('\n');
        }
                    return i + 1; // +1 since we know the one we just found doesn't have it
fn clamp(x: usize, min: usize, max: usize) -> usize {
        }
                    self.do_gesture(text, line, column, GestureType::LineSelect)
        // of the delta so we can set the cursor before or after the edit, as needed.
            match seg.tactic {



                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
    ObjectSnapshot,
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
                    };
        assert_eq!(snapshot[5].name, "z");
        self.sample_limit_count * size_of::<Sample>()
        // rebase delta to be on the base_rev union instead of the text
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
///
        self.buffer_id
        assert_eq!(None, a.prev_codepoint_offset(0));
        if self.find.is_empty() {
    #[cfg(feature = "benchmarks")]
/// }
        b.set_dirty(true);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        if !cursors.is_empty() {

    {
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
/// ```
}
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    /// method to be fast even when the selection is large.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
        a.lines_all().collect::<Vec<_>>());
                Delta {
        self.find_changed = FindStatusChange::Matches;
            Replace { chars, preserve_case } =>
        if self.len() != other.len() {
        for (iv, style) in style_spans.iter() {
        assert_eq!(snapshot[3].name, "y");
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        match *self {
/// stored as tracing could still be enabled but set with a limit of 0.
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);

        assert_eq!(snapshot[1].name, "thread_name");
                self.set(pos);
        }).collect();
/// Get a slice of a `Rope`:
            if let Edit { priority, ref inserts, .. } = r.edit {
//! pending edit in flight each.
                }

        for &(sel_start, sel_end) in sel {
fn find_leaf_split_for_merge(s: &str) -> usize {
    pub tid: u64,
            args: Some(SampleArgs {
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
        if (b as i8) >= -0x40 {
    ProcessName { name: String },
#[inline]
            self.next()
        struct CategoriesTVisitor;
        true
    TRACE.instant_payload(name, categories, payload);
        self.set_selection_raw(text, selection);
/// are shared.
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        let new_head_2 = engine.get_head_rev_id().token();
    fn add(self, rhs: Rope) -> Rope {
        // insert `edits` letter "b"s in separate undo groups
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
            Assert(1, "pb".to_owned()),

        // set last selection or word under current cursor as replacement string
        assert_eq!(snapshot[4].name, "z");
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
    fn gc() {
            Merge(0,1), // the merge from the whiteboard scan
    {
/// });
                Delta {

        self.lines += other.lines;
impl fmt::Debug for Rope {
            SampleEventType::Metadata => 'M'
        }
            l[offset..].chars().next()
/// With `json_payload` feature:
        let inserts_1 = parse_subset_list("
            }
}
            CategoriesT::StaticArray(ref arr) => arr.join(sep),

/// Measured unit is newline amount.
            Revision {
        use self::MergeTestOp::*;

    inserts: InsertDelta<RopeInfo>,
/// an argument.

    pub fn is_enabled(&self) -> bool {
                    let new_gc_dels = if inserts.is_empty() {
            inner: self.iter_chunks(start, end),
            let base_index = find_base_index(&self.revs, &other.revs);
    }
    /// this returns the offset of the end of the rope. Arguments higher

impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    }
        #[derive(Serialize, Deserialize)]
        let mut pos = self.pos();
    }
    }
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                }
impl Sample {
    // callers should be encouraged to use cursor instead
        }
                        DeltaElement::Insert(Rope::from(s)),
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            None
                        }
            if let Edit { ref inserts, .. } = rev.edit {

        let first_line = self.line_of_offset(text, start);
    fn prev_grapheme_offset() {

            return 0;

        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");


    }
                }
/// feature makes the payload a `serde_json::Value` (additionally the library
            line_cache_shadow::CURSOR_VALID
    #[cfg(feature = "benchmarks")]
        // todo: the correct Find instance needs to be updated with the new parameters
    fn undo_5() {
    fn replace_small() {
    /// Time complexity: O(log n)
        assert_eq!(None, b.next_codepoint_offset(9));
        assert_eq!(snapshot[3].name, "a");
        &leaf[offset..end]
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
}

    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
fn initial_revision_counter() -> u32 {
            // shouldn't be called with this, but be defensive
    pub(crate) fn has_pending_render(&self) -> bool {
        assert_eq!(2, a.line_of_offset(4));
    /// in the range of 511-1024 bytes.

        -##-
                return None;
        let contents = match rev.edit {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();

    fn prev(s: &String, offset: usize) -> Option<usize> {
    fn line_offsets() {
//
            SampleEventType::AsyncInstant => 'n',
    }
        };
    }
    /// New offset to be scrolled into position after an edit.
        }

    fn to_payload(value: &'static str) -> TracePayloadT {

                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
            'D' => SampleEventType::ObjectDestroyed,
            self.idx = 0;
impl SampleEventType {
        if let Some(lines) = lines {

        }, new_text, new_tombstones, new_deletes_from_union)
        Self {

    }

            CategoriesT::StaticArray(ref self_arr) => {
        delta.end()
        let iv = Interval::new_closed_open(start, end);
    (1, 0)
        // update only find highlights affected by change
        let r = Rope::from(&a[..MAX_LEAF]);
// Copyright 2016 The xi-editor Authors.
            self.idx += 1;
        let revs = basic_insert_ops(inserts, 1);
        engine.undo([1].iter().cloned().collect());
}
        /// together. For example, an auto-indent insertion would be un-done
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
        assert_eq!(trace.is_enabled(), true);

        // probably change as the recording internals change.
            utf16_count += 1;
        if before {
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    /// No wrapping in effect.
                let (pl, poffset) = self.prev_leaf()?;
        assert_eq!(1, expand_by.len());
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
                    inserts: ins,
        let mut all_samples = self.samples.lock().unwrap();
}
    /// The maximum number of samples that should be stored.
    base_sel: Selection,
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
        }).collect()

    fn compute_transforms_1() {
    #[derive(Clone, Debug)]
categories_from_constant_array!(8);

            FindAll => self.do_find_all(text),
            Merge(0,1),
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
    }
    }
            }
        self.buffer_id
            fragment: ""
        engine.gc(&gc);
use xi_trace::trace_block;
            };
    fn do_selection_for_replace(&mut self, text: &Rope) {
        self.find_changed = FindStatusChange::None;
            trace: Some(&trace),
    fn next_rev_id(&self) -> RevId {
        while !leaf.is_char_boundary(end) {
                first_sample_timestamp,
        }
    /// # Panics
        // This might be an over-specified test as it will
                let (ins, _) = delta.factor();
        }
    fn next_grapheme_offset() {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
            els: Vec<RopeDeltaElement_>,
        // interior of first line should be first line
                                            closure: F, payload: P) -> R
pub struct RevId {
            },
            SampleEventType::Metadata => 'M'
mod sys_pid;
                sel.add_region(SelRegion::new(last.start, offset));

        let revs = basic_insert_ops(inserts, 1);
                    for (ei, e) in self.peers.iter().enumerate() {

                if groups.contains(undo_group) {


    }
    #[test]
                self.add_selection_by_movement(text, Movement::Down),


            // with offset == s.len(), but be defensive.
// Copyright 2016 The xi-editor Authors.
    assert!(!a.is_empty() && !b.is_empty());
impl Leaf for String {

        }
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
//
    }
        if !cursors.is_empty() {
            None
                let mut cursor = Cursor::new(&text, region.min());
        };
        client.update_view(self.view_id, &params);
        // A with ring, hangul, regional indicator "US"
    pending_render: bool,
                                deletes.transform_shrink(&gc_dels))
    selection: Selection,
    TRACE.closure_payload(name, categories, closure, payload)

    Instant,
///
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
/// have to be considered in `rebase` substantially for normal editing
            .map(|(i, _)| i)

        Rope::from_str(s.as_ref()).unwrap()
        ");
                text.offset_of_line(line)
    }
                        ops.push(self.build_update_op("copy", None, seg.n));
        #[derive(Serialize, Deserialize)]
        for rev in old_revs.into_iter().rev() {
    #[serde(rename = "xi_payload")]
    pub fn slice(&self, start: usize, end: usize) -> Rope {
        // 1 MB
// You may obtain a copy of the License at
                Some(Cow::from(s))
                Delta {
    // * Unicode codepoints
    }
                self.select_word(text, offset, false),
/// ```
    }
            // with offset == s.len(), but be defensive.
        assert!(leaf.is_char_boundary(end));
/// Boundary is atomic and determined by codepoint boundary.
        &self.selection
        self.sample_limit_count
    #[inline]
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
///
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
        // selection state, and for scrolling it into view if needed. This choice can

            //}
        self.prev::<BaseMetric>();


        ");
        let mut cursor = Cursor::new(self, offset);
        Self {
            // with offset == 0, but be defensive.
    /// Selects the given region and supports multi selection.
            let b = s.as_bytes()[offset];
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
use std::cell::RefCell;
/// assert_eq!("herald", String::from(a));
    fn undo_4() {
/// required). Mutations are generally copy-on-write, though in-place edits are
use xi_rope::tree::Cursor;
/// feature makes the payload a `serde_json::Value` (additionally the library
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());

    /// Selects the next find match.
    /// Starts a drag operation.
        let utf8_offset = 13;
/// });
        }
            _ => None
            let expand_by = compute_transforms(a_new);
        } else {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
            find: Vec::new(),
        let mut pos = self.pos();
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            // selection with interior
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        let first_rev = engine.get_head_rev_id().token();

                // TODO could probably be more efficient by avoiding shuffling from head every time
                                                                0, "copy", 2)?;
            // d-expand by other
        engine.undo([].iter().cloned().collect());
    {
}
            ix = sel_end as isize;
            self.set_selection(text, sel);

pub type TracePayloadT = StrCow;

        }
        let empty = Rope::from("");

        let mut cursors = Vec::new();
        assert_eq!(None, a.next_codepoint_offset(10));

        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    /// Tests that priorities are used to break ties correctly
}
        // TODO(vlovich): optimize this path to use the Complete event type
///
/// Base unit is utf8 code unit.
            match rev.edit {
        let inserts = parse_subset_list("


            }
    #[bench]
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        }, to_payload("test_get_sorted_samples"));
    fn replace_small() {
        }
            AssertMaxUndoSoFar(0,3),
}
                    match full_path_str {
                        line_num = seg.their_line_num + seg.n;
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
{
        if self.len() != other.len() {
    }
    /// ancestor in order to be mergeable.
        // interior of first line should be first line


        });
    use rope::{Rope, RopeInfo};
    fn compute_deltas_1() {
/// equivalent performance to a regular trace.  A string that needs to be copied
        assert_eq!(4, a.offset_of_line(2));

        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
pub fn is_enabled() -> bool {

pub struct ChunkIter<'a> {
        b.iter(|| {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    /// revision, and so needs a way to get the deletion set before then.
        engine
        }
        // rather than emitting an explicit start/stop to reduce the size of
    /// Determines the current number of find results and search parameters to send them to
        #------
        ]);
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
}
        for i in 1..(s1.len() * 3) {
                Ok(CategoriesT::DynamicArray(categories))
///
        ]);
    } else {
#[cfg(feature = "benchmarks")]
    }
            MetadataType::ThreadName {name} => (Some(name), None),
            let base_index = find_base_index(&self.revs, &other.revs);
    #[cfg(feature = "benchmarks")]
        next_boundary.unwrap_or(None)
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
                },
    #[test]
            },
use std::collections::hash_map::DefaultHasher;
        assert_eq!(Some(3), a.next_grapheme_offset(0));
        }
    /// the heap, counters, etc); just the data itself.
    } else {
        base_subset.is_some() && base_subset == other_subset
        for rev in &self.revs[first_candidate..] {
                                          closure: F, payload: P)
    /// concurrently it will have count `2` so that undoing one delete but not
impl View {
            't' => SampleEventType::FlowInstant,
    /// The selection state for this view. Invariant: non-empty.
            ix = sel_end as isize;
                    let mut e = &mut self.peers[ei];
        if self.find.is_empty() {
/// `base_revs`, but modified so that they are in the same order but based on
    ///
        ---#-
    /// Returns the visible line number containing the given offset.
            a.push('a');
// You may obtain a copy of the License at
        }
    TRACE.disable();
        }
//

        self.height = last - first;
        }
        self.lc_shadow = b.build();

        result
            self.current = next_chunk;
                //self.end - prev_pos
    /// description for the invariant.
        let trace = Trace::disabled();
                }

        }
            }
    }
#[derive(Clone, Copy)]
            }
    }
            for i in 0..count {
    }
    }
        if !self.is_enabled() {
            Assert(2, "adfc".to_owned()),
// distributed under the License is distributed on an "AS IS" BASIS,
/// ```
        let contents = match rev.edit {
            FindAll => self.do_find_all(text),
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
                    rev_id: rev.rev_id,
        assert_eq!(trace.get_samples_limit(), 11);
            Assert(0, "acbd".to_owned()),
#[derive(Serialize, Deserialize, Debug)]
    fn test_get_samples() {
                text.offset_of_line(line)
        b if b < 0x80 => 1,
            base_rev: RevToken, delta: Delta<RopeInfo>) {

            SampleEventType::DurationBegin => 'B',
    {
                        gc_dels = new_gc_dels;
    #[bench]
            if !selection.is_empty() {
        let a = Rope::from("a\nb\nc");
    }
        if self.current.is_none() {
        self.set(new_pos);
                self.select_line(text, offset, line, false),
        let line = self.line_of_offset(text, end);
    type Item = &'a str;
        }

                            deletes_bitxor.transform_shrink(&gc_dels)
    inner: ChunkIter<'a>,
    deletes_from_union: Subset,
            Cancel => self.do_cancel(text),
            Drag(MouseAction { line, column, .. }) =>
        let start = self.line_col_to_offset(text, line, 0);
        // todo: this will be changed once multiple queries are supported
            end -= 1;
    /// Get previous codepoint before cursor position, and advance cursor backwards.
            word_cursor.select_word()
                }
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
        let script = vec![
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
}
    {
        b.add_span(height, 0, 0);
        ---#-
pub fn enable_tracing() {
            Gesture { line, col, ty } =>


            while !s.is_char_boundary(offset - len) {
fn clamp(x: usize, min: usize, max: usize) -> usize {
fn exe_name() -> Option<String> {
            if next_chunk.is_none() { return None; }
    }
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
        samples[0].timestamp_us = 10;
                    let full_path = exe_name.into_os_string();
    }
        // todo: the correct Find instance needs to be updated with the new parameters

            Insert(String),
        } else {
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        trace.closure_payload("x", &["test"], || {
    /// finer grain invalidation.



        }
    pending_render: bool,
        {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
                                                        style_spans, line_num);
    }
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });

        // additional tests for line indexing
        #[derive(Serialize, Deserialize)]
/// ```rust,ignore
            Assert(1, "arpbj".to_owned()),
    rev_id: RevId,
    pub(crate) fn unset_find(&mut self) {
                    if retain_revs.contains(&rev.rev_id) {
                    filename.to_str().map(|s| s.to_string())
    /// revision, and so needs a way to get the deletion set before then.
}
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");

// distributed under the License is distributed on an "AS IS" BASIS,
    }
        assert_eq!(snapshot[2].name, "x");
}
        }
        &leaf[offset..end]
    /// Return the offset of the codepoint before `offset`.
                        deletes_from_union = deletes_from_union.transform_union(inserts);
}
                              categories: C,
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

            Sample::new_instant("local pid", &[], None),
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
        let first_rev = engine.get_head_rev_id().token();
        while !leaf.is_char_boundary(end) {
                              start_ns: u64,
                }
    }
                }
/// # Returns

use word_boundaries::WordCursor;
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
                    if !deletes.is_empty() {
        assert_eq!(1, b.line_of_offset(2));
/// For example, take a string that starts with a 0xC2 byte.
    pub fn enable(&self) {
            }
    /// Garbage collection means undo can sometimes need to replay the very first
///     something_else_expensive(result);
}
///
    #[test]
mod tests {
                offset = prev;
            'B' => SampleEventType::DurationBegin,
            Sample::new_instant("remote pid", &[], None)];
        }
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
            edit: Contents::Edit {
        let len = match first_rev.edit {
        for mut find in self.find.iter_mut() {
        let mut end = start_pos + len;
}
    }
//! It enables support for full asynchronous and even peer-to-peer editing.
                self.highlight_find = visible;
            Assert(0, "ab".to_owned()),
impl Add<Rope> for Rope {
    type Item = Cow<'a, str>;
    {
        }
        self.view_id
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
        let script = vec![
                          payload: Option<TracePayloadT>) -> Self
                    for (ei, e) in self.peers.iter().enumerate() {
    }
            Some(offset - len)
        assert_eq!(snapshot[1].name, "thread_name");

        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    fn measure(_: &RopeInfo, len: usize) -> usize {
    // use own breaks if present, or text if not (no line wrapping)


            cursor: Cursor::new(self, start),
    // TODO: maybe refactor this API to take a toggle set
    1
    TRACE.enable_config(config);

        let deletes_from_union_a = parse_subset("-#---");
        let correct = parse_subset_list("
//

                            }
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    /// from the rope.
            // with offset == s.len(), but be defensive.
    /// Tracks whether the replacement string or replace parameters changed.
    }
        assert_eq!(2, b.offset_of_line(1));
    #[derive(Debug)]
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        // only one of the deletes was gc'd, the other should still be in effect
        selection.add_region(region);
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            AssertMaxUndoSoFar(1,3),
                pos = leaf_offset + nl.len();
    }
categories_from_constant_array!(9);
        self.set_selection_raw(text, selection);
                        deletes: transformed_deletes,
    }
    }
                        sample.tid));

        ");
}
            Assert(2, "adfc".to_owned()),
            prev_boundary = c.prev_boundary(&l, leaf_offset);
    /// a point that should be scrolled into view.
/// Returns the file name of the EXE if possible, otherwise the full path, or
    //TODO: implement iter_chunks using ranges and delete this
    pub fn join(&self, sep: &str) -> String {
    pub fn join(&self, sep: &str) -> String {

                len += 1;
        // TODO: refine for upstream (caret appears on prev line)
        self.cursor.next_leaf();
        }

    Metadata
            find.update_highlights(text, delta);
        } else {
            Assert(0, "zacbd".to_owned()),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
        self.selection = sel;
        b.iter(|| {

                }
        let plan = RenderPlan::create(height, self.first_line, self.height);
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
                    ops.push(self.build_update_op("invalidate", None, seg.n));
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
    }
        Self {
            Merge(0,2), Merge(1, 2),
    buffer_id: BufferId,
    }
    use rope::{Rope, RopeInfo};
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
/// conforms to is currently determined by the feature this library is compiled
            'E' => SampleEventType::DurationEnd,
/// ```
    }

                              categories: C,
fn find_leaf_split(s: &str, minsplit: usize) -> usize {

/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
        d.insert(StrCow::from("test"), StrCow::from(value));
        engine.undo([3].iter().cloned().collect());
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
            'B' => SampleEventType::DurationBegin,
        let mut leaf_offset = pos - offset;
                    let _ = s.pop();
/// some way.
        let mut samples = vec![
    TRACE.enable();
                    })
        impl<'de> Visitor<'de> for CategoriesTVisitor {


        where S: Into<StrCow>, C: Into<CategoriesT>
    TRACE.get_samples_count()
    ProcessSortIndex { sort_index: i32 },
        }
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        assert_eq!(snapshot[7].name, "z");
#[derive(Serialize, Deserialize, Debug)]
        offset
        for (iv, style) in style_spans.iter() {
#[inline]
    /// New offset to be scrolled into position after an edit.
    }

            let to_delete = if undone { &new_inserts } else { &new_deletes };
                self.do_set_replace(chars, preserve_case),
        offset
}
        use self::MergeTestOp::*;
    pub chars: String,
        let mut rendered_styles = Vec::new();
 //additional cursor features
    }
    pub fn new_disabled() -> Self {
    }
    // callers should be encouraged to use cursor instead
    fn do_selection_for_replace(&mut self, text: &Rope) {
            MetadataType::ProcessLabels {..} => "process_labels",
}
                    } else {
            Assert(1, "abc".to_owned()),
/// * `categories` - A static array of static strings that tags the samples in
            height: 10,
    ///
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    /// Tracks whether there has been changes in find results or find parameters.

    }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
/// conversions in both directions.

        let mut end = start_pos + len;
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));

            Assert(0, "acbd".to_owned()),
            return ix;
    }
    for &b in s.as_bytes() {
                inserts: inserted,
               a.lines_all().collect::<Vec<_>>());

            Merge(1,0),
    type Item = &'a str;
        assert_eq!(utf8_offset, 9);

    }
        assert_eq!(1, res);
    }
    pub(crate) fn has_pending_render(&self) -> bool {
use width_cache::WidthCache;
            deletes = deletes.transform_expand(&new_trans_inserts);
        /// and new deletes_from_union

    }
                self.drag_state = None;
    /// Select entire buffer.
    }
//

        engine.edit_rev(0, 1, first_rev, build_delta_1());

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                            warn!("Failed to get string representation: {:?}", e);
        deletes: Subset,
        assert!(leaf.is_char_boundary(end));
impl Serialize for Delta<RopeInfo> {
        delta.serialize_field("els", &self.els)?;
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
                MergeTestOp::AssertAll(ref correct) => {
        if self.len() <= MAX_LEAF {

            find.unset();
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    pub preserve_case: bool
        &self.text
                        let mut word_cursor = WordCursor::new(text, region.max());
                    "something", &["benchmark"],
        /// Used to order concurrent inserts, for example auto-indentation
///
        let mut revs = basic_insert_ops(inserts_1, 1);
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
//
                // TODO create InsertDelta directly and more efficiently instead of factoring
use serde::de::{Deserialize, Deserializer};

    }

        let snapshot = trace.samples_cloned_unsorted();
}
                        if self.undone_groups.contains(undo_group) {
            Assert(0, "zacpb".to_owned()),
        offset
    idx: usize,
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
            Drag(MouseAction { line, column, .. }) =>
                    let end_of_line = match cursor.next::<LinesMetric>() {
    fn lines_med() {

        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
///     something_expensive()
                    None
    inner: ChunkIter<'a>,
    fn find_common_1() {
                    a.merge(b);
}

/// }
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        let revs = basic_insert_ops(inserts, 1);
            edit: Undo { toggled_groups, deletes_bitxor }
//See ../docs/MetricsAndBoundaries.md for more information.
    fn utf16_code_units_metric() {
        if !self.is_point_in_selection(offset) {
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
//
    }
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
                if groups.contains(undo_group) {
        out.push(Revision {
    CompleteDuration,
        ];
            self.breaks = None
    assert!(a[0].rev_id == b[0].rev_id);

    }
/// Boundary is trailing and determined by a newline char.
        let text_with_inserts = text_inserts.apply(&text);
        let iv = Interval::new_closed_open(start, end);
    }
        while let Err(incomp) = next_boundary {
        assert_eq!(1, expand_by[0].0.priority);
        /// revision that were deleted by this revision.

    }
        /// and new deletes_from_union
                self.add_selection_by_movement(text, Movement::Up),

        }).collect()
            _ => return
                            (inserts.transform_shrink(&gc_dels),

impl PartialEq for Sample {

    num: u32,
            self.tid == other.tid &&
    // partly because the reachability calculation would become more complicated (a
            let deletes = Subset::new(inserts.len());
    }
        engine.undo([1,2].iter().cloned().collect());
        let mut engine = Engine::new(Rope::from(TEST_STR));
                l = nl;


        let first_rev = engine.get_head_rev_id().token();

        };
        if let Contents::Edit {priority, inserts, .. } = r.edit {


//! A rope data structure with a line count metric and (soon) other useful
        assert_eq!(correct, rearranged_inserts);
                        let n_skip = seg.their_line_num - line_num;

    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
// you may not use this file except in compliance with the License.
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
            Some(right_str)
        }).collect();

            }
#[derive(Clone, Debug)]
            name: name.into(),
        let mut revs_2 = basic_insert_ops(inserts_2, 4);


            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
                SelRegion::new(start, end)
    }
                    };
            "pristine": pristine,
            categories: None,
        let mut hls = Vec::new();
}

            }
mod tests {
        for _i in 0..50 {
    /// This is used to determined whether FindStatus should be sent to the frontend.
        if let Some(ref mut trace) = self.trace {
        }
        } else {
}
            SampleEventType::ObjectSnapshot => 'O',
        } else {
}
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

            args: Some(SampleArgs {
        let (ins_delta, deletes) = delta.factor();
            SampleEventType::CompleteDuration => 'X',
                    a.merge(b);
            find.update_highlights(text, delta);
impl MetadataType {
        let first_line = self.line_of_offset(text, start);
    #[test]
    }
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));

            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            first_line: 0,
    fn lines_raw_small() {
            }
    #[cfg(feature = "benchmarks")]
                        Some(gc_dels.transform_shrink(&inserts))
/// Also note: in addition to the `From` traits described below, this module
        -#-
            sel.add_region(new_region);
pub struct Config {
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();


        use self::MergeTestOp::*;
                                            closure: F, payload: P) -> R
                if !inserts.is_empty() {
    pub fn max_undo_group_id(&self) -> usize {
        // TODO: refine for upstream (caret appears on prev line)
    fn delta_rev_head_2() {
}
            }, to_payload("test_get_sorted_samples"));
/// See `trace_payload` for a more complete discussion.
// should make this generic, but most leaf types aren't going to be sliceable
                self.do_drag(text, line, column, Affinity::default()),
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }
        samples
            } else {
/// same priority into one transform to decrease the number of transforms that
        for &region in self.sel_regions() {
pub fn count_newlines(s: &str) -> usize {
            let horiz = None;
    /// Returns the regions of the current selection.
    samples: Mutex<FixedLifoDeque<Sample>>,
        deletes_from_union = new_deletes_from_union;
            client.scroll_to(self.view_id, line, col);
}
            self.set_selection(text, selection);
            let pos = bc.next::<BreaksMetric>();
    }
        }
            let sel = {
    pub fn set_dirty(&mut self, text: &Rope) {
        // since one of the two deletes was gc'd this should undo the one that wasn't
        self.set_selection(text, selection);
            sample.event_type = SampleEventType::DurationEnd;
                    };
        for region in self.selection.iter() {
        let correct = parse_subset_list("
        }
                            warn!("Failed to get string representation: {:?}", e);
            match memchr(b'\n', self.fragment.as_bytes()) {
impl Config {
            height: 10,
/// # Arguments
                    } else if !inserts.is_empty() {
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
            Gesture { line, col, ty } =>
    // and partly because you need to retain more undo history, to supply input to the
        samples[1].timestamp_us = 5;
                return None;
                if s.ends_with('\n') {
pub struct Engine {
            tid: sys_tid::current_tid().unwrap(),
        }).collect();
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
                engine.gc(&to_gc)
            tid: sys_tid::current_tid().unwrap(),
    }
    }
        /// Just the `symmetric_difference` (XOR) of the two sets.
extern crate serde_derive;
    }
pub fn enable_tracing() {

        let edit_iv = Interval::new_closed_open(start, end);
//
}
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        self.scroll_to_cursor(text);
/// Computes a series of priorities and transforms for the deltas on the right
        if let Some(breaks) = self.breaks.as_mut() {
        engine.edit_rev(1, 1, initial_rev, d1.clone());
                }

                            }
                edit: Contents::Edit {
    fn edit_rev_undo_2() {

    use test::Bencher;
    }

            }

            Assert(0, "ab".to_owned()),
        }
    // * Unicode codepoints
}

        let mut engine = Engine::new(Rope::from(TEST_STR));
}
    }
        }
    /// Splits current selections into lines.
                                deletes,

    pub fn get_head_rev_id(&self) -> RevId {

pub type RevToken = u64;
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
    fn compute_transforms_2() {
        }
            name: name.into(),
        let (mut new_revs, text, tombstones, deletes_from_union) = {
    }
    fn prev(s: &String, offset: usize) -> Option<usize> {
        if let Some(breaks) = self.breaks.as_mut() {
        // +2 for exe & thread name.
                    text.slice_to_string(start, end)
    /// An arbitrary payload to associate with the sample.  The type is

                         style_spans: &Spans<Style>) -> Vec<isize>
}
                }
        ChunkIter {
// distributed under the License is distributed on an "AS IS" BASIS,

    session2: u32,
    }
        a.lines_all().collect::<Vec<_>>());
        assert_eq!(0, b.line_of_offset(0));
        let deletes_from_union = parse_subset("-#----#");
        self.rev_id_counter += 1;
    }
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
            };
            Assert(0, "bdc".to_owned()),
        let mut rendered_styles = Vec::new();
                        let n_skip = seg.their_line_num - line_num;

    /// 96 bits which is more than sufficient for this to never happen.
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
// line iterators
    #[cfg(feature = "benchmarks")]
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
            Assert(1, "pb".to_owned()),

    }
            Assert(0, "acrbd".to_owned()),
    /// Offset of the point where the drag started.
            Assert(1, "abc".to_owned()),

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
const FLAG_SELECT: u64 = 2;
        --#--
        self.set_dirty(text);

#[derive(Serialize, Deserialize, Debug, Clone)]
            client.scroll_to(self.view_id, line, col);
        }
/// fn something_else_expensive(value: u32) {
                }
            end -= 1;
        samples.sort();
                    } else {
        d.insert(StrCow::from("test"), StrCow::from(value));
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
/// # Arguments
                // TODO create InsertDelta directly and more efficiently instead of factoring
        }
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }

    /// You could construct the "union string" from `text`, `tombstones` and
                }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    }
        self.deletes_from_union = deletes_from_union;
    pub fn new_duration<S, C>(name: S,
pub type StrCow = Cow<'static, str>;
        self.set_selection_for_edit(text, new_sel);
    fn is_boundary(s: &String, offset: usize) -> bool {
            Assert(0, "acbd".to_owned()),
    #[bench]
        let new_head = engine.get_head_rev_id().token();
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
    }
}

/// }
}
                    let (start, end) = self.peers.split_at_mut(ai);

            warn!("Failed to get path to current exe: {:?}", e);

/// # Examples

        let a = Rope::from("a\nb\n");
        }
    }
        for &(sel_start, sel_end) in sel {
            } else {
    #[serde(default = "default_session", skip_serializing)]
        }).unwrap_or(text.len());
// distributed under the License is distributed on an "AS IS" BASIS,

    fn gc_3() {
    #[bench]
    ///
/// configured via the `dict_payload` or `json_payload` features (there is an
            sample: Some(Sample::new_duration_marker(
        struct RopeDelta_ {
        where S: Into<StrCow>, C: Into<CategoriesT>
        }

    fn test_get_samples() {

        } else {
        let mut b = line_cache_shadow::Builder::new();
                         hls: &[(usize, usize)],
        } else {
            let mut word_cursor = WordCursor::new(text, offset);
        assert_eq!(trace.is_enabled(), true);
    pub fn push_str(&mut self, mut s: &str) {
            rev_id, max_undo_so_far,
            match c.edit {
    /// An iterator over the raw lines. The lines, except the last, include the
                MergeTestOp::AssertAll(ref correct) => {

    }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        assert_eq!(1, expand_by[0].0.priority);
            fragment: ""
            Assert(0, "adc".to_owned()),
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    /// Starts a drag operation.
    revs: Vec<Revision>,
    }
        if initial_contents.len() > 0 {
    pub height: f64,
///
/// Measured unit is utf8 code unit.
            None
                payload: payload,
        self.scroll_to_cursor(text);
            let common = find_common(a_to_merge, b_to_merge);
// See the License for the specific language governing permissions and
}
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
/// # Arguments
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
/// * `categories` - A static array of static strings that tags the samples in

            } else if incomp == GraphemeIncomplete::PrevChunk {
pub struct Size {
                last.1 = last.1.transform_union(&inserts);
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
        as_vec.extend(all_samples.iter().cloned());
        let iv = Interval::new_closed_open(start, end);
        let deletes_from_union = parse_subset("-#----#");
                    text.slice_to_string(region.min(), region.max())
    fn test_ser_de() {
                    s = s.transform_shrink(&transformed_inserts);
        self.set_selection(text, sel);

            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
/// # Examples
pub struct ChunkIter<'a> {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
        } else {
            let splitpoint = if s.len() > MAX_LEAF {
        }
///
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        assert_eq!("1234567", String::from(r));
    for &b in s.as_bytes() {
        // the generated JSON.
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
        // position after 'f' in four
        serializer.serialize_str(&String::from(self))
            match modify_selection {
        self.len()
                        let n_skip = seg.their_line_num - line_num;
                tid));
        Self::with_limit_count(size / size_of::<Sample>())
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                edit: Contents::Edit {
        } else {
        // x, a, y, b, z, c

    pub preserve_case: bool
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
    // Render a single line, and advance cursors to next line.
            Assert(0, "acbd".to_owned()),
        assert_eq!(snapshot[4].name, "y");


    #[test]
            replace: None,
            last_line -= 1;
                    e.edit_rev(p, u, head, delta.clone());
                    let full_path_str = full_path.into_string();

        assert_eq!(Some(17), a.next_grapheme_offset(9));
impl<'de> Deserialize<'de> for Rope {
                    rev_id: rev.rev_id,
    /// Select entire buffer.
        result
        // and it only needs to be consistent over one execution.
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
    /// Tracks whether the replacement string or replace parameters changed.
    }
                Some(offset)
            scroll_to: Some(0),
            thread_name: Sample::thread_name(),
    /// Selects a specific range (eg. when the user performs SHIFT + click).
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                Some(Cow::from(s))
            let after = full_priority >= trans_priority;  // should never be ==
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
        assert_eq!(snapshot[3].name, "a");
        self.set_selection_raw(text, selection);
        assert_eq!(snapshot[4].name, "y");
}
        let closest_occurrence = self.find.iter().flat_map(|x|

        impl<'de> Visitor<'de> for CategoriesTVisitor {
/// version of Ropes, and if there are many copies of similar strings, the common parts
                                  style_spans, &plan, pristine);
    fn measure(info: &RopeInfo, _: usize) -> usize {
    pub name: StrCow,
            },
        }
        let (start, end) = {
                    // can only happen on empty input
        let mut hasher = DefaultHasher::new();
                let offset = self.selection[0].start;
    }
/// });
        a.push('\n');
            if self.fragment.is_empty() {
    /// Invalidates the styles of the given range (start and end are offsets within
    fn edit_rev_undo_3() {
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            pos
        match self {
                self.push_leaf(s.to_owned());
    }
        let mut hls = Vec::new();
            let mut word_cursor = WordCursor::new(text, offset);
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        a.lines_all().collect::<Vec<_>>());
/// 1. Samples that span sections of code may be inserted on end instead of
    }
                name, categories, None, start, end - start));
        }
                                                    style_spans, client,
        }
    ThreadSortIndex { sort_index: i32 },
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            let mut sample = self.sample.take().unwrap();
        }
            update["lines"] = json!(lines);
                    let _ = s.pop();
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
    // this is the cost contributed by the timestamp to
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
    trace: Option<&'a Trace>,
            black_box(trace.block_payload(
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
        let all_caret = self.selection.iter().all(|region| region.is_caret());
// Copyright 2018 The xi-editor Authors.
    for r in revs {
        #------
        // additional tests for line indexing
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
            Assert(0, "bdc".to_owned()),

        if offset >= next_line_offset {

            },
        // only one of the deletes was gc'd, the other should still be in effect
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
    /// The name to associate with the pid/tid.  Whether it's associated with
        self.revs.append(&mut new_revs);
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        &self.text
    }
        (Revision {
            Assert(1, "bdefg".to_owned()),
            Assert(1, "apb".to_owned()),
        ]);
    bytecount::count(s.as_bytes(), b'\n')
        } else {

        }
            drag_state: None,
}



    }
                        priority, undo_group,
            Assert(0, "abc".to_owned()),
            name: name.into(),
    edit: Contents,
    // TODO(vlovich): Replace all of this with serde flatten + rename once

    /// Storage for all the characters that have been deleted  but could
    ///
            while !s.is_char_boundary(splitpoint) {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    if a.is_empty() {
            event_type: SampleEventType::Metadata,
}
    DurationEnd,
    }
                _ => panic!("to_base_units called with arg too large")
}


        assert_eq!(trace.is_enabled(), true);
        true
        assert_eq!(snapshot.len(), 9);
            }
        let styles = self.render_styles(client, styles, start_pos, pos,
    fn do_selection_for_replace(&mut self, text: &Rope) {
        if self.is_enabled() {
                // This could be done by explicitly overriding, or by tweaking the
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    }
    /// 96 bits which is more than sufficient for this to never happen.
            // TODO: on double or triple click, quantize offset to requested granularity.

    /// Return the offset of the codepoint after `offset`.
    /// The current contents of the document as would be displayed on screen
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
        if line > max_line {
                client.replace_status(self.view_id, &json!(replace))

            last_line -= 1;
    // TODO make this faster somehow?
        // if self.end is inside this chunk, verify that it is a codepoint boundary
pub fn trace<S, C>(name: S, categories: C)
    #[test]

    pub name: StrCow,
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    }
    }
    pub preserve_case: bool
categories_from_constant_array!(5);
            tid: sys_tid::current_tid().unwrap(),


    /// Updates the view after the text has been modified by the given `delta`.
impl Serialize for Rope {
        let a = Rope::from("a\nb\nc");

            if next_chunk.is_none() { return None; }
    }
///
        let mut d_builder = Builder::new(TEST_STR.len());
        self.rev_id_counter += 1;
    pub fn set_scroll(&mut self, first: i64, last: i64) {
// Copyright 2016 The xi-editor Authors.
    #[test]

        let new_pos = self.pos() + (end - offset);
        samples[1].timestamp_us = 5;
    fn from(s: T) -> Rope {
    /// Width in bytes (utf-8 code units).
    //
        let tid = all_samples.front()
pub struct ChunkIter<'a> {
    fn undo() {
//!
        self.set_selection(text, sel);

            .map(|pos| pos + 1)
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
///
const FLAG_SELECT: u64 = 2;
                        let start_line = seg.our_line_num;
        let plan = RenderPlan::create(height, self.first_line, self.height);
    #[test]
        let inserts = parse_subset_list("
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
        let styles = self.render_styles(client, styles, start_pos, pos,
///
                let mut sel = Selection::new();
            }
                } else if click_count == Some(3) {
/// Stores the relevant data about a sample for later serialization.
            Assert(0, "zacpb".to_owned()),
#[cfg(feature = "json_payload")]
            Assert(1, "pb".to_owned()),
            // On the next step we want things in expand_by to have op in the context
    enabled: AtomicBool,
            Merge(5,4),

        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);

///
                    s = inserts.transform_union(&s);
    use test::Bencher;
    ///
            rev_id: self.next_rev_id(),
///
    }
        assert!(r == a_rope.clone() + b_rope.clone());
/// ```
        use self::MergeTestOp::*;
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        assert!(r != a_rope);
                    selection.add_region(occ);
                self.find_changed = FindStatusChange::All;
        self.set_selection_for_edit(text, new_sel);
        let a = Rope::from("a\nb\nc");
            'n' => SampleEventType::AsyncInstant,
    }
        assert_eq!(samples[0].name, "remote pid");
            Assert(2, "ab".to_owned()),
                return None;
        assert_eq!(None, a.next_grapheme_offset(17));
            tid: sys_tid::current_tid().unwrap(),
        if self.find.is_empty() {

                if s.ends_with('\n') {
    /// The semantics are intended to match `str::lines()`.
            }
        where D: Deserializer<'de>,
}

//     http://www.apache.org/licenses/LICENSE-2.0
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
        if s.len() <= MAX_LEAF {
/// from multiple distributed sources (i.e. you want to sort the merged result
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    /// Storage for all the characters that have been deleted  but could
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        let (mut new_revs, text, tombstones, deletes_from_union) = {
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

        }
    /// of individual region movements become carets.
/// Returns all the samples collected so far.  There is no guarantee that the

    // How should we count "column"? Valid choices include:
        {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let a = Rope::from("a\r\nb\r\nc");
    match b {
}
    }

                        if self.undone_groups.contains(undo_group) {
/// Replace part of a `Rope`:
        assert_eq!(correct, rebased_inserts);
        assert_eq!(trace.get_samples_count(), 0);
            sample: Some(Sample::new_duration_marker(
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        _ => break
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
                    };
        assert_eq!("1234567", String::from(r));
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        }
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
#[cfg(test)]
            self.lc_shadow.edit(start, end, new_end - start);
        trace.instant("2", &["test"]);
                        ops.push(self.build_update_op("copy", None, seg.n));
        for &region in self.sel_regions() {
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;

}
    /// Updates the view after the text has been modified by the given `delta`.
            AssertAll("zacpb".to_owned()),
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
use std::str::FromStr;
        }).collect()
        self.set_selection(text, selection);
            let b = s.as_bytes()[offset];
        self.drag_state = Some(DragState {
        }
    // * Actual measurement in text layout
        });
                                                                0, "copy", 2)?;
/// an argument.
        let start = time::precise_time_ns();

            "styles": styles,
    }
        } else { // no toggled groups, return past end
        let plan = RenderPlan::create(height, self.first_line, self.height);
/// samples are ordered chronologically for several reasons:
///
        self.drag_state = None;
    }
        let d = engine.delta_rev_head(first_rev);
    /// Determines whether the offset is in any selection (counting carets and
    }
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
#[inline]
            self.categories == other.categories &&
}
        for find in &mut self.find {
        // the front-end, but perhaps not for async edits.
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
    // Note: this function would need some work to handle retaining arbitrary revisions,
            SampleEventType::FlowEnd => 'f',
/// some way.
        where S: Serializer

        info.utf16_size
        let first_rev = engine.get_head_rev_id().token();
        // find the lowest toggled undo group number
        assert_eq!(utf16_units, 11);
                let line = line.min(text.measure::<LinesMetric>() + 1);

        debug_subsets(&rebased_inserts);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
pub type TracePayloadT = StrCow;
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        -> R
// limitations under the License.
        }
            Assert(0, "acrbdz".to_owned()),
                }
            Assert(3, "ab".to_owned()),
                        let offset = self.offset_of_line(text, start_line);
// See the License for the specific language governing permissions and
                WrapWidth::None => (),
        }
    /// Find the first revision that could be affected by toggling a set of undo groups
                out.push((prio, inserts));
        /// together. For example, an auto-indent insertion would be un-done
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        }
//
    let mut out = Vec::new();
        }
        self.deletes_from_union_before_index(rev_index + 1, true)
        // TODO: want to let caller retain more rev_id's.
                    if !inserts.is_empty() {
        let mut selection = match multi_select {
        let mut selection = self.selection.clone();
impl MetadataType {
        let text_b = Rope::from("zpbj");
                match self.inner.next() {
/// Get a slice of a `Rope`:
                    };
use std::borrow::Cow;
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    // encourage callers to use Cursor instead?
            GestureType::WordSelect =>
        let script = vec![
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        self.tombstones = new_tombstones;
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
    fn find_common_1() {
                    inserts: ins,
    }
        assert!(r != b_rope + a_rope);
/// an argument.
        let mut d = TracePayloadT::with_capacity(1);
{
    // TODO: a case can be made to hang this on Cursor instead
            event_type: event_type,
    // * Unicode codepoints
/// However, anything that can be converted into a Cow string can be passed as
        }
            sample: Some(Sample::new_duration_marker(
        (self.pid, self.timestamp_us).hash(state);
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
        self.timestamp_us == other.timestamp_us &&
            if self[i] != other[i] {
        }
    /// slices will be nonempty.
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
        let search_query = match self.selection.last() {
                }
            // Do it the other way on the copy
            AssertMaxUndoSoFar(0,2),
    #[test]
    /// the other doesn't make it re-appear.
            Contents::Undo { .. } => panic!("can't merge undo yet"),

        }
        // expand by each in expand_by
            AssertMaxUndoSoFar(1,3),
            offset,
            self.set_selection(text, sel);
    {
        where S: Into<StrCow>, C: Into<CategoriesT>
            }
        Assert(usize, String),
        !self.selection.regions_in_range(offset, offset).is_empty()
        assert_eq!(rope.line_of_offset(1), 0);
        let start_pos = start_of_line.pos();
    fn bench_trace_instant(b: &mut Bencher) {
    /// that are currently deleted, and thus in `tombstones` rather than
/// associated performance hit across the board for turning it on).
    /// Return the line number corresponding to the byte index `offset`.
    use rope::{Rope, RopeInfo};
    {
            Assert(1, "pbj".to_owned()),
}
    inserts: InsertDelta<RopeInfo>,
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        as_vec
        }).unwrap_or(text.len());
        thread.name().map(|ref s| to_cow_str(s.to_string()))
        let res = find_base_index(&a, &b);
    }
        }
    /// The session ID used to create new `RevId`s for edits made on this device
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
}
    let mut out = Vec::with_capacity(b_new.len());
            // corner and I'm lazy -cmyr
    fn empty_subset_before_first_rev(&self) -> Subset {
/// ```
    #[serde(default = "default_session", skip_serializing)]

        trace.closure_payload("x", &["test"], || {
    pub fn get_samples_count(&self) -> usize {
        }
    }
        let res = find_base_index(&a, &b);
            trace.record(sample);
    /// method to be fast even when the selection is large.
            'n' => SampleEventType::AsyncInstant,
        }
            Assert(1, "arpbzj".to_owned()),
    }

                metadata_name: None,
            Find { chars, case_sensitive, regex, whole_words } =>
        engine.edit_rev(1, 2, initial_rev, d1.clone());
}
            let mut sel = drag_state.base_sel.clone();
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,

/// # Performance
            } else {
                    result = cow_append(result, &self.fragment[.. i + 1]);
            // I think it's a precondition that this will never be called
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// The name to associate with the pid/tid.  Whether it's associated with
                priority, undo_group, deletes,

                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    /// Does a drag gesture, setting the selection from a combination of the drag

                            max_undo_so_far: rev.max_undo_so_far,

            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);

        });
        -> Result<CategoriesT, D::Error>
    /// after an edit is applied, to allow batching with any plugin updates.
                } else if click_count == Some(3) {
        revs.append(&mut revs_2);


                }
    }
/// let mut a = Rope::from("hello world");
    /// method to be fast even when the selection is large.
    ///
        let mut a = String::new();
            SelectionIntoLines => self.do_split_selection_into_lines(text),
                deletes: new_deletes,
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    ///
            selection.delete_range(offset, offset, true);
/// });
    fn gc() {
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
//     http://www.apache.org/licenses/LICENSE-2.0
}
        }
    }
    #[test]
    /// Start of the region selected when drag was started (region is
        // rather than emitting an explicit start/stop to reduce the size of
            black_box(time::precise_time_ns());


        }
        let r = Rope::from(&a[..MAX_LEAF]);
        let iv = Interval::new_closed_open(start, end);
extern crate libc;
            }
            Sample::new_instant("local pid", &[], None),

            false
            Find { chars, case_sensitive, regex, whole_words } =>
                        DeltaElement::Insert(Rope::from(s)),
    // TODO: this should be a Cow
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
    fn bench_trace_block(b: &mut Bencher) {

use std::cmp;
    }
    fn offset_of_line_panic() {
            Some(Cow::Borrowed(mut s)) => {
            }
    #[test]

}
/// Tracing is disabled initially on program launch.
            if self[i] != other[i] {
    #[inline]

        }).collect();
                metadata_sort_index: None,
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));

        let _t = trace_block("View::wrap_width", &["core"]);
        engine.undo([1,2].iter().cloned().collect());
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
    }
    }
    }
        let max_line = self.measure::<LinesMetric>() + 1;

        assert_eq!(rope.offset_of_line(0), 0);
            None => text.line_of_offset(offset)
                }

            // Snap to grapheme cluster boundary
}
    //TODO: implement lines_raw using ranges and delete this
        match *self {

}

/// # Performance
use std::str;
}
/// Usage of static strings is encouraged for best performance to avoid copies.

            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
impl<'a> Iterator for ChunkIter<'a> {

    /// should be as unlikely to collide as two random u64s.
    }
        // This might be an over-specified test as it will
        --#--
            }
    lines: usize,
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
                }
    /// they would be if they hadn't been deleted.
        ");
                    if retain_revs.contains(&rev.rev_id) {
        if s.len() <= MAX_LEAF {
    }
    // * Code units in some encoding
                }
enum Contents {
                RenderTactic::Render => {

            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
    fn gc_6() {
            black_box(time::precise_time_ns());
            let b = self.current.unwrap().as_bytes()[self.idx];
            SelectionForFind { case_sensitive } =>
/// some way.
use find::Find;
            args: Some(SampleArgs {
#[derive(PartialEq, Debug)]
    /// Invalidate the current selection. Note that we could be even more
        len
    #[test]

    /// Does a drag gesture, setting the selection from a combination of the drag
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let r = r + Rope::from(&b[MIN_LEAF..]);
                        let offset = self.offset_of_line(text, start_line);
        let (metadata_name, sort_index) = meta.consume();
        // a, b, y, z, c, x
            base_sel: selection.clone(),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn identity() -> Self {
            }
}

        assert_eq!(0, a.line_of_offset(1));
    /// Get the line range of a selected region.
            sample: None,
    #[serde(rename = "cat")]
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
fn clamp(x: usize, min: usize, max: usize) -> usize {
    fn next_rev_id(&self) -> RevId {
        // NOTE 2: from_micros is currently in unstable so using new
        }).collect()
    /// This is a regression test to ensure that session IDs are used to break
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
                        let n_skip = seg.their_line_num - line_num;
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
    /// Select entire buffer.
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    a_ids.intersection(&b_ids).cloned().collect()
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
        assert_eq!(trace.get_samples_limit(), 11);
                }
            let after = full_priority >= trans_priority;  // should never be ==
}
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
}
    }
}
/// Find a set of revisions common to both lists
    /// The incrementing revision number counter for this session used for `RevId`s

/// let a = Rope::from("hello ");
    }
                self.select_line(text, offset, line, true),
    session2: u32,
            },
        // stable order since the resolution of timestamps is 1us.
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
            Assert(0, "ab".to_owned()),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
pub fn trace<S, C>(name: S, categories: C)
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
                SelectionModifier::Add => {
    #[test]
        let new_inserts = union_ins_delta.inserted_subset();
            DeltaElement::Copy(ref start, ref end) => {
    }
// you may not use this file except in compliance with the License.
            base_rev: RevToken, delta: Delta<RopeInfo>) {
    }
/// let a = Rope::from("hello ");
        ------#
            SampleEventType::ObjectCreated => 'N',
        a.push('\n');
        samples[1].timestamp_us = 5;
            Assert(0, "zacpbdj".to_owned()),
#[inline]
        engine.undo([].iter().cloned().collect());
            // Do the merge one direction
            find.unset();
        } else {
use xi_rope::spans::Spans;
        }

    pub fn get_samples_limit(&self) -> usize {

    pub(crate) fn unset_find(&mut self) {
            SampleGuard::new(&self, name, categories, None)

            Assert(1, "abc".to_owned()),
            event_type: SampleEventType::Instant,
        where S: serde::Serializer
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
/// required). Mutations are generally copy-on-write, though in-place edits are
            Merge(1,0), Merge(2,0),
    /// This function does not perform any scrolling.
        len
            SelectionIntoLines => self.do_split_selection_into_lines(text),
                match *other {
        true
            match c.edit {
                if self.fragment.is_empty() {
    1
            max: offset,
            let a_to_merge = &self.revs[base_index..];
    }
            Assert(2, "afc".to_owned()),
            }
            return false;
                              duration_ns: u64) -> Self
    }
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {

}
        }
        let correct = parse_subset_list("
                len += 1;
                        ops.push(self.build_update_op("copy", None, seg.n));
        MergeTestState::new(3).run_script(&script[..]);
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    ///

            let max_undo = self.max_undo_group_id();
    // Note: this function would need some work to handle retaining arbitrary revisions,
        let a = Rope::from("a");
        assert_tokens(&rope, &[

struct DeltaOp {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
        r.slice_to_string(0, r.len())
        _ => 4
        for &region in self.sel_regions() {
        };
    fn merge_whiteboard() {
    fn bench_get_tid(b: &mut Bencher) {
        let mut samples = self.samples_cloned_unsorted();
    fragment: &'a str
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                    }

                formatter.write_str("comma-separated strings")
        }
        // only one of the deletes was gc'd, the other should still be in effect
            size: Size::default(),
// See the License for the specific language governing permissions and
            },
    fn is_ok_child(&self) -> bool {
                }
                if !inserts.is_empty() {
                    return i + 1; // +1 since we know the one we just found doesn't have it
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            }

    #[serde(rename = "ts")]
use std::borrow::Cow;
            }
    /// The maximum amount of space the tracing data will take up.  This does
        self.hash(&mut hasher);
use bytecount;
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        }
        s.is_char_boundary(offset)
        } else {
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
        let next_line_offset = self.offset_of_line(text, line + 1);
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    pub fn set_size(&mut self, size: Size) {
}
                            rev_id: rev.rev_id,
              F: FnOnce() -> R
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
            self.breaks = None
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        match *self {
        --#--
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
        assert_eq!(Some(6), a.next_codepoint_offset(3));
        -##-
        let cur_deletes_from_union = &self.deletes_from_union;

        engine.edit_rev(1, 1, first_rev, d1.clone());

    }
            sample_limit_count: limit
        self.selection = sel;
    pub fn set_size(&mut self, size: Size) {
    a_ids.intersection(&b_ids).cloned().collect()
/// associated performance hit across the board for turning it on).
use std::sync::Mutex;
    }

    }
            Assert(1, "pb".to_owned()),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },

            thread_name: None,
    }
    /// Constructs an instantaneous sample.
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        let a = Rope::from("a\nb\nc");
    #[should_panic]
    /// Get the Subset to delete from the current union string in order to obtain a revision's content

        }
        if let Some(occ) = closest_occurrence {

                        deletes_from_union = deletes_from_union.transform_expand(inserts);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
impl<T: AsRef<str>> From<T> for Rope {
    /// An iterator over the lines of a rope.
        b.push(rhs);
pub struct Engine {
            drag_state: None,
    // partly because the reachability calculation would become more complicated (a
        // the smallest values with which it still fails:
/// Base unit is utf8 code unit.
                    }
        true
                    to_payload(("some payload for the block"))));
        // rebase the delta to be on the head union instead of the base_rev union
        for i in 0..self.len() {
    // TODO find the maximum base revision.
            // about what wrapped.
// Unless required by applicable law or agreed to in writing, software
            trace: None,
        if offset == s.len() {

                    result = cow_append(result, &self.fragment[.. i + 1]);
        if offset >= text.len() {
            next_boundary = c.next_boundary(&l, leaf_offset);
    pub(crate) fn record(&self, sample: Sample) {
    }
    AsyncStart,
        let mut engine = Engine::new(Rope::from(TEST_STR));
        MergeTestState::new(2).run_script(&script[..]);
        // set last selection or word under current cursor as search query
        cursor.next_grapheme()

                        None
    TRACE.block(name, categories)
        engine.undo([].iter().cloned().collect());

    #[test]
    }
            self.collapse_selections(text);
        let trace = Trace::enabled(Config::with_limit_count(10));
/// However, anything that can be converted into a Cow string can be passed as
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
                    };
    fn thread_name() -> Option<StrCow> {
            trace.instant("something", &[]);
        }
        self.size = size;
        sel.collapse();
            None => return "",
    /// in the range of 511-1024 bytes.
            }
}
    pub fn sel_regions(&self) -> &[SelRegion] {
        assert!(r != b_rope + a_rope);
                        let un_deleted = deletes_from_union.subtract(deletes);
        let trace = Trace::disabled();
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
        } else {
        }
    #[test]
                return false;
        self.iter_chunks(0, self.len())
            Assert(0, "cbd".to_owned()),

    /// Returns the visible line number containing the given offset.
impl<'a> Iterator for LinesRaw<'a> {
impl<'a> Cursor<'a, RopeInfo> {
}
    // recompute the prefix up to where the history diverges, but it's not clear that's
}
    /// Start of the region selected when drag was started (region is
}
}
        for rev in self.revs[rev_index..].iter().rev() {
        self.send_update_for_plan(text, client, styles,
        let (mut new_revs, text, tombstones, deletes_from_union) = {
    /// The maximum number of samples that should be stored.

/// record it.
    fn line_of_offset_small() {
use xi_trace::trace_block;
        // 1 for exe name & 1 for the thread name
            match reverse {
            },
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            AddSelectionBelow =>
        // +2 for exe & thread name
        match *self {
        let (leaf, pos) = cursor.get_leaf().unwrap();
                    RopeDeltaElement_::Copy(start, end) =>
/// Applies an optimization where it combines sequential revisions with the
            offset = text.prev_grapheme_offset(offset + 1).unwrap();

/// # use xi_rope::Rope;
        let thread = std::thread::current();
        assert_eq!("a", String::from(&tombstones_2));
        }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        assert_eq!(0, b.line_of_offset(1));

            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        // that into our actual target.

        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
extern crate test;
            SampleEventType::Instant => 'i',
        });
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            trace.closure_payload("y", &["test"], || {
/// # Arguments
    /// The session ID used to create new `RevId`s for edits made on this device
{
                name, categories, payload, SampleEventType::DurationBegin)),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            }
// line iterators
    pub fn next_grapheme(&mut self) -> Option<usize> {
                },

    /// want to set the process name (if provided then sets the thread name).
        for rev in &self.revs[first_candidate..] {
            Assert(0, "acrbd".to_owned()),
    ProcessSortIndex { sort_index: i32 },
        let script = vec![
        // todo: this will be changed once multiple queries are supported

        let trace = Trace::enabled(Config::default());
            SampleEventType::ObjectCreated => 'N',
                return offset;
                // TODO: small nit, merged region should be backward if end < start.
    pub fn session_id(&self) -> SessionId {
                    let (mut a, rest) = end.split_first_mut().unwrap();
    }
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            sample_limit_count: limit
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        } else {
        trace.instant("4", &["test"]);
use delta::{Delta, DeltaElement};
        Self::with_limit_bytes(1 * 1024 * 1024)

    }


                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        let script = vec![

/// * `categories` - A static array of static strings that tags the samples in
        while !leaf.is_char_boundary(end) {
        if let Contents::Edit {priority, inserts, .. } = r.edit {
        if offset == 0 {
        engine.gc(&to_undo);
extern crate log;

        let rope = Rope::from("hi\ni'm\nfour\nlines");
    #[should_panic]
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
///
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
/// Contains replacement string and replace options.
        self.scroll_to_cursor(text);
    pub fn lines_all(&self) -> Lines {
    }
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    /// The current contents of the document as would be displayed on screen
    }
        all_samples.push_back(sample);
    #[serde(default = "initial_revision_counter", skip_serializing)]
    }
    }
            'e' => SampleEventType::AsyncEnd,
    {
    pub fn max_undo_group_id(&self) -> usize {
            breaks: None,
        assert_eq!(Some(6), a.next_codepoint_offset(3));
/// discussion on payload.
        engine.undo([1].iter().cloned().collect());
#[inline]
}
        let self_iv = Interval::new_closed_closed(0, self.len());
    fn gc_6() {
    fn bench_single_timestamp(b: &mut Bencher) {
        // TODO: may make this method take the iv directly
                first_sample_timestamp,
///
        let inserts = parse_subset_list("
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        info.lines
    }
    fn bench_two_timestamps(b: &mut Bencher) {
    /// The empty string will yield a single empty slice. In all other cases, the
                            ops.push(self.build_update_op("skip", None, n_skip));
        }
}
        while offset < l.len() && !l.is_char_boundary(offset) {
    pub thread_name: Option<StrCow>,

        impl From<&'static[&'static str; $num_args]> for CategoriesT {
            //if self.cursor.is_boundary::<BaseMetric>() {
        self.deletes_from_union = deletes_from_union;
        engine.edit_rev(0, 2, first_rev, build_delta_2());
impl<'a> SampleGuard<'a> {

        hasher.finish()
    /// This is a regression test to ensure that session IDs are used to break
    }
                    };
    // TODO(vlovich): Replace all of this with serde flatten + rename once
}
                        line_num = seg.their_line_num + seg.n;
        let b = a.slice(2, 4);
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
    /// selection edges).
        self.selection = sel;
            Assert(0, "b".to_owned()),
// distributed under the License is distributed on an "AS IS" BASIS,
        match *self {
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        }
        }
        cursor.is_boundary::<BaseMetric>()
                self.select_word(text, offset, false),
    }
        let trace = Trace::disabled();
extern crate serde;
}
    } else {
        } else {


            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            // with offset == 0, but be defensive.
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
        let r = Rope::from(&a[..MAX_LEAF]);
    }
    fn do_cancel(&mut self, text: &Rope) {
            if let Edit { priority, ref inserts, .. } = r.edit {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        let mut b = String::new();
            let pos = bc.next::<BreaksMetric>();
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
    pub fn get_head_rev_id(&self) -> RevId {
}
            let base_index = find_base_index(&self.revs, &other.revs);
            Merge(2,1),
            let c = region.end;
fn count_utf16_code_units(s: &str) -> usize {
    #[test]
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
    fn gc_4() {
        self.revs.reverse();
            };
    fn edit_rev_concurrent() {
        }
        /// along with the newline that triggered it.
    {
    }
    where S: serde::Serializer {
///
    pub fn slice(&self, start: usize, end: usize) -> Rope {
/// * `categories` - A static array of static strings that tags the samples in
    }
        } else if line == max_line {
    out.as_mut_slice().reverse();
    }
        }
    ThreadName { name: String },
}
}

/// See `trace_payload` for a more complete discussion.
            match rev.edit {

        if !self.is_enabled() {
}
        let text_with_inserts = text_inserts.apply(&text);
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        self.push_str(&other[start..end]);

        let mut delta = serializer.serialize_struct("Delta", 2)?;
    }
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
                (!region.is_upstream() && c == start_pos) ||
        // todo: the correct Find instance needs to be updated with the new parameters
pub struct Replace {
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
    // encourage callers to use Cursor instead?
    for rev in revs.iter().rev() {


                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        for op in &delta_ops {
        assert_eq!(Some(9), b.next_codepoint_offset(5));
    #[serde(skip_serializing_if = "Option::is_none")]
    use delta::{Builder, Delta};
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    /// Sets the selection to a new value, invalidating the line cache as needed.
                        let n_skip = seg.their_line_num - line_num;
/// fn something_expensive() {
        ];
    // callers should be encouraged to use cursor instead
            ix = sel_end as isize;


        self.len() >= MIN_LEAF
/// ```

            trace.instant("something", &[]);
    // Send the requested lines even if they're outside the current scroll region.
    #[bench]
        let mut line_num = 0;  // tracks old line cache
    #[test]
        assert_eq!(0, a.line_of_offset(0));
    }
extern crate test;
use xi_rope::delta::Delta;
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

        // invert the changes to deletes_from_union starting in the present and working backwards
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            utf16_count += 1;
    /// Tracks whether this view has been scheduled to render.
        let mut engine = Engine::new(Rope::from(TEST_STR));
    {
    /// The maximum number of bytes the tracing data should take up.  This limit
use memchr::{memrchr, memchr};
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        MergeTestState::new(3).run_script(&script[..]);
/// See `trace_payload` for a more complete discussion.
            replace_changed: false,
                Some(filename) => {
    #[test]
        engine.edit_rev(1, edits+1, head, d1);

            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>

    /// Returns the byte offset corresponding to the line `line`.
                            }
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            pid: sys_pid::current_pid(),

    bytecount::count(s.as_bytes(), b'\n')
            // The deletes are already after our inserts, but we need to include the other inserts
                                                          new_len, col),

            to_undo.insert(i+1);
        }
    /// terminating newline.
        }


        }
                }
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));

    }
                    } else {

        }
    }
            }

                } else if click_count == Some(3) {
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    out
        use self::ViewEvent::*;
/// `base_revs`, but modified so that they are in the same order but based on
use unicode_segmentation::GraphemeCursor;

    fn bench_get_pid(b: &mut Bencher) {
    session_id: SessionId,
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.

pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
        // update only find highlights affected by change
    }
/// typing a paragraph) will be combined into a single segment in a transform
    }
        String::from(&r)
}
                    // TODO: update (rather than re-render) in cases of text valid
}
        let end = self.sel_regions().last().unwrap().end;
    #[test]
    /// The thread the sample was captured on.  Omitted for Metadata events that
        as_vec
        guard
    }
    fn merge_associative() {
/// with.  By default, the type is string-like just like name.  If compiled with
                formatter.write_str("comma-separated strings")
impl Hash for Sample {
        let deletes_from_union = Subset::new(0);
    }
        String::from(&r)
        #------
        let is_base = base_revs.contains(&rev.rev_id);
/// conversions in both directions.
    fn to_payload(value: &'static str) -> &'static str {
    fn eq(&self, other: &CategoriesT) -> bool {
        if s.len() <= MAX_LEAF {
        priority: usize,
        self.text = text;
/// supported as an optimization when only one reference exists, making the
                } else {
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    pub(crate) fn get_view_id(&self) -> ViewId {
        self.deletes_from_union = new_deletes_from_union;
            event_type: SampleEventType::CompleteDuration,
        let res = find_common(&a, &b);
    DurationBegin,
            find: Vec::new(),
        let col = col as usize;
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
        !self.selection.regions_in_range(offset, offset).is_empty()
#[inline]
        if self.find.is_empty() {
            Merge(0,2), Merge(1, 2),
                },
    tombstones: Rope,
/// # use xi_rope::Rope;
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
        where S: Into<StrCow>, C: Into<CategoriesT>


///

        let mut b = TreeBuilder::new();

        assert_eq!(rope.line_of_offset(15), 3);
        let trace = Trace::disabled();
    #[serde(default = "initial_revision_counter", skip_serializing)]
pub struct ChunkIter<'a> {
    /// Tests that priorities are used to break ties correctly
                    // TODO: update (rather than re-render) in cases of text valid

    out
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
                        Some(gc_dels.transform_shrink(&inserts))
}
            Assert(1, "ab".to_owned()),
        }
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    }
        let (mut l, mut offset) = self.get_leaf()?;

impl<'a> Iterator for Lines<'a> {
        // A with ring, hangul, regional indicator "US"
        assert_eq!(Some(8), a.next_grapheme_offset(0));
    }
        self.prev::<BaseMetric>();
    /// Returns the visible line number containing the given offset.
        println!("{:#?}", delta_ops);
    }
        // probably change as the recording internals change.
            warn!("Failed to get path to current exe: {:?}", e);
        self.lines += other.lines;
impl StringArrayEq<[&'static str]> for Vec<String> {

            Merge(0,2), Merge(1, 2), Merge(3, 2),
/// let a = Rope::from("hello ");
                    e.edit_rev(p, u, head, delta.clone());

            sample.timestamp_us = ns_to_us(time::precise_time_ns());
                serializer.serialize_newtype_variant("DeltaElement", 1,
        }
                    } else {
        for _i in 0..50 {
        // rebase delta to be on the base_rev union instead of the text
}
                let line = line.min(text.measure::<LinesMetric>() + 1);
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");

#[derive(Serialize, Deserialize, Debug)]
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        if !cursors.is_empty() {
            Assert(0, "acrbdz".to_owned()),
        }
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        (Revision {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    /// unsaved changes.
    scroll_to: Option<usize>,
/// Create an instantaneous sample with a payload.  The type the payload
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
/// rather than just this processe's samples).
                        };
        }
                for region in find.occurrences().regions_in_range(start_pos, pos) {
            //} else {



                    let (start, end) = self.peers.split_at_mut(ai);
    use test::Bencher;
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
            Assert(0, "abc".to_owned()),
        
                        sample.tid));
        }
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
            Assert(0, "zcpbdj".to_owned()),
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            while !s.is_char_boundary(splitpoint) {
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
                    if undone_groups.contains(undo_group) {
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

        let (start, end) = iv.start_end();
                    if retain_revs.contains(&rev.rev_id) {
        self.send_update_for_plan(text, client, styles,
            Some(ref breaks) => {

        for find in &mut self.find {
    #[should_panic]
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        MergeTestState::new(3).run_script(&script[..]);
impl<'a> Iterator for LinesRaw<'a> {
/// }
            SampleEventType::DurationEnd => 'E',
/// let b = Rope::from("world");
        let revs = basic_insert_ops(inserts, 1);

        let revs = basic_insert_ops(inserts, 1);
    }
    }
    ///
    fn is_ok_child(&self) -> bool {
        a.lines_all().collect::<Vec<_>>());
                            deletes_bitxor.transform_shrink(&gc_dels)
        self.set_dirty(text);
        self.tombstones = new_tombstones;
    }
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
//
impl Sample {
        engine
                        deletes_from_union
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    fn is_boundary(s: &String, offset: usize) -> bool {
    fn scroll_to_cursor(&mut self, text: &Rope) {
pub enum CategoriesT {
//     http://www.apache.org/licenses/LICENSE-2.0
        if self.is_enabled() {
    // A colliding session will break merge invariants and the document will start crashing Xi.
        let trace = Trace::enabled(Config::default());


                edit: Contents::Edit {
extern crate log;
    /// Note: `edit` and `edit_str` may be merged, using traits.
}

    #[cfg(feature = "benchmarks")]
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
/// See `trace_payload` for a more complete discussion.
            Merge(0,1),
        let (revs, text_2, tombstones_2, deletes_from_union_2) =

    }
    rev_id: RevId,
        self.enable_config(Config::default());
        ----

    /// No wrapping in effect.
        assert_eq!(snapshot.len(), 9);
            if cur_len_utf16 >= in_measured_units {

                cursors.push(c - start_pos);
    /// Does a drag gesture, setting the selection from a combination of the drag
                } else {
/// See `trace_block` for how the block works and `trace_payload` for a
        match *self {
        };

/// Stores the tracing data.
/// beginning.
    fn do_selection_for_replace(&mut self, text: &Rope) {

            "text": &l_str,
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    #[serde(rename = "cat")]
    }
        }
            self.truncate(splitpoint);

        let a_revs = basic_insert_ops(inserts.clone(), 1);
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
            cur_len_utf16 += u.len_utf16();
    }
            Merge(1,0),
    }
///
            let mut len = 1;
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
                    to_payload(("some description of the closure")))));
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
use memchr::{memrchr, memchr};
            SampleEventType::ObjectDestroyed => 'D',
/// Replace part of a `Rope`:
pub struct Size {
        trace.instant("5", &["test"]);
    }
        let subset_str = format!("{:#?}", expand_by[1].1);
        --#--
    fn goto_line(&mut self, text: &Rope, line: u64) {
                        self.revs.push(Revision {
                if s.ends_with('\n') {
}
            trace: None,
        assert_eq!(Some(10), a.next_codepoint_offset(6));
/// * `name` - A string that provides some meaningful name to this sample.
/// record it.
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_eq!(snapshot[4].name, "y");
                }
        assert_eq!(1, r.line_of_offset(a.len()));
                // sanitize input
        assert_eq!(None, a.next_grapheme_offset(17));
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        }
pub struct View {
    pub(crate) fn has_pending_render(&self) -> bool {
    -> SampleGuard<'a>

    }

                                deletes,
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.

categories_from_constant_array!(6);
        let expand_by = compute_transforms(revs);


    #[test]

        self.rev_id_counter += 1;
    fn merge_associative() {
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        }
}
            return false;
        if offset == s.len() {
    }
            end += 1;
        assert_eq!(2, a.offset_of_line(1));
    #[serde(skip_serializing_if = "Option::is_none")]

        let a = Rope::from("a");
        }
            trace.closure_payload("y", &["test"], || {
            client.scroll_to(self.view_id, line, col);
    }
        // spam cmd+z until the available undo history is exhausted
/// Measured unit is newline amount.
        let a = Rope::from("a\nb\n");
    TRACE.get_samples_count()
        assert_eq!(trace.get_samples_limit(), 11);
        let revs = basic_insert_ops(inserts, 1);
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
                Undo { ref toggled_groups, ref deletes_bitxor } => {
            a.push('a');

//
    }
    /// This case is a regression test reproducing a panic I found while using the UI.
pub struct Utf16CodeUnitsMetric(usize);
        engine.edit_rev(0, 2, first_rev, build_delta_2());
))]
                    to_payload(("some payload for the block"))));
    }

    fn invalidate_selection(&mut self, text: &Rope) {
    }
                match elem {
        let mut cursor = Cursor::new(self, offset);
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let a_rope = Rope::from(&a);
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            Assert(1, "afc".to_owned()),
    out.as_mut_slice().reverse();
/// some way.
        engine.edit_rev(1, 1, first_rev, d1.clone());
#[inline]
    #[allow(dead_code)]
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
        self.revs.reverse();
                                deletes.transform_shrink(&gc_dels))
{
            "text": &l_str,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
            categories: Some(categories.into()),

        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
                    } else {
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
/// }
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        samples[0].timestamp_us = 10;
    TRACE.instant_payload(name, categories, payload);
    max_undo_so_far: usize,
        }
/// an argument.

            update["lines"] = json!(lines);
        assert_eq!(1, expand_by[0].0.priority);
        #------
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        -#-
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
// You may obtain a copy of the License at
pub fn samples_cloned_sorted() -> Vec<Sample> {
        let r = r + Rope::from(&b[MIN_LEAF..]);
// Unless required by applicable law or agreed to in writing, software
                        }
        }
        // move deleted or undone-inserted things from text to tombstones
// limitations under the License.
            drag_state: None,
            Contents::Undo { .. } => panic!("can't merge undo yet"),
extern crate log;
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    use std::collections::BTreeSet;
        let mut b = TreeBuilder::new();
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
        } else {
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        };
        ).min_by_key(|x| {
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
            }
        let empty = Rope::from("");
    #[inline]
            sel.add_region(region);
    undo_group: usize,
            Some(region) => {
                            edit: Edit {

    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        let first = max(first, 0) as usize;
            SampleEventType::DurationEnd => 'E',
        }
///

        gc_scenario(4,3);
    {
    #[test]
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    pub fn empty() -> Engine {
    /// via process_name/thread_name respectively.
            self.event_type == other.event_type &&
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.

    /// This function does not perform any scrolling.


    TRACE.disable();
enum WrapWidth {
            max_undo_so_far,
        // This might be an over-specified test as it will
#[inline]
        View {
    }
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        guard
    /// This is a regression test to ensure that session IDs are used to break
    }
    let new_text = del_delta.apply(text);
#[inline]
/// assert_eq!("ello wor", String::from(&b));
            Rope::concat(
                    None => return if result.is_empty() { None } else { Some(result) }
extern crate log;
            Assert(1, "cb".to_owned()),
}

            "n": n,
                Edit { priority, undo_group, inserts, deletes } => {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let mut a = Rope::from("hello world");
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
                RenderTactic::Discard => {
            max_undo_so_far,
}
                                            closure: F, payload: P) -> R
    /// Get text of head revision.
            match self.wrap_col {
        loop {
    where S: Into<StrCow>, C: Into<CategoriesT>
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
            rev_id: self.next_rev_id(),
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
                         hls: &[(usize, usize)],
        let first_rev = engine.get_head_rev_id().token();
                        }
#[cfg(feature = "benchmarks")]
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        };
                    let b = if bi < ai {
                let (pl, poffset) = self.prev_leaf()?;
        b.push('\n');
    fn delta_rev_head_2() {
            Assert(1, "bdefg".to_owned()),

    /// Front end's line cache state for this view. See the `LineCacheShadow`
            Assert(1, "ab".to_owned()),
        }
    // TODO make this faster somehow?
            self.current = None;
        self.lc_shadow = b.build();
/// * `categories` - A static array of static strings that tags the samples in

                                  style_spans, &plan, pristine);
    /// The current contents of the document as would be displayed on screen
            end,
                    linewrap::rewrap_width(breaks, text, width_cache,
        use self::ViewEvent::*;
            event_type: SampleEventType::CompleteDuration,
        let (mut l, mut offset) = self.get_leaf()?;
        }
            Merge(5,4),
            Assert(1, "apbj".to_owned()),
                Rope::from(s1.clone()),
    pub fn set_session_id(&mut self, session: SessionId) {
    ///
    fn from(r: &Rope) -> String {
    }
}
/// discussion on payload.
}
}
        // the generated JSON.
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// The incrementing revision number counter for this session used for `RevId`s
            let c = region.end;
            {
    /// This function does not perform any scrolling.
            'D' => SampleEventType::ObjectDestroyed,
            },
            inserts = inserts.transform_expand(trans_inserts, after);
            a.push('a');

    /// Note: unlike movement based selection, this does not scroll.
        let inserts_3 = parse_subset_list("
    #[test]
        }, new_text, new_tombstones, new_deletes_from_union)
            event_type: SampleEventType::Instant,
    //TODO: implement lines_raw using ranges and delete this
        self.first_line = first;
/// ```rust
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        } else {
    /// The `pristine` argument indicates whether or not the buffer has
                splitpoint -= 1;
        assert_eq!("herald", String::from(a));
        thread.name().map(|ref s| to_cow_str(s.to_string()))
                                            closure: F, payload: P) -> R
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        }
                None => {
    }

                RenderTactic::Discard => {
                pos = leaf_offset + pl.len();
/// discussion on payload.
        assert_eq!(snapshot[2].name, "a");
        let first_rev = engine.get_head_rev_id().token();
}
        // move deleted or undone-inserted things from text to tombstones
#[derive(Clone, Debug)]
pub type SessionId = (u64, u32);
/// # Arguments
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    #[test]
        let mut b = String::new();
    #[test]
            AddSelectionAbove =>
        self.revs.push(new_rev);
///     something_expensive()
        });
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
            'N' => SampleEventType::ObjectCreated,

        deletes_from_union
        let trace = Trace::enabled(Config::with_limit_count(10));
        use self::MergeTestOp::*;
impl Serialize for Delta<RopeInfo> {
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    /// Only number of matches changed
                                          closure: F, payload: P)
/// * `categories` - A static array of static strings that tags the samples in

                        line_num = seg.their_line_num + seg.n;
            write!(f, "Rope({:?})", String::from(self))
        }).collect::<Vec<FindStatus>>()


    #[serde(rename = "cat")]
        b.iter(|| black_box(trace.closure_payload(
    fn test_get_sorted_samples() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
            prev_boundary = c.prev_boundary(&l, leaf_offset);
    }
///

    }
            }
                _ => { }

                        hls.push((sel_start_ix, sel_end_ix));
        let initial_rev = engine.get_head_rev_id().token();
        let all_caret = self.selection.iter().all(|region| region.is_caret());
    }
        let contents = match rev.edit {
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
            self.shrink_to_fit();
            Revision {
    }
///     something_expensive()
        self.tombstones = new_tombstones;
                                                        &mut line_cursor,
    }
    Instant,

            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
                text.offset_of_line(line)
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
                self.set_selection_raw(text, selection);
        // only one of the deletes was gc'd, the other should still be in effect
                Some(Cow::from(s))
    }

    ///
/// # Performance
        let trace = Trace::enabled(Config::with_limit_count(10));
    revs: Vec<Revision>,
    fn eq_small() {

    fn sample_name(&self) -> &'static str {
    #[bench]
        let rope = Rope::from("hi\ni'm\nfour\nlines");
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
impl<'a> SampleGuard<'a> {
impl Serialize for DeltaElement<RopeInfo> {
                            ops.push(self.build_update_op("skip", None, n_skip));

        let (revs, text_2, tombstones_2, deletes_from_union_2) =
        }
            Some(offset + len_utf8_from_first_byte(b))
}
                            styles: &StyleMap, style_spans: &Spans<Style>,
        // invert the changes to deletes_from_union starting in the present and working backwards

            SelectionIntoLines => self.do_split_selection_into_lines(text),

        // the front-end, but perhaps not for async edits.
        let mut a = Rope::from("");
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
fn count_utf16_code_units(s: &str) -> usize {
        assert_eq!(utf16_units, 9);
                        let end_line = start_line + seg.n;

        assert_eq!(snapshot[4].name, "z");
    fn next_rev_id(&self) -> RevId {
            SampleEventType::Instant => 'i',
/// implementation as efficient as a mutable version.
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
//! info.
        let mut gc_dels = self.empty_subset_before_first_rev();
                payload: payload,
/// Contains replacement string and replace options.
    pub fn token(&self) -> RevToken {
#[derive(Clone, Copy)]
                payload: None,
    }
        }
            if inserts.is_empty() {


                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        }
        info.utf16_size
            thread_name: Sample::thread_name(),
        } else {
            utf16_count += 1;

    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
    /// All the selection regions other than the one being dragged.
            // Snap to grapheme cluster boundary
                Rope::from(s1.clone()),
impl<'de> Deserialize<'de> for Rope {

    fn utf16_code_units_metric() {
                    a.merge(b);
            deletes_from_union = match rev.edit {
/// associated performance hit across the board for turning it on).
                                                        &mut line_cursor,

    }
        println!("{:#?}", b_delta_ops);
///
impl<'a> From<&'a Rope> for String {
    /// should be as unlikely to collide as two random u64s.
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
            rev_id_counter: 1,
            GestureType::MultiLineSelect =>
        if line > max_line {
}

        assert_eq!(trace.get_samples_count(), 0);
    (1, 0)
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        MergeTestState::new(2).run_script(&script[..]);

            x.next_occurrence(text, reverse, wrapped, &self.selection)

    }
            for find in self.find.iter() {

    {
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        }
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
        // expand by each in expand_by
            tid: tid,

        // NOTE 2: from_micros is currently in unstable so using new
            None
/// }
//! An engine for handling edits (possibly from async sources) and undo. It
        let mut selection = self.selection.clone();
    }

                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        #------
                Ok(CategoriesT::DynamicArray(categories))
            // with offset == s.len(), but be defensive.


    fn next(&mut self) -> Option<Cow<'a, str>> {
pub struct SampleGuard<'a> {


///
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    fn bench_trace_block(b: &mut Bencher) {
            }
        Self {
        }
        Ok(Delta::from(d))
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    out
    utf16_count

    }
        let (start, end) = iv.start_end();
            AssertMaxUndoSoFar(1,3),
    // encourage callers to use Cursor instead?
            Some(b)
/// Atomicity is implicit, putting the offset
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
/// A size, in pixel units (not display pixels).
        fn run_op(&mut self, op: &MergeTestOp) {
        self.tombstones = tombstones;
            DeltaElement::Insert(ref node) =>

    /// Determines whether the offset is in any selection (counting carets and
///
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
    /// The empty string will yield a single empty slice. In all other cases, the

                where E: serde::de::Error
        a.lines_all().collect::<Vec<_>>());
    }
    {

        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
            new_deletes = new_deletes.transform_expand(&new_inserts);
    /// The selection state for this view. Invariant: non-empty.
        let first_rev = &self.revs.first().unwrap();
    /// the heap, counters, etc); just the data itself.
use std::collections::HashMap;
/// Also note: in addition to the `From` traits described below, this module
#[inline]
use edit_types::ViewEvent;
            }
///
        self.set_selection(text, new_sel);
        assert_eq!(snapshot[0].name, "process_name");
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.

}
        // x, a, y, b, z, c
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
/// Returns the file name of the EXE if possible, otherwise the full path, or
                                deletes_bitxor: new_deletes_bitxor,
            Merge(0,2),
        let correct = parse_subset_list("
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        self.view_id

        }
                return false;
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
        ---#--
///
    revs: Vec<Revision>,

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
use std::fmt;
        b.iter(|| black_box(trace.instant_payload(
        where S: Into<StrCow>, C: Into<CategoriesT>
    fn test_get_samples() {
    }
        x
/// let b = a.slice(1, 9);
///
                        gc_dels = new_gc_dels;
        self.replace = Some(Replace { chars, preserve_case });
    /// Return the offset of the codepoint before `offset`.
use delta::{Delta, InsertDelta};
    enabled: AtomicBool,
            for &occurrence in find.occurrences().iter() {
use std::str::FromStr;
        });
    }
        assert_eq!(None, b.prev_codepoint_offset(0));
            as_vec.push(Sample::new_metadata(
    // this is the cost contributed by the timestamp to
        delta.serialize_field("els", &self.els)?;
                self.add_selection_by_movement(text, Movement::Down),
        for region in self.selection.regions_in_range(start_pos, pos) {
    }
        assert_eq!(trace.get_samples_count(), 5);
        // if self.end is inside this chunk, verify that it is a codepoint boundary
    ///
    /// Constructs an instantaneous sample.
    }
        /// together. For example, an auto-indent insertion would be un-done
    }
        let inserts = parse_subset_list("
/// # Examples
        assert_eq!(2, a.offset_of_line(1));

                    selection.add_region(SelRegion::new(sel_start, end_of_line));
        RopeInfo {
                Some(filename) => {
    }
fn default_session() -> (u64,u32) {
        Some(pos) => minsplit + pos,
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
///     0
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
        if self.is_enabled() {
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    fn to_payload(value: &'static str) -> &'static str {
    utf16_count
        // rebase delta to be on the base_rev union instead of the text
// you may not use this file except in compliance with the License.
        #[derive(Serialize, Deserialize)]
                }
    }
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
        let mut retain_revs = BTreeSet::new();
            for (i, op) in script.iter().enumerate() {
                      width_cache: &mut WidthCache, keep_selections: bool)
use std::ops::Add;
        assert_eq!(trace.get_samples_limit(), 11);
            }
        let start = self.line_col_to_offset(text, line, 0);
    /// slices will be nonempty.
/// let mut a = Rope::from("hello world");
            Merge(1,0),
                            Cursor::new(breaks, offset));
            rendered_styles.push(sel_end as isize - sel_start as isize);
            }
/// });
        if offset == s.len() {
        self.enabled.store(false, AtomicOrdering::Relaxed);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            Merge(0,2), Merge(1, 2),
                }
        println!("{:#?}", delta_ops);
                    self.do_gesture(text, line, column, GestureType::LineSelect)
            Assert(0, "acrbd".to_owned()),
                    None => return if result.is_empty() { None } else { Some(result) }
            let next_chunk = self.inner.next();
    #[test]
use std::borrow::Cow;
        // is the new edit in an undo group that was already undone due to concurrency?
        let mut d_builder = Builder::new(TEST_STR.len());
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        self.find_changed = FindStatusChange::All;
/// ```
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past

                            styles: &StyleMap, style_spans: &Spans<Style>,
    }
#![cfg_attr(feature = "cargo-clippy", allow(
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    }
            undo_group: 0,
        };
    pub fn lines_all(&self) -> Lines {
        let b = a.slice(2, 4);
impl From<Rope> for String {

                    match full_path_str {
        ];
    ///
        gc_scenario(4,3);
}
                }
                edit: contents.clone()

    /// This uniquely represents the identity of this revision and it stays
                        word_cursor.select_word()
    fn add(self, rhs: Rope) -> Rope {
#[cfg(feature = "dict_payload")]
        }
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
        };
        // rebase insertions on text and apply
// line iterators
            let mut sel = drag_state.base_sel.clone();
/// ```rust
use std;
                                deletes,
                inserts: inserted,

            Merge(0,1),
                            warn!("Failed to get string representation: {:?}", e);
        }

    ///
#[cfg(feature = "json_payload")]
/// have to be considered in `rebase` substantially for normal editing
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        /// Used to store a reversible difference between the old
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
            Merge(4,3),
        }
            deletes_from_union,
    /// of the chunks is indeterminate but for large strings will generally be
        // creation) is:
    fn test_samples_block() {
            // trans-expand other by expanded so they have the same context
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.

        if !new_inserts.is_empty() {
/// fn something_else_expensive(value: u32) {
}
        Lines {
    /// Offset of the point where the drag started.
    }

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },

impl Hash for Sample {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
                rev_id: basic_rev(i),

    #[test]
            end,
                cursors.push(c - start_pos);
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    /// None of the find parameters or number of matches changed.
        let correct = parse_subset_list("
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
                // merge logic.
enum FindStatusChange {
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
            categories: Some(categories.into()),
            }
            // with offset == 0, but be defensive.

    pub fn sel_regions(&self) -> &[SelRegion] {
    }
/// # Examples

use std::borrow::Cow;
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    }
    }
    }
/// for strings, specialized for incremental editing operations. Most operations
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
    Bytes(usize),
            Merge(0,2), Merge(1, 2),
        // ensure that when the samples are sorted by time they come out in a
use delta::{Delta, DeltaElement};
    }
        inserts: Subset,
///     something_else_expensive(result);
                        gc_dels = new_gc_dels;
        assert_eq!(1, expand_by[0].0.priority);
        }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    }
            pending_render: false,
            MetadataType::ProcessName {..} => "process_name",


        } else {
        }
/// Enable tracing with a specific configuration. Tracing is disabled initially
        let snapshot = trace.samples_cloned_unsorted();
                    if sel_end_ix > sel_start_ix {
    fn eq_med() {
                match *other {
{
                    "something", &["benchmark"],
        Self {
        let end = self.sel_regions().last().unwrap().end;
//
        let first_rev = engine.get_head_rev_id().token();
            splitpoint
        let a_rope = Rope::from(&a);
            b.push('b');
                }
    }
            Assert(0, "acbd".to_owned()),
            args: Some(SampleArgs {
    lines: usize,
                Some(pos) => offset += pos + 1,
        revs.append(&mut revs_2);
            GestureType::ToggleSel => self.toggle_sel(text, offset),

                                                        soft_breaks.as_mut(),
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        match cmd {
            replace: None,
            }
    }
}
        assert_eq!(correct, res);
// you may not use this file except in compliance with the License.
                    // fast-forward this revision over all common ones after it
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        }
/// ```rust
        let revs = basic_insert_ops(inserts, 1);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    }
/// Also note: in addition to the `From` traits described below, this module
use interval::Interval;
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        let subset_str = format!("{:#?}", expand_by[0].1);
///     something_expensive()
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
    if x < min {
        }
    #[cfg(feature = "benchmarks")]
            black_box(time::precise_time_ns());
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
            name: name.into(),
            sample: None,
        self.set(new_pos);
                }
        }
    TRACE.samples_cloned_sorted()


        let mut b = TreeBuilder::new();
    max_undo_so_far: usize,
            Assert(1, "acpbdj".to_owned()),
    #[test]
    }
        assert_eq!(4, a.offset_of_line(2));

}
    // allowing us to use the same method to insert the text into the tombstones.
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            match rev.edit {
    utf16_size: usize,
}
    }
    /// This is a regression test to ensure that session IDs are used to break
    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    #[bench]
                    let _ = s.pop();
            Assert(0, "acbd".to_owned()),
    }
        self.sample_limit_count

        }).collect();
            Merge(2,3),
        }
}
use std::sync::Mutex;
        let deletes_from_union_b = parse_subset("-#---");
                    }
            Assert(0, "zacpb".to_owned()),
    #[test]
    }
        let revs = basic_insert_ops(inserts, 1);
        });
        };
            }
        // since character was inserted after gc, editor gcs all undone things
/// Replace part of a `Rope`:
        let b = a.slice(2, 4);


            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
/// ```
        samples.sort();
        for _ in 0..line_len {
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
}
        self.utf16_size += other.utf16_size;
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        self.sample_limit_count * size_of::<Sample>()

        // position after 'f' in four
    fn edit_rev_concurrent() {
        // the front-end, but perhaps not for async edits.
    /// Note: unlike movement based selection, this does not scroll.
        let l_str = text.slice_to_string(start_pos, pos);
//! text.

            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    {
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
/// conversions in both directions.
            },

        }
        }

    #[test]
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
fn initial_revision_counter() -> u32 {
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));

        if offset == s.len() {

                sel
        let mut d_builder = Builder::new(TEST_STR.len());
        println!("{:#?}", b_delta_ops);
                    Some(Contents::Edit {
    /// recomputing line wraps.
/// None if an irrecoverable error occured.
            tid: tid,
        let end = time::precise_time_ns();
    fn next(&mut self) -> Option<&'a str> {
                } else {
}
    /// Tests that priorities are used to break ties correctly
        }

            Merge(0,1),
pub struct RevId {

}
    fn line_offsets() {
            .map_or(0, |ref s| s.timestamp_us);
        let a = Rope::from("a\nb\nc");
        // A with ring, hangul, regional indicator "US"
        engine.undo([2].iter().cloned().collect());
    use serde_test::{Token, assert_tokens};
    TRACE.instant(name, categories);
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        // +2 for exe & thread name.
            let common = find_common(a_to_merge, b_to_merge);
                    base_len: delta.base_len
    // TODO: don't construct transform if subsets are empty
                } else if click_count == Some(2) {

        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        let rev = Revision {
    }
    /// Exposed for unit tests only.


        }
            }
    pub(crate) fn has_pending_render(&self) -> bool {
extern crate serde_json;
    ///
            to_payload("some description of the trace"))));
    }
        let new_pos = self.pos() + (end - offset);
    }
    out.as_mut_slice().reverse();
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
            // Do it the other way on the copy

        if self.len() != other.len() {
extern crate test;
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
            Merge(1,0),
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",



}
            let sel = {
/// });
/// Contains replacement string and replace options.
impl<T: AsRef<str>> From<T> for Rope {
            let first_rev = engine.get_head_rev_id().token();
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
    Undo {
        count_newlines(&s[..in_base_units])

        for op in &delta_ops {
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);



        trace.closure_payload("y", &["test"], || {},
        let tombstones = Rope::from("27");

            } else {
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        impl From<RopeDelta_> for Delta<RopeInfo> {
}
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
            .map(|pos| offset + pos + 1)
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
// Licensed under the Apache License, Version 2.0 (the "License");
            SampleGuard::new(&self, name, categories, None)
// See the License for the specific language governing permissions and
                    let mut selection = self.selection.clone();
        b.build()
                        } else {
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        match ty {

        let r = Rope::from(&a[..MAX_LEAF]);
    for &b in s.as_bytes() {
/// overhead tracing routine available.
    }
                        gc_dels = new_gc_dels;
            base_sel: selection.clone(),

    }
                    } else {
        self.tombstones = new_tombstones;
        let line_len = MAX_LEAF + MIN_LEAF - 1;

    /// It does undos and gcs in a pattern that can actually happen when using the editor.

///
    }

    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
                leaf_offset = self.pos() - noffset;
/// # Examples
        }).collect::<Vec<FindStatus>>()
            tid: sys_tid::current_tid().unwrap(),
}
    #[test]
    }
    use rope::{Rope, RopeInfo};
    All,
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        let first_rev = engine.get_head_rev_id().token();

    }
    /// The state for finding text for this view.
            Some(offset + len_utf8_from_first_byte(b))
impl Ord for Sample {
/// Also note: in addition to the `From` traits described below, this module
            fragment: ""
    #[allow(dead_code)]
    /// Selects the next find match.
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        self.samples.lock().unwrap().limit()

            event_type: event_type,
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
        assert_eq!(rope.line_of_offset(1), 0);
    StaticArray(&'static[&'static str]),

                self.drag_state = None;
                }
        ];
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        let max_line = self.measure::<LinesMetric>() + 1;

            match reverse {

            lines: 0,
            'X' => SampleEventType::CompleteDuration,
    }
    #[derive(Clone, Debug)]
        self.revs.last().unwrap().max_undo_so_far
    #[cfg(feature = "benchmarks")]
        self.samples.lock().unwrap().limit()
    /// Returns a u64 that will be equal for equivalent revision IDs and
                peers.push(peer);
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
            write!(f, "Rope({:?})", String::from(self))
                                     categories: C,
        Self {
        for &(trans_priority, ref trans_inserts) in &expand_by {
}

}
            Assert(0, "abc".to_owned()),
                     modify_selection: &SelectionModifier) {
#[derive(Clone, Copy)]

        }
            Assert(2, "ab".to_owned()),
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    first_line: usize,
        let (leaf, offset) = match self.get_leaf() {
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
            pos += 1;
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,

        // rebase delta to be on the base_rev union instead of the text
            rev_id: self.next_rev_id(),
                sel
        let edit_iv = Interval::new_closed_open(start, end);
        for op in &delta_ops {

        let tombstones_b = Rope::from("a");
    fn next_codepoint_offset_small() {


        }
            self.first_line = line;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            while !s.is_char_boundary(offset - len) {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
    fn test_samples_block() {

            }
///
            }

            }
use std::str;

    /// Determine whether `offset` lies on a codepoint boundary.
    max: usize,
    /// The state for finding text for this view.
                s.len()

        let mut b = line_cache_shadow::Builder::new();
        s.is_char_boundary(offset)
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        use self::ViewEvent::*;
        info.lines
                return;
/// The payload associated with any sample is by default a string but may be
        self.wrap_col = WrapWidth::Width(self.size.width);
                (drag_state.max, min(offset, drag_state.min))
    }
                    result = cow_append(result, &self.fragment[.. i + 1]);
            edit: Contents::Edit {
    #[derive(Debug)]
                let mut peer = Engine::new(Rope::from(""));
            Merge(0,2), Merge(1, 2),
use std::collections::hash_map::DefaultHasher;

        let params = json!({
            'f' => SampleEventType::FlowEnd,


    Metadata
    /// Only works well for ASCII, will probably not be maintained long-term.

        assert_eq!(snapshot[3].name, "b");
    /// This function does not perform any scrolling.
    pub fn max_size_in_bytes(&self) -> usize {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        assert!(a != b);
        let new_inserts = union_ins_delta.inserted_subset();
//! info.
#[inline]
    /// Return the offset of the codepoint after `offset`.
use std::str::FromStr;
            s = &s[splitpoint..];
            FindNext { wrap_around, allow_same, modify_selection } =>
            Replace { chars, preserve_case } =>
            sel.add_region(new_region);
                self.drag_state = None;
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
            let c = i.to_string() + "\n";
            Assert(1, "ab".to_owned()),
        debug_subsets(&rebased_inserts);
                         styles: &StyleMap, style_spans: &Spans<Style>,

            ix = iv.end() as isize;
    /// Get text of a given revision, if it can be found.
///
}
    }
            SampleGuard::new_disabled()
///
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
///
        };
        ).min_by_key(|x| {
    }
            rendered_styles.push((sel_start as isize) - ix);
        assert_eq!(0, a.line_of_offset(0));
use std::borrow::Cow;
    }
            self.first_line = line - (self.height - 1);
    fn compute_info(s: &String) -> Self {

    use engine::*;
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
                RenderTactic::Discard => {
            min: offset,

/// # Arguments
struct DragState {
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
                    priority, inserts, deletes,
                    to_payload(("some description of the closure")))));
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

extern crate lazy_static;
            }
impl Leaf for String {
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
            // On the next step we want things in expand_by to have op in the context
    let mut out = Vec::new();
                                deletes_bitxor: new_deletes_bitxor,
        let mut cursor = Cursor::new(self, offset);
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced

enum Contents {
                        Ok(s) => Some(s),
        while !leaf.is_char_boundary(end) {
            self.breaks = None
    }




}
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {

            Assert(1, "zpbj".to_owned()),
    #[serde(skip_serializing_if = "Option::is_none")]
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    pub fn new_duration_marker<S, C>(name: S,
        let text_with_inserts = text_inserts.apply(&text);
            Merge(0,2), Merge(1, 2),
        }
                    let head = e.get_head_rev_id().token();
        self.rev_id_counter += 1;
    type Output = Rope;
    }
            //let prev_pos = self.cursor.pos();
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
    /// Move the selection by the given movement. Return value is the offset of
    }
    // Render a single line, and advance cursors to next line.
categories_from_constant_array!(6);
    }
        let trace = Trace::enabled(Config::default());
        // the smallest values with which it still fails:
                rev_id: basic_rev(i),

                self.select_line(text, offset, line, false),
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
    /// controlled by features (default string).
        }
        if let Some(sel) = new_sel {
                                                          new_len, col),
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        (line, offset - self.offset_of_line(text, line))
use std::borrow::Cow;
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
/// revisions not shared by both sides.
                                deletes.transform_shrink(&gc_dels))
        RopeInfo {
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

/// Transform `revs`, which doesn't include information on the actual content of the operations,
            self.next()
    }
            name: name.into(),
    // Send the requested lines even if they're outside the current scroll region.
        }, deletes_from_union)
#![cfg_attr(feature = "benchmarks", feature(test))]
    fn merge_idempotent() {
    }
        }
        d
        let mut gc_dels = self.empty_subset_before_first_rev();
        let start = time::precise_time_ns();
            "ops": ops,
        assert_eq!(None, a.prev_grapheme_offset(0));
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
///
    1
    }
// ======== Merge helpers

        if let Some(exe_name) = exe_name() {
        // that into our actual target.
            Assert(2, "ab".to_owned()),

/// assert_eq!("llo wo", String::from(c));
            SampleEventType::DurationBegin => 'B',
    pub fn new_disabled() -> Self {
            let b = s.as_bytes()[offset];
            Assert(0, "abc".to_owned()),
        } else if line == max_line {
    }
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

            Merge(0,2), Merge(1, 2),
    impl MergeTestState {
/// The visual width of the buffer for the purpose of word wrapping.
                        let mut line_cursor = Cursor::new(text, offset);
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
///
            'O' => SampleEventType::ObjectSnapshot,

        let trace = Trace::disabled();
// Unless required by applicable law or agreed to in writing, software
        assert_eq!(trace.get_samples_count(), 1);
    }
    #[test]
    }
        // original values this test was created/found with in the UI:
        }
        };
    fn identity() -> Self {
                            if !inserts.is_empty() {
                },
    }
    fn add(self, rhs: Rope) -> Rope {
                    }

            sample: None,
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
        }, new_text, new_tombstones, new_deletes_from_union)
/// Disable tracing.  This clears all trace data (& frees the memory).
        Self {
            GestureType::LineSelect =>
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
        // is the new edit in an undo group that was already undone due to concurrency?
        let head = engine.get_head_rev_id().token();
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
        assert_eq!(snapshot[6].name, "z");
            rev_id: self.next_rev_id(),
        }
}

        }
/// Tracing is disabled initially on program launch.
    pub fn select_all(&mut self, text: &Rope) {
    }
    }
                max_undo_so_far: i+1,
    fn thread_name() -> Option<StrCow> {
// Try to split at newline boundary (leaning left), if not, then split at codepoint
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
            Assert(0, "acrbd".to_owned()),
/// See `trace_block` for how the block works and `trace_payload` for a
fn ns_to_us(ns: u64) -> u64 {
}

        let tid = all_samples.front()
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
    }
    }
///
            }
                }
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        let trace = Trace::disabled();
#[derive(Clone, Copy)]
            Assert(1, "ab".to_owned()),
        CategoriesT::DynamicArray(c)
                        sample.tid));
fn ns_to_us(ns: u64) -> u64 {
        b if b < 0x80 => 1,
                self.select_word(text, offset, false),

                },

    /// Invalidate the current selection. Note that we could be even more
            FindNext { wrap_around, allow_same, modify_selection } =>
impl Serialize for Delta<RopeInfo> {
        assert_eq!(4, a.offset_of_line(2));
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        let params = json!({
// Licensed under the Apache License, Version 2.0 (the "License");
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
use movement::{Movement, region_movement, selection_movement};
    }
            name: name.into(),
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};

/// Measured unit is newline amount.
    }
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
///
        let first_rev = engine.get_head_rev_id().token();
            let end = self.line_of_offset(last_text, iv.end()) + 1;
                edit: Contents::Edit {
        ");
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
                                                          new_len, col),
        while let Err(incomp) = next_boundary {
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    #[test]
            match *op {
    }
}
    }
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
    fn render_line(&self, client: &Client, styles: &StyleMap,
        let mut engine = Engine::new(Rope::from(TEST_STR));



        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
            match c.edit {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
        trace.closure_payload("x", &["test"], || {
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        let mut d_builder = Builder::new(TEST_STR.len());
    #[test]
}


/// # Examples
}

        }
    } else {
impl SampleEventType {
                    let mut e = &mut self.peers[ei];
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
    } else {
    }
}
}
            height: 10,

            let b = self.current.unwrap().as_bytes()[self.idx];
    fn test_samples_pulse() {

    deletes: Subset,
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
    }


            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        }
        self.len() >= MIN_LEAF
            'X' => SampleEventType::CompleteDuration,
            offset += 1;
            breaks: None,
            enabled: AtomicBool::new(true),
// you may not use this file except in compliance with the License.
                            plan: &RenderPlan, pristine: bool)
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
                },
        ");
                            rev_id: rev.rev_id,

    fn arr_eq(&self, other: &Rhs) -> bool;
/// Stores the relevant data about a sample for later serialization.
        while offset < l.len() && !l.is_char_boundary(offset) {
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    /// The semantics are intended to match `str::lines()`.
    pub fn new_duration_marker<S, C>(name: S,
//     http://www.apache.org/licenses/LICENSE-2.0
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        let subset_str = format!("{:#?}", expand_by[1].1);
                        let end_line = start_line + seg.n;
            match c.edit {
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
    }
    fn merge_associative() {
    #[test]
            }
    #[test]

    #[test]
use internal::find::FindStatus;
use interval::Interval;
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
                        },
                pos = leaf_offset + nl.len();
        let trace = Trace::disabled();
        // rebase the delta to be on the head union instead of the base_rev union
impl Engine {
            // if using breaks update cursor
/// from multiple distributed sources (i.e. you want to sort the merged result
/// some way.
        assert_eq!(0, b.line_of_offset(1));
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        assert_eq!(snapshot[6].name, "z");
    #[test]
    // Render a single line, and advance cursors to next line.

    }
                           styles: &StyleMap, style_spans: &Spans<Style>,
    pub fn enable(&self) {
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
    // this is the cost contributed by the timestamp to trace()
impl<'a> Iterator for ByteIter<'a> {
        // clamp to end of line
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

use serde::de::{Deserialize, Deserializer};
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    #[serde(skip_serializing_if = "Option::is_none")]
    fn eq(&self, other: &Sample) -> bool {

                            if !inserts.is_empty() {
        //for next line
            SampleEventType::CompleteDuration => 'X',
        self.drag_state = Some(DragState { base_sel, offset, min, max });
//!


        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        assert_eq!(Some(5), b.next_codepoint_offset(2));
            event_type: SampleEventType::Instant,
        engine.gc(&gc);
    // Delta that deletes the right bits from the text
/// # Returns
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);

pub fn trace<S, C>(name: S, categories: C)
        }

    }
        /// Groups related edits together so that they are undone and re-done
            'B' => SampleEventType::DurationBegin,

        let mut revs = basic_insert_ops(inserts_1, 1);
            Merge(1,0),
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    /// None of the find parameters or number of matches changed.
    /// Selects the given region and supports multi selection.
        }
    }
        result
            self.idx = 0;
                        }
    fn next(&mut self) -> Option<&'a str> {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    }
extern crate time;
        assert_eq!(trace.get_samples_limit(), 20);
                        Err(e) => {
///
            let expand_by = compute_transforms(a_new);
                let (nl, noffset) = self.next_leaf()?;
            s = &s[splitpoint..];
        engine.edit_rev(1, 1, initial_rev, d1.clone());
                                gc_dels = gc_dels.union(deletes);
        let (mut l, mut offset) = self.get_leaf()?;
    fn compute_info(s: &String) -> Self {
            thread_name: Sample::thread_name(),
        self.set_selection_raw(text, sel.into());
            next_boundary = c.next_boundary(&l, leaf_offset);
    }
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        engine.edit_rev(1, 1, first_rev, d1.clone());

fn ns_to_us(ns: u64) -> u64 {
                payload: payload,
}
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
    ObjectDestroyed,
/// Base unit is utf8 code unit.
                      delta: &Delta<RopeInfo>, client: &Client,
        b if b < 0x80 => 1,
    }
        // a, b, y, z, c, x
    /// Returns a slice of the string from the byte range [`start`..`end`).
                   whole_words: bool) {


            Assert(1, "apb".to_owned()),
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        }
        match *self {
        let trace = Trace::enabled(Config::with_limit_count(11));
            a = a + Rope::from(&c);
impl Metric<RopeInfo> for LinesMetric {
        assert!(r != a_rope);
            Scroll(range) => self.set_scroll(range.first, range.last),
    fn next(&mut self) -> Option<&'a str> {
    fn edit_rev_simple() {
    }
            'B' => SampleEventType::DurationBegin,
                (region.is_upstream() && c == pos) ||
    (1, 0)

        }

///
    for op in b_new {
    }
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
                        Cow::Owned(un_deleted.transform_shrink(inserts))
        let trace = Trace::enabled(Config::default());
/// ```
/// revisions not shared by both sides.
    #[cfg(feature = "benchmarks")]
    // allowing us to use the same method to insert the text into the tombstones.
{
            }
    ///
    #[serde(skip_serializing)]

            let base_index = find_base_index(&self.revs, &other.revs);
        let script = vec![
    /// Constructs a Duration sample.  For use via xi_trace::closure.
                        } else {
/// an argument.
    fn undo_4() {
use serde_json::Value;

                WrapWidth::None => (),
                        let end_line = start_line + seg.n;

            Merge(0,1),
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                Rope::from(s1.clone()),
    //
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
                } else {
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.

        // only one of the deletes was gc'd, the other should still be in effect
            Merge(0,1),
                edit: contents.clone()
                    return Some(result);
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            },
            deletes_from_union = match rev.edit {
    }
        let trace = Trace::disabled();
        // +2 for exe & thread name.
extern crate time;
                        self.revs.push(Revision {
            event_type: SampleEventType::Instant,
pub struct Utf16CodeUnitsMetric(usize);
        let styles = self.render_styles(client, styles, start_pos, pos,
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        } else {

        assert_eq!(Some(9), a.next_grapheme_offset(3));
    }
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
// limitations under the License.
            match *op {
    #[bench]
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
    #[test]
            let b = s.as_bytes()[offset];
            // The deletes are already after our inserts, but we need to include the other inserts
    TRACE.instant_payload(name, categories, payload);
            event_type: SampleEventType::CompleteDuration,

        });
/// See `trace_payload` for a more complete discussion.
/// let mut a = Rope::from("hello world");
        }
    }
            thread_name: Sample::thread_name(),
                },
// line iterators
        } else {
        assert_eq!(snapshot[0].name, "process_name");
        // 1 MB
                // Deprecated (kept for client compatibility):
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
        a.lines_all().collect::<Vec<_>>());
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        b.build()
        let b = a.slice(2, 4);
}
        assert_eq!(a.len(), r.offset_of_line(1));
            thread_name: Sample::thread_name(),
    Bytes(usize),
    ///
    }
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
            //leaf.len() - start_pos
            }
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
                if rev.max_undo_so_far < lowest_group {
            if let Edit { priority, ref inserts, .. } = r.edit {

        b.iter(|| {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
    pub metadata_name: Option<StrCow>,
                // merge logic.
        assert_eq!(snapshot.len(), 9);
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
    fn is_boundary(s: &String, offset: usize) -> bool {
        let mut ix = 0;
                }
        });
        ];
    }
    #[test]
            SampleEventType::Instant => 'i',
    FlowEnd,
    pub fn set_scroll(&mut self, first: i64, last: i64) {
    }
            find.find_status(matches_only)
    /// recomputing line wraps.
            let _ = trace.block("test_samples_block", &["test"]);

    fn is_boundary(s: &String, offset: usize) -> bool {
// Copyright 2016 The xi-editor Authors.

        let cur_deletes_from_union = &self.deletes_from_union;
    current: Option<&'a str>,
        let mut sel = self.selection.clone();
        Ok(Delta::from(d))
use unicode_segmentation::GraphemeIncomplete;
///

            None => return "",
                        self.revs.push(Revision {
categories_from_constant_array!(10);
        self.enable_config(Config::default());
impl<'a> Iterator for LinesRaw<'a> {
    // TODO: don't construct transform if subsets are empty
        self.utf16_size += other.utf16_size;
    /// The process the sample was captured in.
    /// # Panics
    }
        assert_eq!(a.len(), r.offset_of_line(1));
        b.iter(|| black_box(time::precise_time_ns()));
        };

///
        out.push(Revision {
    idx: usize,
    let new_text = del_delta.apply(text);
    type Item = u8;
// utility function to clamp a value within the given range
enum Contents {
        b.push_str(new);
    }
/// * `categories` - A static array of static strings that tags the samples in
/// ```rust,ignore
            if self.line_of_offset(text, offset) <= line {

        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        let styles = self.render_styles(client, styles, start_pos, pos,
    height: usize,
    ///
        } else {
    /// the other doesn't make it re-appear.
        engine.undo([1].iter().cloned().collect());
#[derive(Clone, Debug, PartialEq, Eq)]
    /// Invalidates front-end's entire line cache, forcing a full render at the next
            if next_chunk.is_none() { return None; }
        }
        let contents = Contents::Edit {
        assert_eq!(snapshot[0].name, "process_name");
            ),
        trace.closure_payload("x", &["test"], || (),
    #[serde(rename = "ph")]
/// * `categories` - A static array of static strings that tags the samples in
    #[test]
// limitations under the License.
            if let GraphemeIncomplete::PreContext(_) = incomp {
        let styles = self.render_styles(client, styles, start_pos, pos,
    }
use std::fmt;
        assert_eq!(0, a.line_of_offset(1));
        let first = max(first, 0) as usize;
                }
            self.idx = 0;

    /// Sets the selection to a new value, invalidating the line cache as needed.
}
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
            return 0;
        }
                leaf_offset = self.pos() - noffset;
            },
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
        self.set_selection(text, sel);
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    samples: Mutex<FixedLifoDeque<Sample>>,
        for i in 1..(s1.len() * 3) {
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        if self.is_enabled() {
        trace.record(guard.sample.as_ref().unwrap().clone());
        }
    #[serde(skip_serializing_if = "Option::is_none")]
        let mut pos = self.pos();
        let first_rev = engine.get_head_rev_id().token();
    #[test]

}
        engine.gc(&gc);
                             client: &Client, style_spans: &Spans<Style>)


/// assert!("hello world" == String::from(a + b));
                                     event_type: SampleEventType)
    #[test]
        // TODO: simplify this through the use of scopeguard crate
        let plan = RenderPlan::create(height, self.first_line, self.height);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
#[derive(Clone, Copy)]
        assert_eq!(Some(3), a.next_codepoint_offset(1));
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    fn measure(info: &RopeInfo, _: usize) -> usize {
    pub categories: Option<CategoriesT>,
/// with.  By default, the type is string-like just like name.  If compiled with


    }
            cur_len_utf8 += u.len_utf8();
    /// The empty string will yield a single empty slice. In all other cases, the
            Merge(1,0),
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    #[test]
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
        /// revision that were added by this revision.
        },
    /// You could construct the "union string" from `text`, `tombstones` and
        let mut selection = Selection::new();

        b.push_str(new);
/// Also note: in addition to the `From` traits described below, this module

        if self.breaks.is_some() {
            // On the next step we want things in expand_by to have op in the context
    {
            pos -= 1;
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
    }
        assert_eq!(5, a.offset_of_line(3));
            tid: sys_tid::current_tid().unwrap(),
pub fn trace<S, C>(name: S, categories: C)
            find.update_highlights(text, delta);
            deletes_from_union,
        } else if self.first_line + self.height <= line {
                            Cursor::new(breaks, offset));
        b if b < 0xe0 => 2,
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        let rope = Rope::from("hi\ni'm\nfour\nlines");

    }

        for mut find in self.find.iter_mut() {

            find.find_status(matches_only)
    fn find_common_1() {
    #[test]
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
            }
    #[test]
            ModifySelection(movement) => self.do_move(text, movement, true),
    out
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        loop {
    /// method to be fast even when the selection is large.
            self.args == other.args
        if !selection.regions_in_range(offset, offset).is_empty() {
        }
    }
    /// Replacement string.
// distributed under the License is distributed on an "AS IS" BASIS,
    highlight_find: bool,

            }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
                    text.slice_to_string(region.min(), region.max())
    offset: usize,
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

    /// storage allocated will be limit * size_of<Sample>
}
            Merge(2,1),
    find_changed: FindStatusChange,
        let trace = Trace::enabled(Config::default());
        for (iv, style) in style_spans.iter() {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    priority: usize,
    }
        let a = Rope::from("a\nb\nc");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
#[macro_use]
    #[inline]
        // TODO: simplify this through the use of scopeguard crate
/// Valid within a session. If there's a collision the most recent matching
    #[test]

    }
        self.push_str(&other[start..end]);
        let trace = Trace::enabled(Config::with_limit_count(20));
//
categories_from_constant_array!(9);
#[cfg(test)]
        engine.undo([].iter().cloned().collect());
impl<'a> Iterator for ChunkIter<'a> {
    #[serde(rename = "dur")]
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            },
        assert_eq!(correct, rebased_inserts);
        assert_eq!("-###-", &subset_str);
    }
    pub name: StrCow,
        let height = self.line_of_offset(text, text.len()) + 1;
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        &self.text
    /// Updates the view after the text has been modified by the given `delta`.
    // callers should be encouraged to use cursor instead
            black_box(trace.block_payload(
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    /// tiny it is effectively O(n). This iterator does not allocate.
        b.add_span(height, 0, 0);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        Self::with_limit_bytes(1 * 1024 * 1024)
    #[test]
    /// Garbage collection means undo can sometimes need to replay the very first
    }

            "something", &["benchmark"],
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
        self.set_selection_raw(text, selection);
    }
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
pub struct ByteIter<'a> {
//! An engine for handling edits (possibly from async sources) and undo. It
        }
        where D: serde::Deserializer<'de>
    }
            Some(b)
///
            replace_changed: false,
        self.set_dirty(text);
        ");
    /// they would be if they hadn't been deleted.
    pub fn max_samples(&self) -> usize {
    fn bench_get_tid(b: &mut Bencher) {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        assert_eq!(2, expand_by[1].0.priority);

            let end = self.line_of_offset(last_text, iv.end()) + 1;

                Edit { priority, undo_group, inserts, deletes } => {
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
// Copyright 2016 The xi-editor Authors.
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        let inserts_2 = parse_subset_list("
}

                MetadataType::ProcessName {name: exe_name},
        let mut sel = self.selection.clone();
        let correct = parse_subset_list("
    TRACE.samples_cloned_unsorted()

        // Any edit cancels a drag. This is good behavior for edits initiated through
    #[test]
}
                }
    }
        } else {
    /// What kind of sample this is.
mod tests {

            AssertMaxUndoSoFar(1,3),

/// an argument.
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    #[test]
// distributed under the License is distributed on an "AS IS" BASIS,
    }
            let style_id = self.get_or_def_style_id(client, styles, &style);
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
// you may not use this file except in compliance with the License.
        self.find.clear();
            MetadataType::ProcessName {name} => (Some(name), None),
    ///
    /// Constructs an instantaneous sample.
            wrap_col: WrapWidth::None,
                SelRegion::new(start, end)
/// a.edit_str(1, 9, "era");

        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            Merge(0,2),
            let b_to_merge = &other.revs[base_index..];
        ---#--
        d_builder.delete(Interval::new_closed_open(58, 61));

        }
}
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
        }).collect();
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        self.drag_state = None;
        if offset == 0 {
        self.set_dirty(text);
        } else {
impl CategoriesT {
        assert_eq!(rope.line_of_offset(15), 3);

/// # Performance
            els: Vec<RopeDeltaElement_>,
        // current recording mechanism should see:
        let trace = Trace::enabled(Config::default());
            AssertMaxUndoSoFar(1,3),
        }
impl From<Vec<String>> for CategoriesT {
            Assert(0, "acpbdj".to_owned()),
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
                }
//! `Engine::merge`, which is more powerful but considerably more complex.
}
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
        }
                            }

    /// selection edges).
    fn merge_insert_only_whiteboard() {
        b if b < 0x80 => 1,


        let start = self.line_col_to_offset(text, line, 0);
        // rebase the delta to be on the head union instead of the base_rev union
            GestureType::PointSelect => {
        use self::MergeTestOp::*;
    #[test]
/// ```
        let result = closure();
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
            Some(offset + len_utf8_from_first_byte(b))
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
            sel.add_region(new_region);
                                                     "insert", node)
        assert_eq!(TEST_STR, String::from(engine.get_head()));
use client::Client;
        RevId { session1: 1, session2: 0, num: i as u32 }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

    // this should have the same behavior, but worse performance
    /// An iterator over the raw lines. The lines, except the last, include the
            replace_changed: false,
    /// and currently in a debugging state.
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                        let _ = s.pop();
        engine.undo([1].iter().cloned().collect());


use std::str;
/// ```rust
        if let Some(occ) = closest_occurrence {
        let script = vec![
/// Tracing is disabled initially on program launch.
        soln.push('f');
            Assert(0, "acbd".to_owned()),
                        }
            MetadataType::ProcessName {name} => (Some(name), None),
#[inline]
            let _x = trace.block("something", &[]);
                        } else {
        for op in &delta_ops {
                    b.add_span(seg.n, 0, 0);
        (Revision {
        self.invalidate_selection(text);
            if !s.is_empty() {

        } else {
    fn next(s: &String, offset: usize) -> Option<usize> {
            to_undo.insert(i+1);
        for _ in 0..(edits-max_undos) {
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
                edit: Contents::Edit {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
            }
    #[bench]
            rendered_styles.push((sel_start as isize) - ix);
            'E' => SampleEventType::DurationEnd,
impl<T: AsRef<str>> From<T> for Rope {
    FlowStart,

    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
    struct MergeTestState {
                peer.set_session_id(((i*1000) as u64, 0));
    #[test]
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        as_vec
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
        // This might be an over-specified test as it will
            let splitpoint = find_leaf_split_for_merge(self);

                name, categories, None, start, end - start));
            // selection with interior
    type Output = Rope;
/// configured via the `dict_payload` or `json_payload` features (there is an
        RevId { session1: 1, session2: 0, num: i as u32 }
        if line > max_line {
    }
impl Eq for Sample {}
    fn edit_rev_concurrent() {
    use test::black_box;
///
    }
        let expand_by = compute_transforms(revs);
    out

    /// When was the sample started.
        // insert a character at the beginning

            if self.line_of_offset(text, offset) <= line {
        next_boundary.unwrap_or(None)

    ObjectCreated,
        } else {
                }
        assert!(r.clone().slice(0, a.len()) == a_rope);
            let expand_by = compute_transforms(a_new);


        last_line += if last_col > 0 { 1 } else { 0 };
    #[serde(rename = "ph")]
        Ok(b.build())
        impl From<RopeDelta_> for Delta<RopeInfo> {
        }
        let rearranged = rearrange(&revs, &base, 7);
        if let Some(ref mut trace) = self.trace {
        // 1 MB
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
            self.set_selection(text, sel);
    }
        assert_eq!(trace.get_samples_limit(), 11);
    /// Returns an iterator over chunks of the rope.
                leaf_offset = self.pos() - noffset;
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the

        if let Some(new_scroll_pos) = self.scroll_to.take() {
            Merge(0,1),
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            _ => None
    pub fn select_all(&mut self, text: &Rope) {

        if !before {
categories_from_constant_array!(7);
            Gesture { line, col, ty } =>

    /// Invalidates the styles of the given range (start and end are offsets within
    highlight_find: bool,
                let categories = v.split(",").map(|s| s.to_string()).collect();
        MergeTestState::new(3).run_script(&script[..]);
    {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
    }
            }
        cursor.next::<BaseMetric>()
            Contents::Undo { .. } => panic!("can't merge undo yet"),
                        }
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        if let Some(ix) = style_map.lookup(style) {
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        match cmd {
            Assert(0, "ab".to_owned()),
    fn merge_whiteboard() {
        samples.sort();
                let (nl, noffset) = self.next_leaf()?;
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
mod tests {
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());

        }
        let next_line_offset = self.offset_of_line(text, line + 1);
        let utf8_offset = 19;
        let mut sel = self.selection.clone();
    /// This is a `Subset` of the "union string" representing the characters
            Merge(1,0),
/// Returns the operations in `revs` that don't have their `rev_id` in
/// Create an instantaneous sample with a payload.  The type the payload
            rendered_styles.push((iv.start() as isize) - ix);
        assert_eq!(snapshot[4].name, "y");
        for rev in old_revs.into_iter().rev() {
    pub fn do_find_all(&mut self, text: &Rope) {

    (1, 0)
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
                        .map(DeltaElement::from).collect(),
    }
//     http://www.apache.org/licenses/LICENSE-2.0
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                    } else {
impl View {
            }
        b.iter(|| {
// Unless required by applicable law or agreed to in writing, software
        Self {
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
                    }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                        MetadataType::ThreadName { name: thread_name.to_string() },
        let height = self.line_of_offset(text, text.len()) + 1;
        let script = vec![
        b.build()
                    filename.to_str().map(|s| s.to_string())
            word_cursor.select_word()
        trace.instant("4", &["test"]);
                //self.end - prev_pos

            self.record(Sample::new_duration(
            Click(MouseAction { line, column, flags, click_count }) => {
}
    }
}
        let is_base = base_revs.contains(&rev.rev_id);
            Click(MouseAction { line, column, flags, click_count }) => {
    #[serde(skip_serializing_if = "Option::is_none")]
    }
        Ok(exe_name) => {
                metadata_sort_index: sort_index,
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).

impl Trace {
                    if invert_undos {

    use test::Bencher;
        AssertMaxUndoSoFar(usize, usize),
    }
    }
mod fixed_lifo_deque;
    match b {
            Merge(0,1), // the merge from the whiteboard scan
            let right_str = self[splitpoint..].to_owned();
                    let (mut a, rest) = end.split_first_mut().unwrap();
        if last_col == 0 && last_line > first_line {
        ");
        if let Some(last) = self.revs.last() {
                    b.add_span(seg.n, 0, 0);
        // find the lowest toggled undo group number

        }).collect();
                    } else {
    ///
        } else {
        let new_sel = selection_movement(movement, &self.selection,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    }
        if !gc_dels.is_empty() {
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
/// A static string has the lowest overhead as no copies are necessary, roughly
    /// Selects the given region and supports multi selection.
                    .with_horiz(horiz)
}
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        engine.edit_rev(1, 2, first_rev, d1.clone());
        self.set_selection_for_edit(text, new_sel);
/// have to be considered in `rebase` substantially for normal editing
        // since one of the two deletes was gc'd this should undo the one that wasn't
/// * `categories` - A static array of static strings that tags the samples in
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            Some(Cow::Borrowed(mut s)) => {
        for seg in self.lc_shadow.iter_with_plan(plan) {
        if offset == 0 {
    }
        json!({"test": value})
                if !inserts.is_empty() {

        Ok(b.build())
                if (flags & FLAG_SELECT) != 0 {
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        engine.edit_rev(1, 2, new_head, d2);
    }
        engine.undo([1].iter().cloned().collect());
        let mut result = String::new();
        #------

                },
        if last_col == 0 && last_line > first_line {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        engine.edit_rev(1, 1, first_rev, build_delta_1());
use std::str::FromStr;
}
        let trace = Trace::disabled();
//     http://www.apache.org/licenses/LICENSE-2.0
/// conforms to is currently determined by the feature this library is compiled
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        for _i in 0..50 {
                                                          new_len, col),
        r.slice_to_string(0, r.len())
            // I think it's a precondition that this will never be called
            args: Some(SampleArgs {
        assert_eq!(snapshot[5].name, "b");
        }
}


/// discussion on payload.
            }
        assert_eq!(snapshot[5].name, "b");
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            if !selection.is_empty() {
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
    }
        d.insert(StrCow::from("test"), StrCow::from(value));
pub type RopeDeltaElement = DeltaElement<RopeInfo>;


            for &occurrence in find.occurrences().iter() {
    }
    }
/// have to be considered in `rebase` substantially for normal editing
                find_leaf_split_for_bulk(s)
        };
        });
    }
    /// borrowed from the rope.
                Undo { toggled_groups, deletes_bitxor } => {
        }
        assert_eq!(snapshot.len(), 5);
            self.record(Sample::new_duration(
        let b = Rope::from("b");
    /// set with this function, which will make the revisions they create not have colliding IDs.
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
        };
            Assert(2, "ab".to_owned()),
        let iv = Interval::new_closed_open(start, end);
    }

    let mut utf16_count = 0;
                            Cursor::new(breaks, offset));


                }
            }
    /// Returns the regions of the current selection.
        ];
///
mod sys_pid;
        // TODO: want to let caller retain more rev_id's.
        assert_eq!(0, a.lines_all().count());
        /// together. For example, an auto-indent insertion would be un-done
        prev_boundary.unwrap_or(None)
            cursor: Cursor::new(self, start),
            Some(offset + len_utf8_from_first_byte(b))
    #[test]
    /// The `pristine` argument indicates whether or not the buffer has
        // todo: this will be changed once multiple queries are supported
        }
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
            Assert(0, "bdc".to_owned()),
    pub fn merge(&mut self, other: &Engine) {
use std::str::FromStr;
        self.push_str(&other[start..end]);
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        &leaf[offset..end]
            let right_str = self[splitpoint..].to_owned();
                self.run_op(op);
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
            // I think it's a precondition that this will never be called
    /// We attempt to reduce duplicate renders by setting a small timeout
        min
            trace.closure("test_samples_closure", &["test"], || {});
        where S: Into<StrCow>, C: Into<CategoriesT>
                    }
            utf16_count += 1;
        if b >= 0xf0 {
impl<T: AsRef<str>> From<T> for Rope {
            let mut len = 1;

fn ns_to_us(ns: u64) -> u64 {
        } else {
    {
extern crate test;
        let trace = Trace::enabled(Config::default());
                metadata_name: None,

        let _t = trace_block("View::wrap_width", &["core"]);
    fn undo_2() {
                            rev_id: rev.rev_id,
        let inserts_2 = parse_subset_list("
    /// Get next codepoint after cursor position, and advance cursor.

    /// Generally racy since the underlying storage might be mutated in a separate thread.
    }
            SampleEventType::FlowEnd => 'f',
    }
        String::from(&r)
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
    }
                        } else {
        
    /// state and new offset.
                Undo { ref toggled_groups, ref deletes_bitxor } => {
                }
                    } else if !inserts.is_empty() {
    use interval::Interval;
        let script = vec![
    }
    /// Generally racy since the underlying storage might be mutated in a separate thread.
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
#[derive(Serialize, Deserialize, Debug)]
        // A with ring, hangul, regional indicator "US"
pub struct View {
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    fn goto_line(&mut self, text: &Rope, line: u64) {
    }

        soln.push('f');
/// Indicates what changed in the find state.
            true => self.selection.clone(),
/// let c = b.slice(1, 7);
impl From<Vec<String>> for CategoriesT {
    {
            //let prev_pos = self.cursor.pos();
        assert_eq!(0, a.offset_of_line(0));
            'f' => SampleEventType::FlowEnd,
        }
            pending_render: false,
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        // 1 for exe name & 1 for the thread name
            SelectionIntoLines => self.do_split_selection_into_lines(text),
        deserializer.deserialize_str(CategoriesTVisitor)
    pub fn enable(&self) {
/// let c = b.slice(1, 7);

        assert!(r == a_rope.clone() + b_rope.clone());
/// of Sample that determines order.
        use self::MergeTestOp::*;
                                inserts,
    }
        }
    }
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        if line < self.first_line {

                    let after = new_full_priority >= full_priority;  // should never be ==
/// # Performance

//
                    }
    /// part of the initial contents since any two `Engine`s need a common
            self.unset_find();
#[derive(Copy, Clone)]
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
    pub fn new(initial_contents: Rope) -> Engine {

    }
        self.sample_limit_count
}
    }
        // rebase the deletion to be after the inserts instead of directly on the head union
pub type Rope = Node<RopeInfo>;
pub struct BaseMetric(());
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
                        if self.undone_groups.contains(undo_group) {

        samples[0].timestamp_us = 10;

        }
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
            .map_or(0, |ref s| s.timestamp_us);
        let subset_str = format!("{:#?}", expand_by[0].1);
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
                last_priority = Some(priority);
pub fn trace<S, C>(name: S, categories: C)

    }
            Assert(0, "acrbdz".to_owned()),
                        word_cursor.select_word()
impl<'a> Iterator for Lines<'a> {
    fn drop(&mut self) {
        let a = Rope::from("\n");

            self.name == other.name &&
                                     payload: Option<TracePayloadT>,
///
}
    AsyncInstant,

    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// Imagine a "union string" that contained all the characters ever
        result
// See the License for the specific language governing permissions and
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },

    move_delta.apply(tombstones)
        if wrap_col > 0 {

//     http://www.apache.org/licenses/LICENSE-2.0
use std::cmp;
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        for find in &mut self.find {
    /// Determine whether `offset` lies on a codepoint boundary.
            last_line -= 1;
            Merge(1,0),
    samples: Mutex<FixedLifoDeque<Sample>>,
            }
        let (start, end) = iv.start_end();
/// # use xi_rope::Rope;
    }
    /// The name to associate with the pid/tid.  Whether it's associated with
        let d = engine.delta_rev_head(first_rev);
            },
pub enum SampleEventType {
            //self.cursor.set(self.end);
        let mut b = TreeBuilder::new();
                         start: usize, end: usize, sel: &[(usize, usize)],

    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
        let res = find_common(&a, &b);
    impl MergeTestState {
        engine.undo([1].iter().cloned().collect());

/// something_expensive();
            let sel = {
        let offset = self.line_col_to_offset(text, line, col);
            self.tid == other.tid &&
                    linewrap::rewrap_width(breaks, text, width_cache,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
                    }
                MetadataType::ProcessName {name: exe_name},
    // Note: this function would need some work to handle retaining arbitrary revisions,
    fn compute_info(s: &String) -> Self {


    fn drop(&mut self) {
                    "something", &["benchmark"], || {},
                }
        let mut result = json!({
        // todo: the correct Find instance needs to be updated with the new parameters
    lc_shadow: LineCacheShadow,
            args: Some(SampleArgs {
    #[test]
enum FindStatusChange {

/// * `categories` - A static array of static strings that tags the samples in
                payload: None,
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
}
            let mut peers = Vec::with_capacity(count);
            trace.instant("test_samples_pulse", &["test"]);
        // This might be an over-specified test as it will
        let script = vec![
    #[cfg(feature = "benchmarks")]
#[cfg(feature = "json_payload")]
                    }
        // selection state, and for scrolling it into view if needed. This choice can
            self.record(Sample::new_duration(

//     http://www.apache.org/licenses/LICENSE-2.0
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
/// some way.
        let chars_left = (edits-max_undos)+1;
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        }
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    sample: Option<Sample>,
    }
//! info.
            GestureType::MultiWordSelect =>
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
                },
            let (start, end) = if offset < drag_state.offset {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
/// Computes a series of priorities and transforms for the deltas on the right


            Drag(MouseAction { line, column, .. }) =>
                        None
        }

        } else {

}
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    /// Sorting priority between processes/threads in the view.
    utf16_size: usize,
/// same priority into one transform to decrease the number of transforms that
    ///
    let mut out = Vec::with_capacity(revs.len());
                c.provide_context(&pl, self.pos() - poffset);
                           pristine: bool)
            }
            }
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
    let mut out = Vec::new();
#[derive(Clone, Debug)]
    #[cfg(feature = "benchmarks")]
    samples: Mutex<FixedLifoDeque<Sample>>,
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);

mod sys_pid;
        let thread = std::thread::current();
        let end = self.sel_regions().last().unwrap().end;
/// feature makes the payload a `serde_json::Value` (additionally the library
            _ => panic!("Unexpected chrome sample type '{}'", symbol)

                }
                }
            Assert(2, "ab".to_owned()),
        let mut engine = Engine::empty();
struct DeltaOp {
        }
            MergeTestState { peers }
        }
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    /// unsaved changes.
            let inserted = inserts.inserted_subset();
    }
        // the smallest values with which it still fails:
            Some(region) => {
        --#--
pub fn count_newlines(s: &str) -> usize {
    pub name: StrCow,
    pub fn byte_at(&self, offset: usize) -> u8 {
                    let head = e.get_head_rev_id().token();
                    // we don't want new revisions before this to be transformed after us
    ProcessName { name: String },
/// # Performance
        assert_eq!(snapshot[1].name, "thread_name");
    fn consume(self) -> (Option<String>, Option<i32>) {
    fn merge_simple_delete_2() {
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        fn run_op(&mut self, op: &MergeTestOp) {
    }
            let max_undo = self.max_undo_group_id();
    fn gc_2() {
    #[test]
    pub fn select_all(&mut self, text: &Rope) {
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
        //for next line
                self.push_leaf(s.to_owned());
        }
    }

impl<'a> Iterator for ByteIter<'a> {
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                return None;

extern crate lazy_static;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            utf16_size: count_utf16_code_units(s),
        assert_eq!(TEST_STR, String::from(engine.get_head()));
                    return Some(result);
                MergeTestOp::Merge(ai, bi) => {
            AssertAll("ac".to_owned()),
    fn prev(s: &String, offset: usize) -> Option<usize> {
        }
                (drag_state.min, max(offset, drag_state.max))
        samples.sort_unstable();
                true => x.end,
    #[test]
    fn build_delta_2() -> Delta<RopeInfo> {
    }
            Move(movement) => self.do_move(text, movement, false),

    pub fn scroll_height(&self) -> usize {
            offset += 1;
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);

                payload: payload,
impl Add<Rope> for Rope {
/// monotonically increasing single global integer (when tracing) per creation
/// overhead tracing routine available.
    /// The state for finding text for this view.
    fn from(r: &Rope) -> String {
}
        let a_rope = Rope::from(&a);
                rev_id: basic_rev(i+1),
                    deletes: deletes.clone(),

        let d = engine.delta_rev_head(first_rev);
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
    TRACE.instant(name, categories);

    ///
/// Contains replacement string and replace options.
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        }).collect();
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },

        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
/// # Arguments
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
                        line_num = seg.their_line_num + seg.n;
            Assert(0, "ab".to_owned()),
pub struct SampleArgs {
#[derive(Serialize, Deserialize, Debug, Clone)]
        } else if self.first_line + self.height <= line {
        let mut line_num = 0;  // tracks old line cache
    pub name: StrCow,

fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
    }
                }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
}
                            rev_id: rev.rev_id,

}
    fn test_get_samples() {
        self.replace.clone()
        }
    /// and currently in a debugging state.
}
                    let e = &mut self.peers[ei];

    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};

/// Stores the relevant data about a sample for later serialization.
        let b = a.slice(1, 10);
        self.send_update_for_plan(text, client, styles,
}
    #[bench]

        if self.len() != other.len() {
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
}

    }
    #[bench]
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
        inserts.into_iter().enumerate().map(|(i, inserts)| {
                                gc_dels = gc_dels.union(deletes);
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {

    move_delta.apply(tombstones)
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
))]
            return self.revs.len();
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
                true => x.end,
        let (new_text, new_tombstones) =
    }
                selection.add_region(occurrence);
                        }
            SampleGuard::new_disabled()
    }
    fn next(&mut self) -> Option<u8> {
        assert_eq!("1234567", String::from(r));
/// Measured unit is utf8 code unit.
        use self::MergeTestOp::*;
    fn accumulate(&mut self, other: &Self) {
            find.update_highlights(text, delta);
    // even worth the code complexity.
        }
            sel
/// assert!("hello world" == String::from(a + b));
    /// The process the sample was captured in.
// You may obtain a copy of the License at
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    }
    min: usize,
                        line_num = seg.their_line_num + seg.n;
impl From<Rope> for String {
// Licensed under the Apache License, Version 2.0 (the "License");
    /// Collapse all selections in this view into a single caret
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
#[cfg(test)]

///
    inserts: InsertDelta<RopeInfo>,
        let new_pos = self.pos() + (end - offset);
    fn merge_insert_only_whiteboard() {
            lines: count_newlines(s),
        self.set_selection_raw(text, selection);
                    return i + 1; // +1 since we know the one we just found doesn't have it
            if let Some(pos) = pos { start_of_line.set(pos) }
    }
    replace: Option<Replace>,

        engine.edit_rev(0, 1, first_rev, build_delta_1());
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());


        self.len()
        Assert(usize, String),

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            if (c > start_pos && c < pos) ||
            Merge(1,0),

        d_builder.build()
    // TODO make this faster somehow?
    /// Only number of matches changed
    }
/// Create an instantaneous sample without any payload.  This is the lowest
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
            Assert(0, "acpbdj".to_owned()),
                        &mut rest[bi - ai - 1]
            SampleEventType::AsyncStart => 'b',
                            max_undo_so_far: rev.max_undo_so_far,
        Engine {
/// let a = Rope::from("hello ");
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    lines: usize,
                                        &selections, &hls, style_spans);
/// fn something_expensive() {
    {
        let b_rope = Rope::from(&b);
                }
                        deletes: transformed_deletes,
        for _i in 0..50 {
/// 1. Samples that span sections of code may be inserted on end instead of
        -> Self
}
                Some(offset)
    AsyncStart,

        }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        }
    pub chars: String,
}
/// equivalent performance to a regular trace.  A string that needs to be copied

        cursor.next::<BaseMetric>()
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        assert_eq!("#---#--", &subset_str);

        trace.disable();
    (1, 0)
                    self.set_selection(text, selection);
        b.push('\n');

    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
                                          closure: F, payload: P)
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
}
        let len = match first_rev.edit {
        x
    /// Find what the `deletes_from_union` field in Engine would have been at the time
                    }
    // allowing us to use the same method to insert the text into the tombstones.
        assert_eq!(None, a.prev_codepoint_offset(0));
        assert_eq!(2, a.line_of_offset(4));
    pub payload: Option<TracePayloadT>,

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let first_rev = engine.get_head_rev_id().token();
            find.update_highlights(text, delta);
{

            self.record(Sample::new_duration(
#[inline]
                    text.slice_to_string(start, end)
    ///
/// of Sample that determines order.
pub struct Utf16CodeUnitsMetric(usize);
    // allowing us to use the same method to insert the text into the tombstones.
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
        min

    }

        -> Self
    use serde_test::{Token, assert_tokens};
        let trace = Trace::enabled(Config::with_limit_count(10));
            return false;
            }
        use serde::de::Visitor;

impl Rope {
            DeltaElement::Copy(ref start, ref end) => {
        // insert a character at the beginning
    }
            new_deletes = new_deletes.transform_expand(&new_inserts);
                }
///
/// typing a paragraph) will be combined into a single segment in a transform
/// let a = Rope::from("hello world");
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    /// Create a new Engine with a single edit that inserts `initial_contents`

        revs.append(&mut revs_3);
            pid: sys_pid::current_pid(),
        b.iter(|| black_box(sys_tid::current_tid()));
                        let mut word_cursor = WordCursor::new(text, region.max());
    #[bench]
        (line, offset - self.offset_of_line(text, line))
    }
///

        match *self {
        memrchr(b'\n', &s.as_bytes()[..offset])
        if let Some(last) = self.revs.last() {

/// State required to resolve a drag gesture into a selection.
        let mut leaf_offset = pos - offset;
        }
        // todo: this will be changed once multiple queries are supported
    #[test]
        base_subset.is_some() && base_subset == other_subset
    }
            b.push_str(&c);
            tid: sys_tid::current_tid().unwrap(),
            let common = find_common(a_to_merge, b_to_merge);
    None,
            if Some(priority) == last_priority {
        peers: Vec<Engine>,
/// with.  By default, the type is string-like just like name.  If compiled with
    }
    None,
                }
            Assert(1, "bdefg".to_owned()),
/// # Arguments
    }
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        if self.current.is_none() {
    }
    }
                    let after = new_full_priority >= full_priority;  // should never be ==
    fn bench_trace_instant_disabled(b: &mut Bencher) {
                return false;
    #[inline]
                self.do_drag(text, line, column, Affinity::default()),
                match self.inner.next() {

/// Base unit is utf8 code unit.
        } else {
    fn next(&mut self) -> Option<u8> {

    }
        Engine {

    ProcessLabels { labels: String },
    }
                        MetadataType::ThreadName { name: thread_name.to_string() },
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            SelectionIntoLines => self.do_split_selection_into_lines(text),
    /// borrowed from the rope.
    // encourage callers to use Cursor instead?

            }

    }

    }
            let mut peers = Vec::with_capacity(count);
            Merge(0,2), Merge(1, 2),
            Insert(String),
    /// Does a drag gesture, setting the selection from a combination of the drag
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        all_samples.push_back(sample);

        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;


    // this is the cost contributed by the timestamp to trace()
            'M' => SampleEventType::Metadata,
        // insert character at end, when this test was added, it panic'd here
        } else {
        assert_eq!(utf8_offset, 13);
                              payload: Option<TracePayloadT>,
        for rev in self.revs[rev_index..].iter().rev() {
        ---#--

                let mut el = serializer.serialize_tuple_variant("DeltaElement",

        let start_pos = start_of_line.pos();

    pub fn token(&self) -> RevToken {

        }
use serde::de::{Deserialize, Deserializer};

            self.find.push(Find::new());
/// # use xi_rope::Rope;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            if cur_len_utf16 >= in_measured_units {
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        let mut d_builder = Builder::new(TEST_STR.len());
            }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    }

    fn next_codepoint_offset_small() {


    }
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
#[macro_use]
    }
use std::ops::Range;
        cur_len_utf8

    /// Tracks whether find highlights should be rendered.
}
                return offset;
    }

    // since undo and gc replay history with transforms, we need an empty set
        // todo: the correct Find instance needs to be updated with the new parameters
use rope::{Rope, RopeInfo};
///     something_else_expensive(result);
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

            SampleEventType::FlowStart => 's',

    // of the union string length *before* the first revision.
                    if let Some(new_gc_dels) = new_gc_dels {
            // trans-expand other by expanded so they have the same context
                        first_sample_timestamp,
// limitations under the License.
impl RevId {

}
                },
}

    }
/// let b = Rope::from("world");
    }
            replace_changed: false,
/// feature makes the payload a `serde_json::Value` (additionally the library
/// See `trace_payload` for a more complete discussion.
                }
        // invert the changes to deletes_from_union starting in the present and working backwards
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
/// How tracing should be configured.
    /// should be as unlikely to collide as two random u64s.
                let mut cursor = Cursor::new(&text, region.min());
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[serde(rename = "ph")]
    #[test]
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
//
        trace.record(guard.sample.as_ref().unwrap().clone());
        ];
    }
                self.add_selection_by_movement(text, Movement::Up),
///
    #[inline]
                tid));
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
/// as opposed to thousands of revisions.
            max: offset,
        for i in 0..self.len() {
                let mut el = serializer.serialize_tuple_variant("DeltaElement",

        all_samples.reset_limit(config.max_samples());
        #------
/// Indicates what changed in the find state.
///
        assert_eq!(1, a.line_of_offset(3));
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
            Assert(1, "arpbj".to_owned()),
impl NodeInfo for RopeInfo {

    }
        d_builder.delete(Interval::new_closed_open(58, 61));
    }
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        ChunkIter {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

        deletes_from_union
        assert_eq!(rope.line_of_offset(15), 3);
            if let Some(pos) = pos { start_of_line.set(pos) }

        let text_with_inserts = text_inserts.apply(&text);
        },
}
        for u in s.chars() {
                Some(filename) => {

}

        self.samples.lock().unwrap().len()
        let r = r + Rope::from(&b[MIN_LEAF..]);
    #[serde(skip_serializing_if = "Option::is_none")]
        for r in &self.revs[ix + 1..] {
        };

    fn bench_trace_closure_payload(b: &mut Bencher) {
                    e.edit_rev(p, u, head, delta.clone());
        // A with ring, hangul, regional indicator "US"
}
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
        let height = self.line_of_offset(text, text.len()) + 1;
    }

    /// Get revision id of head revision.

    }
            if inserts.is_empty() {
        rope.offset_of_line(5);
    /// Determines the current number of find results and search parameters to send them to

                inserts: inserted,
                Some(i) => {
/// ```
        engine.gc(&gc);
        assert_eq!(snapshot[1].name, "thread_name");

    /// Does a drag gesture, setting the selection from a combination of the drag
        use self::MergeTestOp::*;

        let (start, end) = iv.start_end();
        Some(pos) => minsplit + pos,
        trace.instant("3", &["test"]);
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        let trace = Trace::enabled(Config::default());
                self.select_word(text, offset, true)
            min: offset,
//! CRDT implementation techniques, because all operations are serialized in
    }
    }
        let script = vec![
        let r = r + Rope::from(&b[MIN_LEAF..]);
        // additional tests for line indexing
    #[test]
    }
/// Represents a transform from one rope to another.
            MetadataType::ThreadName {name} => (Some(name), None),
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    #[serde(rename = "dur")]
        /// Used to store a reversible difference between the old
        let mut selection = Selection::new();

                },
            as_vec.push(Sample::new_metadata(
                s.len()
        assert_eq!(rope.offset_of_line(0), 0);
        #[serde(rename_all = "snake_case")]
    /// Tests that merging again when there are no new revisions does nothing

    pub fn next_codepoint(&mut self) -> Option<char> {
}
}
        let script = vec![
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
    if a.is_empty() {
                splitpoint -= 1;
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed

}
    Bytes(usize),
//

                continue;
    #[cfg(feature = "benchmarks")]
    }
    ThreadSortIndex { sort_index: i32 },
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    /// Callers are expected to validate their input.
    pub fn push_str(&mut self, mut s: &str) {
}
            selection.delete_range(offset, offset, true);
/// * `name` - A string that provides some meaningful name to this sample.
            Some(offset + len_utf8_from_first_byte(b))
        let height = self.line_of_offset(text, text.len()) + 1;

                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
                MergeTestOp::Merge(ai, bi) => {
                    }
    fn build_delta_2() -> Delta<RopeInfo> {

        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
    fn build_delta_1() -> Delta<RopeInfo> {
        assert_eq!(None, a.next_grapheme_offset(17));
                        if n_skip > 0 {
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            Insert(String),
            black_box(time::precise_time_ns());
                self.do_selection_for_find(text, case_sensitive),
                        word_cursor.select_word()
    }
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
        where S: Serializer
                let mut cursor = Cursor::new(&text, region.min());
        self.set_selection_raw(text, selection);
        let a = Rope::from("");
/// an argument.
    /// Selects an entire line and supports multi selection.

        let mut revs = basic_insert_ops(inserts_1, 1);
        count_newlines(&s[..in_base_units])
        assert_eq!(trace.is_enabled(), true);
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456

            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
#[inline]
            soln.push('b');
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
                    text.slice_to_string(start, end)
            pending_render: false,
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
                    text.slice_to_string(region.min(), region.max())
            find_changed: FindStatusChange::None,
            Gesture { line, col, ty } =>
    pub preserve_case: bool
        let inserted = inserts.inserted_subset();
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        if !self.is_enabled() {
        let trace = Trace::enabled(Config::with_limit_count(10));
        let sample_name = to_cow_str(meta.sample_name());
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        Some(self.cmp(other))
                        if n_skip > 0 {
    // allowing us to use the same method to insert the text into the tombstones.
    TRACE.block_payload(name, categories, payload)
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                            }
            };
        if let Some(lines) = lines {

}
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
            "ops": ops,
    /// Get text of head revision.
                },
    #[serde(default = "default_session", skip_serializing)]
/// required). Mutations are generally copy-on-write, though in-place edits are
                    let _ = s.pop();
pub type RevToken = u64;
    }
                    }
        // rebase delta to be on the base_rev union instead of the text
        where D: serde::Deserializer<'de>
    ///
/// let a = Rope::from("hello world");

        assert_eq!(snapshot[6].name, "z");
    }
    pub name: StrCow,
            true => self.selection.clone(),
        ];

        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        assert_eq!(snapshot[0].name, "process_name");
    }
    }
mod tests {
        assert!(leaf.is_char_boundary(end));
        assert_eq!(rope.offset_of_line(1), 3);
        let rearranged = rearrange(&revs, &base, 7);
            Merge(0,2), Merge(1, 2),

        self.undone_groups = groups;
    }
                        ops.push(self.build_update_op("copy", None, seg.n));
    }
    }

        self.enabled.load(AtomicOrdering::Relaxed)
    #[inline]
    pub fn is_enabled(&self) -> bool {
    fn edit_rev_undo_3() {

    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    fn next(&mut self) -> Option<u8> {
impl Config {
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
        // TODO: simplify this through the use of scopeguard crate
        assert_eq!(Some(8), a.next_grapheme_offset(0));
        --#--
        engine.gc(&gc);
                                         self, text, modify);
}

// you may not use this file except in compliance with the License.
use width_cache::WidthCache;
    /// When was the sample started.
                        sample.tid));
    /// The selection state for this view. Invariant: non-empty.
        self.enabled.store(false, AtomicOrdering::Relaxed);

    sample: Option<Sample>,
    }
        ------#
    }
//
                self.set(pos);
        ChunkIter {
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
        }
    out
        plan.request_lines(first_line, last_line);
    ObjectCreated,

    TRACE.enable_config(config);
            sample.event_type = SampleEventType::DurationEnd;
                leaf_offset = self.pos() - poffset;
        // creation) is:
    // Render a single line, and advance cursors to next line.
}
            let inserted = inserts.inserted_subset();
            Assert(1, "abc".to_owned()),
        let mut b = String::new();
            None
                    sel.add_region(region);
        self.revs.append(&mut new_revs);
    num: u32,
    {
    fn bench_trace_closure_payload(b: &mut Bencher) {
        d_builder.delete(Interval::new_closed_open(58, 61));
pub struct Sample {

use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
            x.next_occurrence(text, reverse, wrapped, &self.selection)
    /// storage allocated will be limit * size_of<Sample>
            trace.instant("c", &["test"]);
    /// Get the line range of a selected region.
    fn undo() {
        if !self.is_point_in_selection(offset) {
    }
            Revision {

        }).collect()
            Assert(1, "ab".to_owned()),
#[macro_use]
            }
    num: u32,
                } else {
        }
        self.revs.last().unwrap().max_undo_so_far
    }

            if let Some(ref thread_name) = sample.thread_name {
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        }
                    } else {
            Merge(1,2),
            ix = iv.end() as isize;
use delta::{Delta, DeltaElement};

/// Create an instantaneous sample without any payload.  This is the lowest
//

    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
            match *op {

        let mut cursor = Cursor::new(self, offset);
//! conceptually represents the current text and all edit history for that
            // I think it's a precondition that this will never be called
    fn offset_of_line_panic() {
            args: Some(SampleArgs {
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {

            None
            // about what wrapped.
                el.serialize_field(end)?;
            'b' => SampleEventType::AsyncStart,
// Copyright 2016 The xi-editor Authors.
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
///
/// implementation as efficient as a mutable version.
//! pending edit in flight each.
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
                let (ins, _) = delta.factor();
    Instant,

        if self.find_changed != FindStatusChange::None {

#[inline]

    }
            offset,
        let trace = Trace::enabled(Config::with_limit_count(10));
        let a_rope = Rope::from(&a);
            if let Edit { priority, ref inserts, .. } = r.edit {
    ///
    pub fn prev_grapheme(&mut self) -> Option<usize> {

            }
    session2: u32,
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
pub struct Replace {
                        Cow::Owned(un_deleted.transform_shrink(inserts))
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
    }
    }
            if next_chunk.is_none() { return None; }
        d_builder.delete(Interval::new_closed_open(10, 36));
        assert_eq!(utf8_offset, 13);
        let script = vec![
                      width_cache: &mut WidthCache, keep_selections: bool)
        // invert the changes to deletes_from_union starting in the present and working backwards
        engine.edit_rev(0, 1, first_rev, build_delta_1());
            }
    #[test]
            black_box(trace.block_payload(

/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        let ix = style_map.add(style);
            } else if incomp == GraphemeIncomplete::NextChunk {
use std::ops::Add;
/// creation.  Roughly corresponds to start_ns but instead there's a
        d_builder.build()
            x.next_occurrence(text, reverse, wrapped, &self.selection)
pub enum SampleEventType {
        // todo: this will be changed once multiple queries are supported

    #[derive(Clone, Debug)]
            find.unset();
    ///
        let first_rev = engine.get_head_rev_id().token();
/// first can make it ~1.7x slower than a regular trace.
            self.mk_new_rev(priority, undo_group, base_rev, delta);
                    let transformed_deletes = deletes.transform_expand(&s);
        self.send_update_for_plan(text, client, styles,
    }
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        let mut cur_len_utf16 = 0;
pub struct Trace {
    fn consume(self) -> (Option<String>, Option<i32>) {
        } else {
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
            Some(right_str)

    }
//! `Engine::merge`, which is more powerful but considerably more complex.
#[inline]
        #[derive(Serialize, Deserialize)]
/// # Performance

            rev_id: self.next_rev_id(),
        assert_eq!(trace.get_samples_limit(), 0);
    fn merge_idempotent() {

        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
            self.push_leaf(s[..splitpoint].to_owned());
    // Render a single line, and advance cursors to next line.
    /// Get next codepoint after cursor position, and advance cursor.
    #[test]

    /// This method is responsible for updating the cursors, and also for
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
    samples: Mutex<FixedLifoDeque<Sample>>,
                        priority, undo_group,
                }
                        .map(DeltaElement::from).collect(),
                                toggled_groups: &toggled_groups - gc_groups,
        count_utf16_code_units(&s[..in_base_units])
    /// Time complexity: O(log n)


/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
        self.len() >= MIN_LEAF
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
                            rev_id: rev.rev_id,
    // and partly because you need to retain more undo history, to supply input to the
        #[serde(rename_all = "snake_case")]
    text: Rope,
        for seg in self.lc_shadow.iter_with_plan(plan) {

    #[inline]
                            rev_id: rev.rev_id,
    #[cfg(feature = "json_payload")]
    ///
    }
impl RevId {
        deletes_bitxor: Subset,
    // maybe explore grabbing leaf? would require api in tree
        let script = vec![
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        assert_tokens(&rope, &[
                self.select_word(text, offset, false),
        for i in 0..edits {
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            Merge(0,2), Merge(1, 2),
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());


    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    pub fn lines_raw_all(&self) -> LinesRaw {
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),

        assert_eq!(snapshot[2].name, "a");
        d_builder.build()
    pub fn session_id(&self) -> SessionId {
        if !self.lc_shadow.needs_render(plan) { return; }
        ];

    }
                },
        for rev in self.revs[rev_index..].iter().rev() {
        engine.undo([3].iter().cloned().collect());
            "pristine": pristine,

        // TODO: want to let caller retain more rev_id's.
    #[test]
            // with offset == 0, but be defensive.
        delta.apply(&self.text)
            SampleEventType::AsyncEnd => 'e',
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    // encourage callers to use Cursor instead?
    #[test]
                el.end()
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
                    let new_gc_dels = if inserts.is_empty() {
    #[test]
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
            self.current = None;
                }

                            rev_id: rev.rev_id,

        let mut cursors = Vec::new();

        let inserts_3 = parse_subset_list("
    }
            SampleEventType::AsyncEnd => 'e',
                payload: None,
        self.scroll_to_cursor(text);
            timestamp_us: ns_to_us(time::precise_time_ns()),
    // reachability calculation.
        let tid = all_samples.front()
    1
    /// they would be if they hadn't been deleted.
        assert_eq!(1, a.line_of_offset(3));
                last.1 = last.1.transform_union(&inserts);
        let mut a = String::new();
        let mut end = start_pos + len;
            Assert(0, "cbd".to_owned()),
                           style: &Style) -> usize {
        let selection = SelRegion::new(0, text.len()).into();


//! A rope data structure with a line count metric and (soon) other useful
/// record it.
    }
                payload: payload,
    fn prev_codepoint_offset_small() {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            Assert(2, "ab".to_owned()),
    pub(crate) fn get_view_id(&self) -> ViewId {

}
    }
        String::from(&r)
        assert_eq!(rope.offset_of_line(0), 0);
        }
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    #[test]


        cursor.next::<BaseMetric>()
                    };
    fn lines_med() {
        });
    /// Selects a specific range (eg. when the user performs SHIFT + click).
    #[bench]

        assert_eq!(correct, rebased_inserts);

        let start = self.line_col_to_offset(text, line, 0);
/// # use xi_rope::Rope;
}
        engine.edit_rev(0, 1, first_rev, build_delta_1());
                    undo_group: i+1,
        }
        Ok(b.build())
        }
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.

/// Create an instantaneous sample without any payload.  This is the lowest
    #[test]
        for i in ((edits-max_undos)..edits).rev() {
    AsyncStart,

    }
        Ok(exe_name) => {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        for _i in 0..50 {
    fn is_boundary(s: &String, offset: usize) -> bool {
        let utf8_offset = 9;

        #[derive(Serialize, Deserialize)]
    }

    pub fn prev_grapheme(&mut self) -> Option<usize> {
        }).collect();
    fn test_samples_closure() {

        engine.edit_rev(0, 2, first_rev, build_delta_2());
        for seg in self.lc_shadow.iter_with_plan(plan) {
            }
// Low level functions
        let (metadata_name, sort_index) = meta.consume();

            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
    /// this returns the offset of the end of the rope. Arguments higher
        assert_eq!(5, a.offset_of_line(3));
        self.sample_limit_count * size_of::<Sample>()
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
    /// the frontend.
///
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    }
        }
    }
    fn test_samples_pulse() {
        }
        b.push(self);
        self.set_selection_raw(text, selection);
            to_payload("some description of the trace"))));
        let rev = Revision {
    }
    AsyncInstant,
pub fn count_newlines(s: &str) -> usize {
    }
        };
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
}
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    pub fn iter_chunks_all(&self) -> ChunkIter {
pub struct Trace {
    /// Only works well for ASCII, will probably not be maintained long-term.
        if let Some(ref mut trace) = self.trace {
    fn merge_whiteboard() {
            Scroll(range) => self.set_scroll(range.first, range.last),
        // clamp to end of line
            splitpoint
use internal::find::FindStatus;
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
                },
impl Config {
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    ObjectCreated,

    #[test]
    /// Tracks whether find highlights should be rendered.
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    /// Time complexity: O(log n)
        let search_query = match self.selection.last() {
            Assert(3, "ab".to_owned()),
    }
    pub fn is_enabled(&self) -> bool {
        a.lines_all().collect::<Vec<_>>());
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },

            rev_id: self.next_rev_id(),
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        if let Some(breaks) = self.breaks.as_mut() {
        }
/// ```rust
        self.enabled.load(AtomicOrdering::Relaxed)
    Bytes(usize),
    /// the heap, counters, etc); just the data itself.
        engine.gc(&gc);
        for _ in 0..line_len {
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
                    self.set_selection(text, selection);

    // revision might hold content from an undo group that would otherwise be gc'ed),
        --#--
                        self.revs.push(Revision {
{
{
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        (self.session1, self.session2)
    }
    #[cfg(feature = "benchmarks")]
    fn eq_med() {

    fn deserialize<D>(deserializer: D)
                (!region.is_upstream() && c == start_pos) ||
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
// utility function to clamp a value within the given range
        while !leaf.is_char_boundary(end) {
        assert_eq!(trace.get_samples_limit(), 20);
    {
        // rebase the deletion to be after the inserts instead of directly on the head union
               a.lines_all().collect::<Vec<_>>());
                    let head = e.get_head_rev_id().token();

    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        match *self {
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
use std::cell::RefCell;
/// State required to resolve a drag gesture into a selection.
    }
        let search_query = match self.selection.last() {
    #[serde(skip_serializing)]
        // rebase insertions on text and apply
//     http://www.apache.org/licenses/LICENSE-2.0
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
    /// of individual region movements become carets.
        assert_eq!(1, a.line_of_offset(3));
    }
            Merge(1,2),
    ProcessLabels { labels: String },
    pub fn is_enabled(&self) -> bool {
    #[serde(deserialize_with = "deserialize_event_type")]
            name: name.into(),
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};

                    priority, undo_group,
        samples[0].pid = 1;
    Width(f64),

        assert_eq!(2, b.offset_of_line(1));
        assert_eq!(0, a.lines_all().count());

///
            find_changed: FindStatusChange::None,
        MergeTestState::new(3).run_script(&script[..]);
        let mut ix = 0;
            Some(offset - len)
    /// The maximum number of bytes the tracing data should take up.  This limit
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        let len = match first_rev.edit {
    }
                      width_cache: &mut WidthCache, keep_selections: bool)

    fn next(s: &String, offset: usize) -> Option<usize> {
            if let Some(replace) = self.get_replace() {
                            edit: Edit {
        b if b < 0xe0 => 2,
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        }
            self.shrink_to_fit();
    #[serde(rename = "name")]
        let inserts_2 = parse_subset_list("
            'e' => SampleEventType::AsyncEnd,

}
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {

/// See `trace_closure` for how the closure works and `trace_payload` for a
}

            sample_limit_count: limit

        let script = vec![
    out
    pub fn enable_config(&self, config: Config) {
    /// Get revision id of head revision.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    }
        assert_eq!(trace.is_enabled(), true);
/// creation.  Roughly corresponds to start_ns but instead there's a
                                         self, text, modify);
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
            ix = sel_end as isize;
                RenderTactic::Render => {
    /// Sets the selection to a new value, invalidating the line cache as needed.

        self.push_subseq(&mut b, self_iv.suffix(edit_iv));

        /// should go before typed text.
    }
/// some way.
///
        b.add_span(height, 0, 0);
        self.set_dirty(text);
    #[bench]
                }

        d_builder.delete(Interval::new_closed_open(10, 36));
///
/// Find an index before which everything is the same
            AddSelectionBelow =>
    let inverse_tombstones_map = old_deletes_from_union.complement();
        });

/// Find an index before which everything is the same
            }),
pub struct Config {
                });
    /// should be constructed via SampleGuard.
        deletes_from_union
    fn edit_rev_concurrent() {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
// Licensed under the Apache License, Version 2.0 (the "License");
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
    }
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
            tid: tid,
        let inserts = parse_subset_list("
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
            Assert(0, "zcpbdj".to_owned()),
    /// Time complexity: O(log n)
        RevId { session1: 1, session2: 0, num: i as u32 }
                cursors.push(c - start_pos);
///
        if let Some(occ) = closest_occurrence {
        let r = Rope::from(&a[..MAX_LEAF]);
    inserts: InsertDelta<RopeInfo>,
    ///
            // if using breaks update cursor
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        self.hash(&mut hasher);
    pub fn next_grapheme(&mut self) -> Option<usize> {
        self.lines += other.lines;
        let expand_by = compute_transforms(revs);


    fn merge_simple_delete_2() {
                    as_vec.push(Sample::new_metadata(
        assert_eq!(2, r.line_of_offset(r.len()));
                    if invert_undos {
        let l_str = text.slice_to_string(start_pos, pos);
    }
            };

        let mut engine = Engine::new(Rope::from(TEST_STR));
                continue;
    /// the other doesn't make it re-appear.
    #[test]
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        assert_eq!(r.len(), r.offset_of_line(2));
    /// None of the find parameters or number of matches changed.
    #[test]
    a_ids.intersection(&b_ids).cloned().collect()
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
/// are shared.
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
    fn can_fragment() -> bool { false }
    type L = String;
/// assert_eq!("llo wo", String::from(c));
            Assert(2, "ab".to_owned()),

            // to replicate whiteboard, z must be before a tombstone
        self.pending_render
            self.record(Sample::new_duration(
    #[bench]
        &self.text
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),


        let mut cursor = Cursor::new(self, offset);
        self.revs.iter().enumerate().rev()
        // interior of last line should be last line
/// Returns the operations in `revs` that don't have their `rev_id` in
        trace.closure_payload("x", &["test"], || {
        if self.scroll_to.is_none() && wrap {



            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            ix = sel_end as isize;
    /// Offset of the point where the drag started.
    pub fn line_of_offset(&self, offset: usize) -> usize {
            Some(Cow::Owned(mut s)) => {

    /// assumed to be forward).
            timestamp_us: ns_to_us(time::precise_time_ns()),
            SampleGuard::new_disabled()

          F: FnOnce() -> R
use width_cache::WidthCache;
            utf16_size: count_utf16_code_units(s),
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            breaks: None,
}

        assert_eq!(Some(8), a.next_grapheme_offset(0));

        }
        let inserts_3 = parse_subset_list("
    fn next(s: &String, offset: usize) -> Option<usize> {
            's' => SampleEventType::FlowStart,
                    };
            } else {
        }
    }
/// assert_eq!("herald", String::from(a));
        let mut cursor = Cursor::new(self, offset);
    type Item = &'a str;
        }
        let mut offset = 0;
            Merge(0,2), Merge(1, 2),
        use self::MergeTestOp::*;
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
/// could trigger incorrect behavior if they collide, so u64 is safe.
        // rebase the delta to be on the head union instead of the base_rev union
    TRACE.closure_payload(name, categories, closure, payload)
    }
        use self::MergeTestOp::*;
    }
            utf16_count += 1;
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    /// Returns an iterator over chunks of the rope.
        Subset::new(len)
        ix
//
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    fn invalidate_selection(&mut self, text: &Rope) {
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
                }
    /// slices will be nonempty.
            // Do the merge one direction
    fn compute_deltas_1() {
        use self::MergeTestOp::*;
    /// Does a drag gesture, setting the selection from a combination of the drag
            if !selection.is_empty() {
        }

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            }
                }
    // This computes undo all the way from the beginning. An optimization would be to not
                        inserts: transformed_inserts,
        } else {
    pub fn next_codepoint(&mut self) -> Option<char> {
    }
        ");
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
    }
        }
                        let mut word_cursor = WordCursor::new(text, region.max());
        last_line += if last_col > 0 { 1 } else { 0 };
        b if b < 0x80 => 1,
            let c = region.end;
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    }

        sel.collapse();
    fn next(s: &String, offset: usize) -> Option<usize> {
            //leaf.len() - start_pos
    AsyncStart,
    use delta::{Builder, Delta};
        );
        let deletes_from_union = Subset::new(0);
        samples[1].pid = 2;
    use engine::*;
            Assert(0, "zcbd".to_owned()),
        let s = String::deserialize(deserializer)?;
                }
    }
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
            return self.revs.len();
    }
            categories: None,
            Assert(0, "ab".to_owned()),
///

    /// the same even if it is rebased or merged between devices.
impl NodeInfo for RopeInfo {
    {
    }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            true => self.selection.clone(),

    fn next(&mut self) -> Option<Cow<'a, str>> {
/// ```
            max_undo_so_far,
///
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
    }
        for chunk in self.iter_chunks(start, end) {
    }
                    }
        where S: Into<StrCow>, C: Into<CategoriesT>

        assert_eq!(trace.is_enabled(), true);
    }
    /// vertical scroll position
    }
            SampleEventType::ObjectDestroyed => 'D',
    #[inline]
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            Assert(1, "ab".to_owned()),
            true => self.selection.clone(),
    }
        let snapshot = trace.samples_cloned_unsorted();
            self.set_selection(text, sel);
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
        let a = Rope::from("a\nb\nc");
        let delta = Delta::synthesize(&self.tombstones,
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
                                gc_dels = gc_dels.transform_union(inserts);
    /// An arbitrary payload to associate with the sample.  The type is
        }
/// from the new revisions on the left.
        if self.is_enabled() {
    }
        use self::MergeTestOp::*;
/// # Examples
            self.next()
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    /// This is a `Subset` of the "union string" representing the characters
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    pub fn enabled(config: Config) -> Self {
/// Computes a series of priorities and transforms for the deltas on the right
        selection.add_region(region);
    #[bench]
            SampleEventType::CompleteDuration => 'X',
        let (new_text, new_tombstones) =
        let mut pos = self.pos();
            rev_id: self.next_rev_id(),
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
    /// The state for finding text for this view.
        all_samples.reset_limit(config.max_samples());
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
                            deletes_bitxor.transform_shrink(&gc_dels)
                              categories: C,

    out.as_mut_slice().reverse();
fn initial_revision_counter() -> u32 {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
                Contents::Undo { .. } => panic!(),
        self.drag_state = None;
        let chars_left = (edits-max_undos)+1;

        assert!(r.clone().slice(0, a.len()) == a_rope);
            if self[i] != other[i] {
            self.truncate(splitpoint);
    /// of individual region movements become carets.

            next_boundary = c.next_boundary(&l, leaf_offset);
fn clamp(x: usize, min: usize, max: usize) -> usize {
        in_measured_units
        }
#[cfg(feature = "json_payload")]
/// supported as an optimization when only one reference exists, making the
                        let start_line = seg.our_line_num;

        // creation) is:



        }
                        None if cursor.pos() == text.len() => cursor.pos(),
    move_delta.apply(tombstones)
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    }
        client.def_style(&style.to_json(ix));
            // d-expand by other
}
        }

        use self::MergeTestOp::*;
    }
/// Revision will be used, which means only the (small) set of concurrent edits
            match exe_name.clone().file_name() {
        for (iv, style) in style_spans.iter() {
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
            SampleGuard::new(&self, name, categories, Some(payload.into()))
/// * `categories` - A static array of static strings that tags the samples in
        engine.edit_rev(1, 2, initial_rev, d1.clone());
pub fn trace<S, C>(name: S, categories: C)

            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    }
            buffer_id: buffer_id,
                    } else if !inserts.is_empty() {
        }
{
            // These two will be different without using session IDs

        let inserts = parse_subset_list("
    fn measure(info: &RopeInfo, _: usize) -> usize {
            GestureType::LineSelect =>
    }
            tid: sys_tid::current_tid().unwrap(),
            Merge(1,2),
        assert_eq!(snapshot[8].name, "x");
    let mut s = Subset::new(head_len);
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
        trace.closure_payload("x", &["test"], || {
                        let _ = s.pop();
mod sys_pid;
        ##
            self.idx += 1;
///
    /// The revision history of the document
    /// Merge the new content from another Engine into this one with a CRDT merge
    /// from the rope.
                Some(pos) => offset += pos + 1,
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
            event_type: SampleEventType::Instant,


        }
                        deletes_from_union = deletes_from_union.union(deletes);
                    "something", &["benchmark"],
            if let Some(ref thread_name) = sample.thread_name {
        // original values this test was created/found with in the UI:
        assert_eq!(Some(10), a.next_codepoint_offset(6));
                            max_undo_so_far: rev.max_undo_so_far,
            tid: tid,
    }
                    None => return if result.is_empty() { None } else { Some(result) }
    }
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    }
    }
            let head = engine.get_head_rev_id().token();
        assert_eq!(0, a.lines_all().count());
        // NOTE 2: from_micros is currently in unstable so using new
                            (inserts, deletes)
        self.scroll_to = Some(end);
            Assert(0, "ab".to_owned()),
        let b = a.slice(2, 4);
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
/// Returns the file name of the EXE if possible, otherwise the full path, or
        } else {
            .map_or(0, |ref s| s.timestamp_us);
        let self_iv = Interval::new_closed_closed(0, self.len());
        let chars_left = (edits-max_undos)+1;
                    return i + 1; // +1 since we know the one we just found doesn't have it
            GestureType::WordSelect =>
        };
    }

                match *other {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            result.push_str(chunk);

}
        engine.edit_rev(1, 2, first_rev, d1.clone());
        // TODO: may make this method take the iv directly
    }
            }
        }
    fn to_payload(value: &'static str) -> TracePayloadT {
    pub payload: Option<TracePayloadT>,
/// revisions on top of the revisions represented by `expand_by`.
            Sample::new_instant("remote pid", &[], None)];
    fn hash<H: Hasher>(&self, state: &mut H) {
                    if !inserts.is_empty() {
    }
    use delta::{Builder, Delta};
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
        let thread = std::thread::current();
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {

/// between two utf8 code units that form a code point is considered invalid.
    match b {
    #[test]
        prev_boundary.unwrap_or(None)
        let height = self.line_of_offset(text, text.len()) + 1;
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
        self.revs.reverse();
    pub fn select_all(&mut self, text: &Rope) {

        if self.len() != other.len() {
    #[test]
        let end = self.sel_regions().last().unwrap().end;

    /// not account for any overhead of storing the data itself (i.e. pointer to
            trace.closure_payload("y", &["test"], || {
        match *self {
        let deletes_from_union_a = parse_subset("-#---");
}
}
use styles::{Style, ThemeStyleMap};

                }
        let mut all_samples = self.samples.lock().unwrap();
            duration_us: None,
        let closest_occurrence = self.find.iter().flat_map(|x|
        self.find_changed = FindStatusChange::Matches;
    #[serde(deserialize_with = "deserialize_event_type")]
            "n": n,
    #[test]
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
            Assert(0, "acrpbdzj".to_owned()),
    }
    ns / 1000
        let base_sel = Selection::new();
            Assert(2, "b".to_owned()),

pub type TracePayloadT = StrCow;
/// Returns the operations in `revs` that don't have their `rev_id` in
        /// The subset of the characters of the union string from after this
}
                        deletes: transformed_deletes,
        priority: usize,
// Unless required by applicable law or agreed to in writing, software
        assert_eq!(1, a.line_of_offset(2));
                // TODO create InsertDelta directly and more efficiently instead of factoring
    let mut s = Subset::new(head_len);
    view_id: ViewId,
        delta.apply(&self.text)

            } else {
        let mut style_map = style_map.borrow_mut();

    }

        assert_eq!(1, expand_by.len());
                    if let Some(last_selection) = self.selection.last() {
            }, to_payload("test_get_samples_nested_trace"));
        -> Result<CategoriesT, D::Error>
            Copy(usize, usize),
struct DeltaOp {

    {
            if region.is_caret() {
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
    let inverse_tombstones_map = old_deletes_from_union.complement();
        engine.undo([1,2].iter().cloned().collect());
}
    /// The maximum number of entries the tracing data should allow.  Total
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);

    #[test]
    {
        ");
            let base_index = find_base_index(&self.revs, &other.revs);
        if self.breaks.is_some() {
impl Sample {
        // additional tests for line indexing
        self.lc_shadow = b.build();
    #[cfg(feature = "benchmarks")]
                         style_spans: &Spans<Style>) -> Vec<isize>
            to_undo.insert(i+1);
    fn next(&mut self) -> Option<Cow<'a, str>> {

        cursor.is_boundary::<BaseMetric>()
        rendered_styles
            // On the next step we want things in expand_by to have op in the context
                            (inserts, deletes)
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        // x, a, y, b, z, c
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            highlight_find: false,
        offset
        // TODO: want to let caller retain more rev_id's.


                Contents::Edit {inserts, ..} => inserts,

        *self = b.build();
    /// slices will be nonempty.
    fn bench_get_pid(b: &mut Bencher) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
        self.scroll_to_cursor(text);

        if last_col == 0 && last_line > first_line {

                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
        let mut result = Cow::from("");
        let new_head = engine.get_head_rev_id().token();
        let a = Rope::from("a\nb\nc");
    }
            }
/// * `name` - A string that provides some meaningful name to this sample.

impl<'de> Deserialize<'de> for Rope {
        self.replace = Some(Replace { chars, preserve_case });

        use std::hash::{Hash, Hasher};
}
/// beginning.
        // clamp to end of line
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)

                    let (mut a, rest) = end.split_first_mut().unwrap();
    {
            'E' => SampleEventType::DurationEnd,
            None
            SampleEventType::Metadata => 'M'
        count_newlines(&s[..in_base_units])
            word_cursor.select_word()
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
pub fn samples_cloned_sorted() -> Vec<Sample> {
    /// unsaved changes.
    fn delta_rev_head_3() {

/// Boundary is atomic and determined by codepoint boundary.

        let mut result = Cow::from("");
    inner: ChunkIter<'a>,
        }
        }
        (Revision {

    pub(crate) fn get_buffer_id(&self) -> BufferId {
        let first_rev = engine.get_head_rev_id().token();
        }
}
}
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
    #[test]
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
                                           client, iv, new_len, px),

    fn arr_eq(&self, other: &[&'static str]) -> bool {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
        self.find_changed = FindStatusChange::All;
        let a = Rope::from("a\rb\rc");

    }
            selection: SelRegion::caret(0).into(),
        assert_eq!(1, a.line_of_offset(3));
}
        let mut pos = self.pos();
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        let revs = basic_insert_ops(inserts, 1);
    /// Width in bytes (utf-8 code units).
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        let a = Rope::from("");
struct DragState {
        -> R
        assert_eq!(snapshot[3].name, "y");
                        Cow::Owned(un_deleted.transform_shrink(inserts))
                    return None;

    }
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
                // TODO could probably be more efficient by avoiding shuffling from head every time

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
///
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
    }
        let (new_text, new_tombstones) =
                });
    TRACE.enable_config(config);
            false => Selection::new(),

            sample.event_type = SampleEventType::DurationEnd;
        use self::MergeTestOp::*;
        ];
        assert_eq!(2, b.offset_of_line(1));
    pub fn instant<S, C>(&self, name: S, categories: C)
        where S: Serializer
        self.text = text;
            event_type: SampleEventType::CompleteDuration,
                el.end()
        }
    AsyncInstant,
type StyleMap = RefCell<ThemeStyleMap>;
        self.undone_groups = groups;
            AssertMaxUndoSoFar(1,1),
    fn bench_trace_block_disabled(b: &mut Bencher) {
    /// Return the byte offset corresponding to the line number `line`.
    pub chars: String,
            Assert(0, "ab".to_owned()),

/// ```
//
    StaticArray(&'static[&'static str]),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
/// The visual width of the buffer for the purpose of word wrapping.
        b.iter(|| sys_pid::current_pid());
            let pos = bc.next::<BreaksMetric>();

#[cfg(feature = "benchmarks")]
#[inline]

        /// together. For example, an auto-indent insertion would be un-done
    {
    #[inline]

        let offset = self.line_col_to_offset(text, line, col);
        assert_eq!(snapshot[5].name, "b");
        assert_eq!(trace.get_samples_count(), 1);
    #[serde(rename = "ts")]

        samples[0].pid = 1;
            _ => return
        assert_eq!(rope.offset_of_line(0), 0);
            self.set_selection(text, selection);
    // maybe explore grabbing leaf? would require api in tree
            let max_undo = self.max_undo_group_id();
/// something_expensive();
                    self.do_gesture(text, line, column, GestureType::RangeSelect)
                      delta: &Delta<RopeInfo>, client: &Client,
        // shouldn't do anything since it was double-deleted and one was GC'd
        ");
/// # Examples

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            AssertMaxUndoSoFar(1,3),
    DurationBegin,
            self.wrap_col = WrapWidth::Bytes(wrap_col);
    first_line: usize,
        trace.closure_payload("y", &["test"], || {},
}
                el.end()
// limitations under the License.
            let mut sample = self.sample.take().unwrap();
        where S: Serializer
        -##-
    }
//!
    }
        self.scroll_to = Some(end);
/// rather than just this processe's samples).
    /// part of the initial contents since any two `Engine`s need a common
    }
    }
        let mut b = TreeBuilder::new();
        assert_eq!(samples[1].name, "local pid");
        for _ in 0..(edits-max_undos) {

            utf16_count += 1;
    }
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        let snapshot = trace.samples_cloned_sorted();
            end,
        self.deletes_from_union = new_deletes_from_union;
    #[test]
        for sample in all_samples.iter() {
        -> SampleGuard
            Assert(1, "cb".to_owned()),
}
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            CategoriesT::StaticArray(ref self_arr) => {
                    text.slice_to_string(start, end)
        });
        assert_eq!(None, b.next_codepoint_offset(9));

        let inserts = parse_subset_list("
            Assert(2, "afc".to_owned()),
        -##-

                Some(filename) => {
    use delta::{Builder, Delta};
    //
/// See `trace_payload` for a more complete discussion.
            }
                }
        },
}
        self.scroll_to_cursor(text);
    where S: Into<StrCow>, C: Into<CategoriesT>
}
    let new_text = del_delta.apply(text);
            update["lines"] = json!(lines);
use tabs::{ViewId, BufferId};
#[derive(Serialize, Deserialize, Clone, Debug)]

                    rev_id: rev.rev_id,
        assert_eq!(0, b.line_of_offset(1));
            } else {
pub type SessionId = (u64, u32);
        let a = Rope::from("a\nb\nc");
pub struct Trace {
/// }

                // TODO could probably be more efficient by avoiding shuffling from head every time
        let mut r = Rope::from("27");
        let base_sel = Selection::new();
pub type RopeDelta = Delta<RopeInfo>;
/// configured via the `dict_payload` or `json_payload` features (there is an
        engine.edit_rev(1, 2, first_rev, d1.clone());


    }
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
const MAX_LEAF: usize = 1024;
}
        let mut cursor = Cursor::new(self, offset);
        if before {
impl Eq for CategoriesT {}
                    }
impl Metric<RopeInfo> for BaseMetric {
        use self::MergeTestOp::*;
                payload: None,
                            rev_id: rev.rev_id,
                    };
        --#--

        self.drag_state = None;

        }
    fn render_line(&self, client: &Client, styles: &StyleMap,
            }
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
            while !s.is_char_boundary(offset - len) {
//! conceptually represents the current text and all edit history for that
            }
        }
        let cursor = Cursor::new(self, offset);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    }
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);


                        let mut rendered_lines = Vec::new();
impl<'a> Iterator for LinesRaw<'a> {
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
pub type SessionId = (u64, u32);
        let inserts = parse_subset_list("
/// for single user cases, used by serde and ::empty
/// }
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
        if let Some(edit) = contents {
        assert_eq!(0, a.lines_raw_all().count());
    /// a point that should be scrolled into view.

/// let mut a = Rope::from("hello world");
//
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))


        if last_col == 0 && last_line > first_line {
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
        trace.closure_payload("y", &["test"], || {},

            None
                Some(filename) => {
/// Valid within a session. If there's a collision the most recent matching
    /// Invalidate the current selection. Note that we could be even more
            } else {
{
            Assert(0, "ab".to_owned()),
        let a = Rope::from("a\rb\rc");
        let mut to_undo = BTreeSet::new();
    rev_id: RevId,

                match self.inner.next() {
    }

    }
            self.record(Sample::new_duration(
            self.current = next_chunk;
                    RopeDeltaElement_::Copy(start, end) =>
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {
                self.highlight_find = visible;
            };
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
                    let mut e = &mut self.peers[ei];
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
        let snapshot = trace.samples_cloned_sorted();
                    self.fragment = "";
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
impl MetadataType {
            }
    #[test]
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
use serde::de::{Deserialize, Deserializer};
        Self {
            find: Vec::new(),
                    let (start, end) = {
    // ============== Merge script tests
                        MetadataType::ThreadName { name: thread_name.to_string() },

            FindPrevious { wrap_around, allow_same, modify_selection } =>

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                        gc_dels = new_gc_dels;
            false => Selection::new(),
//! It enables support for full asynchronous and even peer-to-peer editing.

        self.send_update_for_plan(text, client, styles,
        } else {
    ///
            } else if incomp == GraphemeIncomplete::PrevChunk {
            trace: None,
/// monotonically increasing single global integer (when tracing) per creation
        assert_eq!(0, a.lines_all().count());
            Assert(2, "ab".to_owned()),
///
    // since undo and gc replay history with transforms, we need an empty set
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    priority: usize,
                let (nl, noffset) = self.next_leaf()?;
            offset = text.len();
    /// description for the invariant.
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
                if rev.max_undo_so_far < lowest_group {
            as_vec.push(Sample::new_metadata(
    }
        #------
    pub metadata_sort_index: Option<i32>,
        let l_str = text.slice_to_string(start_pos, pos);
        let first_rev = engine.get_head_rev_id().token();
        where S: Serializer
        use self::MergeTestOp::*;
            Assert(0, "ab".to_owned()),
                        };

    }

        assert_eq!(output, String::from(engine.get_head()));
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));

        let a = Rope::concat(
/// have to be considered in `rebase` substantially for normal editing
        assert_eq!(Some(1), a.next_codepoint_offset(0));

            offset,
        }

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        let script = vec![
    num: u32,
        self.rev_id_counter += 1;
                        if n_skip > 0 {
/// However, anything that can be converted into a Cow string can be passed as
// Unless required by applicable law or agreed to in writing, software
///
    #[test]
use find::Find;

        where S: Into<StrCow>, C: Into<CategoriesT>
    }
    }
                        DeltaElement::Copy(start, end),
                            max_undo_so_far: rev.max_undo_so_far,
        if !gc_dels.is_empty() {

        engine.edit_rev(1, 2, initial_rev, d1.clone());
/// some way.
        }
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
        let deletes_from_union_b = parse_subset("-#---");
    fn edit_rev_concurrent() {
    /// The maximum number of bytes the tracing data should take up.  This limit
    }
/// ```
                        None if cursor.pos() == text.len() => cursor.pos(),
        let max_line = self.measure::<LinesMetric>() + 1;
    /// Invalidate the current selection. Note that we could be even more
                        &mut rest[bi - ai - 1]
        // move deleted or undone-inserted things from text to tombstones
    // allowing us to use the same method to insert the text into the tombstones.
}
            event_type: SampleEventType::CompleteDuration,
            trace.instant("something", &[]);
                        if !last_selection.is_caret() {
        let selection = SelRegion::new(0, text.len()).into();
    }
            //let prev_pos = self.cursor.pos();
}
    pending_render: bool,
/// something_expensive();
                        if n_skip > 0 {
        a.lines_all().collect::<Vec<_>>());
        delta.serialize_field("els", &self.els)?;
    /// Find what the `deletes_from_union` field in Engine would have been at the time
                return offset;
    // even worth the code complexity.
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    #[cfg(feature = "benchmarks")]
                let mut sel = Selection::new();
///
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
            Assert(2, "adfc".to_owned()),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        let deletes_at_rev = self.deletes_from_union_for_index(ix);

        len
        } else {
    TRACE.enable();
        self.push_str(&other[start..end]);

#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
        self.replace_changed = true;
            thread_name: None,
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    // even worth the code complexity.


        ];
#[inline]
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
                    .with_affinity(affinity)
        match symbol {
        assert_eq!(snapshot[6].name, "z");
        let r = Rope::from(&a[..MAX_LEAF]);
categories_from_constant_array!(8);
impl Serialize for Delta<RopeInfo> {
            _ => return
              F: FnOnce() -> R
                              categories: C,
    assert!(!a.is_empty() && !b.is_empty());
            SampleEventType::AsyncInstant => 'n',
        deletes_from_union
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
            Some(ref breaks) => {
            MetadataType::ThreadName {name} => (Some(name), None),
    find_changed: FindStatusChange,
                splitpoint -= 1;
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
enum FindStatusChange {

    pub fn with_limit_bytes(size: usize) -> Self {
        -##-
        }).collect()
        let chars_left = (edits-max_undos)+1;
    fn edit_rev_concurrent() {
    }
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
/// # Examples
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        if self.breaks.is_some() {
        client.def_style(&style.to_json(ix));
                        };
impl Engine {
        delta.end()
//!
            Assert(0, "cbd".to_owned()),
            }
        trace.closure_payload("x", &["test"], || {

                        }
    /// Returns the visible line number containing the given offset.
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
}
            //if self.cursor.is_boundary::<BaseMetric>() {
    /// None of the find parameters or number of matches changed.
            let after = full_priority >= trans_priority;  // should never be ==
        value
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
        cursor.is_boundary::<BaseMetric>()
        Self {
        let inserts_3 = parse_subset_list("
        self.set_dirty(text);
        // rebase insertions on text and apply
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    ProcessName { name: String },
        // clamp to end of line
        let cursor = Cursor::new(self, offset);
mod fixed_lifo_deque;
        let rope = Rope::from("hi\ni'm\nfour\nlines");

        self.text = new_text;
                let mut cursor = Cursor::new(&text, region.min());
        engine.undo([1,2].iter().cloned().collect());
    fn bench_trace_block_payload(b: &mut Bencher) {
}
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // rebase the deletion to be after the inserts instead of directly on the head union

    /// description for the invariant.
    }
        for rev in old_revs.into_iter().rev() {
        self.len() >= MIN_LEAF
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        ");
            session: default_session(),

/// assert_eq!("llo wo", String::from(c));
// you may not use this file except in compliance with the License.
                        let mut word_cursor = WordCursor::new(text, region.max());
            's' => SampleEventType::FlowStart,

    pub fn lines_all(&self) -> Lines {
        let mut all_samples = self.samples.lock().unwrap();
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    {
        b.push_str(new);
        self.text = new_text;
    }
        }
                    }
#[macro_use]
                if self.fragment.is_empty() {
//! which is sufficient for asynchronous plugins that can only have one
    }
        let height = self.line_of_offset(text, text.len()) + 1;
    #[test]
    /// The maximum number of samples that should be stored.
        if self.is_enabled() {
                Delta {

            rendered_styles.push(1);
                            }
    fn next_grapheme_offset() {
    /// The name of the event to be shown.
        if line < self.first_line {
        let col = col as usize;
        assert_eq!(snapshot[5].name, "z");
    /// The line number is 0-based, thus this is equivalent to the count of newlines

        self.drag_state = Some(DragState {

    /// A delta that, when applied to `base_rev`, results in the current head. Panics
        let start = self.line_col_to_offset(text, line, 0);
    }
    #[test]

    /// return if a delete is un-done or an insert is re- done.
        self.height
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        assert_eq!(trace.get_samples_count(), 5);
        self.enable_config(Config::default());
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
                    }
    #[test]
        let replacement = match self.selection.last() {
    /// Returns an iterator over chunks of the rope.
}
    pub fn is_enabled(&self) -> bool {

pub struct Config {
}
// Unless required by applicable law or agreed to in writing, software
            }),

        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        enum RopeDeltaElement_ {
        }
        None => {
            self.record(Sample::new_duration(

                                  _allow_same: bool, modify_selection: &SelectionModifier) {
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
            }
        assert_eq!(snapshot[4].name, "y");
    fn edit_rev_undo_3() {
    replace: Option<Replace>,
//! This module actually implements a mini Conflict-free Replicated Data Type
}
        if all_samples.is_empty() {
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        /// Groups related edits together so that they are undone and re-done
            }
        let trace = Trace::enabled(Config::default());
        ChunkIter {
pub type TracePayloadT = StrCow;
                                                    style_spans, client,
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
        }
    #[cfg(feature = "benchmarks")]
    }

/// are shared.
}
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();

    #[allow(dead_code)]
    }
}

    tombstones: Rope,
        if (b as i8) >= -0x40 {
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        self.sample_limit_count * size_of::<Sample>()


    /// The maximum amount of space the tracing data will take up.  This does
                //self.end - prev_pos
        // since one of the two deletes was gc'd this should undo the one that wasn't
            return;
            // which we can do with another peer that inserts before a and merges.
    #[cfg(feature = "benchmarks")]
        ];
                        ops.push(self.build_update_op("invalidate", None, seg.n));
                self.run_op(op);
                            styles: &StyleMap, style_spans: &Spans<Style>,
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
        trace.instant("2", &["test"]);
    {
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
                priority: new_priority,
categories_from_constant_array!(2);
            args: Some(SampleArgs {
        assert_eq!(Some(8), a.next_grapheme_offset(0));
#[derive(Clone, Debug)]
}
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        selection.add_region(region);
    }
macro_rules! categories_from_constant_array {
        }
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    #[bench]
        engine.undo([1,2].iter().cloned().collect());
//

        engine.edit_rev(1, edits+1, head2, d2);
                },
        }
/// assert_eq!("llo wo", String::from(c));

/// # Examples
                } else {
                    if s.ends_with('\r') {

    /// Time complexity: technically O(n log n), but the constant factor is so
        self.invalidate_selection(text);

    fn line_of_offset_panic() {

    end: usize,

                out.push(DeltaOp {
    /// finer grain invalidation.
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {

    /// Time complexity: technically O(n log n), but the constant factor is so
            if let GraphemeIncomplete::PreContext(_) = incomp {
    /// Sets the selection to a new value, without invalidating.
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
            Assert(0, "acrbd".to_owned()),
        }
    #[test]
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
    pub fn instant<S, C>(&self, name: S, categories: C)
}
mod tests {
            result["cursor"] = json!(cursors);
    {
// line iterators
        let mut hasher = DefaultHasher::new();
            // I think it's a precondition that this will never be called
    }
            );
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    fn merge_max_undo_so_far() {
        }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));

    fn eq_small() {
        let mut style_map = style_map.borrow_mut();
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());

            let after = full_priority >= trans_priority;  // should never be ==
    type L = String;
                    if !inserts.is_empty() {
            write!(f, "{}", String::from(self))
pub struct ChunkIter<'a> {
            pending_render: false,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    pub fn scroll_height(&self) -> usize {
    }
// Licensed under the Apache License, Version 2.0 (the "License");
    }
            AssertMaxUndoSoFar(0,2),
            // On the next step we want things in expand_by to have op in the context
    }
                return offset;
            match self.wrap_col {
    }
//!
            }

        let a = Rope::from("a\rb\rc");
        cursor.next_grapheme()

                        let new_deletes_bitxor = if gc_dels.is_empty() {
}

    }
impl<'de> Deserialize<'de> for Rope {
        let mut b = TreeBuilder::new();
use std::cmp::{min,max};
    }
                    let end_of_line = match cursor.next::<LinesMetric>() {
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
            base_sel: selection.clone(),
                WrapWidth::Width(px) =>
            Assert(0, "ab".to_owned()),
        self.replace_changed = true;
            self.record(Sample::new_duration(
            }
            self.event_type == other.event_type &&
/// the session ID component of a `RevId`
            rev_id, max_undo_so_far,
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
    ///
    }
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
use selection::{Affinity, Selection, SelRegion};

    /// The session ID used to create new `RevId`s for edits made on this device
            rendered_styles.push(sel_end as isize - sel_start as isize);
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
                let line = line.min(text.measure::<LinesMetric>() + 1);
        assert_eq!(1, a.line_of_offset(3));
            r = op.inserts.apply(&r);
            match c.edit {
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
        self.revs.last().unwrap().rev_id

    priority: usize,
    }
// Additional APIs custom to strings

    pub fn set_session_id(&mut self, session: SessionId) {
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
    /// Returns the largest undo group ID used so far
        if line > max_line {
        self.sample_limit_count
    }
                max_undo_so_far: i,
                if !inserts.is_empty() {
    ThreadName { name: String },
        assert_eq!(trace.get_samples_limit(), 20);
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)

            type Value = CategoriesT;
            },
                        if n_skip > 0 {
        };
            if let Edit { priority, ref inserts, .. } = r.edit {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        let sample_name = to_cow_str(meta.sample_name());
                let mut peer = Engine::new(Rope::from(""));
            selection.delete_range(offset, offset, true);
                    }
    pub categories: Option<CategoriesT>,
    TRACE.get_samples_count()
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    let mut utf16_count = 0;
        let script = vec![
                    })
        assert_eq!(2, r.line_of_offset(r.len()));
    }
        Some(pos) => minsplit + pos,
                    }
    for op in b_new {
    pub chars: String,
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
            }
            MetadataType::ThreadName {name} => (Some(name), None),
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
    }
        {
            result.push_str(chunk);
///
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        let b = a.slice(1, 10);
// Unless required by applicable law or agreed to in writing, software
            Merge(1,2),
        let search_query = match self.selection.last() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
        count_newlines(&s[..in_base_units])


                RenderTactic::Render => {
                        Some(gc_dels.transform_shrink(&inserts))
    }
    }
    idx: usize,
    }
    /// Constructs an instantaneous sample.
    type Item = &'a str;
        assert_eq!(snapshot[3].name, "y");
    // encourage callers to use Cursor instead?
        MergeTestState::new(3).run_script(&script[..]);
    type Output = Rope;
            thread_name: Sample::thread_name(),
                    let full_path_str = full_path.into_string();
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            SampleEventType::Instant => 'i',
            Assert(5, "zacpb".to_owned()),
    pub fn new_duration_marker<S, C>(name: S,
    /// Offset of the point where the drag started.
                }
                    }

            timestamp_us: ns_to_us(start_ns),
                    match full_path_str {
use std::sync::Mutex;

        let res = find_common(&a, &b);
}
        where S: Into<StrCow>, C: Into<CategoriesT>
            b.push('b');
    height: usize,
struct DeltaOp {
///
            }
    AsyncStart,
    ///
    }
                        priority, undo_group,

    /// The state for replacing matches for this view.
            SampleEventType::DurationEnd => 'E',
                offset = prev;
impl RevId {
#[macro_use]
        assert_eq!(snapshot[3].name, "y");
        if self.idx <= self.current.unwrap().len() {
    fn bench_trace_block_payload(b: &mut Bencher) {
/// Enable tracing with the default configuration.  See Config::default.

    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        self.revs.iter().enumerate().rev()
    TRACE.disable();

            'M' => SampleEventType::Metadata,
    }

        }

        assert!(a == a2);
            engine.edit_rev(1, i+1, head, d);
use tabs::{ViewId, BufferId};
            self.collapse_selections(text);
    }
        }
    /// validate their input.
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
// Try to split at newline boundary (leaning left), if not, then split at codepoint
        let head2 = engine.get_head_rev_id().token();
                self.select_line(text, offset, line, true),
        let mut all_samples = self.samples.lock().unwrap();
            }
            //self.cursor.set(self.end);
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        } else {
            // I think it's a precondition that this will never be called
            Copy(usize, usize),
    #[inline]
                c.provide_context(&pl, self.pos() - poffset);
    pub fn select_all(&mut self, text: &Rope) {
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
                    }
        -----#
                l = pl;
    /// Imagine a "union string" that contained all the characters ever
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
        --#--
        // update only find highlights affected by change
/// Boundary is trailing and determined by a newline char.
}
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        #------
        &self.text
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,

                if is_base {
        assert_tokens(&rope, &[
            Assert(0, "ab".to_owned()),
/// # Performance
}
                let mut peer = Engine::new(Rope::from(""));
            inner: self.lines_raw(start, end)
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
        };


                    text.slice_to_string(region.min(), region.max())


            end += 1;
    TRACE.get_samples_count()
    /// Offset of the point where the drag started.
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    }
    /// What kind of sample this is.
        engine.gc(&gc);
    #[test]
            categories: Some(categories.into()),
//
        }
        // We somewhat arbitrarily choose the last region for setting the old-style
/// Usage of static strings is encouraged for best performance to avoid copies.
                            ops.push(self.build_update_op("skip", None, n_skip));
    }
        } else {
        let mut rendered_styles = Vec::new();
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        };
/// an argument.
        !self.selection.regions_in_range(offset, offset).is_empty()
            //} else {
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
    TRACE.enable();
                self.set_selection_raw(text, selection);
impl Serialize for Rope {
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
    }
impl Config {
    }
    }
        assert_eq!(utf8_offset, 19);
            // Do it the other way on the copy
                                          closure: F, payload: P)
        // current recording mechanism should see:
        let ix = style_map.add(style);
    }


    /// fine-grained in the case of multiple cursors, but we also want this
            Assert(2, "ab".to_owned()),
    #[serde(skip_serializing_if = "Option::is_none")]
                name, categories, None, start, end - start));

    selection: Selection,
    idx: usize,
    #[serde(skip_serializing_if = "Option::is_none")]
}
                    let e = &mut self.peers[ei];
                        ops.push(self.build_update_op("copy", None, seg.n));
impl Trace {
    Matches
        /// along with the newline that triggered it.
        let res = find_base_index(&a, &b);
                self.push_leaf(s.to_owned());
        }
        self.set_dirty(text);
    }
        if offset == s.len() {
            AssertAll("ac".to_owned()),
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
        let selection = SelRegion::new(0, text.len()).into();
        assert!(r != b_rope + a_rope);

            wrap_col: WrapWidth::None,
        assert_eq!(snapshot[0].name, "process_name");
    /// Get text of head revision.
            &rebased_deletes_from_union, &new_deletes_from_union);
        }
                self.set(pos);
    /// Update front-end with any changes to view since the last time sent.
        // +2 for exe & thread name.
        use self::MergeTestOp::*;
impl<'a> SampleGuard<'a> {
    }
        let trace = Trace::disabled();
            Find { chars, case_sensitive, regex, whole_words } =>
    ///
    }
            }
impl Trace {
        self.set_selection_raw(text, selection);
        #------

    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
                selections.push((sel_start_ix, sel_end_ix));

        engine.edit_rev(1, 2, initial_rev, d1.clone());

                        deletes_from_union = deletes_from_union.transform_union(inserts);
            while !s.is_char_boundary(splitpoint) {
                    if s.ends_with('\r') {
        info.utf16_size

    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
    fn bench_trace_closure_payload(b: &mut Bencher) {
        self.find_changed = FindStatusChange::Matches;
                }
impl PartialEq for Sample {
            let mut peers = Vec::with_capacity(count);
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
        let invalid = if all_caret {
/// * `categories` - A static array of static strings that tags the samples in
            trace.closure_payload("y", &["test"], || {

//! info.
                           pristine: bool)
    ///
        /// The set of groups toggled between undone and done.
                        };

#[cfg(test)]
/// The result of the closure.

            let new_region = region_movement(movement, region, self,
            Some((l, off)) => (l, off),
pub fn samples_len() -> usize {
    // this is the cost contributed by the timestamp to
        let invalid = if all_caret {
        Ok(exe_name) => {
    fn next_grapheme_offset() {

            // Do the merge one direction
#[must_use]
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
    }
pub fn len_utf8_from_first_byte(b: u8) -> usize {
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
                    // we don't want new revisions before this to be transformed after us
                }
                        ops.push(self.build_update_op("invalidate", None, seg.n));
            SelectionForReplace => self.do_selection_for_replace(text),
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            }
            if let GraphemeIncomplete::PreContext(_) = incomp {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                SelectionModifier::AddRemovingCurrent => {
        } else {
        self.session = session;
            Assert(0, "zacpb".to_owned()),
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    }
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        use self::MergeTestOp::*;
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));

        // invert the changes to deletes_from_union starting in the present and working backwards
    }
    }
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
        let line = self.line_of_offset(text, end);
                                  style_spans, &plan, pristine);
                              start_ns: u64,
    }

        let styles = self.render_styles(client, styles, start_pos, pos,
        }
            pid: sys_pid::current_pid(),
impl Eq for Sample {}
                priority, undo_group, deletes,
{

        -> Self
    fn test_samples_pulse() {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
//! A rope data structure with a line count metric and (soon) other useful
        let deletes_from_union_b = parse_subset("-#---");
/// # Performance
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
    fn bench_trace_block(b: &mut Bencher) {
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
            if !s.is_empty() {
        self.scroll_to_cursor(text);

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
            if !selection.is_empty() {
    }
        }
        // todo: this will be changed once multiple queries are supported
            }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                } else {
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
    }
/// State required to resolve a drag gesture into a selection.
                                priority,
                                inserts,
/// patterns. Any large runs of typing in the same place by the same user (e.g
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
        } else {
            }),
    }
                        Some(end) => max(0, end - 1),


        let revs = basic_insert_ops(inserts, 1);
        // since one of the two deletes was gc'd this should re-do the one that wasn't
///
            }

    {
        engine.gc(&gc);
            if Some(priority) == last_priority {
        }
        }
        // TODO(vlovich): optimize this path to use the Complete event type

    }
    #[test]
        let first_rev = engine.get_head_rev_id().token();
                max_undo_so_far: i+1,
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
/// ```rust,ignore
                Contents::Undo { .. } => panic!(),
        let a = Rope::concat(
    let inverse_tombstones_map = old_deletes_from_union.complement();
impl<'de> serde::Deserialize<'de> for CategoriesT {
            end += 1;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    fn gc_3() {
        self.revs.reverse();
        // even though the actual sampling order (from timestamp of
        rendered_styles
                        Err(e) => {
    size: Size,

pub struct Utf16CodeUnitsMetric(usize);
            Assert(1, "zpbj".to_owned()),
        let a = Rope::from("a\nb\nc");

                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
    /// Time complexity: O(log n)

    fn prev_grapheme_offset() {
struct DeltaOp {
            },

                }
    fn bench_get_pid(b: &mut Bencher) {

#[inline]
    ///
        if let Some(sel) = new_sel {
    pub fn token(&self) -> RevToken {
        // rebase insertions on text and apply
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
        }

}

            match self.wrap_col {
    /// Create a new Engine with a single edit that inserts `initial_contents`
    fn append_large() {
    FlowInstant,
                        let start_line = seg.our_line_num;
    }
                match elem {
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
                        word_cursor.select_word()
                },
///     something_else_expensive();
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
    TRACE.samples_cloned_unsorted()
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let mut engine = Engine::new(Rope::from(TEST_STR));
/// The visual width of the buffer for the purpose of word wrapping.
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
            Assert(1, "abc".to_owned()),
        }
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
        for _i in 0..50 {
///
    fn to_payload(value: &'static str) -> TracePayloadT {
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    (out, text, tombstones, deletes_from_union)
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
/// Creates a duration sample that measures how long the closure took to execute.
            };

/// ```rust,ignore
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
                    };
}

            }
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
                SelectionModifier::Set => self.set_selection(text, occ),
        let mut selection = match multi_select {
            Assert(0, "adc".to_owned()),
                c.provide_context(&pl, self.pos() - poffset);
    }
        match self.inner.next() {
                max_undo_so_far: i+1,
    /// fine-grained in the case of multiple cursors, but we also want this
                        sample.tid));
    #[bench]
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
    }
    #[test]
        match ty {
        self.len() >= MIN_LEAF
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        }
impl Leaf for String {
                if s.ends_with('\n') {
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    pub fn token(&self) -> RevToken {
            revs: vec![rev],
        let mut soln = String::from("h");

    #[test]
                l = pl;
        let trace = Trace::enabled(Config::with_limit_count(10));
    pub fn prev_codepoint(&mut self) -> Option<char> {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        // rebase delta to be on the base_rev union instead of the text
                }

        ];
    }
    fn gc_2() {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
            't' => SampleEventType::FlowInstant,
                },
        self.set_selection_raw(text, selection);
                cur_all_inserts = older_all_inserts;
///
    max_undo_so_far: usize,
        while !leaf.is_char_boundary(end) {
    undo_group: usize,
                }
    #[test]
    assert!(a[0].rev_id == b[0].rev_id);
            Some(right_str)
use xi_rope::spans::Spans;
        } else if line == max_line {
        where S: serde::Serializer
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
                    text.slice_to_string(start, end)
//     http://www.apache.org/licenses/LICENSE-2.0
impl Metric<RopeInfo> for LinesMetric {
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
    #[serde(default = "default_session", skip_serializing)]
                            }
            }
/// ```rust
            let c = region.end;
    pub fn collapse_selections(&mut self, text: &Rope) {
/// Contains replacement string and replace options.
        // only one of the deletes was gc'd, the other should still be in effect
/// {
            if cur_len_utf16 >= in_measured_units {
use std::cmp;
            self.shrink_to_fit();
impl PartialEq for Sample {
    }
/// ```rust,ignore
///
        let script = vec![
    pub fn push_str(&mut self, mut s: &str) {
        self.lc_shadow = b.build();
    }
        let delta = Delta::synthesize(&self.tombstones,
    #[test]
use serde::de::{Deserialize, Deserializer};
pub fn samples_len() -> usize {
    }
    }
                //// if we aren't on a boundary we can't be at the end of the chunk
        impl<'de> Visitor<'de> for CategoriesTVisitor {
            return;
    }
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    fn edit_rev_undo() {
    fn bench_trace_block_disabled(b: &mut Bencher) {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    pub fn new_instant<S, C>(name: S, categories: C,
        let deletes_from_union_b = parse_subset("-#---");
            _ => None

        }
        assert_eq!(rope.line_of_offset(1), 0);
        info.utf16_size

pub struct SampleArgs {
    /// if there is not at least one edit.
impl Sample {


        }
/// Then offset=1 is invalid.
        where S: Into<StrCow>, C: Into<CategoriesT>
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
use movement::{Movement, region_movement, selection_movement};
                    // fast-forward this revision over all common ones after it
                            }


    /// The maximum number of bytes the tracing data should take up.  This limit
/// ```rust
                        Cow::Owned(un_deleted.transform_shrink(inserts))
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        assert_eq!(snapshot[3].name, "b");
    ProcessSortIndex { sort_index: i32 },
/// same priority into one transform to decrease the number of transforms that
/// between two utf8 code units that form a code point is considered invalid.
                    inserts: ins,
    }
            Gesture { line, col, ty } =>
    // in a single session.

            line_cache_shadow::CURSOR_VALID
impl From<Vec<String>> for CategoriesT {
    /// revision, and so needs a way to get the deletion set before then.

/// are shared.
}

    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
#[derive(Clone, Copy)]
pub fn is_enabled() -> bool {
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                    deletes: deletes.clone(),
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {

        }
            if Some(priority) == last_priority {

        let trace = Trace::enabled(Config::default());
        }
                metadata_sort_index: sort_index,
    fn test_disable_drops_all_samples() {
    fn accumulate(&mut self, other: &Self) {
    /// should be constructed via SampleGuard.
    ///

            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
    /// Generally racy since the underlying storage might be mutated in a separate thread.
        assert!(r == a_rope.clone() + b_rope.clone());
#[inline]
            thread_name: Sample::thread_name(),
                }
///

        // a, b, y, z, c, x
            }
        // creation) is:
            Merge(0,2), Merge(1, 2),
        // the smallest values with which it still fails:
    out.as_mut_slice().reverse();
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
        },
    {

    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    /// in the slice up to `offset`.
    #[test]

    fn bench_trace_instant_disabled(b: &mut Bencher) {
                let mut cursor = Cursor::new(&text, region.min());
            scroll_to: Some(0),


    FlowEnd,
    ProcessSortIndex { sort_index: i32 },
        peers: Vec<Engine>,
        Self {
            undo_group: 0,
                         first_line: usize, last_line: usize, pristine: bool) {
/// ```
    }
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    fn merge_idempotent() {
            Merge(2,0),
#[macro_use]
            name: name.into(),
        ");
        RopeInfo {
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
                    as_vec.push(Sample::new_metadata(
        } else {
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
            trace.closure_payload("y", &["test"], || {

            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
    pub fn lines_all(&self) -> Lines {
            let head = engine.get_head_rev_id().token();
                    return i + 1; // +1 since we know the one we just found doesn't have it
    // Delta that deletes the right bits from the text
            tombstones: Rope::default(),

            sel.add_region(region);

    }
            find.unset();
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    match std::env::current_exe() {
        if let Some(sel) = new_sel {

            AssertMaxUndoSoFar(1,1),

}
/// rather than just this processe's samples).

    {
            let mut sel = drag_state.base_sel.clone();

                    self.set_selection(text, selection);
            trace.instant("test_samples_pulse", &["test"]);

        self.replace.clone()
        engine.undo([1].iter().cloned().collect());
            Merge(0,1),
    }
//! A rope data structure with a line count metric and (soon) other useful
/// # Examples
                self.select_line(text, offset, line, false),

/// # Returns
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    ///
pub enum SampleEventType {

        engine.edit_rev(1, 2, initial_rev, d1.clone());
use edit_types::ViewEvent;
    ///
    }
                            styles: &StyleMap, style_spans: &Spans<Style>,
/// Usage of static strings is encouraged for best performance to avoid copies.
    #[serde(skip_serializing_if = "Option::is_none")]
                deletes: new_deletes,
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        let mut a = String::new();
        let inserted = inserts.inserted_subset();
        let mut sel = self.selection.clone();
            let mut sample = self.sample.take().unwrap();

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
        }
        where S: Into<StrCow>, C: Into<CategoriesT>
            event_type: SampleEventType::Metadata,
    use multiset::Subset;
#[cfg(feature = "benchmarks")]
            FindAll => self.do_find_all(text),
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
            DeltaElement::Insert(ref node) =>
#[inline]
            next_boundary = c.next_boundary(&l, leaf_offset);
    // recompute the prefix up to where the history diverges, but it's not clear that's
        Rope::from_str(s.as_ref()).unwrap()
            GestureType::RangeSelect => self.select_range(text, offset),
        }
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
    #[bench]

    {
        let offset = self.line_col_to_offset(text, line, col);

        let a = Rope::from("a\nb\nc");
    }
        assert!(empty == empty);
                return false;
}
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
    fn hash<H: Hasher>(&self, state: &mut H) {
    // this is the cost contributed by the timestamp to
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        let a = Rope::from("a");
            }
        }
    fn to_payload(value: &'static str) -> TracePayloadT {

                leaf_offset = self.pos() - poffset;
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        engine
// You may obtain a copy of the License at
//! It enables support for full asynchronous and even peer-to-peer editing.
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    /// Update front-end with any changes to view since the last time sent.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// first can make it ~1.7x slower than a regular trace.
    // * Code units in some encoding
        match rev.edit {
        MergeTestState::new(4).run_script(&script[..]);
                // TODO could probably be more efficient by avoiding shuffling from head every time
    #[test]
impl Leaf for String {
            }
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
/// with.  By default, the type is string-like just like name.  If compiled with
            Rope::concat(
        #------
    pub fn disabled() -> Self {
    }
    }

                        ops.push(self.build_update_op("copy", None, seg.n));
    }
            AddSelectionAbove =>
    fn eq_small() {
    }
        if let Some((l, offset)) = self.get_leaf() {
            let horiz = None;
//
        // x, a, y, b, z, c
    /// Get the contents of the document at a given revision number
            match seg.tactic {
            trace.closure("something", &[], || ());
    ///
    }
                formatter.write_str("comma-separated strings")
impl Config {
///
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
impl Sample {
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        let new_head_2 = engine.get_head_rev_id().token();
            let deletes = Subset::new(inserts.len());
        });



            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);

        };
                match *other {
        },
        assert_eq!(utf8_offset, 13);
                for &region in rest {
            self.record(Sample::new_duration(
                    }
    #[test]
                         hls: &[(usize, usize)],
        }
        let subset_str = format!("{:#?}", expand_by[0].1);
}
                    // TODO: in the case where it's ALL_VALID & !CURSOR_VALID, and cursors
    #[serde(skip_serializing)]
    }
    }
        };
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        let trace = Trace::enabled(Config::default());
    (out, text, tombstones, deletes_from_union)
                    let _ = s.pop();

        d_builder.build()
        } else {
///
            //} else {
    TRACE.block_payload(name, categories, payload)
}
        if offset == 0 {

///
use std::cmp;
impl Serialize for Rope {
    fn measure(info: &RopeInfo, _: usize) -> usize {
    fn gc_scenario(edits: usize, max_undos: usize) {

                self.add_selection_by_movement(text, Movement::Down),

pub type Rope = Node<RopeInfo>;
            let mut len = 1;
        // +2 for exe & thread name.
                    s = inserts.transform_union(&s);
    #[bench]
                selection.add_region(occurrence);
        assert_eq!(0, b.offset_of_line(0));
struct Revision {
    fn gc_5() {
        a.lines_all().collect::<Vec<_>>());
    let mut utf16_count = 0;
                    RopeDeltaElement_::Insert(s) =>

///
    s.serialize_char(ph.into_chrome_id())

    }
                    let (start, end) = {

///
        assert_eq!("a", String::from(&tombstones_2));
        let head = engine.get_head_rev_id().token();

        assert_eq!(2, r.line_of_offset(r.len()));
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
            //} else {
            };
        self.samples.lock().unwrap().limit()

        // todo: for now only a single search query is supported however in the future
        self.find_changed = FindStatusChange::None;
        // todo: for now only a single search query is supported however in the future
            _ => return
    pub fn do_find_all(&mut self, text: &Rope) {
        assert_eq!(Some(17), a.next_grapheme_offset(9));
    TRACE.enable_config(config);
    fn accumulate(&mut self, other: &Self) {
#[macro_use]
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
        }

    // ============== Merge script tests
    // TODO: replace this with a version of `lines` that accepts a range
        let (leaf, pos) = cursor.get_leaf().unwrap();
    }
                RenderTactic::Preserve => {
    #[test]
        // position after 'f' in four
    // ============== Merge script tests
    #[test]

                        if n_skip > 0 {
    {
        engine.edit_rev(1, 3, new_head_2, d3);
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    /// indicates a search for the next occurrence past the end of the file.
        self.len()
    out.as_mut_slice().reverse();
            tid: tid,
        let mut soln = String::from("h");

        engine.undo([1,2].iter().cloned().collect());
    /// Return the offset of the codepoint before `offset`.
pub struct Replace {
    let mut s = Subset::new(head_len);
        let deletes_from_union = parse_subset("-#----#");

            _ => return
            black_box(trace.block_payload(
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        let a = Rope::from("a\r\nb\r\nc");
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    }
        assert_eq!(snapshot[1].name, "thread_name");
    #[test]
    /// Find the first revision that could be affected by toggling a set of undo groups

    ns / 1000


use tabs::{ViewId, BufferId};
                WrapWidth::None => (),
            // to replicate whiteboard, z must be before a tombstone
        self.set_selection_raw(text, selection);
        assert_eq!("#---#--", &subset_str);
///
        let mut end = start_pos + len;
    selection: Selection,
            // I think it's a precondition that this will never be called
    }
        self.drag_state = Some(DragState {
        let utf8_offset = 19;
impl Config {
    pub fn token(&self) -> RevToken {
        Engine {
        let subset_str = format!("{:#?}", expand_by[0].1);
/// ```
        }, to_payload("test_get_samples_nested_trace"));

    /// Find the first revision that could be affected by toggling a set of undo groups
        assert_eq!(2, a.line_of_offset(4));
    }
        // todo: the correct Find instance needs to be updated with the new parameters
    }

    }

    }
    }
                    base_len: delta.base_len
///
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        };
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
        base_subset.is_some() && base_subset == other_subset
                self.do_set_replace(chars, preserve_case),
        Some(pos) => minsplit + pos,
        x
        Self::with_limit_bytes(1 * 1024 * 1024)
    fn bench_single_timestamp(b: &mut Bencher) {

            Assert(0, "zacpbdj".to_owned()),
}


///
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
        use self::MergeTestOp::*;
        // insert character at end, when this test was added, it panic'd here
    #[bench]
        #------
    }
        self.lc_shadow = b.build();
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
        assert_tokens(&rope, &[
    use engine::*;
            Some(ref breaks) => {
pub type TracePayloadT = StrCow;
    }
                }
        assert_eq!(r.len(), r.offset_of_line(2));
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
                // sanitize input
impl<'a> Iterator for ByteIter<'a> {
            'N' => SampleEventType::ObjectCreated,

    Edit {
        if self.replace_changed {
        match self {
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    }
    #[serde(default = "initial_revision_counter", skip_serializing)]
        // clamp to end of line
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));


            }
/// None if an irrecoverable error occured.
//!
            if let Some(pos) = pos { start_of_line.set(pos) }
            None
    }
    ///
        // the front-end, but perhaps not for async edits.
        let a = Rope::from("a\nb\nc");
extern crate serde_derive;
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
impl TreeBuilder<RopeInfo> {
            Assert(1, "bdefg".to_owned()),
        if self.find.is_empty() {

            trace.closure("test_samples_closure", &["test"], || {});
            }),
    }
            Merge(1,2),
    fn edit_rev_undo_3() {
                    selection.add_region(occ);
        let mut engine = Engine::new(Rope::from(TEST_STR));
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            self.categories == other.categories &&
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    #[serde(deserialize_with = "deserialize_event_type")]
///

            }
            false => Selection::new(),
categories_from_constant_array!(2);
            while !s.is_char_boundary(offset - len) {
        assert_eq!(snapshot[3].name, "a");
        match *self {
                            max_undo_so_far: rev.max_undo_so_far,


        d_builder.delete(Interval::new_closed_open(58, 61));
///
    }

        assert_eq!(snapshot.len(), 9);
                         styles: &StyleMap, style_spans: &Spans<Style>,
            Some(region) => {

                deletes: new_deletes,
}
    /// If the cursor is at the end of the leaf, advances to the next leaf.
            Merge(0,2),
            deletes: Subset::new(0),
        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        }
        }
        let mut line_num = 0;  // tracks old line cache
        self.pending_render
    #[inline]
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
        offset
        MergeTestState::new(4).run_script(&script[..]);

        let mut cursor = Cursor::new(self, offset);
    #[test]
                // This could be done by explicitly overriding, or by tweaking the


        let rope = Rope::from("hi\ni'm\nfour\nlines");
categories_from_constant_array!(2);
            SampleEventType::ObjectCreated => 'N',
    identity_op,
        self.join(",").serialize(serializer)
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {

    /// Selects the next find match.

            SampleEventType::AsyncStart => 'b',
    #[test]
            black_box(time::precise_time_ns());
    // There will probably never be a document with more than 4 billion edits
            self.push_leaf(s[..splitpoint].to_owned());
            // cursor
/// Create an instantaneous sample with a payload.  The type the payload

        }
                pos = leaf_offset + pl.len();
    /// Selects the given region and supports multi selection.
            max_undo_so_far: 0,
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        let mut cursor = Cursor::new(self, offset);
        let deletes_from_union = Subset::new(0);
        };
        let mut all_samples = self.samples.lock().unwrap();
        } else {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        ];
                    let full_path = exe_name.into_os_string();
    /// that are currently deleted, and thus in `tombstones` rather than

        let search_query = match self.selection.last() {
    fn merge_priorities() {
            line_cache_shadow::CURSOR_VALID

    revs: Vec<Revision>,
                    self.do_gesture(text, line, column, GestureType::WordSelect)
                self.do_set_replace(chars, preserve_case),
    #[bench]
    }
    fn to_payload(value: &'static str) -> TracePayloadT {
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    /// concurrently it will have count `2` so that undoing one delete but not
        // send updated find status only if there have been changes

        let offset = self.line_col_to_offset(text, line as usize, 0);
                selections.push((sel_start_ix, sel_end_ix));
        }
    }
}
    move_delta.apply(tombstones)
        assert_eq!(utf16_units, 9);
use rope::{Rope, RopeInfo};
            thread_name: Sample::thread_name(),
    view_id: ViewId,
                }
/// Create a `Rope` from a `String`:
    type L = String;
        assert_eq!(correct, rearranged_inserts);
                        sample.tid));
#[inline]
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        }
        let new_head = engine.get_head_rev_id().token();
    }
                    self.set_selection(text, selection);
        engine.edit_rev(1, 3, new_head_2, d3);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
            AssertMaxUndoSoFar(1,3),
        self.revs.push(new_rev);

    #[cfg(feature = "benchmarks")]
                Contents::Edit {inserts, ..} => inserts,
    }
            Some(ref breaks) => {
//! under `Engine::edit_rev`, which is considerably simpler than the usual
pub struct Replace {
}
        // We could probably reduce the cloning of selections by being clever.
/// revisions not shared by both sides.
        -##-
            inserts = inserts.transform_expand(trans_inserts, after);
        self.drag_state = None;
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
        self.revs.push(new_rev);
}
    /// If `line` is equal to one plus the current number of lines,
impl serde::Serialize for CategoriesT {
        let cursor = Cursor::new(self, offset);
/// a.edit_str(1, 9, "era");
        if let Some(breaks) = self.breaks.as_mut() {
        /// along with the newline that triggered it.
    ThreadSortIndex { sort_index: i32 },

    #[inline]
categories_from_constant_array!(8);
        let (first_line, _) = self.offset_to_line_col(text, region.min());
            if cur_len_utf16 >= in_measured_units {
    }
    match b {
            // to replicate whiteboard, z must be before a tombstone
    use delta::{Builder, Delta};
impl NodeInfo for RopeInfo {
            while !s.is_char_boundary(offset - len) {

        // TODO(vlovich): optimize this path to use the Complete event type
        let edit_iv = Interval::new_closed_open(start, end);
        let new_deletes_from_union = {
    fn next(&mut self) -> Option<&'a str> {
            Merge(0,2),
        b.iter(|| black_box(trace.instant_payload(
            Some(b)
                std::thread::sleep(std::time::Duration::new(0, 1000));
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
    /// Note: unlike movement based selection, this does not scroll.
use std;
            } else {
        ------#

    /// Tracks whether the replacement string or replace parameters changed.
            self.collapse_selections(text);
    /// Find parameters and number of matches changed.

pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,

    #[derive(Clone, Debug)]
                        word_cursor.select_word()
            Revision {
/// A static string has the lowest overhead as no copies are necessary, roughly
    pub fn new_disabled() -> Self {
            Assert(1, "ab".to_owned()),
        match self.breaks {
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
        self.enable_config(Config::default());


    pub fn is_enabled(&self) -> bool {
            categories: Some(categories.into()),
        assert_eq!(snapshot[3].name, "b");
impl PartialEq for Sample {
}
    }
use std::borrow::Cow;
}
    }
    ($num_args: expr) => {
        }).collect();
    }
        let script = vec![
                warn!("Usage of click is deprecated; use do_gesture");
            self.record(Sample::new_duration(
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        /// Groups related edits together so that they are undone and re-done
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            l[offset..].chars().next()
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    type Item = &'a str;
    fn test_trace_disabled() {
        match self.breaks {

        self.drag_state = Some(DragState { base_sel, offset, min, max });
        self.set_selection(text, selection);

///     0
mod fixed_lifo_deque;
        for (iv, style) in style_spans.iter() {
///
        let mut b = TreeBuilder::new();
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
        b if b < 0xf0 => 3,
    /// The line ending is stripped from the resulting string. The final line ending
        where D: Deserializer<'de>,
            } else if incomp == GraphemeIncomplete::NextChunk {
        let trace = Trace::disabled();
        self.revs.append(&mut new_revs);
            black_box(time::precise_time_ns());
        assert_eq!(correct, rebased_inserts);
                    }
    AsyncInstant,
pub struct Engine {
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
        assert_eq!(utf16_units, 20);
            // with offset == s.len(), but be defensive.

    }

                                                     "insert", node)
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {

        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let inserts = parse_subset_list("
            Assert(0, "ab".to_owned()),
            Some(Cow::Borrowed(mut s)) => {
                }

    }

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
    }
        // send updated replace status if changed
                cur_all_inserts = older_all_inserts;
}
        let mut selection = self.selection.clone();

    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                return false;
pub struct Lines<'a> {
    /// An iterator over the lines of a rope.
        }

    // * Code units in some encoding
        info.utf16_size
        assert_tokens(&rope, &[
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
// limitations under the License.
    /// is optional.
                                           client, iv, new_len, px),
        while let Err(incomp) = next_boundary {
                            max_undo_so_far: rev.max_undo_so_far,
///
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
    fn basic_rev(i: usize) -> RevId {
        let end = time::precise_time_ns();
//! `Engine::merge`, which is more powerful but considerably more complex.

                    self.do_gesture(text, line, column, GestureType::WordSelect)
    }
        }
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
        &self.selection
            ix = iv.end() as isize;
        MergeTestState::new(4).run_script(&script[..]);

        let end = self.line_col_to_offset(text, line + 1, 0);

    }
    /// This case is a regression test reproducing a panic I found while using the UI.

        #---
#[macro_use]
                            warn!("Failed to get string representation: {:?}", e);
    out
            }
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
use std::borrow::Cow;

                      width_cache: &mut WidthCache, keep_selections: bool)
            }
        assert_eq!(utf16_units, 20);

    #[cfg(feature = "json_payload")]
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    }
/// have to be considered in `rebase` substantially for normal editing
                metadata_sort_index: sort_index,
        }
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
                            if !inserts.is_empty() {
    ///
use multiset::{Subset, CountMatcher};
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
        match self.breaks {


    #[test]
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        }, new_text, new_tombstones, new_deletes_from_union)
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
        let (ins_delta, deletes) = delta.factor();

        gc_scenario(4,3);
    #[test]
            cur_len_utf8 += u.len_utf8();
    pub fn with_limit_bytes(size: usize) -> Self {
    /// Tracks whether this view has been scheduled to render.
        --#--
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
                el.serialize_field(start)?;
        }
        all_samples.reset_limit(config.max_samples());

                selection.add_region(SelRegion::caret(region.max()));
}
        let l_str = text.slice_to_string(start_pos, pos);

        self.timestamp_us == other.timestamp_us &&
}
    /// This is used to determined whether FindStatus should be sent to the frontend.


    }
                // merge logic.

        self.do_set_replace(replacement, false);
                }
        if !selection.regions_in_range(offset, offset).is_empty() {
/// * `categories` - A static array of static strings that tags the samples in
            SampleEventType::ObjectSnapshot => 'O',
            Click(MouseAction { line, column, flags, click_count }) => {
/// The visual width of the buffer for the purpose of word wrapping.
        });
            }
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),

                                     event_type: SampleEventType)
                splitpoint -= 1;

    }
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
use std;
pub enum CategoriesT {
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
    /// `text`. The count of a character in `deletes_from_union` represents
        Some(self.cmp(other))
        let new_head_2 = engine.get_head_rev_id().token();
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
        b.add_span(height, 0, 0);
            None
                        };
            lc_shadow: LineCacheShadow::default(),
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {

            AssertMaxUndoSoFar(1,3),
pub struct Config {

    fn can_fragment() -> bool {
//     http://www.apache.org/licenses/LICENSE-2.0

    type L = String;
        let b = Rope::from("b");
        trace.closure_payload("y", &["test"], || {},

//
            result.push_str(chunk);
}
                        &mut start[bi]
}
use std::str::FromStr;
    // revision might hold content from an undo group that would otherwise be gc'ed),
            Assert(2, "adfc".to_owned()),
        assert_eq!(Some(10), a.next_codepoint_offset(6));
        let mut result = json!({
                    };
                }
        match symbol {
        assert_eq!(snapshot[7].name, "z");
                WrapWidth::Width(px) =>
/// first can make it ~1.7x slower than a regular trace.
/// Indicates what changed in the find state.
    // possible to fix it so that's not necessary.
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
/// `base_revs`, but modified so that they are in the same order but based on
        let all_samples = self.samples.lock().unwrap();
        cursor.prev_grapheme()
    #[inline]
    pub fn set_session_id(&mut self, session: SessionId) {
            selection: SelRegion::caret(0).into(),
    // TODO: insert from keyboard or input method shouldn't break undo group,
    fragment: &'a str
    #[test]
    /// validate their input.
// See the License for the specific language governing permissions and
            return 0;
        let mut engine = Engine::empty();

        let script = vec![
        self.drag_state = Some(DragState { base_sel, offset, min, max });
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
            if next_chunk.is_none() { return None; }
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
        assert_eq!("#---#--", &subset_str);
    use super::*;
    assert!(a[0].rev_id == b[0].rev_id);
        let mut selections = Vec::new();
/// assert_eq!("llo wo", String::from(c));
                        Some(end) => max(0, end - 1),
            }

                self.select_line(text, offset, line, false),
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            a.push('a');
            deletes_from_union = match rev.edit {
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    /// Toggles a caret at the given offset.
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    }
//     http://www.apache.org/licenses/LICENSE-2.0
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
            MetadataType::ProcessName {..} => "process_name",
        assert_eq!(snapshot.len(), 9);
    }

        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    fn lines_raw_small() {
            DeltaElement::Insert(ref node) =>
        rendered_styles
        // 1 MB
            // corner and I'm lazy -cmyr
        assert_eq!(utf16_units, 17);
        let contents = match rev.edit {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
        self.replace = Some(Replace { chars, preserve_case });
    #[test]
}
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
        });
    /// An iterator over the lines of a rope.

        self.len() >= MIN_LEAF
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
use std::collections::BTreeSet;
        let end = time::precise_time_ns();
            max_undo_so_far: 0,
    fn test_get_sorted_samples() {
        for rev in &self.revs[rev_index + 1..] {
    /// Determine whether `offset` lies on a codepoint boundary.

        if !self.is_enabled() {
            // copy the current state
    buffer_id: BufferId,
        // interior of first line should be first line
            match modify_selection {
        // Any edit cancels a drag. This is good behavior for edits initiated through
    #[test]
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        let a_rope = Rope::from(&a);
    }
/// });
        self.revs.last().unwrap().max_undo_so_far
    }
            timestamp_us: ns_to_us(timestamp_ns),
            SampleEventType::CompleteDuration => 'X',
    fn edit_rev_undo_2() {

impl Ord for Sample {
    }


                        }
            trace.closure_payload("y", &["test"], || {

        d_builder.build()

    sample_limit_count: usize
#[derive(PartialEq, Debug)]
        b.push(self);
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
                name, categories, Some(payload.into()), start, end - start));
                }
    fn undo_3() {
            //self.cursor.set(self.end);
            },
        debug_subsets(&rearranged_inserts);
            self.set_selection(text, sel);
    }
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
    ///
/// assert_eq!("llo wo", String::from(c));
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`

    }
    #[test]
        }
            Merge(0,1),
            );
    fn merge_idempotent() {
    pub fn max_samples(&self) -> usize {
        if !self.lc_shadow.needs_render(plan) { return; }


    }


    fn undo_4() {
            // with offset == 0, but be defensive.
        }
        let r = Rope::from(&a[..MAX_LEAF]);
            self.current = None;
        } else if self.first_line + self.height <= line {
            self.idx = 0;
    }
        engine.gc(&gc);
                            if !inserts.is_empty() {
            // about what wrapped.
                }
            if (c > start_pos && c < pos) ||
    min: usize,
/// conforms to is currently determined by the feature this library is compiled
        if !gc_dels.is_empty() {
            false
/// Represents a transform from one rope to another.
            match c.edit {
                if !region.is_caret() {
// See the License for the specific language governing permissions and
        for rev in self.revs[rev_index..].iter().rev() {

    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
            if i >= max_undos {
    /// Note: unlike movement based selection, this does not scroll.
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
    }
            self.push_leaf(s[..splitpoint].to_owned());
use delta::{Delta, InsertDelta};
    TRACE.block_payload(name, categories, payload)
        let script = vec![
        }
            }
        /// revision that were deleted by this revision.
        rope.offset_of_line(5);

            // with offset == 0, but be defensive.
    }
        self.replace_changed = true;
        }
    /// than this will panic.

    // * Unicode codepoints
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    {

    fn test_samples_closure() {
        assert_eq!(snapshot[5].name, "z");
    /// End of the region selected when drag was started.
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    #[test]
}
        let trace = Trace::enabled(Config::with_limit_count(20));
    }
#[cfg(feature = "json_payload")]
    }
        }
    #[test]
            .find(|&(_, ref rev)| rev.rev_id == rev_id)

            AssertMaxUndoSoFar(1,1),
            'i' => SampleEventType::Instant,
                            }
}
    pub fn max_size_in_bytes(&self) -> usize {
/// ```rust
    #[serde(skip_serializing_if = "Option::is_none")]

                    if s.ends_with('\r') {
            name: name.into(),
    /// Updates the view after the text has been modified by the given `delta`.
        let mut d_builder = Builder::new(TEST_STR.len());
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
//! conceptually represents the current text and all edit history for that
                priority, undo_group, deletes,
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        MergeTestState::new(3).run_script(&script[..]);
        engine.edit_rev(1, 1, first_rev, d1.clone());

    /// The empty string will yield a single empty slice. In all other cases, the
categories_from_constant_array!(1);
}
        ix
    // TODO: don't construct transform if subsets are empty
pub fn samples_cloned_sorted() -> Vec<Sample> {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
        // todo: the correct Find instance needs to be updated with the new parameters
    #[test]
pub struct LinesRaw<'a> {
        }
#![cfg_attr(feature = "collections_range", feature(collections_range))]
    pub fn offset_of_line(&self, line: usize) -> usize {
                                     categories: C,
            _ => return
        all_samples.reset_limit(config.max_samples());
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    }
                    self.fragment = "";
/// Enable tracing with the default configuration.  See Config::default.
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
            match modify_selection {
//! An engine for handling edits (possibly from async sources) and undo. It


            }

            Assert(1, "zapbj".to_owned()),
trait StringArrayEq<Rhs: ?Sized = Self> {
        }
    fn invalidate_selection(&mut self, text: &Rope) {
    fn from(s: T) -> Rope {

extern crate libc;
        };
    }
        /// The subset of the characters of the union string from after this
            SelectionForFind { case_sensitive } =>
            // Go crazy

/// ```rust
        CategoriesT::DynamicArray(c)
///
            Assert(2, "ab".to_owned()),
/// fn something_else_expensive() {
                self.add_selection_by_movement(text, Movement::Up),
    #[test]
    assert!(!a.is_empty() && !b.is_empty());
    #[test]
//
    {

        {
        assert_eq!(rope.offset_of_line(4), rope.len());
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
        trace.closure_payload("x", &["test"], || {
                        Some(end) => max(0, end - 1),
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        self.drag_state = None;
    #[bench]
                                gc_dels = gc_dels.union(deletes);
/// Usage of static strings is encouraged for best performance to avoid copies.
/// Enable tracing with the default configuration.  See Config::default.
            Some(offset + len_utf8_from_first_byte(b))
#![cfg_attr(feature = "cargo-clippy", allow(
use movement::{Movement, region_movement, selection_movement};
            Merge(0,2), Merge(1, 2),
                                           client, iv, new_len, px),
    pub tid: u64,
            Merge(1,2),
                        }



            match memchr(b'\n', &s.as_bytes()[offset..]) {
///
            if !s.is_empty() {
                    match full_path_str {
            Merge(1,0),
                }
}
        assert_eq!(None, a.next_codepoint_offset(10));
            cursor: Cursor::new(self, start),
        d.insert(StrCow::from("test"), StrCow::from(value));
        peers: Vec<Engine>,
        where S: Serializer

}

                    as_vec.push(Sample::new_metadata(
        self.set_dirty(text);
    /// This method is responsible for updating the cursors, and also for
    {

            match self.wrap_col {
        use self::MergeTestOp::*;
        }
                                                     "insert", node)
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
    #[test]

        self.deletes_from_union = new_deletes_from_union;
                Some(offset)
    #[test]
                Edit { priority, undo_group, inserts, deletes } => {
            'D' => SampleEventType::ObjectDestroyed,
        let mut all_samples = self.samples.lock().unwrap();

        let r = r + Rope::from(&b[MIN_LEAF..]);
    /// Get text of head revision.
                    if s.ends_with('\r') {
        let undone = self.undone_groups.contains(&undo_group);

    }
            Merge(0,2), Merge(1, 2),
    /// after an edit is applied, to allow batching with any plugin updates.
            None

    find: Vec<Find>,

    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        self.iter_chunks(0, self.len())

        if offset == 0 {
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);

        }
        let end = self.sel_regions().last().unwrap().end;
        engine.edit_rev(1, 2, initial_rev, d1.clone());
    /// A delta that, when applied to `base_rev`, results in the current head. Panics

            timestamp_us: ns_to_us(timestamp_ns),
        let mut ops = Vec::new();

                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
    }
/// Stores the tracing data.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    pub fn select_all(&mut self, text: &Rope) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                let (last, rest) = self.sel_regions().split_last().unwrap();
                self.set(pos);
    }
        assert_eq!(snapshot[2].name, "x");
        Self {
    scroll_to: Option<usize>,
        // current recording mechanism should see:
            MetadataType::ProcessName {name} => (Some(name), None),
/// from the new revisions on the left.
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);

        let cur_deletes_from_union = &self.deletes_from_union;
        a.edit_str(1, 9, "era");
pub type StrCow = Cow<'static, str>;
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    pub fn new_instant<S, C>(name: S, categories: C,
            self.set_selection(text, selection);
// The advantage of using a session ID over random numbers is that it can be
                name, categories, payload, SampleEventType::DurationBegin)),
//
///
                    rev_id: rev.rev_id,
        let b = a.slice(2, 4);
        assert_eq!(snapshot[8].name, "x");
        Cow::from(a.into_owned() + b)
        let subset_str = format!("{:#?}", expand_by[0].1);
        // A with ring, hangul, regional indicator "US"
        let correct = parse_subset_list("
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    fn undo() {
            Assert(0, "cbd".to_owned()),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// Imagine a "union string" that contained all the characters ever
                    // are empty, could send update removing the cursor.
        assert_eq!(Some(10), a.next_codepoint_offset(6));
                    if seg.validity == line_cache_shadow::ALL_VALID {
        // same span exists in both sets (as when there is an active selection)
    #[test]

                }
                                gc_dels = gc_dels.transform_expand(inserts);
///
            inner: self.iter_chunks(start, end),
    }
    fn merge_session_priorities() {
    }
        // NOTE: we derive to an interim representation and then convert
}
            ix = sel_end as isize;
    fn test_samples_pulse() {
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        self.lines += other.lines;
    /// return if a delete is un-done or an insert is re- done.
        Cow::from(b)
                    }

            if inserts.is_empty() {

    1
            Assert(0, "acpbdj".to_owned()),
            splitpoint
    }
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
    }
            Merge(0,1),
/// ```rust
                sel.add_region(SelRegion::new(last.start, offset));

    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
                None => {
    // trace_block()/trace_closure
    use serde_test::{Token, assert_tokens};
            name: name.into(),
            Some(region) => {
///
    pub event_type: SampleEventType,

    #[bench]
            self.first_line = line;
                el.serialize_field(start)?;
                                  style_spans, &plan, pristine);
        self.drag_state = None;
pub fn trace<S, C>(name: S, categories: C)
            Assert(1, "acpbdj".to_owned()),
        }
        b.set_dirty(true);
    }
}
        // a, b, y, z, c, x
    TRACE.enable();
    #[serde(rename = "sort_index")]

        assert_eq!(trace.get_samples_limit(), 20);
    fn next_grapheme_offset() {

            rendered_styles.push((sel_start as isize) - ix);
    }
            return;
        a.lines_all().collect::<Vec<_>>());
        assert_eq!(Some(0), a.prev_grapheme_offset(3));

        debug_subsets(&rearranged_inserts);
            // which we can do with another peer that inserts before a and merges.
        // and it only needs to be consistent over one execution.
            tid: tid,
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
        -##-
            if Some(priority) == last_priority {


    }
        ];
mod tests {
                }
    }
    identity_op,
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
//!
        self.timestamp_us == other.timestamp_us &&
categories_from_constant_array!(9);
        }

// Unless required by applicable law or agreed to in writing, software
            tid: tid,
impl Eq for Sample {}
#[inline]
        }
impl Metric<RopeInfo> for LinesMetric {
        let end = time::precise_time_ns();
///
        let a_rope = Rope::from(&a);
                        first_sample_timestamp,
    FlowInstant,
    }

use movement::{Movement, region_movement, selection_movement};
    fn bench_trace_instant(b: &mut Bencher) {
    impl MergeTestState {
                (!region.is_upstream() && c == start_pos) ||
            },
        impl From<RopeDelta_> for Delta<RopeInfo> {

    /// Generate line breaks based on width measurement. Currently batch-mode,
                Delta {
    ///
/// Usage of static strings is encouraged for best performance to avoid copies.
pub fn enable_tracing_with_config(config: Config) {

    undo_group: usize,
        for find in &mut self.find {
// See the License for the specific language governing permissions and
}
    fn undo_5() {
    /// Get revision id of head revision.
                _ => { }
            Sample::new_instant("remote pid", &[], None)];
    // Send the requested lines even if they're outside the current scroll region.
        };
    ObjectSnapshot,
pub type TracePayloadT = serde_json::Value;
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
    FlowEnd,
            first_line: 0,
        if offset == 0 {
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
            _ => return
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        --#-
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    }
        }, deletes_from_union)

    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            categories: None,
                    if !deletes.is_empty() {
    /// Each instance represents a separate search query.
    }
        let trace = Trace::enabled(Config::with_limit_count(10));
                    let mut selection = self.selection.clone();
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
            max_undo_so_far: 0,
        }
                // TODO: small nit, merged region should be backward if end < start.
    }

        if !new_inserts.is_empty() {
            Merge(0,1), // the merge from the whiteboard scan
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
//
    }
        ];
                self.highlight_find = visible;
            let c = region.end;
        // since one of the two deletes was gc'd this should re-do the one that wasn't
        if self.scroll_to.is_none() && wrap {
}
    ObjectDestroyed,
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.

    fn bench_get_pid(b: &mut Bencher) {
        self.revs.iter().enumerate().rev()
        b.set_dirty(true);

        });
        }

            &self.deletes_from_union, &old_deletes_from_union);

        max
            replace: None,
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
    fn is_boundary(s: &String, offset: usize) -> bool {
        // Note: for committing plugin edits, we probably want to know the priority

        if !before {
    }

        }).collect()
/// acquires a dependency on the `serde_json` crate.
                RenderTactic::Discard => {
            // to replicate whiteboard, z must be before a tombstone

            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
                            (inserts.transform_shrink(&gc_dels),
        assert_eq!(Some(2), b.next_codepoint_offset(0));
                    let mut e = &mut self.peers[ei];

    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
            SelectAll => self.select_all(text),
    /// should be as unlikely to collide as two random u64s.
        } else if line == max_line {
        for i in 0..edits {
                                     categories: C,
        offset
                            if !inserts.is_empty() {
        assert_eq!(snapshot[6].name, "z");
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
    /// if it is non-empty. It needs to be a separate commit rather than just
                payload: payload,
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)


    ///
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
        assert_eq!(2, a.offset_of_line(1));
    lc_shadow: LineCacheShadow,
    ///
    }
        // todo: the correct Find instance needs to be updated with the new parameters
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
                                                          new_len, col),
                            if !inserts.is_empty() {
// You may obtain a copy of the License at
        match *self {
    ///
impl PartialOrd for Sample {
            // TODO: on double or triple click, quantize offset to requested granularity.
                first_sample_timestamp,
    /// Returns a u64 that will be equal for equivalent revision IDs and
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
            Merge(0,2), Merge(1, 2), Merge(3, 2),
                    // are empty, could send update removing the cursor.
            }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            }

pub struct RevId {
    }
        deletes_bitxor: Subset,
    }
                let (pl, poffset) = self.prev_leaf()?;
/// Contains replacement string and replace options.
extern crate serde;
        #[serde(rename_all = "snake_case")]
            );

//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
        Self {
        // rebase delta to be on the base_rev union instead of the text
    fn gc_2() {
        }

        }
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
/// However, anything that can be converted into a Cow string can be passed as
        self.tombstones = new_tombstones;
        ");

    pub metadata_name: Option<StrCow>,

        assert_eq!(Some(3), a.next_codepoint_offset(1));
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
    }
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

            let a_to_merge = &self.revs[base_index..];
    /// This is a `Subset` of the "union string" representing the characters
    /// Returns a u64 that will be equal for equivalent revision IDs and
            self.next::<BaseMetric>();
        self.drag_state = None;
pub type RevToken = u64;
        assert_eq!(None, b.prev_codepoint_offset(0));

        assert_eq!(0, a.offset_of_line(0));
categories_from_constant_array!(2);
            SampleEventType::Instant => 'i',
        }
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
        }
        trace.instant("2", &["test"]);
                match elem {
    pub fn with_limit_bytes(size: usize) -> Self {
                Undo { ref toggled_groups, ref deletes_bitxor } => {
            Assert(1, "apb".to_owned()),
    }
            self.shrink_to_fit();
        if offset == 0 {

    // maybe explore grabbing leaf? would require api in tree
    #[test]
    fn merge_max_undo_so_far() {
                            if !inserts.is_empty() {
/// * `name` - A string that provides some meaningful name to this sample.
    {
    // reachability calculation.

                                inserts,
            trace.instant("something", &[]);
            },

    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
/// assert_eq!("llo wo", String::from(c));
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
        if f.alternate() {
    fn offset_of_line_small() {
    use delta::{Builder, Delta};
}
        let mut all_samples = self.samples.lock().unwrap();
    fn prev(s: &String, offset: usize) -> Option<usize> {
        }
    }
    #[cfg(feature = "benchmarks")]
        if offset == 0 {
        // of the delta so we can set the cursor before or after the edit, as needed.
    // use own breaks if present, or text if not (no line wrapping)

        all_samples.reset_limit(config.max_samples());
                    new_deletes = new_deletes.transform_expand(inserts);

        self.buffer_id
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
/// conforms to is currently determined by the feature this library is compiled
        self.revs.push(new_rev);

                    if invert_undos {
        last_line += if last_col > 0 { 1 } else { 0 };
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        for rev in &self.revs[first_candidate..] {
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
    /// For safety, this will panic if any revisions have already been added to the Engine.
/// ```
            Merge(1,0),

// distributed under the License is distributed on an "AS IS" BASIS,
            samples: Mutex::new(FixedLifoDeque::new())
            breaks: None,
    min: usize,
    }
        }
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;

        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        while let Err(incomp) = next_boundary {
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);

    fn next(&mut self) -> Option<Cow<'a, str>> {
    }
///


        }
            rev_id: self.next_rev_id(),
            None => {
// you may not use this file except in compliance with the License.
            self.record(Sample::new_duration(
        assert_eq!(samples[1].name, "local pid");
        self.lines += other.lines;
        let script = vec![

        let text_with_inserts = text_inserts.apply(&text);
/// for single user cases, used by serde and ::empty
                                gc_dels = gc_dels.union(deletes);
    }
        let result = closure();
}
// limitations under the License.
    #[cfg(feature = "benchmarks")]
            Assert(0, "zacpb".to_owned()),
            }
fn exe_name() -> Option<String> {

                RenderTactic::Render => {
/// None if an irrecoverable error occured.
            if self[i] != other[i] {
        //} else {
        }
                priority, undo_group, deletes,
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    fn next(&mut self) -> Option<Cow<'a, str>> {

            write!(f, "Rope({:?})", String::from(self))
use std::str;
    }
        let new_pos = self.pos() + (end - offset);
            tid: sys_tid::current_tid().unwrap(),
        };
    }
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
        offset

        }
                    }
    ///
                    // we don't want new revisions before this to be transformed after us
            MetadataType::ThreadName {..} => "thread_name",
            }
        self.set_selection(text, sel);
        let a = Rope::from("a\nb\nc");
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
                            ops.push(self.build_update_op("skip", None, n_skip));
    /// Get text of a given revision, if it can be found.
            SampleEventType::CompleteDuration => 'X',

// you may not use this file except in compliance with the License.
    }

        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
    }
/// Boundary is trailing and determined by a newline char.
    /// We attempt to reduce duplicate renders by setting a small timeout
        // todo: the correct Find instance needs to be updated with the new parameters
        self.set_selection(text, SelRegion::caret(offset));
    #[bench]
        assert_eq!(trace.get_samples_count(), 0);
        self.sample_limit_count * size_of::<Sample>()
        update
    {
    pub payload: Option<TracePayloadT>,
        }
    ///
    fn bench_trace_instant(b: &mut Bencher) {
        MergeTestState::new(6).run_script(&script[..]);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// Also note: in addition to the `From` traits described below, this module
    pub fn line_of_offset(&self, offset: usize) -> usize {

        assert_eq!(rope.offset_of_line(4), rope.len());
            categories: Some(categories.into()),
                return None;
    inner: ChunkIter<'a>,
        engine.edit_rev(1, 2, first_rev, d1.clone());
    use rope::{Rope, RopeInfo};
    /// Invalidate the current selection. Note that we could be even more
    type Item = u8;
        self.drag_state = Some(DragState { base_sel, offset, min, max });
                    let b = if bi < ai {
        ];
        assert_eq!(rope.offset_of_line(4), rope.len());
        while let Err(incomp) = prev_boundary {
    }
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
            end -= 1;
    /// finer grain invalidation.
            match memchr(b'\n', &s.as_bytes()[offset..]) {
/// }

        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
// The advantage of using a session ID over random numbers is that it can be
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
                              categories: C,
use rpc::{GestureType, MouseAction, SelectionModifier};
            Rope::from(s1.clone()),
            Merge(0,1),
    type Item = Cow<'a, str>;
    fn undo_2() {
    /// List of categories the event applies to.
        where S: Into<StrCow>, C: Into<CategoriesT>
        // Any edit cancels a drag. This is good behavior for edits initiated through
    /// Exposed for unit tests.
/// let a = Rope::from("hello world");
            self.set_selection(text, sel);
///
        impl<'de> Visitor<'de> for CategoriesTVisitor {
                        line_num = seg.their_line_num + seg.n;

    /// Tests that merging again when there are no new revisions does nothing
                    RopeDeltaElement_::Insert(s) =>


                self.do_selection_for_find(text, case_sensitive),
        ");
        },
            );
        assert_eq!(utf8_offset, 9);
    fn next(&mut self) -> Option<&'a str> {
            ModifySelection(movement) => self.do_move(text, movement, true),
        let cursor = Cursor::new(self, offset);
        sel.collapse();
/// However, anything that can be converted into a Cow string can be passed as
#[cfg(test)]
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {

        }
///
            } else {
        max
    }
        engine.edit_rev(1, 1, first_rev, d1);
    #[test]
#[inline]
            return false;
#[macro_use]
            GotoLine { line } => self.goto_line(text, line),

        if self.is_enabled() {
// See the License for the specific language governing permissions and
/// Valid within a session. If there's a collision the most recent matching
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            Assert(0, "adc".to_owned()),
fn find_leaf_split_for_merge(s: &str) -> usize {
        trace.closure_payload("x", &["test"], || {
        }
        ##
            fragment: ""
            let sel = {
        b if b < 0xe0 => 2,
        // todo: the correct Find instance needs to be updated with the new parameters
                Contents::Undo { .. } => panic!(),
                    };

        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Some(region) => {
        let mut line_num = 0;  // tracks old line cache
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let inserted = inserts.inserted_subset();
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
    /// Note: `edit` and `edit_str` may be merged, using traits.
            pending_render: false,
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let inserted = inserts.inserted_subset();

}
        println!("{:#?}", delta_ops);
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;

    }

        assert_eq!(snapshot[1].name, "thread_name");
        } else {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    /// finer grain invalidation.
    /// Splits current selections into lines.
        Self {
            retain_revs.insert(last.rev_id);
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        // additional tests for line indexing
    }
            soln.push('b');
            self.lc_shadow.edit(start, end, new_end - start);
        let new_head = engine.get_head_rev_id().token();
impl<'a> Iterator for ByteIter<'a> {
/// # Performance
            Assert(0, "zacpb".to_owned()),
    #[test]
        }
        let mut cursor = Cursor::new(self, offset);
use linewrap;
}
            }
pub fn disable_tracing() {
                }
        self.find.iter().map(|find| {
        if self.find.is_empty() {
/// conversions in both directions.
            'E' => SampleEventType::DurationEnd,
                len += 1;
}
        }
    /// Toggles a caret at the given offset.

const MIN_LEAF: usize = 511;
        let (metadata_name, sort_index) = meta.consume();
            SampleEventType::ObjectCreated => 'N',
            SampleEventType::FlowInstant => 't',
        if !new_inserts.is_empty() {
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

    // and partly because you need to retain more undo history, to supply input to the
    }
    }

    pub pid: u64,
        while !leaf.is_char_boundary(end) {
        match *self {
                        let un_deleted = deletes_from_union.subtract(deletes);
pub struct Engine {
                            edit: Undo {
    }
        use self::MergeTestOp::*;
    Edit {
            // with offset == s.len(), but be defensive.
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
        let mut all_samples = self.samples.lock().unwrap();
    /// Generally racy since the underlying storage might be mutated in a separate thread.
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
            black_box(time::precise_time_ns());
}
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
            Merge(4,3),

    struct MergeTestState {
///
    fn test_cross_process_samples() {
        }).collect();
                metadata_sort_index: None,
                self.set_selection_raw(text, selection);
    /// point. Used to optimize undo to not look further back.
        }
        #---
    replace: Option<Replace>,
    pub fn disabled() -> Self {

        let first_rev = engine.get_head_rev_id().token();
            result["cursor"] = json!(cursors);
            Assert(1, "abefg".to_owned()),
        deserializer.deserialize_str(CategoriesTVisitor)
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        while offset < l.len() && !l.is_char_boundary(offset) {
                            if !inserts.is_empty() {
        assert_eq!(utf16_units, 9);
        /// The subset of the characters of the union string from after this
            b.push('b');
        let head2 = engine.get_head_rev_id().token();

    #[serde(skip_serializing_if = "Option::is_none")]
            // shouldn't be called with this, but be defensive
        Merge(usize, usize),
/// The payload associated with any sample is by default a string but may be
        d_builder.delete(Interval::new_closed_open(10, 36));
                        line_num = seg.their_line_num + seg.n;
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            black_box(trace.block_payload(
/// ```
        self.samples.lock().unwrap().limit()

    /// The largest undo group number of any edit in the history up to this
                }
        let trace = Trace::enabled(Config::default());
                name, categories, None, start, end - start));
    /// Imagine a "union string" that contained all the characters ever
            SelectionForReplace => self.do_selection_for_replace(text),
        if !before {
    #[serde(rename = "ph")]
                        deletes_from_union = deletes_from_union.transform_expand(inserts);

///
            }



// Licensed under the Apache License, Version 2.0 (the "License");
            if Some(priority) == last_priority {
    pub fn with_limit_count(limit: usize) -> Self {
    fn drop(&mut self) {
        rope.offset_of_line(5);
        ];
        self.set_selection(text, new_sel);
    // Note: this function would need some work to handle retaining arbitrary revisions,
#[derive(Serialize, Deserialize, Clone, Debug)]
    /// tiny it is effectively O(n). This iterator does not allocate.
            Assert(1, "zapbj".to_owned()),
        assert_eq!(snapshot[2].name, "x");
    }
            }

    priority: usize,
        match ty {
                        line_num = seg.their_line_num + seg.n;
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        self.undone_groups = groups;
        }
        }
        if let Some(ix) = style_map.lookup(style) {
            result["cursor"] = json!(cursors);
        self.set(new_pos);
        engine.undo([1].iter().cloned().collect());
        assert_eq!(2, a.line_of_offset(4));
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

            view_id: view_id,
        let mut result = json!({
        -#-

            }

            Assert(5, "zacpb".to_owned()),
                            None
                        b.add_span(seg.n, 0, 0);
    }
    }
            engine.edit_rev(0, 0, first_rev, delta);
    fn test_get_samples() {
/// A rope data structure.
    }
/// (such as insert, delete, substring) are O(log n). This module provides an immutable
    /// a point that should be scrolled into view.
                                             &text, false);
/// associated performance hit across the board for turning it on).

fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {
    #[test]
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let deletes_from_union = Subset::new(0);
        self.set_selection(text, new_sel);
    ThreadName { name: String },
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
            let _x = trace.block("something", &[]);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        assert_eq!(2, expand_by.len());
        // set last selection or word under current cursor as search query
            sel.add_region(region);
    pub fn disable(&self) {
        let all_samples = self.samples.lock().unwrap();
    }
        for (iv, style) in style_spans.iter() {
    /// Get the line range of a selected region.
    AsyncInstant,
    fn compute_deltas_1() {
            AssertMaxUndoSoFar(1,3),
    /// The maximum number of bytes the tracing data should take up.  This limit
//! pending edit in flight each.
/// fn something_expensive() -> u32 {
use serde::de::{Deserialize, Deserializer};
impl CategoriesT {
    }
    #[bench]
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            buffer_id: buffer_id,
            {
        }
        String::from(&r)
        let mut b = TreeBuilder::new();
///
    pub(crate) fn unset_find(&mut self) {
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
        }
                MergeTestOp::Assert(ei, ref correct) => {
                self.set(pos);
    }
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {

        let script = vec![
            // Do it the other way on the copy

    out.as_mut_slice().reverse();
        MergeTestState::new(2).run_script(&script[..]);
        }

    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
}
        let mut ops = Vec::new();

    /// The maximum number of samples that should be stored.
/// assert_eq!("ello wor", String::from(&b));
                inserts: inserted,
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        }
    }
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
        // of the delta so we can set the cursor before or after the edit, as needed.
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    #[test]
    ThreadSortIndex { sort_index: i32 },
            for (i,rev) in self.revs.iter().enumerate().rev() {
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        assert_tokens(&rope, &[
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

        // Note: for committing plugin edits, we probably want to know the priority
    utf16_count
            // with offset == s.len(), but be defensive.
        let start_pos = start_of_line.pos();

    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        let mut b = TreeBuilder::new();
///
            deletes_from_union = match rev.edit {
                    deletes: deletes.clone(),
        }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
    /// `text`. The count of a character in `deletes_from_union` represents
        let mut selection = Selection::new();
fn default_session() -> (u64,u32) {
impl View {
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
        next_expand_by = Vec::with_capacity(expand_by.len());
pub fn count_newlines(s: &str) -> usize {
        engine.undo([].iter().cloned().collect());

    /// Determine whether `offset` lies on a codepoint boundary.
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        self.text = new_text;
        engine.edit_rev(1, 3, new_head_2, d3);
impl serde::Serialize for CategoriesT {
        }

    None,
            base_rev: RevToken, delta: Delta<RopeInfo>) {
        self.timestamp_us.cmp(&other.timestamp_us)
    } else if x < max {
        let a = Rope::from("");
        d.insert(StrCow::from("test"), StrCow::from(value));

        if self.find.is_empty() {
        }
    /// via process_name/thread_name respectively.
        let utf8_offset = 19;
impl<'a> Iterator for LinesRaw<'a> {
    }

    }
            end += 1;
    }
        let trace = Trace::enabled(Config::default());
        text = new_text;

        // update only find highlights affected by change
    fn gc_5() {
            MetadataType::ThreadName {name} => (Some(name), None),
                            if !inserts.is_empty() {

/// revisions not shared by both sides.
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
            let first_rev = engine.get_head_rev_id().token();
                _ => { }
    // TODO: this should be a Cow
    ///

        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    move_delta.apply(tombstones)
                    };


                out.push(DeltaOp {

        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`

            SampleGuard::new(&self, name, categories, None)
    }
        where S: Serializer
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
                l = nl;
                        self.revs.push(Revision {
    fn edit_rev_concurrent() {
                selections.push((sel_start_ix, sel_end_ix));
enum Contents {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        let res = find_base_index(&a, &b);
    #[serde(serialize_with = "serialize_event_type")]
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
/// let b = Rope::from("world");


        self.revs.last().unwrap().rev_id
        -> R

              F: FnOnce() -> R
    height: usize,

            SampleEventType::FlowEnd => 'f',
    text: Rope,
                WrapWidth::Width(px) =>
}
    /// The line ending is stripped from the resulting string. The final line ending
            }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
    }
            Some(right_str)
    /// revision, and so needs a way to get the deletion set before then.
//
    pub fn next_grapheme(&mut self) -> Option<usize> {
            Assert(2, "ab".to_owned()),
        if self.len() != other.len() {
    }
            {
/// let c = b.slice(1, 7);
                }
    }
            if sel_end_ix > sel_start_ix {

            }
                    }
    }
    // since undo and gc replay history with transforms, we need an empty set
        }
            }
        // insert `edits` letter "b"s in separate undo groups
}
                        word_cursor.select_word()
        match symbol {
    {
        assert_eq!(snapshot[1].name, "thread_name");
    TRACE.instant(name, categories);
        engine.edit_rev(1, 2, initial_rev, d1.clone());
            Assert(1, "ab".to_owned()),
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();

            lines: count_newlines(s),
                        // no need to un-delete undone inserts since we'll just shrink them out
    ///

        }
impl fmt::Debug for Rope {

                    } else {
        tombstones = new_tombstones;
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
        // rather than emitting an explicit start/stop to reduce the size of
    rev_id_counter: u32,
    #[allow(dead_code)]
        assert_eq!(rope.line_of_offset(3), 1);
        let (new_text, new_tombstones) =
        let height = self.line_of_offset(text, text.len()) + 1;
/// let mut a = Rope::from("hello world");
        for &region in self.sel_regions() {
///
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        guard
use self::Contents::*;

            Assert(0, "b".to_owned()),
        }

            sel
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
        let styles = self.render_styles(client, styles, start_pos, pos,
        engine.edit_rev(1, 1, initial_rev, d1.clone());
    /// part of the initial contents since any two `Engine`s need a common
            AssertMaxUndoSoFar(1,3),
        let mut b = TreeBuilder::new();
    TRACE.enable();

        }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                            }
            Some(ref breaks) => {
            Merge(0,2), Merge(1, 2),

            let c = i.to_string() + "\n";

        for _i in 0..50 {
///     0
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
            }
    pub fn set_session_id(&mut self, session: SessionId) {

    // * Unicode width (so CJK counts as 2)
// limitations under the License.
            if region.is_caret() {

        }
                    let transformed_deletes = deletes.transform_expand(&s);
        self.text = new_text;
/// Also note: in addition to the `From` traits described below, this module
            if region.is_caret() {
            }
// distributed under the License is distributed on an "AS IS" BASIS,

    }
    #[should_panic]
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        samples[0].pid = 1;
#[derive(Clone, Copy)]
    }
                                                          new_len, col),
    // Delta that deletes the right bits from the text
    fn next(&mut self) -> Option<u8> {


        }
        };
            'i' => SampleEventType::Instant,

    pub args: Option<SampleArgs>
        let ix = style_map.add(style);
    /// Determines the current number of find results and search parameters to send them to


    fn next(&mut self) -> Option<u8> {
    fn append_large() {
pub type RopeDelta = Delta<RopeInfo>;

    fn edit_rev_undo_3() {
            self.name == other.name &&
            }),
}
        let height = self.line_of_offset(text, text.len()) + 1;
                    priority, undo_group,
    ProcessSortIndex { sort_index: i32 },
/// some way.
    /// Callers are expected to validate their input.
        let guard = Self {
}
    {
                selection.add_region(occurrence);
    }
{

                    deletes: deletes.clone(),
    }

        // even though the actual sampling order (from timestamp of

    }
    identity_op,
            self.breaks = None
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
    TRACE.is_enabled()
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
fn exe_name() -> Option<String> {
    // use own breaks if present, or text if not (no line wrapping)
impl Leaf for String {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
#[macro_use]
        // todo: for now only a single search query is supported however in the future
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
            self.set_dirty(text);
        let mut all_samples = self.samples.lock().unwrap();
        let mut b = String::new();
        let style = style_map.merge_with_default(style);
    /// Exposed for unit tests only.
            Assert(1, "ab".to_owned()),
        let mut selection = Selection::new();
        let first_rev = engine.get_head_rev_id().token();
}
        a.lines_all().collect::<Vec<_>>());
    /// Determines the current number of find results and search parameters to send them to
    s.serialize_char(ph.into_chrome_id())

            soln.push('b');
    }
        RopeInfo {
        let trace = Trace::enabled(Config::with_limit_count(10));

            SampleGuard::new_disabled()
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
}
    }
    #[cfg(feature = "benchmarks")]



/// The visual width of the buffer for the purpose of word wrapping.
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        let mut a = String::new();
                                                    self.size.width));
                leaf_offset = self.pos() - noffset;
            Merge(0,2), Merge(1, 2),
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        engine.edit_rev(1, 1, initial_rev, d1.clone());
                match elem {
        } else {
        assert_eq!(Some(9), b.next_codepoint_offset(5));
            thread_name: None,
            for rev in &self.revs {

    fn scroll_to_cursor(&mut self, text: &Rope) {
            enabled: AtomicBool::new(false),
            SampleEventType::AsyncStart => 'b',
        if self.current.is_none() {
                    if !inserts.is_empty() {
        self.set_selection(text, selection);

        #[derive(Serialize, Deserialize)]
                inserts: new_inserts,
            }),
        let initial_rev = engine.get_head_rev_id().token();
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {

        -##-
            // if using breaks update cursor
    #[test]
                           pristine: bool)
    #[inline]

//!
    /// The incrementing revision number counter for this session used for `RevId`s
        }

                }
    fn bench_trace_block_payload(b: &mut Bencher) {
            if self[i] != other[i] {
            self.next::<BaseMetric>();
        assert_eq!(utf8_offset, 19);
        samples.sort();
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
    }
    fn undo_3() {

/// # Examples
///
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
                }
                first_sample_timestamp,
///
/// Tracing is disabled initially on program launch.
        -##-
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        let mut result = String::new();
        self.set_selection_raw(text, selection);
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            timestamp_us: ns_to_us(start_ns),
            self.unset_find();
    TRACE.disable();
                self.do_drag(text, line, column, Affinity::default()),
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        self.lines(0, self.len())
                    }
    fn build_delta_1() -> Delta<RopeInfo> {
        self.lc_shadow = b.build();
// limitations under the License.
        info.lines
        let (start, end) = {
    wrap_col: WrapWidth,
            pos -= 1;
/// revisions not shared by both sides.
    }
        let correct = parse_subset_list("
    // TODO(vlovich): Replace all of this with serde flatten + rename once
            HighlightFind { visible } => {
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
//
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
        ]);
        b.iter(|| black_box(trace.instant_payload(
                }
        }
    #[cfg(feature = "benchmarks")]
                pos = leaf_offset + nl.len();
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
    /// controlled by features (default string).
        let mut engine = Engine::new(Rope::from(""));
            SampleEventType::ObjectSnapshot => 'O',
        self.set_dirty(text);
        }
impl Serialize for Rope {
            deletes_from_union = match rev.edit {
        if let Contents::Edit {priority, inserts, .. } = r.edit {
            let _ = trace.block("test_samples_block", &["test"]);
        let offset = self.line_col_to_offset(text, line as usize, 0);
        #[serde(rename_all = "snake_case")]
                            rev_id: rev.rev_id,
    }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    TRACE.disable();
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    /// Only number of matches changed
    }
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
            as_vec.push(Sample::new_metadata(
        --#--
            Merge(1,0), Merge(2,0),
    }
        if !new_inserts.is_empty() {
        }
        let text_b = Rope::from("zpbj");
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
                self.find_changed = FindStatusChange::All;

            duration_us: Some(ns_to_us(duration_ns)),
    find_leaf_split(s, MIN_LEAF)
            Merge(0,2), Merge(1, 2),

impl Sample {
    #[serde(skip_serializing_if = "Option::is_none")]

    }
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());
    pub(crate) fn has_pending_render(&self) -> bool {
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        let first_rev = engine.get_head_rev_id().token();


        // todo: the correct Find instance needs to be updated with the new parameters
        trace.disable();
        if self.len() <= MAX_LEAF {
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
                    // we don't want new revisions before this to be transformed after us
#[inline]
            x.next_occurrence(text, reverse, wrapped, &self.selection)

/// Usage of static strings is encouraged for best performance to avoid copies.
        b if b < 0xe0 => 2,


        self.find.clear();
    pub height: f64,
                    let mut e = &mut self.peers[ei];
        samples[0].timestamp_us = 10;
    fn do_selection_for_replace(&mut self, text: &Rope) {
            enabled: AtomicBool::new(false),
                        None if cursor.pos() == text.len() => cursor.pos(),
                } else {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
extern crate libc;
    }
///
use movement::{Movement, region_movement, selection_movement};
}
/// # Arguments
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
// you may not use this file except in compliance with the License.
        let first = max(first, 0) as usize;
        };
/// 1. Samples that span sections of code may be inserted on end instead of
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
        prev_boundary.unwrap_or(None)
    fn find_common_1() {
                    if seg.validity == line_cache_shadow::ALL_VALID {
    // even worth the code complexity.
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
        }
pub type StrCow = Cow<'static, str>;
                let offset = self.selection[0].start;
        }
// Unless required by applicable law or agreed to in writing, software

            match c.edit {
    ///

        // NOTE 2: from_micros is currently in unstable so using new
                if !inserts.is_empty() {
        inserts: Subset,
            let b = s.as_bytes()[offset];
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        /// The subset of the characters of the union string from after this
use serde_json::Value;
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
                        gc_dels = new_gc_dels;
    #[test]
    #[serde(skip_serializing_if = "Option::is_none")]
        }
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
        trace.closure_payload("x", &["test"], || {
                        // no need to un-delete undone inserts since we'll just shrink them out
                sel.add_region(SelRegion::new(last.start, offset));
        self.lines_raw(0, self.len())
                l = nl;
            let max_undo = self.max_undo_group_id();
        }
        }
    base_sel: Selection,
            Merge(3,1), Merge(5,3),

            self.wrap_col = WrapWidth::Bytes(wrap_col);
}
    }
/// Create an instantaneous sample with a payload.  The type the payload
            Assert(0, "ab".to_owned()),
use fixed_lifo_deque::FixedLifoDeque;

use xi_rope::interval::Interval;
            thread_name: Sample::thread_name(),
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
            AddSelectionBelow =>
            "ops": ops,
        let inserts_3 = parse_subset_list("

    }
        assert_eq!(samples[1].name, "local pid");
// Copyright 2018 The xi-editor Authors.
                           styles: &StyleMap, style_spans: &Spans<Style>,
pub struct LinesRaw<'a> {
    ///
        for &(sel_start, sel_end) in sel {
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.

pub struct LinesRaw<'a> {
        ]);
            }
            if self[i] != other[i] {
        let mut b = String::new();
    pub categories: Option<CategoriesT>,
            match rev.edit {
    // * Actual measurement in text layout
        let (start, end) = iv.start_end();
        self.lines += other.lines;
            selection: SelRegion::caret(0).into(),
    }
    #[cfg(feature = "benchmarks")]
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    min: usize,
}
            DeltaElement::Insert(ref node) =>
/// # Returns


            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
}
    assert!(!a.is_empty() && !b.is_empty());

        }
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        assert_eq!(output, String::from(engine.get_head()));
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
            Cancel => self.do_cancel(text),
    }
/// std::mem::drop(trace_guard); // finalize explicitly if
}
                        deletes_from_union
extern crate test;
        let params = json!({
            Replace { chars, preserve_case } =>
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            Sample::new_instant("local pid", &[], None),
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        let selection = SelRegion::new(0, text.len()).into();
            None
        delta.end()
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
        RopeInfo {
            if self[i] != other[i] {
}
    use serde_test::{Token, assert_tokens};
            let inserted = inserts.inserted_subset();

                    for (ei, e) in self.peers.iter().enumerate() {
use std::string::ParseError;
        #------
    /// Time complexity: O(log n)

            } else {
}
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
            type Value = CategoriesT;
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
// See the License for the specific language governing permissions and
                                                    style_spans, client,
        self.replace = Some(Replace { chars, preserve_case });

            }
            base_sel: selection.clone(),
        // a, b, y, z, c, x
            let b = s.as_bytes()[offset];
    /// The `pristine` argument indicates whether or not the buffer has
            &self.deletes_from_union, &old_deletes_from_union);
                    if sel_end_ix > sel_start_ix {
        assert_eq!(trace.get_samples_count(), 0);
    /// want to set the process name (if provided then sets the thread name).
use rpc::{GestureType, MouseAction, SelectionModifier};
                (drag_state.min, max(offset, drag_state.max))
                    for (ei, e) in self.peers.iter().enumerate() {

                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
                    undo_group: i+1,
        // send updated find status only if there have been changes
    }
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
}
    fn merge_session_priorities() {

/// equivalent performance to a regular trace.  A string that needs to be copied
impl Engine {
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
            utf16_count += 1;
    /// `text`. The count of a character in `deletes_from_union` represents
                    }
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
/// Create an instantaneous sample without any payload.  This is the lowest
            trace: Some(&trace),
        }

            sample.event_type = SampleEventType::DurationEnd;
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
    fn arr_eq(&self, other: &Vec<String>) -> bool {
/// * `categories` - A static array of static strings that tags the samples in
/// let b = Rope::from("world");



            self.set_selection(text, sel);
                            if !inserts.is_empty() {

    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        let a = Rope::from("a\nb\nc");

            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
/// a.edit_str(1, 9, "era");
            args: Some(SampleArgs {
/// for strings, specialized for incremental editing operations. Most operations
            name: name.into(),
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
}
        cursor.prev_grapheme()
    }
        for r in &self.revs[ix + 1..] {
    }
                }
        info.utf16_size
                leaf_offset = self.pos() - noffset;
/// Internally, the implementation uses reference counting (not thread safe, though
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {

    pub fn prev_grapheme(&mut self) -> Option<usize> {
        let tombstones_a = Rope::from("a");
    ///
    }
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
            pid: sys_pid::current_pid(),
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))

/// 2. Performance optimizations might have per-thread buffers.  Keeping all
        let mut b = String::new();
        }
    /// Tracks whether the replacement string or replace parameters changed.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
//! A rope data structure with a line count metric and (soon) other useful
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        // We could probably reduce the cloning of selections by being clever.


        self.set_selection_raw(text, selection);
        assert_eq!(0, b.line_of_offset(0));
        guard
                }
        let mut retain_revs = BTreeSet::new();
            None
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            cur_len_utf8 += u.len_utf8();
        let script = vec![
        );
            "ops": ops,

use find::Find;

/// * `name` - A string that provides some meaningful name to this sample.
    /// The revision history of the document

                            if !deletes.is_empty() {
        for i in 0..edits {
                    selection.add_region(occ);
        match self.inner.next() {
    /// Selects an entire line and supports multi selection.
        assert_eq!(r.len(), r.offset_of_line(2));
/// Usage of static strings is encouraged for best performance to avoid copies.
            rendered_styles.push((sel_start as isize) - ix);
//! A rope data structure with a line count metric and (soon) other useful
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    }
}
        for &(sel_start, sel_end) in sel {
    // of the union string length *before* the first revision.
    /// The largest undo group number of any edit in the history up to this
}
    }
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        // A with ring, hangul, regional indicator "US"
        let first_rev = engine.get_head_rev_id().token();
    /// An iterator over the raw lines. The lines, except the last, include the
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
#[derive(Copy, Clone)]
        assert_eq!(snapshot[3].name, "a");
/// assert_eq!("herald", String::from(a));
        let end = self.line_col_to_offset(text, line + 1, 0);
        // position after 'f' in four
        };
                        &mut start[bi]
                Delta {
        use self::MergeTestOp::*;
        let tombstones_b = Rope::from("a");
        for chunk in self.iter_chunks(start, end) {
            Merge(0,1),
                    linewrap::rewrap_width(breaks, text, width_cache,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    fn next(s: &String, offset: usize) -> Option<usize> {
    }
            AssertMaxUndoSoFar(0,2),
use self::Contents::*;
    }
                return false;
    /// All the selection regions other than the one being dragged.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    /// Invalidates the styles of the given range (start and end are offsets within
        }
        let deletes_from_union_a = parse_subset("-#---");
        }


}
// distributed under the License is distributed on an "AS IS" BASIS,
    for &b in s.as_bytes() {
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        let trace = Trace::enabled(Config::with_limit_count(11));

    /// Tracks whether there has been changes in find results or find parameters.
    find_leaf_split(s, MIN_LEAF)
}

        let mut b = String::new();
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
        engine.edit_rev(1, 1, first_rev, d1);
    /// `text`. The count of a character in `deletes_from_union` represents
    /// Garbage collection means undo can sometimes need to replay the very first
        assert_eq!(0, a.lines_raw_all().count());
        ];
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {

        engine.edit_rev(1, 2, first_rev, d1.clone());

        assert_eq!(0, a.line_of_offset(0));
#[derive(Serialize, Deserialize, Debug)]

                self.do_drag(text, line, column, Affinity::default()),
        let first_sample_timestamp = all_samples.front()
        assert_eq!(correct, res);
                WrapWidth::None => (),

            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
            } else if incomp == GraphemeIncomplete::NextChunk {
            prev_boundary = c.prev_boundary(&l, leaf_offset);
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
}
        a.lines_all().collect::<Vec<_>>());
    }
                self.highlight_find = visible;
                pos = leaf_offset + nl.len();

    pub fn lines_raw_all(&self) -> LinesRaw {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
    /// Note: unlike movement based selection, this does not scroll.
mod tests {
        let mut hls = Vec::new();
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    /// fine-grained in the case of multiple cursors, but we also want this
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
        assert_eq!(snapshot[6].name, "z");
            } else {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        /// revision that were deleted by this revision.
                serializer.serialize_newtype_variant("DeltaElement", 1,

                SelectionModifier::Set => self.set_selection(text, occ),
                    };
        trace.instant("3", &["test"]);
        }
        }
    #[test]
        // the front-end, but perhaps not for async edits.
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
                if !region.is_caret() {

//! An engine for handling edits (possibly from async sources) and undo. It
/// some way.

        Self {
}

                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
            engine.edit_rev(0, 0, first_rev, delta);
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
            false
        }
            None
/// ```
    //TODO: implement lines_raw using ranges and delete this
        },
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
}
        let text_a = Rope::from("zcbd");
            cur_len_utf16 += u.len_utf16();
            SampleGuard::new_disabled()
        /// revision that were added by this revision.
        let a = Rope::from("a\nb\nc");
        if initial_contents.len() > 0 {
}
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
    // TODO: don't construct transform if subsets are empty

    // TODO find the maximum base revision.
        /// and new deletes_from_union
}
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
}

}
/// revisions not shared by both sides.

    #[cfg(feature = "benchmarks")]
    min: usize,
            let sel = {
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    pub fn select_all(&mut self, text: &Rope) {
    fn measure(info: &RopeInfo, _: usize) -> usize {
                    } else {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
use selection::{Affinity, Selection, SelRegion};
}

            Assert(1, "pbj".to_owned()),
            'e' => SampleEventType::AsyncEnd,
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>

        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
            Assert(1, "ab".to_owned()),
        let empty = Rope::from("");
            let mut len = 1;
    /// When was the sample started.
    All,
        // interior of last line should be last line
    fn to_payload(value: &'static str) -> TracePayloadT {
    }
        let inserts = parse_subset_list("
                if groups.contains(undo_group) {
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    }
            SampleEventType::DurationBegin => 'B',
    ///
        if self.len() != other.len() {
    TRACE.get_samples_count()
                leaf_offset = self.pos() - noffset;
        // todo: this will be changed once multiple queries are supported
        } else {
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
use std::ops::Add;

    /// not account for any overhead of storing the data itself (i.e. pointer to
            _ => None
    // Delta that deletes the right bits from the text
            MetadataType::ThreadName {name} => (Some(name), None),
            SampleEventType::DurationBegin => 'B',
    where S: serde::Serializer {

            self.collapse_selections(text);
        assert_eq!(1, r.line_of_offset(r.len() - 1));
    /// of individual region movements become carets.
/// Replace part of a `Rope`:
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
/// for strings, specialized for incremental editing operations. Most operations
    pub fn new_instant<S, C>(name: S, categories: C,

    ///
        let revs = basic_insert_ops(inserts, 1);
        // A with ring, hangul, regional indicator "US"
        assert_eq!(snapshot[7].name, "c");
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
    fn test_get_samples_nested_trace() {
            }
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
                return offset;
    }

pub struct ChunkIter<'a> {
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
    }
                for &region in rest {
        }

        } else {
    #[test]
        Some(pos) => minsplit + pos,
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    sample: Option<Sample>,
                                undo_group,
        cursor.next_grapheme()
        let col = col as usize;

                match *other {
}
            enabled: AtomicBool::new(true),
    #[bench]
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    fn bench_trace_instant_disabled(b: &mut Bencher) {
    #[cfg(feature = "benchmarks")]
        assert_eq!(snapshot[3].name, "b");
            let mut len = 1;
    #[bench]
        ---#-
    pub chars: String,
use std::collections::HashMap;

                true => x.end,
/// A flag used to indicate when legacy actions should modify selections
    /// This case is a regression test reproducing a panic I found while using the UI.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        for rev in old_revs.into_iter().rev() {
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
            if let Some(ref thread_name) = sample.thread_name {

            match modify_selection {
            &rebased_deletes_from_union, &new_deletes_from_union);
        let sample_name = to_cow_str(meta.sample_name());
        //for next line
            SampleEventType::AsyncEnd => 'e',

    // since undo and gc replay history with transforms, we need an empty set
        self.text = new_text;
        let (iv, new_len) = delta.summary();
                    let sel_start = cursor.pos();
        b.push('\n');


    /// want to set the process name (if provided then sets the thread name).
    }
            // copy the current state
    #[serde(deserialize_with = "deserialize_event_type")]
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
    }
    {

}
            offset,
    pub thread_name: Option<StrCow>,
            rev_id_counter: 1,
                metadata_name: None,
        let new_head = engine.get_head_rev_id().token();
    }
    fn gc_scenario(edits: usize, max_undos: usize) {
                                          closure: F, payload: P)

                max_undo_so_far: i,
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        assert_eq!(Some(0), a.prev_codepoint_offset(1));
        let mut ix = 0;
            Merge(0,1),
            {
        }
    #[test]
        let res = find_common(&a, &b);
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
            buffer_id: buffer_id,
    pub fn line_of_offset(&self, offset: usize) -> usize {
    }
            match c.edit {
        }
    fn edit_rev_undo() {
                                gc_dels = gc_dels.union(deletes);
    1
    fn prev(s: &String, offset: usize) -> Option<usize> {
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        }

        b.push(rhs);
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
        let rearranged = rearrange(&revs, &base, 7);
    }
        let a2 = Rope::from("a");
        Some(&leaf[start_pos .. end])
    use super::*;
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
            name: name.into(),
            Assert(1, "afc".to_owned()),
    // * grapheme clusters

    #[serde(serialize_with = "serialize_event_type")]
        self.scroll_to_cursor(text);
/// # Performance
        ");
    }
                    RopeDeltaElement_::Copy(start, end) =>
        let style = style_map.merge_with_default(style);
        while !leaf.is_char_boundary(end) {
        #------
        b.iter(|| black_box(sys_tid::current_tid()));
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        assert_eq!("#-####-", &subset_str);
    ///
                        }
/// let c = b.slice(1, 7);
        deletes_from_union
                } else {
        // rather than emitting an explicit start/stop to reduce the size of

        self.text = new_text;

            deletes_from_union = match rev.edit {
        b if b < 0xf0 => 3,
    type Item = Cow<'a, str>;
    }


    /// Selects an entire word and supports multi selection.
            inner: self.lines_raw(start, end)
    // TODO: this should be a Cow
        }
            Scroll(range) => self.set_scroll(range.first, range.last),

                    if retain_revs.contains(&rev.rev_id) {
        -> Self
    pub fn slice(&self, start: usize, end: usize) -> Rope {

    fn lines_raw_small() {
#![cfg_attr(feature = "collections_range", feature(collections_range))]

        }
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            sel.add_region(

    }
    {
}
        trace.disable();
    #[cfg(feature = "benchmarks")]
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {

        let height = self.line_of_offset(text, text.len()) + 1;
    /// concurrently it will have count `2` so that undoing one delete but not
            Assert(0, "acpbdj".to_owned()),
            s = &s[splitpoint..];
    ns / 1000
    // this is the cost contributed by the timestamp to trace()




            false => Selection::new(),
    /// Replacement string.
        }
                self.select_line(text, offset, line, true),
        memchr(b'\n', &s.as_bytes()[offset..])
/// assert_eq!("ello wor", String::from(&b));
        for _ in 0..line_len {
        if !self.is_point_in_selection(offset) {
        }
                println!("running {:?} at index {}", op, i);
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let mut soln = String::from("h");
        let delta = Delta::synthesize(&self.tombstones,
/// same priority into one transform to decrease the number of transforms that
    #[test]
        leaf.as_bytes()[pos]
        inserts.into_iter().enumerate().map(|(i, inserts)| {
                    };
macro_rules! categories_from_constant_array {
        let first_rev = engine.get_head_rev_id().token();
    TRACE.closure_payload(name, categories, closure, payload)
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    /// Find parameters and number of matches changed.
        let mut gc_dels = self.empty_subset_before_first_rev();
                last.1 = last.1.transform_union(&inserts);
        }
        Lines {
            's' => SampleEventType::FlowStart,
}
            let c = i.to_string() + "\n";
        let b = a.slice(1, 10);
    }
            None => {
        Self {
    /// Returns the byte offset corresponding to the line `line`.
    }

        match cmd {
    CompleteDuration,

                    let new_gc_dels = if inserts.is_empty() {
            priority: 0,
        --#--
    lc_shadow: LineCacheShadow,
    let mut out = Vec::new();
/// * `categories` - A static array of static strings that tags the samples in
        let mut b = TreeBuilder::new();
            rev_id: self.next_rev_id(),
        // and it only needs to be consistent over one execution.
extern crate libc;
                (drag_state.min, max(offset, drag_state.max))
                return None;
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    (out, text, tombstones, deletes_from_union)
/// fn something_else_expensive(value: u32) {
            's' => SampleEventType::FlowStart,
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))

    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
        };
            SampleEventType::Metadata => 'M'
        let offset = self.line_col_to_offset(text, line, col);
            DeltaElement::Insert(ref node) =>
}
/// a.edit_str(1, 9, "era");
        engine.gc(&gc);

            let after = full_priority >= trans_priority;  // should never be ==
            next_boundary = c.next_boundary(&l, leaf_offset);
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);

    scroll_to: Option<usize>,

        assert_eq!(Some(3), a.next_codepoint_offset(1));
            AddSelectionBelow =>
    #[test]
    }
    #[test]
        cur_len_utf8
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
    fn bench_trace_block(b: &mut Bencher) {

    /// Returns a slice of the string from the byte range [`start`..`end`).
pub struct LinesRaw<'a> {
        ");
            Some(Cow::Borrowed(mut s)) => {
        if line < self.first_line {
            }
pub struct RevId {
        -> Self
        let first_rev = engine.get_head_rev_id().token();
/// let c = b.slice(1, 7);

impl Serialize for Delta<RopeInfo> {

        // We add selection after find because we want it to be preferred if the
                false => x.start
}
                continue;
                                                          new_len, col),

                                toggled_groups: &toggled_groups - gc_groups,
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
        rope.line_of_offset(20);
    }
    }
        assert_eq!(trace.get_samples_limit(), 0);
                    let b = if bi < ai {

/// something_expensive();
                    let (mut a, rest) = end.split_first_mut().unwrap();
    session2: u32,
    }
/// Atomicity is implicit, putting the offset
// Licensed under the Apache License, Version 2.0 (the "License");
            Merge(0,2), Merge(1, 2),
        let new_head = engine.get_head_rev_id().token();
        assert!(end <= leaf.len());
            soln.push('b');
        let trace = Trace::enabled(Config::default());


    fn bench_trace_closure(b: &mut Bencher) {
        engine.edit_rev(1, 1, initial_rev, d1.clone());

//! An engine for handling edits (possibly from async sources) and undo. It
    }
use rope::{Rope, RopeInfo};
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
        #[serde(rename_all = "snake_case")]
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {

        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
            let base_index = find_base_index(&self.revs, &other.revs);
            }
    }
            } else {
            Cancel => self.do_cancel(text),
categories_from_constant_array!(5);
        let trace = Trace::enabled(Config::default());
///
        let mut r = Rope::from("27");
            }),
            Assert(1, "ab".to_owned()),
    ///
        let _t = trace_block("View::wrap_width", &["core"]);

            }
            lines: 0,




            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;

use unicode_segmentation::GraphemeIncomplete;
        if self.highlight_find {
///
        ];
#![cfg_attr(feature = "benchmarks", feature(test))]
                SelRegion::new(start, end)
                CategoriesT::StaticArray(c)
/// Returns all the samples collected so far ordered chronologically by
        // is the new edit in an undo group that was already undone due to concurrency?
                self.set(pos);
        // A with ring, hangul, regional indicator "US"
    /// borrowed from the rope.
            Assert(0, "zcpbdj".to_owned()),
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            engine.edit_rev(1, i+1, head, d);
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
        match rev.edit {

        assert_eq!(0, r.line_of_offset(a.len() - 1));
                self.do_selection_for_find(text, case_sensitive),
        }
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
            return Vec::with_capacity(0);
        let mut b = line_cache_shadow::Builder::new();

                    } else if !inserts.is_empty() {
                if is_base {

        #[derive(Serialize, Deserialize)]
            Merge(2,3),
    fn bench_trace_block_disabled(b: &mut Bencher) {
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());

                WrapWidth::None => (),
                            if !inserts.is_empty() {
                }
        }
            },
    /// Toggles a caret at the given offset.
    /// Find what the `deletes_from_union` field in Engine would have been at the time
    // How should we count "column"? Valid choices include:
        let a = Rope::from("a\nb\nc");
            self.set_selection(text, sel);
            type Value = CategoriesT;
            GestureType::WordSelect =>
        self.set_dirty(text);
        // ensure that when the samples are sorted by time they come out in a
    }
            let _x = trace.block("something", &[]);
    where S: serde::Serializer {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
    fn consume(self) -> (Option<String>, Option<i32>) {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
            match *op {
            let common = find_common(a_to_merge, b_to_merge);
        // the front-end, but perhaps not for async edits.
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
                    }
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

    ThreadName { name: String },
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
            "ops": ops,

        }
/// stored as tracing could still be enabled but set with a limit of 0.

                }
            rendered_styles.push(0);
        samples[1].pid = 2;
}
        }
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    wrap_col: WrapWidth,
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        engine.edit_rev(1, 1, first_rev, d1.clone());
        samples[0].pid = 1;
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        // clamp to end of line

            Some(right_str)
                metadata_name: None,
        };
/// * `categories` - A static array of static strings that tags the samples in
        }
    }
        ");
        -----#

    session1: u64,
/// Applies an optimization where it combines sequential revisions with the
        let mut cursor = Cursor::new(self, offset);
    /// part of the initial contents since any two `Engine`s need a common

    // A colliding session will break merge invariants and the document will start crashing Xi.
            cur_len_utf16 += u.len_utf16();
    // TODO: a case can be made to hang this on Cursor instead
            }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        /// The subset of the characters of the union string from after this
//! which is sufficient for asynchronous plugins that can only have one
    // maybe explore grabbing leaf? would require api in tree

    fragment: &'a str

    {
                    text.slice_to_string(start, end)
            GestureType::PointSelect => {
        // of the delta so we can set the cursor before or after the edit, as needed.
                            warn!("Failed to get string representation: {:?}", e);
                let categories = v.split(",").map(|s| s.to_string()).collect();
        if self.len() <= MAX_LEAF {
        match ty {
            thread_name: Sample::thread_name(),
        let mut b = TreeBuilder::new();
                        let mut word_cursor = WordCursor::new(text, region.max());
            }
        // current recording mechanism should see:
                    RopeDeltaElement_::Copy(start, end) =>
        a.lines_all().collect::<Vec<_>>());
    /// Get the contents of the document at a given revision number
    {
        let replacement = match self.selection.last() {
                }
}
        let deletes_from_union_a = parse_subset("-#---");
    pub fn new(initial_contents: Rope) -> Engine {
/// equivalent performance to a regular trace.  A string that needs to be copied
            let mut sel = drag_state.base_sel.clone();
///
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            categories: Some(categories.into()),
                        self.revs.push(Revision {
            if cur_len_utf16 >= in_measured_units {
        if let Some(ix) = style_map.lookup(style) {
        // current recording mechanism should see:
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
#[derive(Clone, Debug)]
/// for single user cases, used by serde and ::empty
    #[test]
        }
    #[test]
            Assert(2, "afc".to_owned()),
}
    pub fn new_disabled() -> Self {
            };
    /// Invalidate the current selection. Note that we could be even more
    fn gc_scenario(edits: usize, max_undos: usize) {

    #[cfg(feature = "benchmarks")]
        if wrap_col > 0 {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
                    ops.push(self.build_update_op("invalidate", None, seg.n));
#[derive(Clone, Debug)]
    fn merge_priorities() {
            Assert(2, "ab".to_owned()),
/// an argument.

    pub fn disabled() -> Self {
    // recompute the prefix up to where the history diverges, but it's not clear that's
    // this is the cost contributed by the timestamp to trace()
    }
        while !s.is_empty() {
        let mut selection = Selection::new();
        assert_eq!(trace.get_samples_count(), 0);
use std::fmt;
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        // we add the special find highlights (1) and selection (0) styles first.
    where D: serde::Deserializer<'de> {
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
                                gc_dels = gc_dels.transform_expand(inserts);
        Self {
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
    text: Rope,
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {

    fn bench_two_timestamps(b: &mut Bencher) {
        a.lines_all().collect::<Vec<_>>());
                            if !inserts.is_empty() {

/// Usage of static strings is encouraged for best performance to avoid copies.
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        self.set_dirty(text);
        if let Some(occ) = closest_occurrence {
    pub fn next_grapheme(&mut self) -> Option<usize> {
use std::string::ParseError;
        // TODO(vlovich): optimize this path to use the Complete event type
fn exe_name() -> Option<String> {
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        assert_eq!("a", String::from(&tombstones_2));
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        let initial_rev = engine.get_head_rev_id().token();
        undo_group: usize,
impl StringArrayEq<[&'static str]> for Vec<String> {
    }
                        let start_line = seg.our_line_num;
        let trace = Trace::enabled(Config::with_limit_count(10));
/// # Performance
                out.push(DeltaOp {
        self.samples.lock().unwrap().len()
    {
            'B' => SampleEventType::DurationBegin,
        let mut engine = Engine::new(Rope::from(TEST_STR));
            }
    }
        }).unwrap_or(text.len());
            GestureType::PointSelect => {
    }

        memchr(b'\n', &s.as_bytes()[offset..])
        assert_eq!(correct, res);

        info.utf16_size

use find::Find;
        }
        -----#
            trace.instant("test_samples_pulse", &["test"]);
    /// Time complexity: O(log n)
        samples.sort();

        in_measured_units
        assert_eq!(None, a.prev_codepoint_offset(0));
        rope.offset_of_line(5);
        Cow::from(b)
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
        let (metadata_name, sort_index) = meta.consume();
    pub fn slice(&self, start: usize, end: usize) -> Rope {
}
            }
    // allowing us to use the same method to insert the text into the tombstones.
        let deletes_from_union_a = parse_subset("-#---");
                // sanitize input
        where S: Into<StrCow>, C: Into<CategoriesT>
        // since character was inserted after gc, editor gcs all undone things
///
        assert_eq!(snapshot[6].name, "z");

//
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    fn lines_med() {
                                gc_dels = gc_dels.transform_union(inserts);

    }
    /// in the range of 511-1024 bytes.
            tid: sys_tid::current_tid().unwrap(),
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    /// controlled by features (default string).
/// # Arguments
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                    if let Some(last_selection) = self.selection.last() {
    }
        cursor.prev_grapheme()
            't' => SampleEventType::FlowInstant,
    }
/// Transform `revs`, which doesn't include information on the actual content of the operations,

                SelectionModifier::Add => {
    }
    fn bench_trace_block(b: &mut Bencher) {
            for find in self.find.iter() {
            'f' => SampleEventType::FlowEnd,
            .map_or(0, |ref s| s.timestamp_us);

        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        engine.undo([3].iter().cloned().collect());
                }
            self.shrink_to_fit();
                    } else {
    fn next(&mut self) -> Option<Cow<'a, str>> {
    // Send the requested lines even if they're outside the current scroll region.
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        result
    fn line_of_offset_panic() {

        a.edit_str(1, 9, "era");

#[derive(Serialize, Deserialize, Debug, Clone)]

        self.find.iter().map(|find| {
        trace.closure_payload("x", &["test"], || {
                match self.inner.next() {
    fn find_base_1() {

        self.samples.lock().unwrap().len()
    fn is_boundary(s: &String, offset: usize) -> bool {
            'N' => SampleEventType::ObjectCreated,
            FindAll => self.do_find_all(text),
/// ```
            let end = self.line_of_offset(last_text, iv.end()) + 1;
/// * `name` - A string that provides some meaningful name to this sample.
    size: Size,
        // same span exists in both sets (as when there is an active selection)
                        })
    pub fn instant<S, C>(&self, name: S, categories: C)

        }
    for &b in s.as_bytes() {
          F: FnOnce() -> R
        /// revision that were added by this revision.
        let (new_text, new_tombstones) =
                    as_vec.push(Sample::new_metadata(
        client.def_style(&style.to_json(ix));
//
        engine.undo([1,2].iter().cloned().collect());
    }

        let tombstones_b = Rope::from("a");
/// let c = b.slice(1, 7);
        AssertAll(String),
    fn drop(&mut self) {
        Self {
            Assert(1, "pbj".to_owned()),
                return false;
    fn bench_trace_block_disabled(b: &mut Bencher) {
    /// If `line` is equal to one plus the current number of lines,
impl Engine {
                    })
//! info.
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));

    buffer_id: BufferId,
                    // TODO: update (rather than re-render) in cases of text valid
        where S: Into<StrCow>, C: Into<CategoriesT>

            }


    pub fn token(&self) -> RevToken {
impl StringArrayEq<[&'static str]> for Vec<String> {
        match self.selection.len() {
                }
        } else { // no toggled groups, return past end
                match *other {
    #[serde(rename = "sort_index")]
    #[cfg(feature = "benchmarks")]
    /// Tests that merging again when there are no new revisions does nothing
    fn gc_4() {
use interval::Interval;

                    selection.add_region(SelRegion::new(sel_start, end_of_line));
    }
// See the License for the specific language governing permissions and
    pub fn byte_at(&self, offset: usize) -> u8 {
    }
        // +2 for exe & thread name
        }, new_text, new_tombstones, new_deletes_from_union)
                        } else {
        cursor.prev_grapheme()
    }
        match *self {
            } else if incomp == GraphemeIncomplete::NextChunk {

    }
    /// The line number is 0-based.
    revs: Vec<Revision>,
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        }

impl<'de> Deserialize<'de> for Rope {
    fn to_payload(value: &'static str) -> TracePayloadT {
    impl MergeTestState {
        }
            self.pid == other.pid &&
    }
                }
pub struct ChunkIter<'a> {
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        self.first_line = first;
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
            Scroll(range) => self.set_scroll(range.first, range.last),
    #[test]
            deletes: Subset::new(0),


            self.categories == other.categories &&
                    let mut e = &mut self.peers[ei];
                    .with_affinity(affinity)
        let head2 = engine.get_head_rev_id().token();
        for i in 0..edits {
    // this should have the same behavior, but worse performance
    fn test_samples_block() {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        assert_tokens(&rope, &[
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
        assert_eq!(rope.line_of_offset(1), 0);
        assert_eq!(snapshot[2].name, "a");
    /// concurrently it will have count `2` so that undoing one delete but not
    }
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
            self.collapse_selections(text);
    fn next_rev_id(&self) -> RevId {
            undone_groups: BTreeSet::new(),
                SelectionModifier::Add => {
        if !gc_dels.is_empty() {
    // since undo and gc replay history with transforms, we need an empty set

    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {

        /// should go before typed text.
    }
        Cow::from(b)
        soln.push('f');

            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    fn empty_subset_before_first_rev(&self) -> Subset {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let line = self.line_of_offset(text, end);
        assert_eq!("#-####-", &subset_str);
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                },
            Assert(1, "acb".to_owned()),
}
    #[bench]
        /// along with the newline that triggered it.
    #[serde(rename = "name")]
    fn can_fragment() -> bool { false }
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        if self.cursor.pos() >= self.end {
/// as opposed to thousands of revisions.
        let deletes_from_union = parse_subset("-#----#");
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
            l[offset..].chars().next()
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        };
                    "something", &["benchmark"], || {},
        let base_sel = Selection::new();
            Merge(0,1),
    fn gc_5() {
        assert_eq!(correct, rebased_inserts);
    ObjectSnapshot,
                }
}
    {
/// rather than just this processe's samples).
    /// The maximum number of samples that should be stored.
    fn is_boundary(s: &String, offset: usize) -> bool {
    pub preserve_case: bool
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
    }
        // ensure that when the samples are sorted by time they come out in a
        let mut engine = Engine::new(Rope::from(""));
            }
#![cfg_attr(feature = "benchmarks", feature(test))]
            Contents::Undo { .. } => panic!("can't merge undo yet"),
            Assert(0, "cbd".to_owned()),
            rev_id: self.next_rev_id(),
use edit_types::ViewEvent;
        for chunk in self.iter_chunks(start, end) {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        }
            utf16_count += 1;
    }
use xi_trace::trace_block;
                    .with_affinity(affinity)
    fn hash<H: Hasher>(&self, state: &mut H) {
        samples.sort_unstable();
}
            timestamp_us: ns_to_us(time::precise_time_ns()),
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
    // in a single session.
/// }
            }

            match c.edit {
///
        let delta = Delta::synthesize(&self.tombstones,
    FlowEnd,
    // revision might hold content from an undo group that would otherwise be gc'ed),
        if let Some((l, offset)) = self.get_leaf() {
fn ns_to_us(ns: u64) -> u64 {
        match self.inner.next() {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),

        Self {
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
    fn delta_rev_head_2() {
                    undo_group: i+1,
    /// Tests that merging again when there are no new revisions does nothing

//
            'e' => SampleEventType::AsyncEnd,
    fn add(self, rhs: Rope) -> Rope {
    pending_render: bool,
            .map(|pos| pos + 1)
/// 3. You may not care about them always being sorted if you're merging samples
        } else if self.first_line + self.height <= line {
                Some(Cow::from(s))
        }, to_payload("test_get_samples_nested_trace"));
            deletes: Subset::new(0),
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        if offset == s.len() {
#[inline]
            }
            Merge(0,2), Merge(1, 2),
        for region in self.selection.regions_in_range(start_pos, pos) {
        }
impl Rope {
        if let Contents::Edit {priority, inserts, .. } = r.edit {
                    Some(Contents::Edit {
    TRACE.get_samples_count()
        // We somewhat arbitrarily choose the last region for setting the old-style
        use self::MergeTestOp::*;

    undone_groups: BTreeSet<usize>,  // set of undo_group id's
    }
            Assert(0, "ab".to_owned()),
            let matches_only = self.find_changed == FindStatusChange::Matches;
    // even worth the code complexity.
/// Disable tracing.  This clears all trace data (& frees the memory).
    /// Find parameters and number of matches changed.
            name: name.into(),
        for op in &delta_ops {
        let rev = Revision {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[test]

    /// This function does not perform any scrolling.
/// fn something_else_expensive() {
    }

    }
                        },
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
/// assert_eq!("ello wor", String::from(&b));

    fn render_line(&self, client: &Client, styles: &StyleMap,
                     modify_selection: &SelectionModifier) {
            find.update_highlights(text, delta);
        for _i in 0..50 {
    // recompute the prefix up to where the history diverges, but it's not clear that's
    fn hash<H: Hasher>(&self, state: &mut H) {
/// typing a paragraph) will be combined into a single segment in a transform
            None
        let mut leaf_offset = pos - offset;
fn initial_revision_counter() -> u32 {
        self.lc_shadow = b.build();
            for (i, op) in script.iter().enumerate() {
                    let (start, end) = self.peers.split_at_mut(ai);
            name: name.into(),
    /// Replacement string.
            }
            //self.cursor.set(self.end);
        let last = max(last, 0) as usize;
        // set last selection or word under current cursor as replacement string
    }
        for find in &mut self.find {
    /// Return the line number corresponding to the byte index `offset`.
        use self::MergeTestOp::*;
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
#[derive(Serialize, Deserialize, Debug, Clone)]
    TRACE.closure_payload(name, categories, closure, payload)
            let b = s.as_bytes()[offset];
            Assert(0, "acbd".to_owned()),


        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
/// However, anything that can be converted into a Cow string can be passed as
            Assert(0, "acbd".to_owned()),
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
            }
        let deletes_from_union_b = parse_subset("-#---");
    a_ids.intersection(&b_ids).cloned().collect()
    if a.is_empty() {
        engine.edit_rev(1, 3, new_head_2, d3);
pub fn enable_tracing_with_config(config: Config) {
/// for single user cases, used by serde and ::empty
        self.rev_id_counter += 1;
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
use multiset::{Subset, CountMatcher};
            Assert(5, "zacpb".to_owned()),
            if self.line_of_offset(text, offset) <= line {
        }

    find_changed: FindStatusChange,
        let mut sel = self.selection.clone();
                let (pl, poffset) = self.prev_leaf()?;
///
        self.tombstones = tombstones;
            let (start, end) = if offset < drag_state.offset {
    identity_op,
    fn undo() {
        }).unwrap_or(text.len());
                }
///     0
            self.event_type == other.event_type &&
}
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        ];
}
    #[should_panic]
            },
    #[test]
        let deletes_from_union_b = parse_subset("-#---");


    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
/// Returns the operations in `revs` that don't have their `rev_id` in
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

/// an argument.

        let mut next_boundary = c.next_boundary(&l, leaf_offset);
    fn eq_med() {
/// beginning.
/// ```
        }, deletes_from_union)
                while cursor.pos() < region.max() {
        MergeTestState::new(2).run_script(&script[..]);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
            },

    #[serde(rename = "xi_payload")]
                (region.is_upstream() && c == pos) ||
                cursors.push(c - start_pos);
        let text = Rope::from("13456");
    }
    #[serde(skip_serializing_if = "Option::is_none")]
            Some(ref breaks) => {
}
            categories: Some(categories.into()),
            trace.record(sample);
    fn to_payload(value: &'static str) -> TracePayloadT {
                    })
        use self::MergeTestOp::*;
        result

pub struct SampleGuard<'a> {
                    let full_path_str = full_path.into_string();
    #[inline]
        Ok(Delta::from(d))
// Licensed under the Apache License, Version 2.0 (the "License");
    pub fn get_caret_offset(&self) -> Option<usize> {
    {
// Unless required by applicable law or agreed to in writing, software
            end,
            },
/// {
    fn bench_trace_block(b: &mut Bencher) {
    // callers should be encouraged to use cursor instead
                rev_id: basic_rev(i+1),
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
        // the front-end, but perhaps not for async edits.
        ).min_by_key(|x| {
            // recurse at most once; this doesn't feel great but I wrote myself into a
    // * Code units in some encoding
        let tombstones_b = Rope::from("a");
        self.selection = sel;
/// Usage of static strings is encouraged for best performance to avoid copies.
        let subset_str = format!("{:#?}", expand_by[0].1);
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)

        samples[0].timestamp_us = 10;
    pub(crate) fn has_pending_render(&self) -> bool {
                                                          new_len, col),
        d.insert(StrCow::from("test"), StrCow::from(value));
            // which we can do with another peer that inserts before a and merges.
    }
        self.revs.last().unwrap().rev_id
        // we add the special find highlights (1) and selection (0) styles first.
        // is the new edit in an undo group that was already undone due to concurrency?
    #[serde(deserialize_with = "deserialize_event_type")]

    /// should be constructed via SampleGuard.
    fn rebase_1() {

///
            },
impl SampleEventType {
            buffer_id: buffer_id,
                        self.revs.push(Revision {
}
/// State required to resolve a drag gesture into a selection.
            SampleEventType::DurationEnd => 'E',
        /// Groups related edits together so that they are undone and re-done
    }
    #[test]
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
                }
        value
        #[derive(Serialize, Deserialize)]
        self.enabled.store(true, AtomicOrdering::Relaxed);
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    }
//! conceptually represents the current text and all edit history for that
        assert_eq!(None, b.next_codepoint_offset(9));
            Cancel => self.do_cancel(text),
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
//! text.

impl MetadataType {
    }
/// Then offset=1 is invalid.
        -> Self

        //for next line
        // send updated find status only if there have been changes
        for find in &mut self.find {
            //let prev_pos = self.cursor.pos();
            // Do it the other way on the copy
        update
        Engine {
    #[cfg(feature = "benchmarks")]
        engine.undo([1].iter().cloned().collect());
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
                                     categories: C,
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();

            if self.fragment.is_empty() {
fn find_leaf_split_for_bulk(s: &str) -> usize {
        delta.apply(&self.text)
    /// Selects a specific range (eg. when the user performs SHIFT + click).
/// Boundary is atomic and determined by codepoint boundary.
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
        trace.instant("1", &["test"]);
            }
            rev_id, max_undo_so_far,
        Lines {
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
                // This could be done by explicitly overriding, or by tweaking the
        let d = engine.delta_rev_head(first_rev);
///
                        let mut word_cursor = WordCursor::new(text, region.max());
        
                },
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
                        deletes: transformed_deletes,
        // and it only needs to be consistent over one execution.
                Some(Cow::from(s))
        let utf8_offset = 19;

        let new_deletes_from_union = {

                        b.add_span(seg.n, 0, 0);
                    if seg.validity == line_cache_shadow::ALL_VALID {
        /// Used to order concurrent inserts, for example auto-indentation
#[cfg(test)]
#[inline]

        // selection state, and for scrolling it into view if needed. This choice can

        let first_rev = engine.get_head_rev_id().token();
#[inline]

        for u in s.chars() {
    fn arr_eq(&self, other: &Vec<String>) -> bool {
            let sel = {
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
    FlowEnd,

    /// Highlights are only rendered when search dialog is open.
        assert!(a != empty);
/// 3. You may not care about them always being sorted if you're merging samples
    None,
                // Deprecated (kept for client compatibility):
    #[inline]
        engine.undo([1,3].iter().cloned().collect());
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    // trace_block()/trace_closure
}

fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
                    let e = &mut self.peers[ei];

            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);


                },

        }
    TRACE.enable_config(config);
/// creation.  Roughly corresponds to start_ns but instead there's a

                //self.end - prev_pos
                    return None;
        // todo: this will be changed once multiple queries are supported
#[derive(Copy, Clone)]
    /// that are currently deleted, and thus in `tombstones` rather than
    // This computes undo all the way from the beginning. An optimization would be to not
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                Contents::Edit {inserts, ..} => inserts,
    /// An arbitrary payload to associate with the sample.  The type is
        // since character was inserted after gc, editor gcs all undone things
    inserts: InsertDelta<RopeInfo>,
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
            return Vec::with_capacity(0);
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
        }
    fn bench_trace_instant_disabled(b: &mut Bencher) {
            self.args == other.args
    /// The session ID used to create new `RevId`s for edits made on this device
    /// of the chunks is indeterminate but for large strings will generally be
    /// Invalidate the current selection. Note that we could be even more

    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        let mut cur_len_utf16 = 0;
        // We add selection after find because we want it to be preferred if the
    /// The state for replacing matches for this view.
        let mut engine = Engine::empty();
    }
            offset = text.prev_grapheme_offset(offset + 1).unwrap();

    #[bench]

    }
use rpc::{GestureType, MouseAction, SelectionModifier};
    }

pub struct Size {
        let new_head_2 = engine.get_head_rev_id().token();
    // this should have the same behavior, but worse performance
        ];
        Self {
    FlowInstant,
        let mut update = json!({
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
        }
            false => Selection::new(),
        !self.selection.regions_in_range(offset, offset).is_empty()
            Some(right_str)
        };
pub struct LinesMetric(usize);  // number of lines
        deletes_bitxor: Subset,
                    let head = e.get_head_rev_id().token();
            name: name.into(),
            return self.len();
                    a.merge(b);
            true => self.selection.clone(),
extern crate serde_derive;

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            Rope::from(s1.clone()),
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {

            SampleEventType::Metadata => 'M'
/// Find a set of revisions common to both lists
        if let Some(lines) = lines {
        if !new_inserts.is_empty() {
            Assert(0, "ab".to_owned()),
/// The result of the closure.
    }

        d
/// acquires a dependency on the `serde_json` crate.
    }

    session: SessionId,
    out.as_mut_slice().reverse();
        }
                         first_line: usize, last_line: usize, pristine: bool) {

    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
                // TODO create InsertDelta directly and more efficiently instead of factoring
use serde_json::Value;
/// Boundary is trailing and determined by a newline char.
                }
                    }
    pub fn iter_chunks_all(&self) -> ChunkIter {
        self.session = session;
        -##-
        let trace = Trace::enabled(Config::default());
                                                        soft_breaks.as_mut(),
///
        match rev.edit {
        ];
        MergeTestState::new(3).run_script(&script[..]);
    fn next(s: &String, offset: usize) -> Option<usize> {
        assert_eq!(snapshot[6].name, "z");
    }
/// let b = Rope::from("world");
        let mut ix = 0;
    }
        a.lines_all().collect::<Vec<_>>());
        assert_eq!(None, a.prev_codepoint_offset(0));
    /// Get revision id of head revision.
    // * Actual measurement in text layout

        #[derive(Serialize, Deserialize)]
        }, deletes_from_union)
    /// Return the byte offset corresponding to the line number `line`.
                    if !inserts.is_empty() {
    // * Unicode width (so CJK counts as 2)
        json!({"test": value})

                    RopeDeltaElement_::Insert(s) =>

        let trace = Trace::enabled(Config::default());

    TRACE.block(name, categories)
        ];
{
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        // that into our actual target.
            None
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                    let e = &mut self.peers[ei];
                el.serialize_field(end)?;
        where D: Deserializer<'de>,
use std::str;
    fn bench_trace_block_payload(b: &mut Bencher) {
        assert!(a != empty);

    }
    fn scroll_to_cursor(&mut self, text: &Rope) {
            }

categories_from_constant_array!(1);
    fn do_split_selection_into_lines(&mut self, text: &Rope) {
    max: usize,
                tid));
    fn test_samples_closure() {
    #[test]
    /// # Panics


            if cur_len_utf16 >= in_measured_units {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        assert_eq!(trace.get_samples_limit(), 20);
pub fn disable_tracing() {
        self.undone_groups = groups;

    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
            x.next_occurrence(text, reverse, wrapped, &self.selection)
        }
                                     event_type: SampleEventType)
/// A flag used to indicate when legacy actions should modify selections
    pub fn enable(&self) {
                            }
    for op in b_new {
        assert_eq!(trace.is_enabled(), true);
            // The deletes are already after our inserts, but we need to include the other inserts
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {

                self.do_find(text, chars, case_sensitive, regex, whole_words),
        self.replace_changed = true;
            }
        delta.apply(&self.text)
    pub height: f64,
    fn line_of_offset_small() {

                },
    // How should we count "column"? Valid choices include:
            .map(|(i, _)| i)
#[cfg(feature = "json_payload")]
                        }
            }
            rendered_styles.push(sel_end as isize - sel_start as isize);

        self.breaks = Some(linewrap::linewrap_width(text, width_cache,
    fragment: &'a str
    }
        let script = vec![
    {
use std::borrow::Cow;
use rpc::{GestureType, MouseAction, SelectionModifier};
        serializer.serialize_str(&String::from(self))
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {

#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            self.event_type == other.event_type &&


    }
}
        let snapshot = trace.samples_cloned_unsorted();
//! There is also a full CRDT merge operation implemented under

                        None
            Assert(1, "ab".to_owned()),
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    }
            Some(region) => {
            self.truncate(splitpoint);
                    to_payload(("some payload for the block"))));
    pub fn new_disabled() -> Self {
                                                        style_spans, line_num);
    }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            MetadataType::ProcessLabels {..} => "process_labels",

}
            Assert(0, "adfc".to_owned()),
// Unless required by applicable law or agreed to in writing, software
        }

    ///

pub struct ByteIter<'a> {
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
/// Transform `revs`, which doesn't include information on the actual content of the operations,

impl Metric<RopeInfo> for LinesMetric {
    /// This uniquely represents the identity of this revision and it stays

use std::borrow::Cow;
    }

        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    }
        let after_first_edit = engine.get_head_rev_id().token();
        in_base_units
            Assert(1, "cb".to_owned()),
    pub fn slice(&self, start: usize, end: usize) -> Rope {
    fn next(&mut self) -> Option<&'a str> {
    }
        assert_eq!(correct, rearranged_inserts);
    pub fn enabled(config: Config) -> Self {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
        d_builder.delete(Interval::new_closed_open(58, 61));
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            },
        &self.text
            None
        let line = self.line_of_offset(text, end);
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.

                    sel.add_region(region);
        value
    #[inline]
            let start = self.line_of_offset(last_text, iv.start());
    /// Find parameters and number of matches changed.
    {
            sample: Some(Sample::new_duration_marker(
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    #[test]
            let new_region = region_movement(movement, region, self,
                splitpoint -= 1;
    /// Width in bytes (utf-8 code units).
                    // We're super-aggressive about dropping these; after gc, the history
        self.revs.last().unwrap().max_undo_so_far
                }
                    s = inserts.transform_union(&s);
            Assert(1, "apb".to_owned()),
    replace: Option<Replace>,
                    if s.ends_with('\r') {
    #[allow(dead_code)]
    fn bench_two_timestamps(b: &mut Bencher) {
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
    fn test_samples_block() {
/// Returns the file name of the EXE if possible, otherwise the full path, or

    fn drop(&mut self) {
        let offset = self.line_col_to_offset(text, line as usize, 0);

        -> Result<CategoriesT, D::Error>
            _ => None
        self.hash(&mut hasher);

    // * Actual measurement in text layout
        let inserts = parse_subset_list("
        false
    /// than this will panic.
            Merge(0,2),
                let mut cursor = Cursor::new(&text, region.min());
                    if s.ends_with('\r') {
        client.def_style(&style.to_json(ix));
    }
                    Some(Contents::Edit {
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
                } else if click_count == Some(2) {
    /// Splits current selections into lines.
            let base_index = find_base_index(&self.revs, &other.revs);

            find.unset();
        Ok(exe_name) => {
    // revision might hold content from an undo group that would otherwise be gc'ed),
    }
            FindPrevious { wrap_around, allow_same, modify_selection } =>

    }
/// ```
        --#--
        // if self.end is inside this chunk, verify that it is a codepoint boundary
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
            self.collapse_selections(text);
        } else {
    fn build_delta_2() -> Delta<RopeInfo> {
        self.drag_state = Some(DragState { base_sel, offset, min, max });
        }
            }
            GestureType::PointSelect => {
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
                cursors.push(c - start_pos);
            utf16_count += 1;
/// # Arguments
            rendered_styles.push(sel_end as isize - sel_start as isize);
    fn merge_simple_delete_2() {
#[derive(Clone, Debug)]
    out.as_mut_slice().reverse();
    use rope::{Rope, RopeInfo};
                WrapWidth::None => (),
        let tombstones = Rope::from("27");

        self.find.clear();

    ProcessSortIndex { sort_index: i32 },
/// }
    }
    }
/// Returns all the samples collected so far.  There is no guarantee that the
        match self.breaks {
    /// inserted, including the ones that were later deleted, in the locations
    pub fn do_find_all(&mut self, text: &Rope) {
                offset = prev;
//! conceptually represents the current text and all edit history for that
        where D: Deserializer<'de>,
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            Insert(String),
    pub fn instant<S, C>(&self, name: S, categories: C)
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
        let d = engine.delta_rev_head(after_first_edit);
    trace: Option<&'a Trace>,
    /// tiny it is effectively O(n). This iterator does not allocate.
///

        b.iter(|| black_box(time::precise_time_ns()));
                    let _ = s.pop();


            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        assert_eq!(0, r.line_of_offset(a.len() - 1));
                self.select_line(text, offset, line, true),
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
        ---#--
                }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {

    }
        RopeInfo {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        Cow::from(a.into_owned() + b)
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        let trace = Trace::disabled();
impl PartialEq for Sample {

        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
    }

#[inline]

        self.scroll_to_cursor(text);
        update
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
    ///

    #[test]
}
/// * `categories` - A static array of static strings that tags the samples in
    }
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    ///
            let start = self.line_of_offset(last_text, iv.start());
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
        self.revs.reverse();

        Lines {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                if (flags & FLAG_SELECT) != 0 {
        where S: Into<StrCow>, C: Into<CategoriesT>
// limitations under the License.
    FlowInstant,

        for _i in 0..50 {
                                deletes,
            timestamp_us: ns_to_us(start_ns),
    #[serde(rename = "sort_index")]
use styles::{Style, ThemeStyleMap};
    }
            duration_us: None,
            }
            Some(offset + len_utf8_from_first_byte(b))
                                                        style_spans, line_num);
    pub fn new_disabled() -> Self {
    #[test]
    }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
            lines: 0,
            revs: vec![rev],
    FlowEnd,
    }
        Some(pos) => minsplit + pos,
            for find in self.find.iter() {
        while let Err(incomp) = prev_boundary {
    /// Toggles a caret at the given offset.
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    }
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
            find_changed: FindStatusChange::None,
                std::thread::sleep(std::time::Duration::new(0, 1000));
                pos = leaf_offset + pl.len();

    fn eq(&self, other: &Sample) -> bool {
    pub fn disable(&self) {
        assert_eq!(TEST_STR, String::from(engine.get_head()));

use rope::{Rope, RopeInfo};
/// State required to resolve a drag gesture into a selection.
        use self::MergeTestOp::*;
/// How tracing should be configured.
        let contents = match rev.edit {
}
        let plan = RenderPlan::create(height, self.first_line, self.height);

    }
categories_from_constant_array!(2);
                           style: &Style) -> usize {
    ThreadSortIndex { sort_index: i32 },
        engine.edit_rev(1, 2, first_rev, d1.clone());
    {
        Ok(Delta::from(d))
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
        assert_eq!(rope.offset_of_line(1), 3);
        if before {
                             client: &Client, style_spans: &Spans<Style>)
            Assert(2, "ab".to_owned()),

        let text_b = Rope::from("zpbj");

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            't' => SampleEventType::FlowInstant,
    {
        a.edit_str(1, 9, "era");
        b if b < 0x80 => 1,
    pub(crate) fn get_view_id(&self) -> ViewId {
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
    (out, text, tombstones, deletes_from_union)
    pub fn offset_of_line(&self, line: usize) -> usize {
        assert_eq!(1, b.line_of_offset(2));
    pub fn iter_chunks_all(&self) -> ChunkIter {
            // Snap to grapheme cluster boundary

        // the generated JSON.
        let a = Rope::from("\n");
    /// No wrapping in effect.

        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
    fn find_common_1() {
        }
/// Applies an optimization where it combines sequential revisions with the
                    }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    utf16_size: usize,

                name, categories, Some(payload.into()), start, end - start));
    // * Actual measurement in text layout
        assert_eq!(snapshot.len(), 5);
        let new_head = engine.get_head_rev_id().token();
//! text.
}

        assert_eq!(snapshot[1].name, "thread_name");
/// Replace part of a `Rope`:
        delta.serialize_field("base_len", &self.base_len)?;
/// ```
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
///     something_expensive()
    // https://github.com/serde-rs/serde/issues/1189 is fixed.

    }
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();

        }
    }

    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    /// Start of the region selected when drag was started (region is
        if let Contents::Edit {priority, inserts, .. } = r.edit {
//! conceptually represents the current text and all edit history for that
                    let (start, end) = {
                // merge logic.
    }
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            }

// Additional APIs custom to strings
                let (nl, noffset) = self.next_leaf()?;
    // this is the cost contributed by the timestamp to
impl Add<Rope> for Rope {
        let script = vec![


                        MetadataType::ThreadName { name: thread_name.to_string() },
        assert_eq!(snapshot[4].name, "y");
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        /// Used to order concurrent inserts, for example auto-indentation
    /// vertical scroll position
    }

    fn edit_rev_undo_3() {
                    let transformed_deletes = deletes.transform_expand(&s);
    fn eq_small() {
        let new_head_2 = engine.get_head_rev_id().token();




            event_type: event_type,
/// # Performance

}
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    ///
                self.start_drag(offset, offset, offset);

pub struct ByteIter<'a> {
    }
            None
            GestureType::MultiWordSelect =>
                }
    /// List of categories the event applies to.
    /// None of the find parameters or number of matches changed.

    ProcessSortIndex { sort_index: i32 },
            thread_name: None,
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
                if !inserts.is_empty() {
    #[cfg(feature = "benchmarks")]
            // with offset == 0, but be defensive.
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {

        for _i in 0..50 {
    DynamicArray(Vec<String>),
        }
        // the front-end, but perhaps not for async edits.
    fn next_grapheme_offset() {
    }
        View {
            }



pub fn samples_cloned_unsorted() -> Vec<Sample> {
            line_cache_shadow::CURSOR_VALID
    /// This function will panic if `offset > self.len()`. Callers are expected to
                } else if click_count == Some(3) {
        -#-

            }
    enum MergeTestOp {
        a.push('\n');
        let mut engine = Engine::new(Rope::from(TEST_STR));
//! An engine for handling edits (possibly from async sources) and undo. It
    #[serde(rename = "ts")]
        let new_head = engine.get_head_rev_id().token();
    fn bench_trace_closure_payload(b: &mut Bencher) {

                self.select_word(text, offset, true)
}
                },
        let start = time::precise_time_ns();
        let new_deletes_from_union = {
        -> SampleGuard
    ///
                              start_ns: u64,
        for (iv, style) in style_spans.iter() {


        }
        delta.apply(&self.text)
    /// Sorting priority between processes/threads in the view.
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    where S: serde::Serializer {
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
        // since one of the two deletes was gc'd this should re-do the one that wasn't

#[derive(PartialEq, Debug)]
            AssertMaxUndoSoFar(0,2),
                    }
/// However, anything that can be converted into a Cow string can be passed as
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    scroll_to: Option<usize>,
            first_line: 0,
        }, new_text, new_tombstones, new_deletes_from_union)
        #------
                   whole_words: bool) {

                            }

        match *self {
        assert_eq!(snapshot[8].name, "x");
        if offset == 0 {
    /// concurrently it will have count `2` so that undoing one delete but not
    pub fn lines_raw_all(&self) -> LinesRaw {
        cursor.prev_grapheme()
        let (new_text, new_tombstones) =
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        let (mut l, mut offset) = self.get_leaf()?;
/// }
        assert_eq!(1, a.line_of_offset(3));
            utf16_count += 1;
    }
            .map(|pos| pos + 1)
                    let (start, end) = {
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
                peers.push(peer);
            if let Some(ref thread_name) = sample.thread_name {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
    /// The maximum amount of space the tracing data will take up.  This does
        let end = time::precise_time_ns();

// See the License for the specific language governing permissions and

}
        self.selection = sel;
            Merge(0,1),
        where S: Into<StrCow>, C: Into<CategoriesT>
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
/// However, anything that can be converted into a Cow string can be passed as
            match reverse {
    #[test]
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            None => None
    }
/// record it.
mod sys_tid;
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    lc_shadow: LineCacheShadow,
    #[test]
///
/// could trigger incorrect behavior if they collide, so u64 is safe.
    /// Time complexity: O(log n)
            height: 10,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        };
                    // fast-forward this revision over all common ones after it
            Merge(2,0),
                    "something", &["benchmark"], || {},

            pid: sys_pid::current_pid(),
    #[test]
        }
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
        } else {
        }
    // of the union string length *before* the first revision.
    #[cfg(feature = "benchmarks")]
            base_sel: selection.clone(),
extern crate libc;
    /// point. Used to optimize undo to not look further back.
    }
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    }
    }
        self.samples.lock().unwrap().len()
                return offset;
        self.deletes_from_union_before_index(rev_index + 1, true)

            //let prev_pos = self.cursor.pos();
        -> Self
                        None
    impl MergeTestState {
    }
            CategoriesT::DynamicArray(ref self_arr) => {
        // we add the special find highlights (1) and selection (0) styles first.
}
        let a = Rope::from("a\nb\nc");
        self.len()
    }
            } else {
                        let mut line_cursor = Cursor::new(text, offset);
    // reachability calculation.
            if !selection.is_empty() {
        }

                // merge logic.

        self.iter_chunks(0, self.len())
                        sample.tid));
    fn measure(info: &RopeInfo, _: usize) -> usize {
 //additional cursor features
            Merge(0,2), Merge(1, 2),
        self.timestamp_us == other.timestamp_us &&
    utf16_count
            Merge(0,1),
            Some(ref breaks) => {
        }
        deletes: Subset,
                }
        d_builder.build()
        as_vec
    }
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
use serde::de::{Deserialize, Deserializer};
                            }
        samples[0].timestamp_us = 10;
                // merge logic.

        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);

            self.mk_new_rev(priority, undo_group, base_rev, delta);
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    }
        assert_eq!(0, b.line_of_offset(0));
            rendered_styles.push(0);

                payload: payload,
            Some(Cow::Owned(mut s)) => {
    fn bench_trace_instant_disabled(b: &mut Bencher) {
    /// tiny it is effectively O(n). This iterator does not allocate.
        for rev in &self.revs[rev_index + 1..] {
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
    fn next(s: &String, offset: usize) -> Option<usize> {
    TRACE.block_payload(name, categories, payload)
    tombstones: Rope,
    #[test]
                } else {
        let mut to_undo = BTreeSet::new();
        ]);
    pub categories: Option<CategoriesT>,
    #[serde(skip_serializing)]
}

        let first_rev = engine.get_head_rev_id().token();
                   whole_words: bool) {
    #[serde(skip_serializing_if = "Option::is_none")]
    use test::black_box;

}
            if (c > start_pos && c < pos) ||

        engine.edit_rev(0, 2, first_rev, build_delta_2());
        /// Groups related edits together so that they are undone and re-done
    pub preserve_case: bool
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        let mut sel = Selection::new();
            }
    }
        });
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

                    selection.add_region(occ);
            self.breaks = None
        let end = self.sel_regions().last().unwrap().end;
        if offset == 0 {
            Sample::new_instant("remote pid", &[], None)];

    /// The state for replacing matches for this view.
impl TreeBuilder<RopeInfo> {
            // Do it the other way on the copy
    /// after an edit is applied, to allow batching with any plugin updates.
            to_payload("some description of the trace"))));

        let trace = Trace::enabled(Config::with_limit_count(20));
    }

    Instant,
        }
        assert_eq!(soln, String::from(engine.get_head()));
        // todo: for now only a single search query is supported however in the future
    #[derive(Debug)]
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);

            FindNext { wrap_around, allow_same, modify_selection } =>
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        }

    pub fn get_head_rev_id(&self) -> RevId {
    }
        ];
        b if b < 0xe0 => 2,
                        None
        // insert a character at the beginning
        ");
impl Ord for Sample {
        // invert the changes to deletes_from_union starting in the present and working backwards
        assert_eq!(snapshot[2].name, "x");


            let _ = trace.block("test_samples_block", &["test"]);
        // position after 'f' in four
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
/// for strings, specialized for incremental editing operations. Most operations
        (Revision {
    }
        -> SampleGuard
        }
        assert_eq!(snapshot[3].name, "a");
        revs.append(&mut revs_3);
    }
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
impl From<Vec<String>> for CategoriesT {
                        Some(end) => max(0, end - 1),
        let mut ix = 0;
    fn merge_simple_delete_2() {

        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
        json!({"test": value})
/// }
        let mut selections = Vec::new();
            trace: Some(&trace),

    #[test]

    fn line_of_offset_panic() {

                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
/// assert_eq!("ello wor", String::from(&b));
            self.record(Sample::new_instant(name, categories, None));
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));

        self.revs.append(&mut new_revs);

                    inserts: ins,
        let (start, end) = iv.start_end();
                        &mut start[bi]
            Some(ref breaks) => {
}
        assert_eq!(samples[1].name, "local pid");
        let a = Rope::from("");
    fn merge_simple_delete_1() {
            Sample::new_instant("local pid", &[], None),

    type Item = u8;
    replace_changed: bool,
    ///
        let script = vec![
    type Item = u8;
    pub fn byte_at(&self, offset: usize) -> u8 {

            } else if incomp == GraphemeIncomplete::NextChunk {

/// implementation as efficient as a mutable version.
                        gc_dels = gc_dels.transform_expand(inserts);
        let mut cur_len_utf8 = 0;
            }
impl serde::Serialize for CategoriesT {
        self.timestamp_us == other.timestamp_us &&
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        last_line += if last_col > 0 { 1 } else { 0 };
        self.find.iter().map(|find| {

                } else {

    for &b in s.as_bytes() {
                let offset = self.selection[0].start;
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(5, a.offset_of_line(3));
    }
        let params = json!({
        // rebase the delta to be on the head union instead of the base_rev union
            self.record(Sample::new_duration(
        soln.push('f');
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
            return self.revs.len();
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    #[serde(skip_serializing_if = "Option::is_none")]
                              to_payload("test_get_samples"));
                   r.lines_all().collect::<Vec<_>>());
    fn empty_subset_before_first_rev(&self) -> Subset {
        let mut result = Cow::from("");
pub type RopeDelta = Delta<RopeInfo>;
        let chars_left = (edits-max_undos)+1;
        // even though the actual sampling order (from timestamp of
            trace.closure("test_samples_closure", &["test"], || {});
            GestureType::RangeSelect => self.select_range(text, offset),
                (!region.is_upstream() && c == start_pos) ||
        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        self.set_selection_raw(text, selection);
        assert_eq!(None, a.next_codepoint_offset(10));
                    e.edit_rev(p, u, head, delta.clone());

        let undone = self.undone_groups.contains(&undo_group);
                         hls: &[(usize, usize)],
    /// Generate line breaks based on width measurement. Currently batch-mode,
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        }
    }

                        let start_line = seg.our_line_num;
    fn accumulate(&mut self, other: &Self) {
            &self.deletes_from_union, &old_deletes_from_union);
    TRACE.samples_cloned_unsorted()
}

        }

            s.as_bytes()[offset - 1] == b'\n'

    fn next(&mut self) -> Option<&'a str> {

                if s.ends_with('\n') {
        }
///

        // since character was inserted after gc, editor gcs all undone things
// limitations under the License.
          F: FnOnce() -> R
        for _ in 0..(edits-max_undos) {
        }
    TRACE.samples_cloned_sorted()
                          payload: Option<TracePayloadT>) -> Self

impl From<Rope> for String {

    /// The name of the event to be shown.
}
                metadata_sort_index: None,
        }
            // trans-expand other by expanded so they have the same context
        }).unwrap_or(text.len());
        b.push_str(new);
    scroll_to: Option<usize>,
        b.push('\n');
        assert_eq!(None, a.prev_codepoint_offset(0));
        self.replace.clone()
            engine.undo(to_undo.clone());
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
        delta.apply(&self.text)

        self.tombstones = new_tombstones;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
pub type TracePayloadT = serde_json::Value;
        assert_tokens(&rope, &[

        assert_eq!(TEST_STR, String::from(engine.get_head()));
    fn build_delta_2() -> Delta<RopeInfo> {
                    };
                self.select_line(text, offset, line, true),
                            edit: Undo {
        ix
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    }
/// * `name` - A string that provides some meaningful name to this sample.
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
        b.iter(|| {
/// None if an irrecoverable error occured.
    {
        MergeTestState::new(3).run_script(&script[..]);

    /// Returns the largest undo group ID used so far
//! conceptually represents the current text and all edit history for that
    fn test_ser_de() {
                el.end()
        b.push(self);
        assert_eq!(snapshot[0].name, "process_name");
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        fn run_script(&mut self, script: &[MergeTestOp]) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        -#-
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
        engine.gc(&to_undo);
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
                        let n_skip = seg.their_line_num - line_num;
                    text.slice_to_string(region.min(), region.max())

///
            Some(b)
        b if b < 0x80 => 1,
                    if !inserts.is_empty() {
use std::borrow::Cow;
#[inline]
            None => {
        }
                          payload: Option<TracePayloadT>) -> Self
            None
        /// The subset of the characters of the union string from after this
        let first_rev = &self.revs.first().unwrap();
        RopeInfo {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                Contents::Undo { .. } => panic!(),
                max_undo_so_far: i+1,

            if !s.is_empty() {
/// * `name` - A string that provides some meaningful name to this sample.
            Assert(2, "ab".to_owned()),
            let b_to_merge = &other.revs[base_index..];

struct DeltaOp {
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        samples
/// assert_eq!("llo wo", String::from(c));
impl MetadataType {
    #[bench]
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {

        self.push_str(&other[start..end]);
        false
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        for sample in all_samples.iter() {
    #[test]
            Scroll(range) => self.set_scroll(range.first, range.last),
    pub fn get_head(&self) -> &Rope {
            "n": n,
            Assert(0, "b".to_owned()),
    {
    } else {
            }
                if s.ends_with('\n') {
        let first_rev = &self.revs.first().unwrap();
        self.deletes_from_union = deletes_from_union;

        ---#--
const FLAG_SELECT: u64 = 2;
                Some(i) => {
        #[serde(rename_all = "snake_case")]
    }
/// A rope data structure.
//! There is also a full CRDT merge operation implemented under

pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
struct DeltaOp {
            if inserts.is_empty() {
        let mut samples = self.samples_cloned_unsorted();
        let mut revs = basic_insert_ops(inserts_1, 1);
    /// Generate line breaks based on width measurement. Currently batch-mode,
        if self.is_enabled() {
                // should be removed in favor of do_gesture
        self.revs.append(&mut new_revs);
                            max_undo_so_far: rev.max_undo_so_far,
        rendered_styles
        // spam cmd+z until the available undo history is exhausted
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
        memrchr(b'\n', &s.as_bytes()[..offset])
                inserts: new_inserts,
/// Transform `revs`, which doesn't include information on the actual content of the operations,
    {
            as_vec.push(Sample::new_metadata(

    /// Garbage collection means undo can sometimes need to replay the very first
//! text.
categories_from_constant_array!(7);
                Contents::Edit {inserts, ..} => inserts,



        let initial_rev = engine.get_head_rev_id().token();
/// std::mem::drop(trace_guard); // finalize explicitly if
            Find { chars, case_sensitive, regex, whole_words } =>
        let mut engine = Engine::empty();
            "styles": styles,
    fn test_get_samples_nested_trace() {
    }
#[derive(PartialEq, Debug)]
}
            let b = s.as_bytes()[offset];
        }

    if a.is_empty() {
impl Metric<RopeInfo> for LinesMetric {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        --#-
/// # Examples
        };
        s.is_char_boundary(offset)
impl Serialize for Rope {
        if self.is_enabled() {
///     0
    }
        for i in ((edits-max_undos)..edits).rev() {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },

            Assert(2, "b".to_owned()),
        let r = r + Rope::from(&b[MIN_LEAF..]);
                    if undone_groups.contains(undo_group) {
    }

                }
        let mut a = String::new();
                    to_payload(("some description of the closure")))));
        }

        // 1 MB
                (drag_state.max, min(offset, drag_state.min))
    #[test]
    fn arr_eq(&self, other: &[&'static str]) -> bool {
    }
    pub preserve_case: bool
        let rope = Rope::from("hi\ni'm\nfour\nlines");
use std::str;

            // TODO: on double or triple click, quantize offset to requested granularity.
        next_boundary.unwrap_or(None)

            self.record(Sample::new_duration(
            soln.push('b');
/// have to be considered in `rebase` substantially for normal editing
            Copy(usize, usize),

    }
                let (pl, poffset) = self.prev_leaf()?;
    #[test]
            None
            //leaf.len() - start_pos
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    #[bench]
        }).collect()
        if self.is_enabled() {

    fn bench_get_pid(b: &mut Bencher) {
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    }
}
            find.find_status(matches_only)
            duration_us: Some(ns_to_us(duration_ns)),
                        gc_dels = new_gc_dels;
    max_undo_so_far: usize,
/// ```rust
    /// vertical scroll position
                        first_sample_timestamp,
        }

// easily delta-compressed later.
                    priority, undo_group,
    fn merge_priorities() {
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },

categories_from_constant_array!(8);
    #[bench]
            AssertMaxUndoSoFar(0,2),
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    fn can_fragment() -> bool {
                sel

impl Hash for Sample {
        let inserts = parse_subset_list("
        }
            self.start_drag(offset, offset, offset);
                                toggled_groups: &toggled_groups - gc_groups,
//

    // encourage callers to use Cursor instead?
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
impl<'a> Drop for SampleGuard<'a> {
#[macro_use]
    /// The line ending is stripped from the resulting string. The final line ending
                }
                if is_base {
    /// want to set the process name (if provided then sets the thread name).
    /// Selects all find matches.
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        self.selection = sel;


        // multiple queries; select closest occurrence
        assert!(leaf.is_char_boundary(end));
    }
        let trace = Trace::disabled();
        } else {
            },
    pub fn token(&self) -> RevToken {
    }
                    // we don't want new revisions before this to be transformed after us

}
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    }
}
            trace.instant("test_samples_pulse", &["test"]);
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        if self.len() != other.len() {
        let trace = Trace::disabled();
        }

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            }
/// Represents a transform from one rope to another.
        Self {
        -> Self
        }
    /// selection edges).
    }
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
        match *self {
        }
/// for strings, specialized for incremental editing operations. Most operations
    }
        let trace = Trace::disabled();
            Assert(1, "apbj".to_owned()),
/// creation.  Roughly corresponds to start_ns but instead there's a
            update["lines"] = json!(lines);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },

    #[bench]

    utf16_count
    //TODO: implement lines_raw using ranges and delete this
    /// return if a delete is un-done or an insert is re- done.
impl PartialOrd for Sample {
        if self.find_changed != FindStatusChange::None {
                        }
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {

        let a = Rope::from("a\r\nb\r\nc");
        engine.edit_rev(1, 3, new_head_2, d3);
        match *self {
//
    /// Selects the given region and supports multi selection.
            match memchr(b'\n', &s.as_bytes()[offset..]) {
                              categories: C,
        let mut update = json!({
    #[test]
    {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());

    fn offset_of_line_small() {
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
                payload: payload,
/// fn something_expensive() {
                        if !last_selection.is_caret() {
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    end: usize,
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
                peer.set_session_id(((i*1000) as u64, 0));
                MetadataType::ProcessName {name: exe_name},
        let first_rev = engine.get_head_rev_id().token();
            't' => SampleEventType::FlowInstant,
        let rev = Revision {

                        let offset = self.offset_of_line(text, start_line);
        let trace = Trace::enabled(Config::with_limit_count(10));
}
            // shouldn't be called with this, but be defensive
            sample: Some(Sample::new_duration_marker(
        if !gc_dels.is_empty() {
        for op in &delta_ops {
        self.subseq(iv)
categories_from_constant_array!(5);
            let _x = trace.block("something", &[]);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
}
                      delta: &Delta<RopeInfo>, client: &Client,
    }
    #[test]
use xi_rope::spans::Spans;
// Unless required by applicable law or agreed to in writing, software
            Rope::from(s1.clone()),

    fn measure(_: &RopeInfo, len: usize) -> usize {
            if !s.is_empty() {
                s.len()
        self.revs.last().unwrap().rev_id
impl Serialize for Rope {
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
/// The result of the closure.
        trace.record(guard.sample.as_ref().unwrap().clone());
}
    /// Imagine a "union string" that contained all the characters ever
        self.timestamp_us == other.timestamp_us &&
    }
    utf16_count
        engine.edit_rev(0, 1, first_rev, build_delta_1());
        let a = Rope::from("a\nb\n");
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),

            }
    pub fn max_undo_group_id(&self) -> usize {


            // I think it's a precondition that this will never be called
        while let Err(incomp) = prev_boundary {
            None => return "",
        let mut to_undo = BTreeSet::new();
                    }
    // trace_block()/trace_closure
                }

use rpc::{GestureType, MouseAction, SelectionModifier};
        if self.current.is_none() {


        assert_eq!(utf16_units, 17);
            Scroll(range) => self.set_scroll(range.first, range.last),
                if !inserts.is_empty() {

    }

    /// Move the selection by the given movement. Return value is the offset of
        let result = closure();
    ProcessSortIndex { sort_index: i32 },
    }
        let trace = Trace::disabled();
                    // can only happen on empty input
pub struct Replace {
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
}
    }
    fn gc_6() {
}
        // rebase delta to be on the base_rev union instead of the text
        count_newlines(&s[..in_base_units])

        if line < self.first_line {

            offset -= 1;
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
        assert_eq!(1, a.line_of_offset(2));
    /// point. Used to optimize undo to not look further back.
            text: Rope::default(),
        let mut offset = 0;
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    type Output = Rope;
    pub fn slice(&self, start: usize, end: usize) -> Rope {
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    fn delta_rev_head_3() {
    ObjectDestroyed,
        match cmd {
        assert_eq!(utf16_units, 17);
        count_utf16_code_units(&s[..in_base_units])
/// # Performance
            }

        b if b < 0xf0 => 3,

#[must_use]
    }
        #------
        true
        } else {
// should make this generic, but most leaf types aren't going to be sliceable

    /// The default amount of storage to allocate for tracing.  Currently 1 MB.

        if !self.is_point_in_selection(offset) {
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
    #[test]
    }
    fn bench_single_timestamp(b: &mut Bencher) {
extern crate log;
    // TODO: replace this with a version of `lines` that accepts a range
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
    fn merge_idempotent() {
use unicode_segmentation::GraphemeCursor;
            thread_name: Sample::thread_name(),
            None => return "",
        self.hash(&mut hasher);
// Copyright 2016 The xi-editor Authors.
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
    /// Constructs an instantaneous sample.
    //
            if let Edit { priority, ref inserts, .. } = r.edit {
    }


}

            }),
    use rope::{Rope, RopeInfo};

        self.subseq(iv)
/// # Examples
            pid: sys_pid::current_pid(),
        // current recording mechanism should see:
            to_undo.insert(i+1);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    /// All the selection regions other than the one being dragged.
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    /// Selects a specific range (eg. when the user performs SHIFT + click).
}
        revs.append(&mut revs_3);

/// let a = Rope::from("hello world");
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
        assert_eq!(None, a.next_grapheme_offset(17));
    fn delta_rev_head_2() {
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
            self.lc_shadow.edit(start, end, new_end - start);
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
/// required). Mutations are generally copy-on-write, though in-place edits are
    {
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
    fn empty_subset_before_first_rev(&self) -> Subset {
}
                return false;
/// Enable tracing with the default configuration.  See Config::default.
            scroll_to: Some(0),
    }
        a.lines_all().collect::<Vec<_>>());
    use serde_test::{Token, assert_tokens};
    }
        if !self.is_point_in_selection(offset) {
            return;
    pub fn merge(&mut self, other: &Engine) {
        });
    pub fn prev_codepoint(&mut self) -> Option<char> {

    }
                rev_id: basic_rev(i),
    /// description for the invariant.
            GestureType::LineSelect =>
    fn arr_eq(&self, other: &Rhs) -> bool;
                // should be removed in favor of do_gesture
        RevId { session1: 1, session2: 0, num: i as u32 }
                             client: &Client, style_spans: &Spans<Style>)
            rendered_styles.push(1);
        }
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
                self.select_line(text, offset, line, true),
    type Item = &'a str;
        let mut cursor = Cursor::new(self, offset);
            b.push_str(&c);
        }
}
///
                    "something", &["benchmark"],
}

        self.revs.iter().enumerate().rev()
const MAX_LEAF: usize = 1024;
        self.size = size;
            timestamp_us: ns_to_us(timestamp_ns),
        };
    pub fn is_point_in_selection(&self, offset: usize) -> bool {

    #[bench]
    /// Toggles a caret at the given offset.
            None
        }
            trace: Some(&trace),
}

        assert_eq!(correct, rebased_inserts);
                s.len()
        }
        delta.serialize_field("base_len", &self.base_len)?;
        cursor.is_boundary::<BaseMetric>()
        let trace = Trace::enabled(Config::with_limit_count(10));
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
/// Represents the current state of a document and all of its history
/// returned value is dropped.  `trace_closure` may be prettier to read.
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
                    }
    }
                self.select_line(text, offset, line, true),
            AssertMaxUndoSoFar(1,3),
        text = new_text;
    }
        } else if self.first_line + self.height <= line {
    }
    /// point. Used to optimize undo to not look further back.
/// Enable tracing with a specific configuration. Tracing is disabled initially
    }
        Self {
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            trace: None,

        let (iv, new_len) = delta.summary();
    cursor: Cursor<'a, RopeInfo>,
///
        let mut engine = Engine::new(Rope::from(""));
impl SampleEventType {
        engine.undo([1].iter().cloned().collect());
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
                    deletes: deletes.clone(),
                SelectionModifier::Add => {
                });

                    if invert_undos {
    /// Determine whether `offset` lies on a codepoint boundary.
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
                        let n_skip = seg.their_line_num - line_num;
        assert!(a.slice(0, 0) == empty);
        for _ in 0..in_measured_units {
        let _t = trace_block("View::wrap_width", &["core"]);
            Assert(0, "cbd".to_owned()),
}
        // A with ring, hangul, regional indicator "US"
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
        let mut soln = String::from("h");
    Width(f64),

        ---#--

            Assert(1, "pb".to_owned()),
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
            self.start_drag(offset, offset, offset);
        let (metadata_name, sort_index) = meta.consume();
        assert_eq!(1, expand_by[0].0.priority);
                    } else {
            name: sample_name,
    }
            }),
                        word_cursor.select_word()
        assert_eq!(trace.get_samples_limit(), 11);
    fragment: &'a str
        // a, b, y, z, c, x
        b.push(rhs);
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
}
///
                        hls.push((sel_start_ix, sel_end_ix));
    fn gc_3() {
    fn eq(&self, other: &CategoriesT) -> bool {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        let sample_name = to_cow_str(meta.sample_name());
    }
    #[test]
///
        a.edit_str(1, 9, "era");
            engine.undo(to_undo.clone());
            self.record(Sample::new_duration(
        for rev in old_revs.into_iter().rev() {
//! It enables support for full asynchronous and even peer-to-peer editing.
        engine.gc(&gc);
        }

            'e' => SampleEventType::AsyncEnd,
                }
            }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
}
        let d = engine.delta_rev_head(first_rev);
        ];
        assert_eq!(Some(2), b.next_codepoint_offset(0));

    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    #[serde(skip_serializing)]
                        }
        assert_eq!(snapshot[7].name, "z");


//
                            (inserts.transform_shrink(&gc_dels),
    }
            type Value = CategoriesT;
                    result = cow_append(result, &self.fragment[.. i + 1]);
/// * `name` - A string that provides some meaningful name to this sample.
                rev_id: basic_rev(i+1),
            offset -= 1;
        let len = match first_rev.edit {
    }
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
            match seg.tactic {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let res = find_common(&a, &b);
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
                                  style_spans, &plan, pristine);
        for _ in 0..in_measured_units {

                self.select_word(text, offset, true)
        let (leaf, offset) = match self.get_leaf() {
            // shouldn't be called with this, but be defensive
}
    /// Time complexity: technically O(n log n), but the constant factor is so
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        engine.gc(&gc);
        let end = self.sel_regions().last().unwrap().end;
        }).collect()
    {
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
                        ops.push(self.build_update_op("copy", None, seg.n));
                    // fast-forward this revision over all common ones after it
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    }
/// ```
        client.update_view(self.view_id, &params);
}
#[derive(Serialize, Deserialize, Debug)]
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// End of the region selected when drag was started.
        }
        where S: Serializer
// You may obtain a copy of the License at
/// record it.
        let a = Rope::from("a\nb\nc");
        let search_query = match self.selection.last() {
}

        Self {
    }

        Ok(Rope::from(s))
    }
/// ```
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
        let inserts = parse_subset_list("

pub enum CategoriesT {
        memrchr(b'\n', &s.as_bytes()[..offset])
        trace.closure_payload("y", &["test"], || {},
// line iterators
            cur_len_utf16 += u.len_utf16();
                metadata_sort_index: None,
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    /// Get the line range of a selected region.
        let mut a = Rope::from("hello world");
    /// This uniquely represents the identity of this revision and it stays
            s.as_bytes()[offset - 1] == b'\n'
            SampleEventType::AsyncStart => 'b',
    }
    pub fn set_scroll(&mut self, first: i64, last: i64) {
            }
    }
    }
        // likely be improved.

fn initial_revision_counter() -> u32 {
            Merge(4,3),
        let line = line as usize;
        b if b < 0xe0 => 2,

    }
        }
use std::ops::Add;
    }

                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    view_id: ViewId,

        let mut selections = Vec::new();
    }
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
}
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            }
impl Eq for CategoriesT {}
///

    fn from(r: &Rope) -> String {
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
                self.push_leaf(s.to_owned());
        assert_eq!(snapshot[4].name, "y");
}
    fn len(&self) -> usize {
    type Output = Rope;
        let edit_iv = Interval::new_closed_open(start, end);
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    let mut s = Subset::new(head_len);
use std::collections::HashMap;
///
                None => {
            return false;
        // x, a, y, b, z, c
                CategoriesT::StaticArray(c)
//! CRDT implementation techniques, because all operations are serialized in
        let (start, end) = {
        // spam cmd+z until the available undo history is exhausted
    /// Move the selection by the given movement. Return value is the offset of
extern crate log;
        if let Some((l, offset)) = self.get_leaf() {

        }
use client::Client;
/// assert_eq!("llo wo", String::from(c));
                }
    fn compute_transforms_1() {
                        undone_groups = Cow::Owned(new_undone);
            Assert(3, "ab".to_owned()),
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    }
        use self::ViewEvent::*;
    fn next(&mut self) -> Option<&'a str> {
    /// if there is not at least one edit.
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
            pid: sys_pid::current_pid(),

        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
/// Enable tracing with the default configuration.  See Config::default.
    }
                if !region.is_caret() {
}
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
    fn eq_med() {
        cursor.next::<BaseMetric>()
                return None;
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        if self.is_enabled() {
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);

        selection.add_region(region);
//! text.
    /// The selection state for this view. Invariant: non-empty.
/// However, anything that can be converted into a Cow string can be passed as
        }


        }
        }

        let line = self.line_of_offset(text, offset);
        if offset == s.len() {
    /// than this will panic.
#[inline]
}
            }
        self.lines(0, self.len())
                        line_num = seg.their_line_num + seg.n;
            }
        let b_rope = Rope::from(&b);
        use self::ViewEvent::*;
        assert_eq!(utf16_units, 17);
            None
            }

        deserializer.deserialize_str(CategoriesTVisitor)
    pub fn set_dirty(&mut self, text: &Rope) {
    use rope::{Rope, RopeInfo};
                        let mut line_cursor = Cursor::new(text, offset);
    {
    fn accumulate(&mut self, other: &Self) {
        // TODO: refine for upstream (caret appears on prev line)
/// an argument.
    #[test]
    fn edit_rev_undo() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
// Licensed under the Apache License, Version 2.0 (the "License");

                   whole_words: bool) {
            Assert(2, "ab".to_owned()),
            for (i,rev) in self.revs.iter().enumerate().rev() {
    fn delta_rev_head_2() {
        // ensure that when the samples are sorted by time they come out in a
    }
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);

        assert_eq!(1, expand_by.len());
        ");

    }
    // Delta that deletes the right bits from the text
/// With `json_payload` feature:
    }
                if !inserts.is_empty() {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
        let closest_occurrence = self.find.iter().flat_map(|x|
            .map_or(0, |ref s| s.timestamp_us);
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        memrchr(b'\n', &s.as_bytes()[..offset])

/// an argument.
        let first_rev = engine.get_head_rev_id().token();
        revs.append(&mut revs_3);
/// Stores the tracing data.
        let mut a = String::new();
struct DeltaOp {
    }
use xi_rope::tree::Cursor;
/// * `categories` - A static array of static strings that tags the samples in
/// version of Ropes, and if there are many copies of similar strings, the common parts
        assert_eq!(snapshot[4].name, "z");
        }

    }
                    } else {
                self.drag_state = None;
///
        engine.edit_rev(1, 2, new_head, d2);
}
            match rev.edit {
            let mut sel = drag_state.base_sel.clone();

            match reverse {
    fn edit_rev_simple() {
        let start = self.line_col_to_offset(text, line, 0);

            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),

    pub fn join(&self, sep: &str) -> String {
    /// 96 bits which is more than sufficient for this to never happen.
        let ix = style_map.add(style);
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };

    TRACE.closure(name, categories, closure)
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
    /// The current contents of the document as would be displayed on screen
        Subset::new(len)
        assert_eq!(Some(8), a.next_grapheme_offset(0));
    // TODO: maybe refactor this API to take a toggle set
        assert_eq!("#-####-", &subset_str);
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
                self.run_op(op);
    }
/// ```rust
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        assert_eq!(rope.offset_of_line(4), rope.len());
                }


        deletes_bitxor: Subset,
            }


            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
    /// Imagine a "union string" that contained all the characters ever
        },

    {
}
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
            {

            rev_id: RevId { session1: 0, session2: 0, num: 0 },
    #[inline]
        match rev.edit {
    fn merge_max_undo_so_far() {

        let deletes_from_union = Subset::new(0);
        }
                                undo_group,
    }
/// }
            if let Some(pos) = pos { start_of_line.set(pos) }
/// Also note: in addition to the `From` traits described below, this module
            Merge(0,1),
            Merge(0,1), // the merge from the whiteboard scan
                            if !deletes.is_empty() {
        plan.request_lines(first_line, last_line);
        where S: Into<StrCow>, C: Into<CategoriesT>
                    for (ei, e) in self.peers.iter().enumerate() {
    ///
        -##-
        let first_rev = engine.get_head_rev_id().token();
            Assert(0, "b".to_owned()),
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
    1
    CompleteDuration,
        let mut engine = Engine::new(Rope::from(TEST_STR));
        self.len() >= MIN_LEAF
    /// What kind of sample this is.

        self.timestamp_us.cmp(&other.timestamp_us)
        while !leaf.is_char_boundary(end) {
        let start = time::precise_time_ns();

                    return None;
}
            AssertMaxUndoSoFar(0,2),
    pub fn do_find_all(&mut self, text: &Rope) {
        memrchr(b'\n', &s.as_bytes()[..offset])

        all_samples.push_back(sample);
            Revision {
impl View {
#[derive(Serialize, Deserialize, Debug)]
            }
        let mut b = line_cache_shadow::Builder::new();
        self.deletes_from_union_before_index(rev_index + 1, true)
    /// the heap, counters, etc); just the data itself.
    }
                         first_line: usize, last_line: usize, pristine: bool) {

        // TODO: want to let caller retain more rev_id's.
//See ../docs/MetricsAndBoundaries.md for more information.
    }
        assert_eq!(snapshot[1].name, "thread_name");
}
        MergeTestState::new(3).run_script(&script[..]);
        let mut leaf_offset = pos - offset;
    /// a point that should be scrolled into view.
            Assert(0, "ab".to_owned()),
        let undone = self.undone_groups.contains(&undo_group);
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    }
                    if s.ends_with('\r') {

    }
                sel.add_region(SelRegion::new(last.start, offset));
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
                }
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);

    /// The `pristine` argument indicates whether or not the buffer has

/// discussion on payload.
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
            to_payload("some description of the trace"))));
    fn to_payload(value: &'static str) -> TracePayloadT {
    #[test]
    pub metadata_name: Option<StrCow>,
                            Cursor::new(breaks, offset));
                where E: serde::de::Error
    }

        where D: Deserializer<'de>,
        undo_group: usize,
            selection: SelRegion::caret(0).into(),
        assert_eq!(0, a.line_of_offset(0));
                let categories = v.split(",").map(|s| s.to_string()).collect();
            self.event_type == other.event_type &&
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    out.as_mut_slice().reverse();
    fn prev_codepoint_offset_small() {
            if let Some(pos) = pos { start_of_line.set(pos) }


            if self.fragment.is_empty() {
            self.first_line = line;
        };
          F: FnOnce() -> R
    identity_op,
pub struct ByteIter<'a> {
            ix = iv.end() as isize;
        let mut update = json!({
#[must_use]
        let a = Rope::concat(
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    pub fn start_drag(&mut self, offset: usize, min: usize, max: usize) {
        // rebase the deletion to be after the inserts instead of directly on the head union
pub type Rope = Node<RopeInfo>;
        assert_eq!(rope.line_of_offset(0), 0);
use interval::Interval;
        let first_rev = engine.get_head_rev_id().token();
    fn measure(info: &RopeInfo, _: usize) -> usize {
                    let sel_start = cursor.pos();
            return false;

        } else {
                SelectionModifier::AddRemovingCurrent => {
    /// Merge the new content from another Engine into this one with a CRDT merge
        let initial_rev = engine.get_head_rev_id().token();
        Rope::from_str(s.as_ref()).unwrap()
    }
        gc_scenario(4,3);
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        }
        }
                for &region in rest {
            }
/// Applies an optimization where it combines sequential revisions with the
    }
    fn can_fragment() -> bool { false }
    #[derive(Debug)]

            SelectionForFind { case_sensitive } =>
        assert_eq!(trace.get_samples_count(), 0);
        assert_eq!(rope.offset_of_line(0), 0);
    /// Tracks whether there has been changes in find results or find parameters.
        // expand by each in expand_by
        let invalid = if all_caret {
            name: name.into(),
    fn consume(self) -> (Option<String>, Option<i32>) {

}
        assert_eq!(snapshot[3].name, "a");
        assert_eq!("herald", String::from(a));
                        })
        let expand_by = compute_transforms(revs);
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        }
        };
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        let mut update = json!({
    fn test_ser_de() {
    /// in the range of 511-1024 bytes.
            Assert(1, "ab".to_owned()),
/// # Returns


                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
    pub preserve_case: bool
        let res = find_common(&a, &b);
        // NOTE 2: from_micros is currently in unstable so using new
        assert_eq!("1234567", String::from(r));
            Assert(1, "pbj".to_owned()),
        assert_eq!(snapshot[8].name, "c");
        ]);
                MetadataType::ProcessName {name: exe_name},
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
/// Indicates what changed in the find state.
            enabled: AtomicBool::new(false),
/// * `categories` - A static array of static strings that tags the samples in

    fn from_str(s: &str) -> Result<Rope, Self::Err> {
            offset += 1;
            None
    }
            cur_len_utf8 += u.len_utf8();

    }
    }
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
}
                el.serialize_field(end)?;
    pub fn disabled() -> Self {
    }
            edit: Contents::Edit {
    #[test]
    }
                max_undo_so_far: i,
use std::cmp::{min,max};

        trace.instant("4", &["test"]);
        View {
    pub fn get_head_rev_id(&self) -> RevId {
                     modify_selection: &SelectionModifier) {
                continue;
#[inline]
    for &b in s.as_bytes() {
    TRACE.instant(name, categories);
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },

        let first_rev = engine.get_head_rev_id().token();
            duration_us: Some(ns_to_us(duration_ns)),
    type L = String;
        self.pending_render
    /// Tracks whether the replacement string or replace parameters changed.
        let ix = style_map.add(style);

mod tests {
            Revision {
    }
    fn compute_deltas_1() {
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
                }
        assert_eq!(snapshot[1].name, "thread_name");
        engine.edit_rev(1, 1, first_rev, build_delta_1());

    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        assert!(r.clone().slice(0, a.len()) == a_rope);
    enabled: AtomicBool,
        guard
            Merge(4,3),
            //if self.cursor.is_boundary::<BaseMetric>() {
    }
        let mut engine = Engine::empty();
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.

            pending_render: false,
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// The selection state for this view. Invariant: non-empty.
        // clamp to end of line
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    fn build_delta_2() -> Delta<RopeInfo> {
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
    /// Imagine a "union string" that contained all the characters ever
            'i' => SampleEventType::Instant,
categories_from_constant_array!(9);
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

        let mut b = String::new();
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        }
            rendered_styles.push(sel_end as isize - sel_start as isize);
    fn is_boundary(s: &String, offset: usize) -> bool {
                            (inserts, deletes)
    /// via process_name/thread_name respectively.
#[derive(Clone, Copy)]

/// patterns. Any large runs of typing in the same place by the same user (e.g
        engine.edit_rev(1, 1, initial_rev, d1.clone());
                last_priority = Some(priority);
            while !s.is_char_boundary(offset - len) {
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
///
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
    }
        let r = r + Rope::from(&b[MIN_LEAF..]);

            match memchr(b'\n', &s.as_bytes()[offset..]) {
            Assert(0, "b".to_owned()),
                peer.set_session_id(((i*1000) as u64, 0));
    /// should be as unlikely to collide as two random u64s.
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

            ix = iv.end() as isize;
    /// from the rope.
    /// List of categories the event applies to.

pub type TracePayloadT = StrCow;
        assert_eq!(utf16_units, 17);
            find: Vec::new(),
    #[test]
        let mut sel = Selection::new();
    /// Return the byte offset corresponding to the line number `line`.
    fn undo_2() {
    fn from(s: T) -> Rope {
/// std::mem::drop(trace_guard); // finalize explicitly if
    fn goto_line(&mut self, text: &Rope, line: u64) {
            let new_region = region_movement(movement, region, self,
        /// Groups related edits together so that they are undone and re-done

        assert_eq!(2, expand_by[1].0.priority);
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
use std::ops::Range;
    ///
    fn utf16_code_units_metric() {

            return ix;
    }
    #[test]

/// # Performance
    }
        // additional tests for line indexing
        assert_eq!(0, b.line_of_offset(0));
    struct MergeTestState {
                Some(Cow::from(s))

        ");
        let rearranged = rearrange(&revs, &base, 7);
        if let Some(new_scroll_pos) = self.scroll_to.take() {

        self.deletes_from_union_before_index(rev_index + 1, true)
            duration_us: None,
    #[cfg(feature = "benchmarks")]
        assert_eq!("#-####-", &subset_str);
            },
    /// the same even if it is rebased or merged between devices.
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },

                        deletes: transformed_deletes,
        where S: Serializer
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        self.scroll_to_cursor(text);
///
        -> Self
    #[test]
                        gc_dels = gc_dels.transform_expand(inserts);
            if let Edit { priority, ref inserts, .. } = r.edit {
        let first = max(first, 0) as usize;
            fragment: ""
    pub fn with_limit_count(limit: usize) -> Self {
        match self.inner.next() {
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));

                None => {

        b.iter(|| {
    pub fn new(initial_contents: Rope) -> Engine {
        for &region in self.sel_regions() {
                                deletes,
    /// Time complexity: O(log n)
                    s = &s[..s.len() - 1];
            // copy the current state
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
            Assert(1, "apbj".to_owned()),
            Assert(0, "acrpbdzj".to_owned()),
                }
    fn from_base_units(_: &String, in_base_units: usize) -> usize {
                max_undo_so_far: i+1,
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).

}
///
        trace.instant("5", &["test"]);
        let replacement = match self.selection.last() {
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
    fn test_samples_pulse() {
/// let mut a = Rope::from("hello world");
    }
        self.set_selection(text, sel);
    }


    }
            Assert(0, "zacpb".to_owned()),
            sample: None,
            self.name == other.name &&
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        for seg in self.lc_shadow.iter_with_plan(plan) {
    pub fn prev_codepoint(&mut self) -> Option<char> {
///
        let trace = Trace::disabled();
// you may not use this file except in compliance with the License.
        }
    /// An arbitrary payload to associate with the sample.  The type is
    /// method to be fast even when the selection is large.
        assert_eq!(snapshot[0].name, "process_name");
        struct RopeDelta_ {
/// bytes required to represent the codepoint.
    ($num_args: expr) => {

            new_deletes = new_deletes.transform_expand(&new_inserts);
        let inserts_2 = parse_subset_list("
    }
            // with offset == 0, but be defensive.
                (!region.is_upstream() && c == start_pos) ||
                        undone_groups = Cow::Owned(new_undone);
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    pub name: StrCow,
        let revs = basic_insert_ops(inserts, 1);
// Licensed under the Apache License, Version 2.0 (the "License");

    fn edit_rev_undo_2() {
        if !gc_dels.is_empty() {
        if self.find.is_empty() {
/// patterns. Any large runs of typing in the same place by the same user (e.g
    #[serde(skip_serializing_if = "Option::is_none")]
            Merge(4,3),
    pub fn new_duration_marker<S, C>(name: S,
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        assert_eq!(b, String::from(a));
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);

                metadata_sort_index: None,
        let correct = parse_subset_list("
            while !s.is_char_boundary(offset - len) {
                    return None;
        let contents = Contents::Edit {
            // cursor

    }
            match modify_selection {
            },
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
    }
        ");
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
/// from the new revisions on the left.
            }
            Assert(0, "acpbdj".to_owned()),
        as_vec
    #[test]
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
    }
            edit: Contents::Edit {
        assert_eq!(1, expand_by[0].0.priority);
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        }
    pub fn new(initial_contents: Rope) -> Engine {
/// ```

                MergeTestOp::Assert(ei, ref correct) => {

    fn gc_5() {
            None
        assert_eq!(0, b.line_of_offset(0));

            utf16_size: count_utf16_code_units(s),
                    } else {
            Assert(2, "adfc".to_owned()),
            Rope::concat(
    fn test_samples_block() {
        });
            SelectionForReplace => self.do_selection_for_replace(text),
    fn arr_eq(&self, other: &Rhs) -> bool;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        delta.apply(&self.text)
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
        assert!(empty == empty);
pub fn is_enabled() -> bool {
        // move deleted or undone-inserted things from text to tombstones
        assert_eq!(None, a.prev_grapheme_offset(0));
        self.scroll_to = Some(end);
        min
    for op in b_new {

        } else {
            inner: self.iter_chunks(start, end),
        !self.selection.regions_in_range(offset, offset).is_empty()
        }


    DurationEnd,
            } else {
            return Vec::with_capacity(0);
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            match rev.edit {
    fn test_samples_closure() {
                                                                0, "copy", 2)?;
                self.find_changed = FindStatusChange::All;
        for r in &self.revs[ix + 1..] {
            }
    }
            Merge(1,0),

impl<'a> Drop for SampleGuard<'a> {
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
        // NOTE 2: from_micros is currently in unstable so using new

            categories: Some(categories.into()),
        assert_eq!(samples[0].name, "remote pid");
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
        };
        }
    /// vertical scroll position
        assert_eq!(2, a.line_of_offset(4));
    }
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),

        let trace = Trace::disabled();
    {
        } else {
        /// revision that were added by this revision.
use width_cache::WidthCache;
    // How should we count "column"? Valid choices include:
    // recompute the prefix up to where the history diverges, but it's not clear that's
        Rope::from_str(s.as_ref()).unwrap()
        }
            trace.closure_payload("y", &["test"], || {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        self.do_set_replace(replacement, false);
    }
    pub fn with_limit_count(limit: usize) -> Self {
                for region in find.occurrences().regions_in_range(start_pos, pos) {
                Some(Cow::from(s))
    // reachability calculation.
        Ok(Delta::from(d))
///     something_expensive()
        self.cursor.next_leaf();
    }
            match rev.edit {

            b.push_str(&c);

            self.shrink_to_fit();
        for region in self.selection.regions_in_range(start_pos, pos) {
        }
            Assert(1, "arpbzj".to_owned()),
            FindNext { wrap_around, allow_same, modify_selection } =>
            sample_limit_count: limit
    }
        let mut a = Rope::from("hello world");
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
        for i in 0..edits {
    fn rebase_1() {
            Assert(1, "acpbdj".to_owned()),
impl Engine {
/// feature makes the payload a `serde_json::Value` (additionally the library
            trace: Some(&trace),
        let b = a.slice(2, 4);
    }
        let mut ix = 0;

        // invert the changes to deletes_from_union starting in the present and working backwards
}
    edit: Contents,

    replace_changed: bool,

    }
        if offset == 0 {
    }
    fn compute_transforms_2() {
    where S: serde::Serializer {
#[macro_use]
            Assert(0, "zacpbdj".to_owned()),

        ix
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    }
        let utf8_offset = 13;
            GestureType::LineSelect =>
        let mut cursor = Cursor::new(self, offset);
    /// You could construct the "union string" from `text`, `tombstones` and

/// }
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
/// Indicates what changed in the find state.
{

        if offset == 0 {
            a.push('a');
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        let mut hls = Vec::new();
                        } else {
                         first_line: usize, last_line: usize, pristine: bool) {

        }
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        let mut pos = self.pos();
{

                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),

            }
impl<'a> Iterator for ByteIter<'a> {
    inner: LinesRaw<'a>

            Merge(1,2),
    cursor: Cursor<'a, RopeInfo>,
                Rope::from(s1.clone()),
    }

            SelectAll => self.select_all(text),
            Merge(1,0),
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
            pid: sys_pid::current_pid(),
}
        self.drag_state = None;
            }
                   whole_words: bool) {
    pub fn is_codepoint_boundary(&self, offset: usize) -> bool {
/// However, anything that can be converted into a Cow string can be passed as
        assert_eq!(Some(3), a.next_grapheme_offset(0));
            }
//! pending edit in flight each.
        info.lines
            self.record(Sample::new_duration(
        }
/// Usage of static strings is encouraged for best performance to avoid copies.

impl Ord for Sample {
        json!({"test": value})
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
            pid: sys_pid::current_pid(),

        }
        match ty {


            self.categories == other.categories &&

        let first_rev = engine.get_head_rev_id().token();
                            (inserts.transform_shrink(&gc_dels),
        if offset >= next_line_offset {
            highlight_find: false,
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
            },
/// Returns all the samples collected so far.  There is no guarantee that the
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
#[derive(Clone, Copy)]
        inserts.into_iter().enumerate().map(|(i, inserts)| {

        let trace = Trace::enabled(Config::default());
        }
        self.do_set_replace(replacement, false);
    #[serde(serialize_with = "serialize_event_type")]
use std::ops::Range;
    #[cfg(feature = "benchmarks")]
            Copy(usize, usize),
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            a = a + Rope::from(&c);

//     http://www.apache.org/licenses/LICENSE-2.0
/// }
    type Item = u8;
//! this central engine. It provides the ability to apply edits that depend on
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        assert_eq!(0, a.line_of_offset(0));
            HighlightFind { visible } => {

                        },
// should make this generic, but most leaf types aren't going to be sliceable
}
        }, to_payload("test_get_sorted_samples"));
    view_id: ViewId,
///
/// # Examples
            }
        let initial_rev = engine.get_head_rev_id().token();
/// * `name` - A string that provides some meaningful name to this sample.
    }
                self.select_word(text, offset, true)
    }
        let mut b = String::new();
        if !selection.regions_in_range(offset, offset).is_empty() {
                l = pl;
    fn test_trace_disabled() {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },

            &rebased_deletes_from_union, &new_deletes_from_union);
        };

    Metadata

            SampleEventType::FlowInstant => 't',
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);

    }
        Subset::new(len)
            let mut len = 1;
                    // We're super-aggressive about dropping these; after gc, the history
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
            {

        let a_revs = basic_insert_ops(inserts.clone(), 1);
            Rope::from(s1.clone()),
impl Rope {

    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
            _ => return
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
    ///


    #[bench]
            let horiz = None;
#[derive(Serialize, Deserialize, Debug)]
    }
            scroll_to: Some(0),
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
/// The visual width of the buffer for the purpose of word wrapping.
    ///
    pub fn enabled(config: Config) -> Self {
        assert_eq!(1, res);
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    /// `text`. The count of a character in `deletes_from_union` represents
    #[cfg(feature = "benchmarks")]
    for r in revs {
use fixed_lifo_deque::FixedLifoDeque;
/// non-base revs, `N` being transformed non-base revs, and rearranges it:
        for _i in 0..50 {

            Assert(2, "ab".to_owned()),

            }
            inserts = inserts.transform_expand(trans_inserts, after);
            Rope::from(s1.clone()),
                self.run_op(op);




    view_id: ViewId,
                        for line_num in start_line..end_line {

        let mut b = TreeBuilder::new();
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
        trace.closure_payload("z", &["test"], || {},
        assert_eq!(snapshot[7].name, "z");
    /// If the cursor is at the end of the leaf, advances to the next leaf.
            'X' => SampleEventType::CompleteDuration,
                name, categories, Some(payload.into()), start, end - start));
            // Do the merge one direction

    }
///

                priority: new_priority,
            Merge(0,1),
        self.set_selection(text, sel);
        self.send_update_for_plan(text, client, styles,
    use std::collections::BTreeSet;
/// * `categories` - A static array of static strings that tags the samples in
impl Hash for Sample {
    use multiset::Subset;
        engine.undo([1].iter().cloned().collect());
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
categories_from_constant_array!(5);

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                        deletes_from_union = deletes_from_union.union(deletes);
                                priority,

        let selection = SelRegion::new(0, text.len()).into();
    pub(crate) fn unset_find(&mut self) {
        #------
    }
        b.iter(|| black_box(trace.closure_payload(

                    self.set_selection(text, selection);
        ]);
        assert_eq!(snapshot[0].name, "process_name");
                            rev_id: rev.rev_id,
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
        leaf.as_bytes()[pos]
    let new_text = del_delta.apply(text);
/// * `categories` - A static array of static strings that tags the samples in
}
        let first_rev = engine.get_head_rev_id().token();
    }
                    as_vec.push(Sample::new_metadata(
        inserts.into_iter().enumerate().map(|(i, inserts)| {
    fn edit_rev_simple() {
        };
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
#[derive(Clone, Copy)]
    ///
        self.set_selection(text, SelRegion::caret(offset));
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
use interval::Interval;
use self::Contents::*;
            }),
    fn deserialize<D>(deserializer: D)
    {
        next_boundary.unwrap_or(None)
//
                for &region in rest {
    #[inline]
                    }
        for i in 1..(s1.len() * 3) {
            Merge(1,0),
        if let Some((l, offset)) = self.get_leaf() {
        self.find_changed = FindStatusChange::All;
        if self.is_enabled() {
    pub height: f64,
    let mut out = Vec::with_capacity(revs.len());
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
pub struct RopeInfo {
            'X' => SampleEventType::CompleteDuration,

    }
    fn test_samples_block() {
    }
    #[test]
                l = pl;
        Self {
}
    fn gc() {
    #[test]
        assert!(empty == empty);

        let head_rev = &self.revs.last().unwrap();
                metadata_sort_index: None,
        let trace = Trace::enabled(Config::default());
use std::borrow::Cow;
            cur_len_utf8 += u.len_utf8();
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
            find.set_hls_dirty(false)
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    }
            if self.fragment.is_empty() {

            rendered_styles.push(sel_end as isize - sel_start as isize);
            GestureType::MultiWordSelect =>
        let head2 = engine.get_head_rev_id().token();
    fn compute_transforms_2() {
    fn compute_transforms_1() {
            // I think it's a precondition that this will never be called
            rendered_styles.push(0);
            SampleGuard::new(&self, name, categories, Some(payload.into()))
    }
            }
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
}
            self.find.push(Find::new());
    fn lines_small() {
        MergeTestState::new(3).run_script(&script[..]);
    pub fn select_all(&mut self, text: &Rope) {
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        self.scroll_to_cursor(text);
        } else {

            let style_id = self.get_or_def_style_id(client, styles, &style);
    }
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
        if let Some(lines) = lines {
            FindNext { wrap_around, allow_same, modify_selection } =>
    //


pub type SessionId = (u64, u32);
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
#[inline]
    fn empty_subset_before_first_rev(&self) -> Subset {
        let a = Rope::from("a");

    /// Time complexity: technically O(n log n), but the constant factor is so
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
        assert_eq!(correct, rebased_inserts);
mod tests {


        let (iv, new_len) = delta.summary();
use self::Contents::*;
/// could trigger incorrect behavior if they collide, so u64 is safe.
                payload: None,
        }
    max: usize,
        let mut cursor = Cursor::new(self, offset);
        let mut engine = Engine::new(Rope::from(TEST_STR));

            Assert(0, "zcbd".to_owned()),

    /// The line ending is stripped from the resulting string. The final line ending
        b.push_str(new);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        self.set_selection(text, selection);
                            max_undo_so_far: rev.max_undo_so_far,
    }
                              payload: Option<TracePayloadT>,
    }
        client.update_view(self.view_id, &params);
            self.next::<BaseMetric>();
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        assert_eq!(snapshot.len(), 5);
    }
            els: Vec<RopeDeltaElement_>,
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
///     0
            inserts = inserts.transform_expand(trans_inserts, after);
    /// fine-grained in the case of multiple cursors, but we also want this
            let common = find_common(a_to_merge, b_to_merge);
const MIN_LEAF: usize = 511;
    }
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    #[test]
    }
        assert_eq!(1, r.line_of_offset(r.len() - 1));
        // rebase the delta to be on the head union instead of the base_rev union
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        let initial_rev = engine.get_head_rev_id().token();
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    {
        self.wrap_col = WrapWidth::Width(self.size.width);
        if s.len() <= MAX_LEAF {
/// equivalent performance to a regular trace.  A string that needs to be copied
            let b = s.as_bytes()[offset];
            //}
        if self.idx <= self.current.unwrap().len() {

    fn bench_trace_instant_with_payload(b: &mut Bencher) {
                        None if cursor.pos() == text.len() => cursor.pos(),
    priority: usize,
///     something_else_expensive(result);
categories_from_constant_array!(9);


        }
    fn append_large() {
    /// The thread the sample was captured on.  Omitted for Metadata events that
    }
    }
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
//! text.
            args: Some(SampleArgs {

    #[test]
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
        engine.edit_rev(1, 2, new_head, d2);
    /// Toggles a caret at the given offset.
                        }
        let b = a.slice(2, 4);
            args: Some(SampleArgs {
            while !s.is_char_boundary(offset - len) {

    /// Get the contents of the document at a given revision number
                    to_payload(("some payload for the block"))));
            Assert(0, "acbd".to_owned()),
    }
struct FullPriority {

                    }

        delta.apply(&self.text)

                        } else {
    {
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
    #[serde(skip_serializing_if = "Option::is_none")]
            rev_id_counter: 1,
        assert_eq!("#-####-", &subset_str);
        }
        self.first_line = first;
    }
        let trace = Trace::disabled();
        while offset < l.len() && !l.is_char_boundary(offset) {
// You may obtain a copy of the License at
            Some(offset - len)
use internal::find::FindStatus;
}
            Rope::from(s1.clone()),
    fn measure(_: &RopeInfo, len: usize) -> usize {
    fn build_delta_1() -> Delta<RopeInfo> {
impl<'a> Iterator for LinesRaw<'a> {
            SampleEventType::DurationEnd => 'E',
            MetadataType::ThreadName {name} => (Some(name), None),
    }

                    text.slice_to_string(region.min(), region.max())
        } else {
    #[test]
        let plan = RenderPlan::create(height, self.first_line, self.height);
        self.set_selection_for_edit(text, new_sel);

        // +2 for exe & thread name

        let (mut l, mut offset) = self.get_leaf()?;
/// patterns. Any large runs of typing in the same place by the same user (e.g

    pub fn get_caret_offset(&self) -> Option<usize> {
    }
    /// Collapse all selections in this view into a single caret
    #[test]

/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        /// Just the `symmetric_difference` (XOR) of the two sets.
    //
            Assert(0, "ab".to_owned()),
/// The visual width of the buffer for the purpose of word wrapping.
            }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
    fn bench_trace_closure(b: &mut Bencher) {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        }
#[inline]
            Assert(2, "ab".to_owned()),

                            plan: &RenderPlan, pristine: bool)
        while let Err(incomp) = next_boundary {
///
    pub fn max_samples(&self) -> usize {
        fn run_script(&mut self, script: &[MergeTestOp]) {
            }),
    {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
        }
            sample.timestamp_us = ns_to_us(time::precise_time_ns());
            buffer_id: buffer_id,

    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
        }
                },
        assert_eq!(snapshot[1].name, "thread_name");
                    };
            .map(|pos| pos + 1)
        assert_eq!(snapshot[1].name, "thread_name");
        // original values this test was created/found with in the UI:
///
    fn next(&mut self) -> Option<Cow<'a, str>> {
        assert_eq!(rope.line_of_offset(15), 3);
                    };
/// some way.
                    // of which undos were used to compute deletes_from_union in edits may be lost.
            // Do it the other way on the copy
    }
    out
            SampleEventType::ObjectDestroyed => 'D',
                              to_payload("test_get_samples"));
            } else {
        }
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
}
        cursor.is_boundary::<BaseMetric>()
        assert_eq!(correct, rebased_inserts);
            }
        if (b as i8) >= -0x40 {
            engine.undo(to_undo.clone());
        Self::with_limit_count(size / size_of::<Sample>())
                    let (start, end) = self.peers.split_at_mut(ai);

        let deletes_from_union = parse_subset("-#----#");
        (self.pid, self.timestamp_us).hash(state);
                false => x.start
#[macro_use]
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
            duration_us: Some(ns_to_us(duration_ns)),
        b if b < 0xe0 => 2,
        where S: Into<StrCow>, C: Into<CategoriesT>
        -> SampleGuard
        let max_line = self.measure::<LinesMetric>() + 1;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
    #[test]
    // * Unicode codepoints
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
                                             &text, false);
        match *self {
/// # use xi_rope::Rope;
    type Err = ParseError;
    // reachability calculation.
        for rev in self.revs[rev_index..].iter().rev() {
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        let trace = Trace::disabled();
        {
        // even though the actual sampling order (from timestamp of
            // These two will be different without using session IDs
        });


/// None if an irrecoverable error occured.
}
        use self::MergeTestOp::*;
    /// Exposed for unit tests only.
    #[test]
    fn eq(&self, other: &CategoriesT) -> bool {
            let not_in_tombstones = self.deletes_from_union.complement();
        where S: Serializer
                client.replace_status(self.view_id, &json!(replace))
            for &occurrence in find.occurrences().iter() {
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
    fn prev_grapheme_offset() {
    /// selection edges).
        assert_eq!(snapshot.len(), 9);
/// A flag used to indicate when legacy actions should modify selections
        let first_rev = engine.get_head_rev_id().token();
        self.lc_shadow = b.build();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
            if i >= max_undos {
        }

/// an argument.
                                                        style_spans, line_num);
        // since one of the two deletes was gc'd this should undo the one that wasn't
    /// Find the first revision that could be affected by toggling a set of undo groups
        }
}
    pub fn get_samples_count(&self) -> usize {
/// * `name` - A string that provides some meaningful name to this sample.

                    RopeDeltaElement_::Copy(start, end) =>
//! `Engine::merge`, which is more powerful but considerably more complex.
        // of the delta so we can set the cursor before or after the edit, as needed.
        next_boundary.unwrap_or(None)
        self.tombstones = tombstones;
        let script = vec![
        self.pending_render
use std::fmt;
                Edit { priority, undo_group, inserts, deletes } => {
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
            }
        let mut all_samples = self.samples.lock().unwrap();
            line_cache_shadow::CURSOR_VALID

    }
        /// Used to store a reversible difference between the old
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
/// beginning.
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
}
        // since one of the two deletes was gc'd this should re-do the one that wasn't
/// # Arguments
impl serde::Serialize for CategoriesT {
            None
        }
                        gc_dels = gc_dels.transform_expand(inserts);
    /// selection edges).
    }
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
    }
                let (nl, noffset) = self.next_leaf()?;
        let script = vec![
    {
        let mut cursor = Cursor::new(self, offset);


fn default_session() -> (u64,u32) {
        /// The subset of the characters of the union string from after this
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
                // TODO create InsertDelta directly and more efficiently instead of factoring
        engine.undo([1].iter().cloned().collect());
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));

            //leaf.len() - start_pos
    fn measure(info: &RopeInfo, _: usize) -> usize {

}
    //
}
        self.replace_changed = true;
                    "something", &["benchmark"],
///
        //for next line
use interval::Interval;
            pid: sys_pid::current_pid(),
    /// Time complexity: O(log n)
const FLAG_SELECT: u64 = 2;
        self.set_dirty(text);
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        RevId { session1: 1, session2: 0, num: i as u32 }
}
                }
pub type TracePayloadT = serde_json::Value;
    /// Updates the view after the text has been modified by the given `delta`.
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
extern crate serde;

///
    fn arr_eq(&self, other: &Vec<String>) -> bool {
    pub fn get_caret_offset(&self) -> Option<usize> {

    #[test]
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
            return false;
    }
    fn bench_trace_closure_payload(b: &mut Bencher) {
    #[bench]
        }
    /// Tracks whether this view has been scheduled to render.
        for chunk in self.iter_chunks(start, end) {
        ----#
// See the License for the specific language governing permissions and
    pub metadata_name: Option<StrCow>,
        ---#--
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
/// # Returns
    #[test]
        assert_eq!(a.len(), r.offset_of_line(1));
fn default_session() -> (u64,u32) {
        match *self {
impl Add<Rope> for Rope {
/// ```

                return offset;

/// configured via the `dict_payload` or `json_payload` features (there is an
        let trace = Trace::enabled(Config::default());

        // NOTE: we derive to an interim representation and then convert
    #[test]
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
    #[serde(skip_serializing_if = "Option::is_none")]
        self.subseq(iv)
        // a, b, y, z, c, x
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
        for find in self.find.iter() {
    pub(crate) fn get_view_id(&self) -> ViewId {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {

impl NodeInfo for RopeInfo {
    // and partly because you need to retain more undo history, to supply input to the
        });
        ---#--
        let script = vec![
                metadata_name: None,
        }

            a.push('a');
        let closest_occurrence = self.find.iter().flat_map(|x|
        -> SampleGuard
        }
                        sample.tid));
    }
    ($num_args: expr) => {
        ##
                        priority, undo_group,


        let subset_str = format!("{:#?}", expand_by[0].1);
        }
            }
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
    DurationEnd,
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
        assert!(a == a2);
                }
        }
}
        for _i in 0..50 {
            return false;

        assert_eq!(0, a.lines_raw_all().count());
        }


    }
        if b >= 0xf0 {
impl PartialOrd for Sample {
    Metadata

        let undone = self.undone_groups.contains(&undo_group);
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    fn next(s: &String, offset: usize) -> Option<usize> {
        }
        client.update_view(self.view_id, &params);
    Metadata
extern crate serde_json;
        revs.append(&mut revs_2);
                return false;
        if let Some(edit) = contents {
    }
    }
    sample: Option<Sample>,
    }
///
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
    move_delta.apply(tombstones)
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
        let all_samples = self.samples.lock().unwrap();
        self.join(",").serialize(serializer)
        // +2 for exe & thread name
                    "something", &["benchmark"],
        engine.edit_rev(1, 2, new_head, d2);
    enum MergeTestOp {
    /// Sets the selection to a new value, invalidating the line cache as needed.
    /// inserted, including the ones that were later deleted, in the locations
    /// set with this function, which will make the revisions they create not have colliding IDs.
                self.add_selection_by_movement(text, Movement::Up),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
        let trace = Trace::enabled(Config::with_limit_count(10));
}
            self.truncate(splitpoint);
                    selection.add_region(occ);
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,

        }
    }
                Ok(CategoriesT::DynamicArray(categories))
        b.push('\n');
    }
            AssertMaxUndoSoFar(0,3),
        if let Some(last) = self.revs.last() {
    }
    idx: usize,
        let contents = match rev.edit {
/// Given the inital byte of a UTF-8 codepoint, returns the number of
                }

                } else if click_count == Some(2) {
    /// not account for any overhead of storing the data itself (i.e. pointer to
        assert_eq!(rope.line_of_offset(3), 1);
        self.set_selection_raw(text, selection);
    pub fn new(initial_contents: Rope) -> Engine {
 //additional cursor features
pub fn samples_cloned_sorted() -> Vec<Sample> {
        let contents = Contents::Edit {
        self.text = text;
                                                        style_spans, line_num);
                           pristine: bool)
            _ => return
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
    }
//! pending edit in flight each.
        update

        a.lines_all().collect::<Vec<_>>());
        }
impl<'de> serde::Deserialize<'de> for CategoriesT {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        while let Err(incomp) = next_boundary {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
///
        }
        ");
            }),
        json!({"test": value})
}
    }
categories_from_constant_array!(6);

        });
        // position after 'f' in four

        assert_eq!(snapshot[2].name, "x");


    AsyncInstant,
/// some way.
                    // We're super-aggressive about dropping these; after gc, the history
        let base_sel = Selection::new();
        s.is_char_boundary(offset)
                MergeTestOp::AssertAll(ref correct) => {
            splitpoint
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            Assert(1, "zapbj".to_owned()),
impl Sample {
    fn can_fragment() -> bool { false }
        b.iter(|| black_box(time::precise_time_ns()));

        MergeTestState::new(6).run_script(&script[..]);
    #[cfg(feature = "benchmarks")]
impl Metric<RopeInfo> for LinesMetric {
    #[serde(skip_serializing_if = "Option::is_none")]
                    to_payload(("some payload for the block"))));
            rev_id: self.next_rev_id(),

            return ix;

    #[cfg(feature = "benchmarks")]
        let a = Rope::from("a\nb\n");
    /// Generate line breaks based on width measurement. Currently batch-mode,
// The advantage of using a session ID over random numbers is that it can be
            Move(movement) => self.do_move(text, movement, false),
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    fn from_chrome_id(symbol: char) -> Self {
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
fn initial_revision_counter() -> u32 {
        }).collect()
            }
categories_from_constant_array!(6);
        if all_samples.is_empty() {
    }
                let line = line.min(text.measure::<LinesMetric>() + 1);
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
    {
    }
use std::cmp::{min,max};
/// ```
        // of the delta so we can set the cursor before or after the edit, as needed.
                inserts: inserted,
        }
        self.revs.push(new_rev);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    {
        // 1 MB
        }
        self.set_selection_raw(text, sel.into());
                            edit: Edit {
                    let end_of_line = match cursor.next::<LinesMetric>() {
        let mut cursors = Vec::new();
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    #[allow(dead_code)]
// See the License for the specific language governing permissions and
            },
        for &(sel_start, sel_end) in hls {
            // TODO: on double or triple click, quantize offset to requested granularity.
impl Metric<RopeInfo> for BaseMetric {
#[inline]
            for (i,rev) in self.revs.iter().enumerate().rev() {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    session_id: SessionId,

    fn is_ok_child(&self) -> bool {
    }
            to_payload("some description of the trace"))));
                        DeltaElement::Copy(start, end),
    pub fn disabled() -> Self {
            Assert(1, "arpbzj".to_owned()),
    {
        self.pending_render = pending

                    "something", &["benchmark"], || {},
        }
pub type StrCow = Cow<'static, str>;

        Some(&leaf[start_pos .. end])
    if x < min {
            args: Some(SampleArgs {
                        deletes_from_union = deletes_from_union.transform_union(inserts);
            Assert(0, "acrpbdzj".to_owned()),
            return self.len();
        let a = Rope::from("a\nb\nc");
    }
        #------
            }
                                deletes,
        let revs = basic_insert_ops(inserts, 1);
    }
        let mut cursor = Cursor::new(self, offset);
        let (ins_delta, deletes) = delta.factor();
                },
            // Go crazy
                    }
    #[cfg(feature = "benchmarks")]
    ///
    }
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {

    ObjectCreated,
        self.drag_state = None;
            inner: self.iter_chunks(start, end),

// ======== Generic helpers
        let mut style_map = style_map.borrow_mut();
        if self.is_enabled() {
    deletes_from_union: Subset,
        let line = self.line_of_offset(text, offset);
            deletes: Subset::new(0),
    }
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;

use memchr::{memrchr, memchr};
                leaf_offset = self.pos() - noffset;
                    };

    pub pid: u64,
                            deletes_bitxor.transform_shrink(&gc_dels)
    }
    /// Get text of a given revision, if it can be found.
                    let (start, end) = {
            SampleEventType::AsyncEnd => 'e',
    Instant,
        Ok(Rope::from(s))
                    None
    pub fn next_codepoint(&mut self) -> Option<char> {
    /// Width in px units, requiring measurement by the front-end.


    pub(crate) fn get_view_id(&self) -> ViewId {
    }
            }
                        for line_num in start_line..end_line {
            let b = s.as_bytes()[offset];
                out.push(DeltaOp {
    /// storage allocated will be limit * size_of<Sample>
    /// Find what the `deletes_from_union` field in Engine would have been at the time
        // find the lowest toggled undo group number
}
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
                // TODO: small nit, merged region should be backward if end < start.
    fn next(s: &String, offset: usize) -> Option<usize> {
        rope.line_of_offset(20);
    }
impl<T: AsRef<str>> From<T> for Rope {
    use interval::Interval;
            Merge(0,1),
                        priority, undo_group,
        let start = self.line_col_to_offset(text, line, 0);
///
            ),
        if b >= 0xf0 {
        let trace = Trace::enabled(Config::with_limit_count(10));
        self.size = size;
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
                edit: Contents::Edit {

            Assert(1, "ab".to_owned()),

    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        match symbol {
use linewrap;
                        line_num = seg.their_line_num + seg.n;
    fn scroll_to_cursor(&mut self, text: &Rope) {
        if !gc_dels.is_empty() {
    /// part of the initial contents since any two `Engine`s need a common
        engine.edit_rev(1, 2, first_rev, d1.clone());
pub fn trace<S, C>(name: S, categories: C)
    }
        #------
        }
        let sample_name = to_cow_str(meta.sample_name());
    }
impl PartialEq for Sample {
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));

        assert_eq!(None, b.prev_codepoint_offset(0));
    }
        #------
    }
        // expand by each in expand_by
/// associated performance hit across the board for turning it on).
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
}
        assert_eq!(None, a.next_grapheme_offset(17));
/// something_expensive();
/// # use xi_rope::Rope;
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
        let end = time::precise_time_ns();
            b.push('b');
/// Usage of static strings is encouraged for best performance to avoid copies.
            rendered_styles.push((iv.start() as isize) - ix);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        engine.undo([1,3].iter().cloned().collect());
        self.replace_changed = true;
                           styles: &StyleMap, style_spans: &Spans<Style>,
            GestureType::WordSelect =>
    pub fn offset_of_line(&self, line: usize) -> usize {
    }

        let script = vec![
            _ => None
        match *self {
        let inserts_3 = parse_subset_list("
                Some(offset)
    }
        self.set_selection(text, sel);
// Unless required by applicable law or agreed to in writing, software
            name: name.into(),
/// * `categories` - A static array of static strings that tags the samples in
        while !leaf.is_char_boundary(end) {

pub struct RopeInfo {
use unicode_segmentation::GraphemeIncomplete;
    }
    struct MergeTestState {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    #[test]
    /// Tests that merging again when there are no new revisions does nothing
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
                    } else {
        }
        value
            trace.instant("test_samples_pulse", &["test"]);
        Subset::new(len)

            }
        engine.edit_rev(1, 2, first_rev, d1.clone());
        let a = Rope::from("\n");
        if self.find.is_empty() {
/// }
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
        if offset == s.len() {
                        let offset = self.offset_of_line(text, start_line);
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    }
    pub fn merge(&mut self, other: &Engine) {


                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
    Edit {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
extern crate serde_json;
        let (start, end) = {
    text: Rope,

            find: Vec::new(),
                _ => { }

        let mut r = Rope::from("27");
    /// storage allocated will be limit * size_of<Sample>
/// # Examples
mod sys_pid;
    {
    pub metadata_sort_index: Option<i32>,
        String::from(&r)
                    self.do_gesture(text, line, column, GestureType::LineSelect)
            }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        self.revs.push(new_rev);
        }
categories_from_constant_array!(10);
    }
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
    }
        ]);
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
        if before {
extern crate time;
    #[test]
            trace.instant("test_samples_pulse", &["test"]);
            let expand_by = compute_transforms(a_new);
    }
        let deletes_from_union = parse_subset("-#----#");
    #[test]
enum WrapWidth {

                if !region.is_caret() {
}
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
pub struct Config {



    /// An arbitrary payload to associate with the sample.  The type is
        let mut cursor = Cursor::new(self, offset);
    ///


                offset = prev;
        }
    pub fn set_dirty(&mut self, text: &Rope) {
        assert_eq!(2, r.line_of_offset(r.len()));

        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    let mut last_priority: Option<usize> = None;


            }
                } else if click_count == Some(3) {

        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
}
}
                    // of which undos were used to compute deletes_from_union in edits may be lost.
        let first_rev = &self.revs.first().unwrap();
                match self.inner.next() {
        let mut b = String::new();
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
/// on program launch.
    fn delta_rev_head() {
    }
                let mut sel = Selection::new();
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    /// Returns the visible line number containing the given offset.
        assert_eq!(Some(3), a.next_grapheme_offset(0));
            },
    inserts: InsertDelta<RopeInfo>,
    #[test]
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {

        client.update_view(self.view_id, &params);
        MergeTestState::new(3).run_script(&script[..]);
                match *other {

    }
        Err(ref e) => {
        match cmd {
        }
            result.push_str(chunk);
}



                    let full_path_str = full_path.into_string();
    }
            Sample::new_instant("remote pid", &[], None)];
                                                    self.size.width));
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
    }
        self.hash(&mut hasher);

/// However, anything that can be converted into a Cow string can be passed as
            SampleGuard::new_disabled()
    fn bench_get_tid(b: &mut Bencher) {

        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
            trace.instant("something", &[]);
    let mut last_priority: Option<usize> = None;


#[derive(Clone, Debug, PartialEq, Eq)]

                offset = prev;
        if self.cursor.pos() >= self.end {
}
                    if retain_revs.contains(&rev.rev_id) {
    fn from(c: Vec<String>) -> CategoriesT {
        let script = vec![
        let head_rev = &self.revs.last().unwrap();
                        inserts: transformed_inserts,
    /// slices will be nonempty.

        while let Err(incomp) = prev_boundary {
        fn run_op(&mut self, op: &MergeTestOp) {
        self.start_drag(offset, region.start, region.end);
            HighlightFind { visible } => {
    pub fn empty() -> Engine {
    #[test]
                (!region.is_upstream() && c == start_pos) ||
    // TODO: this should be a Cow
                leaf_offset = self.pos() - poffset;
            for (i,rev) in self.revs.iter().enumerate().rev() {
// See the License for the specific language governing permissions and
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
        let is_base = base_revs.contains(&rev.rev_id);
    fn edit_rev_undo_3() {
                        let mut word_cursor = WordCursor::new(text, region.max());
    if x < min {
        engine.edit_rev(1, 1, initial_rev, d1.clone());
/// However, anything that can be converted into a Cow string can be passed as
            find.find_status(matches_only)
/// ```
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
                                  style_spans, &plan, pristine);
    }
            Merge(1,2),

        let mut next_boundary = c.next_boundary(&l, leaf_offset);

        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    type Item = Cow<'a, str>;
// ======== Merge helpers
    /// If the cursor is at the end of the rope, returns the empty string.
{
            }
// distributed under the License is distributed on an "AS IS" BASIS,
        if self.highlight_find {
                        let (inserts, deletes) = if gc_dels.is_empty() {
            b.push('b');
        assert_eq!(1, expand_by[0].0.priority);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    None,
        // 1 for exe name & 1 for the thread name
    // TODO: replace this with a version of `lines` that accepts a range
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
    /// the other doesn't make it re-appear.
            Assert(0, "ab".to_owned()),
                self.drag_state = None;

                    let mut selection = self.selection.clone();
            'b' => SampleEventType::AsyncStart,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
/// feature makes the payload a `serde_json::Value` (additionally the library
    TRACE.closure(name, categories, closure)
    }
    /// Selects a specific range (eg. when the user performs SHIFT + click).
                }
        #------
    }


        let mut ops = Vec::new();
            }
                metadata_name: None,
            AssertMaxUndoSoFar(0,3),
    fn next(s: &String, offset: usize) -> Option<usize> {
    fn goto_line(&mut self, text: &Rope, line: u64) {

    session_id: SessionId,
        self.lc_shadow = b.build();
    }
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        b.iter(|| black_box(time::precise_time_ns()));
                    let (start, end) = self.peers.split_at_mut(ai);
                    }
    }
                Delta {
                } else {
            for (i,rev) in self.revs.iter().enumerate().rev() {
    session2: u32,
    #[cfg(feature = "benchmarks")]
        }
        // position after 'f' in four
/// conversions in both directions.
        expand_by = next_expand_by;
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
            //let prev_pos = self.cursor.pos();
            }
///     0
    /// if there is not at least one edit.
    /// 96 bits which is more than sufficient for this to never happen.
    fn utf16_code_units_metric() {
        let mut b = line_cache_shadow::Builder::new();
/// implementation as efficient as a mutable version.
        all_samples.reset_limit(0);
/// same priority into one transform to decrease the number of transforms that
// you may not use this file except in compliance with the License.
    max_undo_so_far: usize,
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
            'N' => SampleEventType::ObjectCreated,
        // todo: the correct Find instance needs to be updated with the new parameters
extern crate time;
    }
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
            Assert(1, "ab".to_owned()),
        assert!(r == a_rope.clone() + b_rope.clone());
            result["cursor"] = json!(cursors);
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
            Copy(usize, usize),
    fn rebase_1() {

            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    fn prev_codepoint_offset_small() {
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
        Self::with_limit_bytes(1 * 1024 * 1024)
        self.rev_id_counter += 1;
            let b_to_merge = &other.revs[base_index..];
        self.timestamp_us.cmp(&other.timestamp_us)
/// Valid within a session. If there's a collision the most recent matching

        Self {
    }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    pub fn max_samples(&self) -> usize {

        let next_line_offset = self.offset_of_line(text, line + 1);
}
            to_payload("some description of the trace"))));
{
            pid: sys_pid::current_pid(),
        if offset == s.len() {
///
        };
                metadata_sort_index: sort_index,
        assert_tokens(&rope, &[
        let a = Rope::from("\n");

        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
            {
        Lines {
    lines: usize,
        in_measured_units
        self.wrap_col = WrapWidth::Width(self.size.width);
                let mut el = serializer.serialize_tuple_variant("DeltaElement",

    CompleteDuration,
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
}
use xi_rope::delta::Delta;
        -> R
}
                c.provide_context(&pl, self.pos() - poffset);
                    self.do_gesture(text, line, column, GestureType::LineSelect)
            type Value = CategoriesT;
        Engine {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
            sample_limit_count: limit
        }
    {
        }
    }
    }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                let (pl, poffset) = self.prev_leaf()?;
                              duration_ns: u64) -> Self
                    }
        let a = Rope::from("");

}
    pub metadata_sort_index: Option<i32>,
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
        self.set_selection_raw(text, selection);
                        gc_dels = gc_dels.transform_expand(inserts);
                inserts: inserted,
#[inline]
        ]);
    fn gc() {
        let r = r + Rope::from(&b[MIN_LEAF..]);
            Merge(1,0), Merge(2,0),
        d
        }, new_text, new_tombstones, new_deletes_from_union)
        /// The subset of the characters of the union string from after this
            sample_limit_count: limit
        };
/// Create a `Rope` from a `String`:
///
        assert!(r == a_rope.clone() + b_rope.clone());
                selection.add_region(occurrence);
            .map(|pos| pos + 1)
/// # use xi_rope::Rope;
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        let trace = Trace::enabled(Config::with_limit_count(10));
///
    }
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
        }
                rev_id: basic_rev(i+1),
        // original values this test was created/found with in the UI:
impl View {
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
    }
                    }
    /// Collapse all selections in this view into a single caret
            rendered_styles.push(sel_end as isize - sel_start as isize);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                        }
                     modify_selection: &SelectionModifier) {
}
        let mut sel = self.selection.clone();
    #[inline]
    }
    {
            }
    offset: usize,
        } else {
            edit: Contents::Edit {
    /// What kind of sample this is.

            next_expand_by.push((trans_priority, new_trans_inserts));
    /// Set the selection to a new value.
    }
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
    // * Unicode width (so CJK counts as 2)
    #[inline]
use selection::{Affinity, Selection, SelRegion};
}
        };
        // interior of last line should be last line
    pub timestamp_us: u64,
                                deletes.transform_shrink(&gc_dels))

                              duration_ns: u64) -> Self
    #[should_panic]
        match *self {
        assert_eq!(Some(3), a.next_codepoint_offset(1));
    }

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },

    type Output = Rope;

        // same span exists in both sets (as when there is an active selection)
        let (mut new_revs, text, tombstones, deletes_from_union) = {
#[derive(Clone, Copy)]
            SampleGuard::new(&self, name, categories, None)

fn ns_to_us(ns: u64) -> u64 {
                    if !inserts.is_empty() {
    #[cfg(feature = "benchmarks")]
        }
    }
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
impl CategoriesT {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
}
            black_box(time::precise_time_ns());
    CompleteDuration,
/// }
        use self::MergeTestOp::*;
            trace.instant("test_samples_pulse", &["test"]);
        let (start, end) = {
/// A guard that when dropped will update the Sample with the timestamp & then
            Merge(2,3),
                c.provide_context(&pl, self.pos() - poffset);
        while !s.is_empty() {
        let inserts = parse_subset_list("
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
    fn replace_small() {

/// an argument.

            let next_chunk = self.inner.next();
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
        // rebase the delta to be on the head union instead of the base_rev union
        if let Some(exe_name) = exe_name() {
        }
        }
    /// Find what the `deletes_from_union` field in Engine would have been at the time
                    filename.to_str().map(|s| s.to_string())
}
    }
            selection: SelRegion::caret(0).into(),
    /// An iterator over the lines of a rope.
                    // are empty, could send update removing the cursor.
        while let Err(incomp) = next_boundary {
            offset += 1;
                        let mut word_cursor = WordCursor::new(text, region.max());

    #[test]


/// Stores the relevant data about a sample for later serialization.
    fn edit_rev_undo() {
            Sample::new_instant("remote pid", &[], None)];
enum Contents {
/// rather than just this processe's samples).
/// A guard that when dropped will update the Sample with the timestamp & then
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        }).collect();

                self.run_op(op);
        -> Result<CategoriesT, D::Error>
    AsyncStart,
            }
        for mut find in self.find.iter_mut() {
                undo_group,
                    }
    #[test]
            return false;

#[inline]
            }
                        },
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
                }
        let inserts = parse_subset_list("
                }
            rendered_styles.push((sel_start as isize) - ix);
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
}
        let mut d_builder = Builder::new(TEST_STR.len());
/// Given the inital byte of a UTF-8 codepoint, returns the number of
    /// Exposed for unit tests only.
        ----
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
/// fn something_expensive() -> u32 {
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
use xi_rope::interval::Interval;
    #[test]
            timestamp_us: ns_to_us(start_ns),

///
        };
        where S: serde::Serializer
        let expand_by = compute_transforms(revs);
    {
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
    /// Imagine a "union string" that contained all the characters ever
            if let GraphemeIncomplete::PreContext(_) = incomp {
            }
use delta::{Delta, InsertDelta};
    /// `text`. The count of a character in `deletes_from_union` represents
    }
///
                    if !deletes.is_empty() {
#[derive(Serialize, Deserialize, Debug)]
/// same priority into one transform to decrease the number of transforms that
            selection: SelRegion::caret(0).into(),
    fn prev_grapheme_offset() {
    fn edit_rev_simple() {
}
        }
    /// An iterator over the raw lines. The lines, except the last, include the

impl<'de> Deserialize<'de> for Rope {
            Assert(1, "arpbj".to_owned()),
        revs.append(&mut revs_3);

            'E' => SampleEventType::DurationEnd,
                   whole_words: bool) {

    /// Invalidates the styles of the given range (start and end are offsets within
        if !selection.regions_in_range(offset, offset).is_empty() {
    #[test]

                    let e = &mut self.peers[ei];
                return false;
        let tombstones_b = Rope::from("a");
}
        self.set_selection_raw(text, sel.into());
        self.utf16_size += other.utf16_size;
    /// Tracks whether the replacement string or replace parameters changed.
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
                    els: delta.els.drain(..)
        if self.len() != other.len() {
        self.replace = Some(Replace { chars, preserve_case });
                              to_payload("test_get_samples"));
    pub fn new(initial_contents: Rope) -> Engine {
    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
    }
    /// and currently in a debugging state.
        engine.undo([1,2].iter().cloned().collect());
    fn basic_rev(i: usize) -> RevId {

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));

pub struct RevId {
/// # Examples
            HighlightFind { visible } => {
        self.revs.last().unwrap().rev_id

    }
        assert_eq!(1, self.revs.len(), "Revisions were added to an Engine before set_session_id, these may collide.");
                        let offset = self.offset_of_line(text, start_line);
    /// part of the initial contents since any two `Engine`s need a common
        if offset >= next_line_offset {
            Assert(2, "b".to_owned()),
#[macro_use]
    }
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {



        engine.undo([].iter().cloned().collect());

        self.revs.append(&mut new_revs);
    }
        let last = max(last, 0) as usize;
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
                        ops.push(self.build_update_op("copy", None, seg.n));
    }

    }
        assert_eq!(0, a.line_of_offset(0));
                    } else {
        client.def_style(&style.to_json(ix));

            }
}
    fn merge_priorities() {
#[cfg(test)]


        let (mut new_revs, text, tombstones, deletes_from_union) = {
        assert!(a != empty);
        assert_eq!("1234567", String::from(r));
                            }
                        if !last_selection.is_caret() {
    /// # Panics


pub fn len_utf8_from_first_byte(b: u8) -> usize {
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
                if !inserts.is_empty() {
    /// recomputing line wraps.
                let mut peer = Engine::new(Rope::from(""));
        for &(sel_start, sel_end) in hls {
pub type StrCow = Cow<'static, str>;
    (out, text, tombstones, deletes_from_union)
    /// validate their input.
        memchr(b'\n', &s.as_bytes()[offset..])

        engine.edit_rev(0, 1, first_rev, build_delta_1());
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
use delta::{Delta, DeltaElement};
    /// Returns a u64 that will be equal for equivalent revision IDs and
            FindPrevious { wrap_around, allow_same, modify_selection } =>
    first_line: usize,
            while !s.is_char_boundary(offset - len) {
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        }
    /// controlled by features (default string).
    {
    }
            None

        self.height

        deletes_from_union = new_deletes_from_union;
/// feature makes the payload a `serde_json::Value` (additionally the library
    #[test]
                    inserts: ins,
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        offset
                    linewrap::rewrap_width(breaks, text, width_cache,
                self.find_changed = FindStatusChange::All;
                    b.add_span(seg.n, 0, 0);
    /// terminating newline.
        let first_rev = engine.get_head_rev_id().token();
                    return i + 1; // +1 since we know the one we just found doesn't have it
/// configured via the `dict_payload` or `json_payload` features (there is an
                c.provide_context(&pl, self.pos() - poffset);
    fn next(&mut self) -> Option<Cow<'a, str>> {
            // Do it the other way on the copy
        let a = Rope::from("a");
        }
    {

            Assert(1, "pbj".to_owned()),
        // probably change as the recording internals change.
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        if self.len() != other.len() {
        memrchr(b'\n', &s.as_bytes()[..offset])
        assert_eq!(utf8_offset, 13);
    fn empty_subset_before_first_rev(&self) -> Subset {
        if !gc_dels.is_empty() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    }
        let inserts = parse_subset_list("
        let mut b = line_cache_shadow::Builder::new();
        let mut a = String::new();
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
            None
            } else if incomp == GraphemeIncomplete::NextChunk {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {

}
    #[serde(skip_serializing_if = "Option::is_none")]
                    new_deletes = new_deletes.transform_expand(inserts);

                        };
/// A guard that when dropped will update the Sample with the timestamp & then
        assert_eq!(samples[1].name, "local pid");
        let expand_by = compute_transforms(revs);
        ##
                    if undone_groups.contains(undo_group) {
/// # Performance
    ///
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
            a.push('a');
    tombstones: Rope,
                true => x.end,
        let new_head = engine.get_head_rev_id().token();

        tombstones = new_tombstones;
        if offset == 0 {
        while !s.is_empty() {
        engine.edit_rev(1, 2, first_rev, d1.clone());

        assert_eq!(trace.is_enabled(), true);

                if !region.is_caret() {
        // if we have active find highlights, we don't collapse selections
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
    enabled: AtomicBool,
    #[cfg(feature = "benchmarks")]

        } else {
                },
        assert_eq!(snapshot[5].name, "z");
        engine.edit_rev(1, 1, first_rev, build_delta_1());
//! info.
        let first_line = self.line_of_offset(text, start);
    /// Exposed for unit tests.
    /// Tracks whether find highlights should be rendered.
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the

            update["lines"] = json!(lines);
    #[test]
    /// Tests that merging again when there are no new revisions does nothing
    #[cfg(feature = "benchmarks")]
                    let end_of_line = match cursor.next::<LinesMetric>() {
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {

                        Cow::Owned(un_deleted.transform_shrink(inserts))

        memrchr(b'\n', &s.as_bytes()[..offset])
///

/// as opposed to thousands of revisions.
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },


            enabled: AtomicBool::new(false),
            }
    }
    fn merge_max_undo_so_far() {
            let right_str = self[splitpoint..].to_owned();
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
        }
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        }
    }
        if self.find.is_empty() {
        }
// See the License for the specific language governing permissions and
    fn gc_4() {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[allow(dead_code)]
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        assert_eq!(trace.get_samples_count(), 5);
    ///

    }
    #[bench]
/// monotonically increasing single global integer (when tracing) per creation
    ///

/// # use xi_rope::Rope;
                    RopeDeltaElement_::Insert(s) =>
    #[bench]
            }

        let inserts_2 = parse_subset_list("
                Some(offset)
        ");
                Undo { toggled_groups, deletes_bitxor } => {
                        deletes_from_union = deletes_from_union.union(deletes);
            let mut len = 1;
            Merge(0,1),
    FlowStart,
        let script = vec![
/// something_expensive();
impl<'a> Cursor<'a, RopeInfo> {

    #[test]
        Self::with_limit_count(size / size_of::<Sample>())
    }
        for _ in 0..in_measured_units {
                        }
#[cfg(test)]
                Some(Cow::from(s))
    /// `text`. The count of a character in `deletes_from_union` represents
                    new_deletes = new_deletes.transform_expand(inserts);
        if !self.is_enabled() {
            thread_name: Sample::thread_name(),
categories_from_constant_array!(10);
    pub width: f64,
        }
    pub fn new_disabled() -> Self {
    pub fn new(initial_contents: Rope) -> Engine {

    #[test]
}
        s.is_char_boundary(offset)
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    }
    let new_text = del_delta.apply(text);
    pub fn new_duration_marker<S, C>(name: S,
            let right_str = self[splitpoint..].to_owned();
        Rope::from_str(s.as_ref()).unwrap()
                } else {
            selection.delete_range(offset, offset, true);
/// Represents a transform from one rope to another.
                        }
                self.do_set_replace(chars, preserve_case),
        }
        assert_eq!(Some(2), b.next_codepoint_offset(0));
/// However, anything that can be converted into a Cow string can be passed as
    }

        self.drag_state = Some(DragState { base_sel, offset, min, max });
        assert_eq!(2, expand_by[1].0.priority);
                    let transformed_inserts = inserts.transform_expand(&s);
        fn run_op(&mut self, op: &MergeTestOp) {
        /// Used to order concurrent inserts, for example auto-indentation
        match self.selection.len() {
extern crate lazy_static;
        self.start_drag(offset, region.start, region.end);
        deletes_bitxor: Subset,
        assert!(self.current.is_some());

    pub width: f64,
// distributed under the License is distributed on an "AS IS" BASIS,
        if (b as i8) >= -0x40 {
pub type Rope = Node<RopeInfo>;
/// supported as an optimization when only one reference exists, making the
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        // rebase the delta to be on the head union instead of the base_rev union
            GestureType::LineSelect =>
                self.add_selection_by_movement(text, Movement::Up),
/// equivalent performance to a regular trace.  A string that needs to be copied
                    selection.add_region(occ);
            Assert(2, "b".to_owned()),
/// });
    }

        };
    }

    }
        }
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        let offset = self.line_col_to_offset(text, line as usize, 0);
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            let head = engine.get_head_rev_id().token();
        assert_eq!(snapshot[3].name, "a");

/// # Arguments
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            }

            }
    /// Toggles a caret at the given offset.
}
    #[bench]
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        if offset == 0 {
        if let Some((l, offset)) = self.get_leaf() {
                             client: &Client, style_spans: &Spans<Style>)
pub struct Trace {

/// bytes required to represent the codepoint.
            sel.add_region(region);
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
            }
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
            let mut len = 1;
        ---#--
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
            edit: Contents::Edit {
        let script = vec![
        let a_revs = basic_insert_ops(inserts.clone(), 1);
        let mut b = line_cache_shadow::Builder::new();
        self.replace_changed = true;
        }).unwrap_or(text.len());
        let script = vec![
    #[test]
    #[test]
        if self.find_changed != FindStatusChange::None {

        }
        /// together. For example, an auto-indent insertion would be un-done
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);

    /// Tracks whether this view has been scheduled to render.
    }
            }
                            Cursor::new(breaks, offset));
        a.edit_str(1, 9, "era");

        }
                                gc_dels = gc_dels.union(deletes);
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
        // probably change as the recording internals change.
    }
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    if let Some(new_gc_dels) = new_gc_dels {

/// that sorted would be prohibitively expensive.
                    }
                Some(Cow::from(s))
        // +2 for exe & thread name.
    #[cfg(feature = "benchmarks")]
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        // since character was inserted after gc, editor gcs all undone things
    // * Actual measurement in text layout


        engine.undo([2].iter().cloned().collect());
    #[test]
        engine.gc(&to_undo);

        if all_samples.is_empty() {
        // likely be improved.
                    if seg.validity == line_cache_shadow::ALL_VALID {
                    let (start, end) = self.peers.split_at_mut(ai);
/// from multiple distributed sources (i.e. you want to sort the merged result
        if self.find.is_empty() {
            Click(MouseAction { line, column, flags, click_count }) => {
/// assert!("hello world" == String::from(a + b));
//
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        assert_tokens(&rope, &[
            }),
            edit: Undo { toggled_groups, deletes_bitxor }
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
        self.lc_shadow = b.build();
use multiset::{Subset, CountMatcher};
    /// The maximum amount of space the tracing data will take up.  This does
    pub fn lines_raw_all(&self) -> LinesRaw {
use std::string::ParseError;
    pub fn get_caret_offset(&self) -> Option<usize> {
            Merge(1,0),
                        line_num = seg.their_line_num + seg.n;

    pub fn join(&self, sep: &str) -> String {
        a.lines_all().collect::<Vec<_>>());
/// Returns the operations in `revs` that don't have their `rev_id` in
            type Value = CategoriesT;
    }
            enabled: AtomicBool::new(true),
    DurationEnd,
        count_utf16_code_units(&s[..in_base_units])
    type Item = Cow<'a, str>;
    pub fn new_duration<S, C>(name: S,
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
    -> SampleGuard<'a>
    pub(crate) fn get_view_id(&self) -> ViewId {
use rope::{Rope, RopeInfo};

        #[derive(Serialize, Deserialize)]
    Width(f64),
            l[offset..].chars().next()
            Merge(1,0), Merge(2,0),
                    "something", &["benchmark"], || {},
    session_id: SessionId,
    }
                    }

    /// Tests that merging again when there are no new revisions does nothing

    }
use std::fmt;
        self.set_selection(text, sel);
        engine.undo([1].iter().cloned().collect());

    /// The name to associate with the pid/tid.  Whether it's associated with
    }
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    fn edit_rev_undo_2() {
///
                }
        } else if line == max_line {
                                undo_group,
            find.find_status(matches_only)
            self.set_selection(text, selection);
        } else {
///     something_else_expensive();
        let first_rev = engine.get_head_rev_id().token();
            self.first_line = line - (self.height - 1);
categories_from_constant_array!(10);
        let result = closure();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    fn bench_trace_closure(b: &mut Bencher) {
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]

#[derive(Clone, Debug)]
        assert_eq!(utf8_offset, 13);
    /// if there is not at least one edit.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            SampleEventType::AsyncStart => 'b',
mod tests {
            None => text.line_of_offset(offset)

        }
    }
                        None
    /// For safety, this will panic if any revisions have already been added to the Engine.
        engine.edit_rev(1, edits+1, head2, d2);
impl PartialEq for CategoriesT {
    use serde_test::{Token, assert_tokens};
        assert!(a != b);
    pub args: Option<SampleArgs>
                              payload: Option<TracePayloadT>,
                    sel.add_region(region);
        }
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    self.fragment = "";
fn find_leaf_split_for_bulk(s: &str) -> usize {

}

    #[serde(serialize_with = "serialize_event_type")]
        where S: serde::Serializer

    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    match std::env::current_exe() {
/// typing a paragraph) will be combined into a single segment in a transform
// See the License for the specific language governing permissions and
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
use delta::{Delta, DeltaElement};
            rebased_deletes_from_union.union(to_delete)
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    base_sel: Selection,
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
    use interval::Interval;

        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
use linewrap;
            replace: None,
    {
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        let mut rendered_styles = Vec::new();
        let line = line as usize;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
            thread_name: Sample::thread_name(),
//! this central engine. It provides the ability to apply edits that depend on
        // rather than emitting an explicit start/stop to reduce the size of
        Ok(b.build())
            } else if incomp == GraphemeIncomplete::PrevChunk {
            GestureType::PointSelect => {
    #[bench]
    }

        let deletes_at_rev = self.deletes_from_union_for_index(ix);
        assert_eq!(Some(17), a.next_grapheme_offset(9));

        if let Some(occ) = closest_occurrence {
            rev_id_counter: 1,
extern crate log;
                Contents::Undo { .. } => panic!(),
    use test::black_box;

        // TODO: may make this method take the iv directly
            Merge(0,2), Merge(1, 2),
    /// is optional.
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());

    }
        assert_eq!(0, b.line_of_offset(1));
    #[cfg(feature = "benchmarks")]
        self.wrap_col = WrapWidth::Width(self.size.width);
    }

        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
//
                                                    self.size.width));
        // the front-end, but perhaps not for async edits.

        }
            Merge(0,1),
    pub timestamp_us: u64,
        });
                if (flags & FLAG_SELECT) != 0 {
        }
/// let b = a.slice(1, 9);
    }
        // TODO: simplify this through the use of scopeguard crate

/// conversions in both directions.
    TRACE.enable_config(config);
/// }
/// # Returns
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    /// the same even if it is rebased or merged between devices.
}
        );

            }
            self.name == other.name &&
        let trace = Trace::enabled(Config::default());
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
            'n' => SampleEventType::AsyncInstant,
    }
            SampleEventType::ObjectSnapshot => 'O',
            }
    }
    }
        while offset < l.len() && !l.is_char_boundary(offset) {

            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
        for find in &mut self.find {
        use self::MergeTestOp::*;
        assert_eq!(correct, rebased_inserts);
        assert_eq!(rope.line_of_offset(15), 3);
    /// An iterator over the lines of a rope.
    /// Offset of the point where the drag started.
    #[serde(skip_serializing_if = "Option::is_none")]
        match *self {
            GestureType::MultiLineSelect =>

                        let mut word_cursor = WordCursor::new(text, region.max());

        }

pub type Rope = Node<RopeInfo>;
        // todo: this will be changed once multiple queries are supported
        let new_head = engine.get_head_rev_id().token();
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
enum WrapWidth {
/// # Examples

pub struct View {

            trace.instant("c", &["test"]);
    }
    }
    /// Exposed for unit tests only.
        #[derive(Serialize, Deserialize)]
        assert!(end <= leaf.len());
        out.push(Revision {
    /// Exposed for unit tests.
use std::sync::Mutex;
/// For example, take a string that starts with a 0xC2 byte.
    {
            black_box(time::precise_time_ns());
    }
    #[test]
        base_subset.is_some() && base_subset == other_subset
        let new_sel = selection_movement(movement, &self.selection,
            }
    type Item = &'a str;
                l = nl;
            } else if incomp == GraphemeIncomplete::PrevChunk {
}
use multiset::{Subset, CountMatcher};
        }
            }
            drag_state: None,
                Edit { priority, undo_group, inserts, deletes } => {
    /// If the cursor is at the end of the rope, returns the empty string.
        }
/// revisions not shared by both sides.
            {
            self.set_selection(text, selection);
    edit: Contents,
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
            trace.closure_payload("y", &["test"], || {
pub struct Replace {
            trace.instant("test_samples_pulse", &["test"]);
        let expand_by = compute_transforms(revs);

    }
        let a = Rope::from("\n");
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    #[test]
///
/// Usage of static strings is encouraged for best performance to avoid copies.

    }
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    }
    }
        engine.edit_rev(1, 1, first_rev, d1.clone());
                }
            }
            // TODO: finer grain invalidation for the line wrapping, needs info

                   whole_words: bool) {
    #[test]

            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
    /// # Panics
            categories: None,
#[inline]
            if Some(priority) == last_priority {
    {
        let inserts = parse_subset_list("
    //
    }
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        }
    /// Returns a tuple of a new `Revision` representing the edit based on the
        self.scroll_to_cursor(text);
    }
    #[serde(skip_serializing_if = "Option::is_none")]

    fn test_samples_pulse() {
impl<'a> From<&'a Rope> for String {
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),

    ///
        let deletes_from_union = parse_subset("-#----#");
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));



        let trace = Trace::enabled(Config::default());
    }

        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        assert!(leaf.is_char_boundary(end));
        let delta = Delta::synthesize(&self.tombstones,
/// beginning.
        let d = RopeDelta_::deserialize(deserializer)?;
            let splitpoint = find_leaf_split_for_merge(self);
{
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
impl<'de> serde::Deserialize<'de> for CategoriesT {
impl<'de> Deserialize<'de> for Rope {
            warn!("Failed to get path to current exe: {:?}", e);
            let b_deltas = compute_deltas(&b_new, &other.text, &other.tombstones, &other.deletes_from_union);
        let (first_line, _) = self.offset_to_line_col(text, region.min());
                    RopeDeltaElement_::Copy(start, end) =>

        let mut hasher = DefaultHasher::new();
    }
                        let start_line = seg.our_line_num;
        let height = self.line_of_offset(text, text.len()) + 1;
/// ```rust
                        deletes_from_union = deletes_from_union.union(deletes);
    /// Starts a drag operation.
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
            as_vec.push(Sample::new_metadata(
    }
                }
extern crate serde_derive;
/// bytes required to represent the codepoint.
            self.next::<BaseMetric>();

        d_builder.delete(Interval::new_closed_open(10, 36));
        let inserts_1 = parse_subset_list("
        for rev in old_revs.into_iter().rev() {
    }
        let mut leaf_offset = pos - offset;
            self.set_selection(text, selection);
        assert_eq!(rope.offset_of_line(1), 3);
#[inline]
        let a = Rope::from("a\nb\n");

        }
                }
            }
/// ```


        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);

        engine.gc(&gc);
///
    match b {
pub fn disable_tracing() {
        assert_eq!(r.len(), r.offset_of_line(2));

pub fn samples_len() -> usize {
            true => self.selection.clone(),
    for r in revs {
        if (b as i8) >= -0x40 {
}
        self.tombstones = new_tombstones;
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
        if self.find.is_empty() {
        ChunkIter {
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
            Assert(0, "acrbdz".to_owned()),
                self.push_leaf(s.to_owned());
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
            Merge(1,2),
        let rearranged = rearrange(&revs, &base, 7);

                leaf_offset = self.pos() - noffset;
}
// See the License for the specific language governing permissions and
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
        let head = engine.get_head_rev_id().token();
        ];
        self.pending_render = pending
        let mut selection = self.selection.clone();
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                    } else {
            black_box(time::precise_time_ns());
            client.scroll_to(self.view_id, line, col);
    }
            Assert(2, "afc".to_owned()),
    #[test]

            },
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
/// typing a paragraph) will be combined into a single segment in a transform
        }

            for (i,rev) in self.revs.iter().enumerate().rev() {
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
                    "something", &["benchmark"], || {},
        self.height
/// Enable tracing with a specific configuration. Tracing is disabled initially
        engine.undo([1,3].iter().cloned().collect());
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        deletes_bitxor: Subset,

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            'M' => SampleEventType::Metadata,
                              start_ns: u64,
        assert_eq!(0, a.line_of_offset(0));
/// assert_eq!("ello wor", String::from(&b));
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        assert!(a != b);
    out.as_mut_slice().reverse();
// utility function to clamp a value within the given range
                }
    fn add(self, rhs: Rope) -> Rope {
    use engine::*;

/// the session ID component of a `RevId`
            //leaf.len() - start_pos
        let undone = self.undone_groups.contains(&undo_group);

        true
///
        rope.line_of_offset(20);
        /// Used to order concurrent inserts, for example auto-indentation
    TRACE.block(name, categories)
                RenderTactic::Discard => {
                    filename.to_str().map(|s| s.to_string())
        AssertAll(String),
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

/// ```
                         hls: &[(usize, usize)],
    #[test]
impl StringArrayEq<[&'static str]> for Vec<String> {
                        if n_skip > 0 {

            splitpoint
    } else if x < max {
        engine.undo([].iter().cloned().collect());
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
            buffer_id: buffer_id,
pub type RevToken = u64;
    /// the pid or the tid depends on the name of the event
                c.provide_context(&pl, self.pos() - poffset);
            if self[i] != other[i] {
                    }
    #[allow(dead_code)]
            utf16_size: count_utf16_code_units(s),
                deletes: new_deletes,
        self.revs.push(new_rev);
        -> Result<CategoriesT, D::Error>
        let inserts = parse_subset_list("

    fn prev_grapheme_offset() {
        for _ in 0..line_len {
        json!({"test": value})
        !self.selection.regions_in_range(offset, offset).is_empty()
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
            rendered_styles.push(sel_end as isize - sel_start as isize);

        }
    }
            wrap_col: WrapWidth::None,

}
/// an argument.
            find: Vec::new(),
        assert_eq!(trace.is_enabled(), true);

        let delta = Delta::synthesize(&self.tombstones,
        for r in &self.revs[ix + 1..] {
///
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        samples.sort_unstable();
            None
}
            end += 1;
use unicode_segmentation::GraphemeCursor;
            trace.instant("c", &["test"]);
/// Then offset=1 is invalid.
use std::cell::RefCell;
/// bytes required to represent the codepoint.

        //} else {
            }
///
            find: Vec::new(),
    }
}
            // The deletes are already after our inserts, but we need to include the other inserts
    }
            // TODO: on double or triple click, quantize offset to requested granularity.
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        for mut find in self.find.iter_mut() {
}

    #[test]
        last_line += if last_col > 0 { 1 } else { 0 };
    where S: Into<StrCow>, C: Into<CategoriesT>

    fn test_samples_closure() {
            GestureType::LineSelect =>
        assert_eq!(soln, String::from(engine.get_head()));
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
                if !inserts.is_empty() {
                }
        CategoriesT::DynamicArray(c)
    #[inline]
            to_undo.insert(i+1);

            duration_us: None,
    /// height of visible portion
/// ```rust
        if offset == 0 {
                    if seg.validity == line_cache_shadow::ALL_VALID {

}
            Merge(0,1),
        // insert character at end, when this test was added, it panic'd here
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        text = new_text;
        let (first_line, _) = self.offset_to_line_col(text, region.min());
    1
    }
        assert_eq!(rope.offset_of_line(1), 3);
            let mut peers = Vec::with_capacity(count);
        ");
        } else { // no toggled groups, return past end
    // * Unicode width (so CJK counts as 2)
        // stable order since the resolution of timestamps is 1us.
        let mut a = Rope::from("");
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
                where E: serde::de::Error
        &self.selection
        }

    pub preserve_case: bool

///
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
// See the License for the specific language governing permissions and
            Merge(0,1),
/// Computes a series of priorities and transforms for the deltas on the right
        let tid = all_samples.front()
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
            Merge(0,2), Merge(1, 2),
    fn merge_insert_only_whiteboard() {
    {

        let mut cursor = Cursor::new(self, offset);
//!

        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
}

    }
        for r in &self.revs[ix + 1..] {
    fn merge_priorities() {

use word_boundaries::WordCursor;
    ///
            find.set_hls_dirty(false)
                    self.set_selection(text, selection);
use linewrap;
        }
        let a = Rope::from("");
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
    {
                    els: delta.els.drain(..)

            let horiz = None;
        let mut samples = self.samples_cloned_unsorted();
        let initial_rev = engine.get_head_rev_id().token();
        // a, b, y, z, c, x
            }
            for rev in &self.revs {
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
    /// The incrementing revision number counter for this session used for `RevId`s
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
    ///

                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
                    self.do_gesture(text, line, column, GestureType::LineSelect)

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
    /// Tracks whether there has been changes in find results or find parameters.

        let (ins_delta, deletes) = delta.factor();
        // that into our actual target.
                inserts: new_inserts,

            }
                }
                    priority, inserts, deletes,
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
        let inserts_2 = parse_subset_list("
        let subset_str = format!("{:#?}", expand_by[1].1);
        result
                    text.slice_to_string(start, end)
            }
            for (i,rev) in self.revs.iter().enumerate().rev() {
                peer.set_session_id(((i*1000) as u64, 0));
impl View {
        let mut retain_revs = BTreeSet::new();
    /// assumed to be forward).
pub struct ChunkIter<'a> {
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
    // This computes undo all the way from the beginning. An optimization would be to not
        assert_eq!(snapshot[4].name, "y");
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    }
    fn drop(&mut self) {
        assert_eq!(Some(2), b.prev_codepoint_offset(5));

                }
                        } else {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
                }
extern crate libc;
/// The result of the closure.
            // about what wrapped.
    }
        View {
        b if b < 0x80 => 1,
            base_rev: RevToken, delta: Delta<RopeInfo>) {
            trace.instant("c", &["test"]);
            line_cache_shadow::CURSOR_VALID
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
    #[serde(rename = "ph")]

    out
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    trace: Option<&'a Trace>,
categories_from_constant_array!(4);
    }
    fn bench_get_tid(b: &mut Bencher) {
    pub fn line_of_offset(&self, offset: usize) -> usize {

        assert_eq!(snapshot[3].name, "y");
impl FromStr for Rope {
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
        a.lines_all().collect::<Vec<_>>());
use serde_json::Value;
    // * Code units in some encoding
        if !before {
            let end = self.line_of_offset(last_text, iv.end()) + 1;
        let a = Rope::from("a\nb\nc");
        }

impl Ord for Sample {
        &self.selection
        &self.selection
        use self::MergeTestOp::*;
/// Replace part of a `Rope`:
            enabled: AtomicBool::new(false),

    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            Merge(2,0),

        if let Some(edit) = contents {
    }
                let offset = self.selection[0].start;
            event_type: SampleEventType::Instant,
            rendered_styles.push(style_id as isize);

        let mut b = String::new();
        let expand_by = compute_transforms(a_revs);
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        // TODO: simplify this through the use of scopeguard crate
    /// Time complexity: O(log n)
        let mut b = String::new();
        /// along with the newline that triggered it.
        // 1 for exe name & 1 for the thread name
    find: Vec<Find>,
        //};

        let snapshot = trace.samples_cloned_sorted();
        let guard = Self {
            // to replicate whiteboard, z must be before a tombstone
            inner: self.lines_raw(start, end)
            Assert(0, "adc".to_owned()),
            sample.event_type = SampleEventType::DurationEnd;
    /// This method is responsible for updating the cursors, and also for


        if self.breaks.is_some() {
            s.as_bytes()[offset - 1] == b'\n'
}
        --#--
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
    }
            find_changed: FindStatusChange::None,
#[inline]
        None => {
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    }
            }
use width_cache::WidthCache;
//


                        Some(gc_dels.transform_shrink(&inserts))
                        }
/// associated performance hit across the board for turning it on).
            Assert(0, "adfc".to_owned()),
        self.drag_state = None;
            Assert(0, "acrpbdzj".to_owned()),
            self.push_leaf(s[..splitpoint].to_owned());
    fn can_fragment() -> bool { false }
    /// If `line` is equal to one plus the current number of lines,
        let trace = Trace::disabled();

/// See `trace_payload` for a more complete discussion.
/// An element in a `RopeDelta`.
/// See `trace_payload` for a more complete discussion.
        engine.edit_rev(1, edits+1, head, d1);
        Some(self.cmp(other))
    }
            }
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
    }
        engine.edit_rev(1, 2, new_head, d2);
                    if invert_undos {
        }, deletes_from_union)
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        let mut all_samples = self.samples.lock().unwrap();

    fn build_delta_1() -> Delta<RopeInfo> {
        ");

            Merge(0,1),
            MetadataType::ProcessLabels {..} => "process_labels",

                    ops.push(self.build_update_op("invalidate", None, seg.n));
        }

            self.set_selection(text, sel);
            // selection with interior
        let replacement = match self.selection.last() {
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        if let Some((l, offset)) = self.get_leaf() {
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
/// # Performance
            trace.closure_payload("y", &["test"], || {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
/// * `name` - A string that provides some meaningful name to this sample.
                    } else {
                metadata_name: None,
}

        match cmd {
        }
    {
// Licensed under the Apache License, Version 2.0 (the "License");
// ======== Generic helpers
        self.buffer_id
        }


            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
    type Item = Cow<'a, str>;
            as_vec.push(Sample::new_metadata(

                        // no need to un-delete undone inserts since we'll just shrink them out
        assert_eq!(2, a.line_of_offset(4));

        },
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
    #[allow(dead_code)]
            Revision {
        assert_eq!("#-####-", &subset_str);
        cursor.next::<BaseMetric>()
/// });
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
            Insert(String),
        let mut pos = self.pos();
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
}
        engine.edit_rev(1, edits+1, head2, d2);

        assert_eq!(Some(5), b.prev_codepoint_offset(9));

                    // are empty, could send update removing the cursor.
    }

    }
        where D: Deserializer<'de>,
enum FindStatusChange {
    #[test]
const FLAG_SELECT: u64 = 2;
        assert_eq!("a", String::from(&tombstones_2));
        let first_rev = engine.get_head_rev_id().token();
    /// Select entire buffer.
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
categories_from_constant_array!(9);

        let trace = Trace::enabled(Config::with_limit_count(10));
    /// ties in edit priorities. Otherwise the results may be inconsistent.
        let mut all_samples = self.samples.lock().unwrap();
        let mut b = TreeBuilder::new();
    fn next_rev_id(&self) -> RevId {

                cur_all_inserts = older_all_inserts;
/// Find a set of revisions common to both lists
    }
                        line_num = seg.their_line_num + seg.n;
    /// via process_name/thread_name respectively.
        Self::with_limit_count(size / size_of::<Sample>())
            ),
            'B' => SampleEventType::DurationBegin,
    }

        let text_with_inserts = text_ins_delta.apply(&self.text);
            a.push('a');
    /// # Panics
    }
            self.shrink_to_fit();
                }
        engine.undo([2].iter().cloned().collect());
    replace: Option<Replace>,
                           style: &Style) -> usize {
            // I think it's a precondition that this will never be called
//! under `Engine::edit_rev`, which is considerably simpler than the usual
/// required). Mutations are generally copy-on-write, though in-place edits are
    }
#[derive(Clone, Copy)]
    /// than this will panic.
            let b = s.as_bytes()[offset];
/// Replace part of a `Rope`:
            rendered_styles.push((iv.start() as isize) - ix);

    ($num_args: expr) => {


    {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                     modify_selection: &SelectionModifier) {

    /// if it is non-empty. It needs to be a separate commit rather than just
                    let mut selection = self.selection.clone();
    use engine::*;
    where S: serde::Serializer {
/// # Arguments
            timestamp_us: ns_to_us(start_ns),
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
        let mut r = Rope::from("27");
    deletes_from_union: Subset,
        if let Some(new_scroll_pos) = self.scroll_to.take() {
pub struct SampleArgs {
//TODO: document metrics, based on https://github.com/google/xi-editor/issues/456
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        }

        let col = col as usize;
            let b = s.as_bytes()[offset];
    fn line_of_offset_small() {
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
        gc_scenario(35,20);
            MetadataType::ProcessName {name} => (Some(name), None),
    /// If `modify` is `true`, the selections are modified, otherwise the results
// Copyright 2016 The xi-editor Authors.
/// Create a `Rope` from a `String`:
                    }
    }
        let line = self.line_of_offset(text, offset);
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        value

}

    #[serde(skip_serializing_if = "Option::is_none")]

        let a = Rope::from("a\nb\n");
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    fn is_boundary(s: &String, offset: usize) -> bool {
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
        }

        }
    /// in the slice up to `offset`.

        let mut leaf_offset = pos - offset;
    fn drop(&mut self) {
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
            revs: vec![rev],
    #[test]

        let first_rev = engine.get_head_rev_id().token();
        }
    }
        self.revs.last().unwrap().max_undo_so_far
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
        trace.closure_payload("z", &["test"], || {},
            },
extern crate time;
        assert_eq!(None, b.prev_codepoint_offset(0));
    pub(crate) fn get_view_id(&self) -> ViewId {
    }
    }
        a.push('\n');

            pos += 1;
}
}
    }
/// xi_trace::trace("something happened", &["rpc", "response"]);
        self.deletes_from_union = new_deletes_from_union;
    samples: Mutex<FixedLifoDeque<Sample>>,
}
            l[offset..].chars().next()
    inner: ChunkIter<'a>,

                if s.ends_with('\n') {
        info.lines
                    filename.to_str().map(|s| s.to_string())
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
                }
        assert_eq!(correct, rebased_inserts);
    fn next(s: &String, offset: usize) -> Option<usize> {
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,


        --#--
    fn scroll_to_cursor(&mut self, text: &Rope) {
        for &(trans_priority, ref trans_inserts) in &expand_by {
        let deletes_from_union = Subset::new(0);
/// With `json_payload` feature:
        } else {
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    1
use unicode_segmentation::GraphemeCursor;
                    if invert_undos {
        MergeTestState::new(3).run_script(&script[..]);
                    }
        b.iter(|| {
                    .with_horiz(horiz)
            update["lines"] = json!(lines);
            None
    let mut utf16_count = 0;
            std::thread::sleep(std::time::Duration::new(0, 1000));
            self.idx += 1;
    }
        engine.undo([1,2].iter().cloned().collect());
fn default_session() -> (u64,u32) {
    pub fn new_duration_marker<S, C>(name: S,

        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        Self {
            AddSelectionAbove =>
    #[bench]
#[derive(Serialize, Deserialize, Clone, Debug)]
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
                        line_num = seg.their_line_num + seg.n;
extern crate log;
        selection.add_region(region);
        self.set_dirty(text);
            GotoLine { line } => self.goto_line(text, line),
// Unless required by applicable law or agreed to in writing, software
            let a_to_merge = &self.revs[base_index..];
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
            let max_undo = self.max_undo_group_id();
                    result = cow_append(result, &self.fragment[.. i + 1]);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

    }
            event_type: SampleEventType::Instant,
        assert_eq!(b, String::from(a));
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
        }
            MergeTestState { peers }
            SampleEventType::ObjectSnapshot => 'O',
            // I think it's a precondition that this will never be called

    }
            Assert(0, "acbd".to_owned()),
        // x, a, y, b, z, c
        let revs = basic_insert_ops(inserts, 1);
use edit_types::ViewEvent;
///
    }
                    let transformed_inserts = inserts.transform_expand(&s);
    find: Vec<Find>,
    fn eq(&self, other: &Sample) -> bool {
        out.push(Revision {


        for i in 0..5_000 {

            None
    #[cfg(feature = "benchmarks")]
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };

        assert_eq!(trace.get_samples_count(), 0);
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
                            }
#[derive(Copy, Clone)]
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
        assert_tokens(&rope, &[
                    as_vec.push(Sample::new_metadata(

            SampleEventType::FlowInstant => 't',
        let text_b = Rope::from("zpbj");
                    self.fragment = "";
        where S: Serializer
            b.push('b');
        self.samples.lock().unwrap().limit()
    fn compute_transforms_1() {


    pub fn set_scroll(&mut self, first: i64, last: i64) {

        engine.undo([1,2].iter().cloned().collect());
                leaf_offset = self.pos() - poffset;
        samples[1].pid = 2;
        }
        let expand_by = compute_transforms(a_revs);
    }

    }
    use std::collections::BTreeSet;
        LinesRaw {


    #[serde(rename = "dur")]
    #[derive(Debug)]
    }
        if self.find_changed != FindStatusChange::None {
        assert_eq!(Some(6), a.next_codepoint_offset(3));
        }
            l[offset..].chars().next()
    /// than this will panic.
use rope::{Rope, RopeInfo};
    /// is optional.
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());

                    if seg.validity == line_cache_shadow::ALL_VALID {

            }),
pub type TracePayloadT = serde_json::Value;
    /// Create a new Engine with a single edit that inserts `initial_contents`
        if self.find.is_empty() {
    /// If `line` is equal to one plus the current number of lines,
                    to_payload(("some description of the closure")))));
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
            for &occurrence in find.occurrences().iter() {
///
                metadata_sort_index: None,


    /// Return the offset of the codepoint before `offset`.

    pub fn is_enabled(&self) -> bool {
        let mut samples = self.samples_cloned_unsorted();
//!
        assert_eq!(None, a.prev_codepoint_offset(0));
    #[cfg(feature = "benchmarks")]
/// monotonically increasing single global integer (when tracing) per creation
}
//
                            }
            prev_boundary = c.prev_boundary(&l, leaf_offset);
            'B' => SampleEventType::DurationBegin,
        for i in 1..(s1.len() * 3) {
        let a = Rope::from("a\nb\n");
        a.lines_all().collect::<Vec<_>>());
    pub fn merge(&mut self, other: &Engine) {
#[inline]
            write!(f, "Rope({:?})", String::from(self))
    }
    }
                    text.slice_to_string(start, end)
        }
    }
        for &(trans_priority, ref trans_inserts) in &expand_by {
        let a = Rope::from("\n");
    #[bench]
        /// Just the `symmetric_difference` (XOR) of the two sets.
    pub(crate) fn get_view_id(&self) -> ViewId {
// limitations under the License.
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
/// # Examples
                    }
enum FindStatusChange {
// You may obtain a copy of the License at
            tombstones: Rope::default(),

        } else {
    fn add(self, rhs: Rope) -> Rope {
            let after = full_priority >= trans_priority;  // should never be ==

}
        fn run_op(&mut self, op: &MergeTestOp) {
                    return None;
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        Cow::from(b)
                                deletes_bitxor: new_deletes_bitxor,
    }

    /// The current contents of the document as would be displayed on screen
    }


    }
            match self.wrap_col {
        b.iter(|| black_box(sys_tid::current_tid()));
        let mut retain_revs = BTreeSet::new();
                            }

                        let mut rendered_lines = Vec::new();
    /// This is a regression test to ensure that session IDs are used to break
                name, categories, None, start, end - start));


        assert_eq!(None, a.next_codepoint_offset(10));
//
    }
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    /// The state for finding text for this view.
    ///
        as_vec.extend(all_samples.iter().cloned());
        }
            std::thread::sleep(std::time::Duration::new(0, 1000));
        for region in self.selection.iter() {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
        trace.closure_payload("x", &["test"], || {
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);

            let splitpoint = find_leaf_split_for_merge(self);
                },

        let r = r + Rope::from(&b[MIN_LEAF..]);
/// # Returns
                Some(i) => {
            Assert(0, "acbd".to_owned()),
            SampleEventType::FlowStart => 's',
#[derive(Clone, Debug, PartialEq, Eq)]
            };
    }
    }
        self.enable_config(Config::default());
        samples[1].pid = 2;
                    let full_path_str = full_path.into_string();
        if offset == s.len() {
    }
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        let l_str = text.slice_to_string(start_pos, pos);
    }

            Assert(1, "acb".to_owned()),
            s = &s[splitpoint..];
            None

        let result = closure();
            Assert(1, "ab".to_owned()),
    }
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        assert_eq!(None, a.next_grapheme_offset(17));
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
                    } else {
        }
/// monotonically increasing single global integer (when tracing) per creation
    }
                        let n_skip = seg.their_line_num - line_num;
    }
        // that into our actual target.
            tombstones: Rope::default(),


/// discussion on payload.
    pub args: Option<SampleArgs>
use word_boundaries::WordCursor;
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
                    deletes: deletes.clone(),
    }
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    fn line_offsets() {
                name, categories, Some(payload.into()), start, end - start));
mod sys_tid;
            let after = full_priority >= trans_priority;  // should never be ==
        assert_eq!(None, b.prev_codepoint_offset(0));

        let last = max(last, 0) as usize;
    selection: Selection,
            next_expand_by.push((trans_priority, new_trans_inserts));
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    }
                                undo_group,
        trace.instant("2", &["test"]);
    fn hash<H: Hasher>(&self, state: &mut H) {
            Assert(0, "zacbd".to_owned()),
        // probably change as the recording internals change.
    #[bench]
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        self.drag_state = None;
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
/// Find a set of revisions common to both lists

                len += 1;
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    fn measure(_: &RopeInfo, len: usize) -> usize {
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
    #[test]
                Contents::Edit {inserts, ..} => inserts,
        assert_eq!(snapshot[2].name, "x");
            SampleEventType::ObjectCreated => 'N',
                SelectionModifier::Set => self.set_selection(text, occ),
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
        a.lines_all().collect::<Vec<_>>());
    1
    out
        assert_eq!(TEST_STR, String::from(engine.get_head()));
            return ix;
              F: FnOnce() -> R
        #------
            if let GraphemeIncomplete::PreContext(_) = incomp {
            GotoLine { line } => self.goto_line(text, line),
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
    // for simplicity.
        match self.inner.next() {
                }
        inserts: Subset,
/// An element in a `RopeDelta`.
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
        assert_eq!(trace.is_enabled(), true);
        self.size = size;
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
//! `Engine::merge`, which is more powerful but considerably more complex.
            // copy the current state
        if !gc_dels.is_empty() {
        self.find.iter().map(|find| {
            last_line -= 1;
                        DeltaElement::Copy(start, end),
        }
    }
            1 if self.selection[0].is_caret() => {
        }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        MergeTestState::new(6).run_script(&script[..]);
                                             &text, false);
                    let _ = s.pop();
    // encourage callers to use Cursor instead?
                }
    out
    #[should_panic]
            categories: Some(categories.into()),
    #[bench]
                CategoriesT::StaticArray(c)
            //self.cursor.set(self.end);

        }
    ///
    }
///
            Assert(2, "ab".to_owned()),
impl<'a> Iterator for ChunkIter<'a> {
                self.do_drag(text, line, column, Affinity::default()),
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        }
            replace_changed: false,
    pub fn next_codepoint(&mut self) -> Option<char> {
        last_line += if last_col > 0 { 1 } else { 0 };
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
            // These two will be different without using session IDs
        delta.serialize_field("base_len", &self.base_len)?;
/// on program launch.
                }
    DurationBegin,
    }

        for rev in &self.revs[first_candidate..] {
pub struct LinesMetric(usize);  // number of lines
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// revision, and so needs a way to get the deletion set before then.
        let mut all_samples = self.samples.lock().unwrap();
            deletes_from_union = match rev.edit {
            }
            Assert(0, "zacpbdj".to_owned()),
        if let Some(new_scroll_pos) = self.scroll_to.take() {
impl<'a> Iterator for ByteIter<'a> {
            self.idx += 1;
impl From<Vec<String>> for CategoriesT {
        ];

        }
        if let Some(sel) = new_sel {
            SampleEventType::ObjectDestroyed => 'D',
            if let GraphemeIncomplete::PreContext(_) = incomp {
    }
    use delta::{Builder, Delta};
            pos -= 1;

    }
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
    // since undo and gc replay history with transforms, we need an empty set
    fn to_payload(value: &'static str) -> TracePayloadT {
        let head = engine.get_head_rev_id().token();
/// ```rust

    fn from(c: Vec<String>) -> CategoriesT {

    #[cfg(feature = "benchmarks")]
                                                        style_spans, line_num);
            trace.instant_payload("c", &["test"], to_payload("test_get_samples_nested_trace"));
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    // TODO: maybe refactor this API to take a toggle set
    }
    /// If `modify` is `true`, the selections are modified, otherwise the results
#[macro_use]
    /// Selects an entire word and supports multi selection.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
                            Cursor::new(breaks, offset));
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        assert_eq!(snapshot[7].name, "z");


        let first_rev = &self.revs.first().unwrap();
    /// this returns the offset of the end of the rope. Arguments higher
        /// should go before typed text.
            thread_name: Sample::thread_name(),
            false => Selection::new(),
            let _x = trace.block("something", &[]);

}
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
                tid));

use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
    }
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));

                let (pl, poffset) = self.prev_leaf()?;
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
        // probably change as the recording internals change.
/// from the new revisions on the left.
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
                return None;
    }
    fn basic_rev(i: usize) -> RevId {
                    let full_path = exe_name.into_os_string();
    pub fn merge(&mut self, other: &Engine) {
    /// Exposed for unit tests only.
        let style = style_map.merge_with_default(style);
    #[test]
    fn edit_rev_simple() {
        MergeTestState::new(2).run_script(&script[..]);
        let mut d_builder = Builder::new(TEST_STR.len());
    }
            match *op {
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
            let matches_only = self.find_changed == FindStatusChange::Matches;
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    #[test]
}
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        // even though the actual sampling order (from timestamp of
            retain_revs.insert(last.rev_id);
                        if n_skip > 0 {
/// Then offset=1 is invalid.
    fn bench_single_timestamp(b: &mut Bencher) {
            }
        deletes_from_union = new_deletes_from_union;

    ///
    fn merge_max_undo_so_far() {
}
            replace: None,
/// have to be considered in `rebase` substantially for normal editing
    (out, text, tombstones, deletes_from_union)

    fn bench_get_tid(b: &mut Bencher) {
    }
    #[derive(Debug)]

    {
            GestureType::LineSelect =>
        assert_eq!(None, a.prev_grapheme_offset(0));
        let trace = Trace::enabled(Config::with_limit_count(10));
/// # use xi_rope::Rope;
use multiset::{Subset, CountMatcher};
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
#[inline]

            Assert(1, "arpbj".to_owned()),
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
                // This could be done by explicitly overriding, or by tweaking the
        self.height = last - first;

mod tests {
        let a = Rope::from("\n");
        assert_eq!(utf16_units, 20);
        for find in &mut self.find {

    /// The thread the sample was captured on.  Omitted for Metadata events that
    }
#[inline]
        self.revs.iter().enumerate().rev()

            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
    fn merge_idempotent() {
    // trace_block()/trace_closure
    #[test]
    }
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    }
                std::thread::sleep(std::time::Duration::new(0, 1000));
        let (leaf, pos) = cursor.get_leaf().unwrap();
    }
                Some(Cow::from(s))
                        s = &s[..s.len() - 1];
        engine.edit_rev(1, 1, first_rev, build_delta_1());
    1
                        Some(gc_dels.transform_shrink(&inserts))
            Merge(0,2), Merge(1, 2),
            l[offset..].chars().next()
                return false;

        b if b < 0xf0 => 3,
            result.push_str(chunk);
        assert_eq!(None, a.next_grapheme_offset(17));
    #[cfg(feature = "benchmarks")]
    /// Time complexity: O(log n)
    /// after an edit is applied, to allow batching with any plugin updates.
        let trace = Trace::enabled(Config::with_limit_count(20));
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
/// revisions not shared by both sides.
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        trace.disable();

        ##
            tid: tid,
#[inline]
        assert_eq!(Some(6), a.next_codepoint_offset(3));
        //} else {
    pub fn new_disabled() -> Self {

        for i in 0..self.len() {
        // A with ring, hangul, regional indicator "US"


    #[test]
    TRACE.samples_cloned_sorted()
#[macro_use]
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
        where S: Serializer
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
}
            },
categories_from_constant_array!(10);
    }
    use super::*;
            Assert(1, "ab".to_owned()),
                        line_num = seg.their_line_num + seg.n;
        // additional tests for line indexing
impl PartialEq for CategoriesT {
    /// If the cursor is at the end of the leaf, advances to the next leaf.

    }
// Licensed under the Apache License, Version 2.0 (the "License");
    /// Get revision id of head revision.
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};


            cursor: Cursor::new(self, start),
            MetadataType::ProcessLabels {..} => (None, None)

extern crate serde;
    }
            },
    }
    pub fn max_size_in_bytes(&self) -> usize {
    }
    ThreadSortIndex { sort_index: i32 },
        }
}
        let mut engine = Engine::new(Rope::from(TEST_STR));

    Width(f64),
    }
}

    /// Callers are expected to validate their input.

    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {

        b.set_dirty(true);
                    }
pub struct Config {
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
        self.sample_limit_count
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        }


        let mut to_undo = BTreeSet::new();
    type L = String;
                if s.ends_with('\n') {
        ---#--
    #[test]
    #[test]
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
                where E: serde::de::Error
            new_deletes = new_deletes.transform_expand(&new_inserts);
        let expand_by = compute_transforms(a_revs);
                    self.set_selection(text, selection);
            SampleGuard::new_disabled()

            ix = iv.end() as isize;
        // creation) is:
}
    #[test]
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        }
pub struct RopeInfo {
        let d = RopeDelta_::deserialize(deserializer)?;
        assert_eq!(snapshot[3].name, "a");
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
        let mut d_builder = Builder::new(TEST_STR.len());
            GestureType::ToggleSel => self.toggle_sel(text, offset),

                    if retain_revs.contains(&rev.rev_id) {
}
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        -> Result<CategoriesT, D::Error>
                // This could be done by explicitly overriding, or by tweaking the
    fn bench_trace_block_payload(b: &mut Bencher) {
        trace.closure_payload("z", &["test"], || {},
    }
        assert_eq!(rope.offset_of_line(4), rope.len());
                name, categories, Some(payload.into()), start, end - start));
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
/// associated performance hit across the board for turning it on).
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
            AssertMaxUndoSoFar(1,1),

    max_undo_so_far: usize,
impl TreeBuilder<RopeInfo> {
        #------
        assert_eq!(utf16_units, 11);
            true => self.selection.clone(),
            Merge(0,2), Merge(1, 2),
use styles::{Style, ThemeStyleMap};
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);


    // since undo and gc replay history with transforms, we need an empty set
        let mut d_builder = Builder::new(TEST_STR.len());

            // with offset == s.len(), but be defensive.
                                undo_group,
/// # Examples
    }
            Rope::concat(
    #[test]
/// bytes required to represent the codepoint.
#[macro_use]
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };


                            deletes_bitxor
                        line_num = seg.their_line_num + seg.n;
                },
    #[test]
        in_measured_units
        let a = Rope::from("");
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
}
        assert_eq!(trace.is_enabled(), true);
                    } else if !inserts.is_empty() {


        engine.edit_rev(1, 1, first_rev, build_delta_1());
                        })
                match *other {
}
    fn from(r: Rope) -> String {
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
/// 3. You may not care about them always being sorted if you're merging samples
}
    fn gc_scenario(edits: usize, max_undos: usize) {

        if self.is_enabled() {
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
    {
          F: FnOnce() -> R
        Ok(exe_name) => {
    /// The thread the sample was captured on.  Omitted for Metadata events that
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
    #[cfg(feature = "benchmarks")]
/// State required to resolve a drag gesture into a selection.
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        for u in s.chars() {

        let inserted = inserts.inserted_subset();

        }
        base_subset.is_some() && base_subset == other_subset
#[derive(Copy, Clone)]
}
    }
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    /// The line number is 0-based.
                Some(pos) => offset += pos + 1,
        -> SampleGuard
//
            rev_id: self.next_rev_id(),
    {
                        ops.push(self.build_update_op("copy", None, seg.n));
//
        impl<'de> Visitor<'de> for CategoriesTVisitor {
#[macro_use]
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
    }
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);

        self.revs.last().unwrap().max_undo_so_far
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);

    fn can_fragment() -> bool {
    pub duration_us: Option<u64>,
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
            },
                Ok(CategoriesT::DynamicArray(categories))
                    }
                client.replace_status(self.view_id, &json!(replace))

            let deletes = Subset::new(inserts.len());
            false
    TRACE.instant_payload(name, categories, payload);
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    fn prev(s: &String, offset: usize) -> Option<usize> {
        /// Used to order concurrent inserts, for example auto-indentation
            // about what wrapped.
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    #[cfg(feature = "benchmarks")]
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
/// }
                return offset;
            &rebased_deletes_from_union, &new_deletes_from_union);
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
        let mut b = String::new();

        while !leaf.is_char_boundary(end) {
    }
    }
impl Sample {
    {
        ids.iter().cloned().map(|i| {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },
            pid: sys_pid::current_pid(),
        // todo: for now only a single search query is supported however in the future
pub fn samples_len() -> usize {
            'i' => SampleEventType::Instant,
            deletes_from_union,
                selection.add_region(SelRegion::caret(region.max()));
            let right_str = self[splitpoint..].to_owned();
        Ok(Delta::from(d))

            //if self.cursor.is_boundary::<BaseMetric>() {

            }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));

fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
        self.set_selection_raw(text, selection);
    fn is_ok_child(&self) -> bool {
        for find in self.find.iter() {
        }
    #[bench]
//! A rope data structure with a line count metric and (soon) other useful
    ///
    }
}
            soln.push('b');
    }
/// Enable tracing with a specific configuration. Tracing is disabled initially
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        where S: serde::Serializer
    pub fn empty() -> Engine {
    }
            }
    }
            if let Some(ref thread_name) = sample.thread_name {
//! a previously committed version of the text rather than the current text,

                              duration_ns: u64) -> Self
    /// The session ID used to create new `RevId`s for edits made on this device


                    let sel_start = cursor.pos();
        r.slice_to_string(0, r.len())
            Assert(0, "zacpb".to_owned()),
    type Item = Cow<'a, str>;
    }
        // NOTE: we derive to an interim representation and then convert
        assert_eq!(snapshot[3].name, "a");

    pub fn new(initial_contents: Rope) -> Engine {
    fn goto_line(&mut self, text: &Rope, line: u64) {
        });

        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
            Move(movement) => self.do_move(text, movement, false),
    out.as_mut_slice().reverse();
        assert_eq!("zcpbdj", String::from(&text_2));
    fn find_base_1() {
    fn compute_deltas_1() {
        assert_eq!(trace.is_enabled(), true);
        match self {
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        }
            find.set_hls_dirty(false)
        *self = b.build();
                Contents::Undo { .. } => panic!(),
                        first_sample_timestamp,
        -##-
        }
        delta.end()
                    match full_path_str {
/// revisions on top of the revisions represented by `expand_by`.
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
        assert_eq!(trace.get_samples_count(), 5);
        // current recording mechanism should see:
        }
    }
        (self.session1, self.session2)
                }
    }
            }

        where S: Serializer
        // the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past
            let c = i.to_string() + "\n";
}
        let mut a = String::new();
            self.categories == other.categories &&
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
        let mut ops = Vec::new();
    }
/// A flag used to indicate when legacy actions should modify selections
            None
            }
// should make this generic, but most leaf types aren't going to be sliceable
                // TODO could probably be more efficient by avoiding shuffling from head every time
#[inline]

    /// update cycle. This should be a last resort, updates should generally cause
use unicode_segmentation::GraphemeCursor;
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
    }
        assert_eq!(snapshot[6].name, "z");
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
/// let mut a = Rope::from("hello world");
        // spam cmd+z until the available undo history is exhausted
            result.push_str(chunk);
        assert_eq!(utf16_units, 17);
            end -= 1;
//! a previously committed version of the text rather than the current text,

                        if self.undone_groups.contains(undo_group) {
#[cfg(feature = "benchmarks")]

                let line = line.min(text.measure::<LinesMetric>() + 1);
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
        engine.edit_rev(1, 1, first_rev, d1.clone());
        for i in 0..5_000 {
    /// method to be fast even when the selection is large.
                if s.ends_with('\n') {
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);

            }),
    }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
    fn measure(_: &RopeInfo, len: usize) -> usize {
            Merge(1,2),
        Self {
    }
    let inverse_tombstones_map = old_deletes_from_union.complement();

        let b = Rope::from("b");
    utf16_count
}
        }
        assert_eq!(1, expand_by.len());
    // transform representing the characters added by common revisions after a point.
            base_len: usize
        let d = engine.delta_rev_head(after_first_edit);
            text: Rope::default(),
    fn prev(s: &String, offset: usize) -> Option<usize> {
use width_cache::WidthCache;
    #[derive(Debug)]
///
        ];
    fn lines_raw_small() {
        } else {
            a = a + Rope::from(&c);
        }
/// of Sample that determines order.
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
                l = nl;


    session: SessionId,
pub struct Lines<'a> {
    {

        engine.undo([1,2].iter().cloned().collect());
            Some(offset - len)
    }

    }
        // same span exists in both sets (as when there is an active selection)
    s.serialize_char(ph.into_chrome_id())

        self.enabled.store(true, AtomicOrdering::Relaxed);
/// Measured unit is newline amount.
        assert_eq!(r.len(), r.offset_of_line(2));
    #[bench]

    }
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        self.pending_render = pending
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
    AsyncEnd,
struct FullPriority {
    ///
    }
    /// Update front-end with any changes to view since the last time sent.
        }
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    /// method to be fast even when the selection is large.
// distributed under the License is distributed on an "AS IS" BASIS,
            Merge(0,1),
                    // TODO: update (rather than re-render) in cases of text valid
        ---#--
                _ => { }

            Assert(1, "arpbzj".to_owned()),
                }

        if offset >= text.len() {
    }
        assert_eq!(utf16_units, 17);
}
                        let start_line = seg.our_line_num;
        assert_eq!(0, b.offset_of_line(0));
            },
        let edit_iv = Interval::new_closed_open(start, end);
    }
}
            base_len: usize
                                gc_dels = gc_dels.union(deletes);
    }
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
}
        let mut b = TreeBuilder::new();

///
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
    fn is_boundary(s: &String, offset: usize) -> bool {
        #------
        hasher.finish()
        offset
#![cfg_attr(feature = "cargo-clippy", allow(
    /// they would be if they hadn't been deleted.
            replace_changed: false,
        assert_eq!(None, a.prev_grapheme_offset(0));
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            let pos = bc.next::<BreaksMetric>();
            let deletes = Subset::new(inserts.len());
    }

            let mut sample = self.sample.take().unwrap();
/// 1. Samples that span sections of code may be inserted on end instead of
                    return Some(result);
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
                }

            _ => return

/// ```
        if self.cursor.pos() >= self.end {
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

    /// Time complexity: O(log n)

        engine.undo([1].iter().cloned().collect());
        undo_group: usize,
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        }
    fn to_payload(value: &'static str) -> TracePayloadT {
                }
    pub fn set_dirty(&mut self, text: &Rope) {
use xi_rope::spans::Spans;
        engine.gc(&gc);
///
        let inserts = parse_subset_list("
    /// Splits current selections into lines.

        ).min_by_key(|x| {
            event_type: SampleEventType::CompleteDuration,
    }
fn default_session() -> (u64,u32) {
    current: Option<&'a str>,
            Copy(usize, usize),
        }).collect();


            if self.line_of_offset(text, offset) <= line {
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        soln.push('f');
    /// Get the contents of the document at a given revision number
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {

    TRACE.closure_payload(name, categories, closure, payload)
        let b = Rope::from("b");
            Merge(0,2), Merge(1, 2),
        }).unwrap_or(text.len());

    }
            sample: None,
//! There is also a full CRDT merge operation implemented under

        revs.append(&mut revs_3);
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    /// storage allocated will be limit * size_of<Sample>

    fn next(&mut self) -> Option<u8> {
        let iv = Interval::new_closed_open(start, end);


}
    #[test]
    /// the other doesn't make it re-appear.
    }
pub fn samples_cloned_unsorted() -> Vec<Sample> {
            event_type: SampleEventType::Instant,
        let first_rev = engine.get_head_rev_id().token();

        let deletes_from_union = parse_subset("-#----#");
        let trace = Trace::disabled();
        assert_eq!(1, a.line_of_offset(3));

        }
        let trace = Trace::enabled(Config::with_limit_count(10));
            to_payload("some description of the trace"))));
    }
            ModifySelection(movement) => self.do_move(text, movement, true),
            } else {
    }
use fixed_lifo_deque::FixedLifoDeque;
    }
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
        b.iter(|| sys_pid::current_pid());

        assert_eq!(snapshot[2].name, "a");
        self.prev::<BaseMetric>();
            trace: Some(&trace),
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    #[test]
        Err(ref e) => {
#[macro_use]
    /// If `line` is equal to one plus the current number of lines,
                }
    pub fn prev_grapheme(&mut self) -> Option<usize> {
pub struct Lines<'a> {

            DeltaElement::Copy(ref start, ref end) => {
            't' => SampleEventType::FlowInstant,
        if self.find.is_empty() {
    }
        // and it only needs to be consistent over one execution.
                    // can only happen on empty input

                },
        all_samples.push_back(sample);
        }
            false
    }
impl<'a> SampleGuard<'a> {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
        MergeTestState::new(4).run_script(&script[..]);

        a.lines_all().collect::<Vec<_>>());
    }

    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        assert_eq!(trace.get_samples_count(), 1);
categories_from_constant_array!(10);
    pub thread_name: Option<StrCow>,
        cursor.prev_grapheme()
        -##-
        assert_eq!(trace.get_samples_count(), 0);
        ---#-
        };
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
impl From<Rope> for String {
/// A [rope](https://en.wikipedia.org/wiki/Rope_(data_structure)) is a data structure
//
use delta::{Delta, InsertDelta};
                max_undo_so_far: i+1,
    }
    /// finer grain invalidation.
        cursor.prev_grapheme()
#[inline]
        all_samples.reset_limit(config.max_samples());
// See the License for the specific language governing permissions and
        assert!(empty == empty);
    {
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
            }
        assert_eq!(rope.offset_of_line(0), 0);


use std::string::ParseError;
                    Some(chunk) => self.fragment = chunk,
        // is the new edit in an undo group that was already undone due to concurrency?
        self.scroll_to_cursor(text);
            }
            if let Some(pos) = pos { start_of_line.set(pos) }
    /// The revision history of the document
/// # use xi_rope::Rope;
        RopeInfo {
        ChunkIter {
                    let transformed_deletes = deletes.transform_expand(&s);
    max_undo_so_far: usize,
                inserts: inserted,
                el.serialize_field(start)?;
                            }
        b.iter(|| black_box(trace.instant_payload(
#[inline]
        let styles = self.render_styles(client, styles, start_pos, pos,
            "op": op,

        -> R
            }
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
                        _ => break
impl fmt::Debug for Rope {
                last.1 = last.1.transform_union(&inserts);
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        assert_eq!(utf8_offset, 13);
        let a = Rope::from("");


    }
                    let sel_start = cursor.pos();
            None => text.line_of_offset(offset)
            if i >= max_undos {
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
}
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
use internal::find::FindStatus;
        } else {

        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());
categories_from_constant_array!(8);
#[macro_use]
        assert_eq!(snapshot[5].name, "z");
        // even though the actual sampling order (from timestamp of
        });
        self.enabled.store(false, AtomicOrdering::Relaxed);
/// Disable tracing.  This clears all trace data (& frees the memory).
    /// unsaved changes.
        let inserts = parse_subset_list("
        }
        }
mod sys_pid;
            Assert(1, "ab".to_owned()),

    }
        self.set_selection_raw(text, sel.into());
        }
        engine.undo([1,2].iter().cloned().collect());
        }
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        assert_eq!(utf8_offset, 13);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        last_line += if last_col > 0 { 1 } else { 0 };
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
        true
    pub preserve_case: bool
    }

/// Returns all the samples collected so far.  There is no guarantee that the
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        MergeTestState::new(3).run_script(&script[..]);

                   style_spans: &Spans<Style>, line_num: usize) -> Value
        self.revs.iter().enumerate().rev()
        ");
        loop {
        let mut engine = Engine::new(Rope::from(TEST_STR));


categories_from_constant_array!(7);
/// }
            return;

            Assert(1, "ab".to_owned()),
#[derive(Clone, Debug)]
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        for op in &delta_ops {
            }
            Merge(0,2), Merge(1, 2),
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
        --#--

    }
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
// distributed under the License is distributed on an "AS IS" BASIS,
    }
/// Get a slice of a `Rope`:
            ix = sel_end as isize;

    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
/// # Performance
                }
    }
            offset -= 1;
                    };
        let mut hasher = DefaultHasher::new();
                sel
            Merge(0,2), Merge(1, 2),
            }
#[inline]
                priority, undo_group, deletes,

        Self {

    }
pub struct Engine {
        }
            Assert(0, "bdc".to_owned()),
                        let mut word_cursor = WordCursor::new(text, region.max());
            if next_chunk.is_none() { return None; }
            if next_chunk.is_none() { return None; }
///
}
            Assert(1, "apbj".to_owned()),

                }
        self.selection = sel;
    identity_op,
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                    base_len: delta.base_len
            Drag(MouseAction { line, column, .. }) =>
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            Merge(4,3),

    }
        match symbol {
    }
///
}
            // I think it's a precondition that this will never be called
        samples.sort();
}
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
/// None if an irrecoverable error occured.

    }
    /// Tracks whether find highlights should be rendered.
                },
/// discussion on payload.
                        } else {
        #[derive(Serialize, Deserialize)]
            replace: None,

                    .with_horiz(horiz)
    }
                        _ => break
    inner: ChunkIter<'a>,
    }
        let is_base = base_revs.contains(&rev.rev_id);
    // this should have the same behavior, but worse performance
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    /// An iterator over the lines of a rope.
    {
    #[cfg(feature = "benchmarks")]
        assert_eq!(snapshot[1].name, "thread_name");
    }
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);

        self.view_id
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
                    selection.add_region(occ);
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
    fn gc_4() {
///
    /// No wrapping in effect.
        self.push_str(&other[start..end]);
                }

        let r = Rope::from(&a[..MAX_LEAF]);
            engine.undo(undos);
                    self.fragment = &self.fragment[i + 1 ..];
    /// Garbage collection means undo can sometimes need to replay the very first
/// Internally, the implementation uses reference counting (not thread safe, though
        assert_eq!(utf16_units, 9);
        struct CategoriesTVisitor;
    // * Unicode width (so CJK counts as 2)
            SelectionForFind { case_sensitive } =>
const MAX_LEAF: usize = 1024;



            GotoLine { line } => self.goto_line(text, line),
}
                serializer.serialize_newtype_variant("DeltaElement", 1,
        let mut engine = Engine::new(Rope::from(TEST_STR));
    {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
/// ```
    /// When was the sample started.
        in_measured_units
        let (mut l, mut offset) = self.get_leaf()?;
//
            //}
    /// ties in edit priorities. Otherwise the results may be inconsistent.
    #[test]
        deletes_bitxor: Subset,
    #[inline]
    // This computes undo all the way from the beginning. An optimization would be to not
                    }
        self.send_update_for_plan(text, client, styles,
        first_line..(last_line + 1)
    fn next(s: &String, offset: usize) -> Option<usize> {
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                let categories = v.split(",").map(|s| s.to_string()).collect();
}
                    text.slice_to_string(start, end)

        b.set_dirty(true);

                false => x.start
    /// Select entire buffer.
        assert_eq!(0, b.line_of_offset(0));
    #[serde(deserialize_with = "deserialize_event_type")]
    }
        d_builder.build()
use std::ops::Add;
            false => Selection::new(),
    }
}
        ");
                },
            offset = text.len();
        where S: Into<StrCow>, C: Into<CategoriesT>
        }
        engine.edit_rev(0, 2, first_rev, build_delta_2());

        }

        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        }
    // and partly because you need to retain more undo history, to supply input to the
                match *other {
        }
    DynamicArray(Vec<String>),
        --#--
/// conforms to is currently determined by the feature this library is compiled
    TRACE.block(name, categories)
            };
        Ok(exe_name) => {
}

        // +2 for exe & thread name
                    let mut e = &mut self.peers[ei];
                match self.inner.next() {
                continue;
    }
    /// slices will be nonempty.



    fn do_split_selection_into_lines(&mut self, text: &Rope) {

    }
        plan.request_lines(first_line, last_line);

/// conversions in both directions.
    }
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        (Revision {
                    to_payload(("some description of the closure")))));
            DeltaElement::Insert(ref node) =>
            max_undo_so_far: 0,
                undo_group,
            Merge(0,1),
                    None
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        let head_rev = &self.revs.last().unwrap();
        if self.len() != other.len() {
        let mut samples = vec![
/// ```
    }
        assert_eq!(2, a.line_of_offset(4));
impl Eq for Sample {}
            let not_in_tombstones = self.deletes_from_union.complement();
#[macro_use]
        MergeTestState::new(3).run_script(&script[..]);
    #[inline]
        let deletes_from_union = parse_subset("-#----#");
                metadata_sort_index: None,
    }
fn find_leaf_split_for_merge(s: &str) -> usize {
                    if s.ends_with('\r') {

    }
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
                                     categories: C,
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
                    match full_path_str {
                },
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

            if cur_len_utf16 >= in_measured_units {
            // selection with interior
use std::ops::Range;
        let mut samples = vec![
            Rope::concat(

    }
        } else {
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
                client.replace_status(self.view_id, &json!(replace))
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
impl<'a> From<&'a Rope> for String {
    TRACE.enable();
}
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    {

//
        }
/// as opposed to thousands of revisions.
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
//! There is also a full CRDT merge operation implemented under
use std::hash::{Hash, Hasher};
            if let GraphemeIncomplete::PreContext(_) = incomp {
        }

            &rebased_deletes_from_union, &new_deletes_from_union);
    #[should_panic]

                        }
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
    fn find_common_1() {
            AssertAll("zacpb".to_owned()),
}
        b.iter(|| black_box(time::precise_time_ns()));
    #[test]
    #[cfg(feature = "benchmarks")]
            Assert(2, "afc".to_owned()),
        fn run_script(&mut self, script: &[MergeTestOp]) {
                            let line = self.render_line(client, styles, text,
            }),

        cursor.is_boundary::<BaseMetric>()
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    fn gc_scenario(edits: usize, max_undos: usize) {
}
                        DeltaElement::Copy(start, end),
            if let Some(pos) = pos { start_of_line.set(pos) }
#[inline]
}
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
            }

    /// Invalidate the current selection. Note that we could be even more
                splitpoint -= 1;
    fn merge_associative() {
pub enum SampleEventType {
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
            event_type: event_type,
        let (metadata_name, sort_index) = meta.consume();
            Assert(1, "afc".to_owned()),
            Assert(1, "ab".to_owned()),
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
            Merge(1,0),
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    type Err = ParseError;
    use interval::Interval;
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
    /// Tests that merging again when there are no new revisions does nothing
    fn prev_codepoint_offset_small() {
        let guard = Self {
        assert_eq!(0, a.offset_of_line(0));
            }
            offset = text.len();
        // We somewhat arbitrarily choose the last region for setting the old-style
extern crate lazy_static;
        }
        let mut hasher = DefaultHasher::new();

        samples.sort();
    /// Return the byte offset corresponding to the line number `line`.
                            }
        let trace = Trace::enabled(Config::with_limit_count(11));
        if let Some(ref mut trace) = self.trace {
        self.set_dirty(text);
    #[bench]
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
        } else {
use std::collections::HashMap;

            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
}
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
}
    if a.is_empty() {
    fn gc_3() {
impl serde::Serialize for CategoriesT {
            let mut sel = drag_state.base_sel.clone();
    fn compute_transforms_1() {
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        }
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        let all_samples = self.samples.lock().unwrap();
            let common = find_common(a_to_merge, b_to_merge);
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {

    pub pid: u64,
        let l_str = text.slice_to_string(start_pos, pos);
        (Revision {
        assert_eq!(b, String::from(a));
    }
                    "something", &["benchmark"],
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#[derive(Clone, Copy)]
        // TODO: refine for upstream (caret appears on prev line)
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
        let b = a.slice(2, 4);

    /// An arbitrary payload to associate with the sample.  The type is
                metadata_name: None,
    (1, 0)
    #[inline]
        (self.pid, self.timestamp_us).hash(state);
            Assert(1, "abc".to_owned()),
            FindPrevious { wrap_around, allow_same, modify_selection } =>

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
                        ops.push(self.build_update_op("invalidate", None, seg.n));
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
            'M' => SampleEventType::Metadata,
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
            MergeTestState { peers }

            Merge(0,1),
    }
        while !leaf.is_char_boundary(end) {
    #[bench]
impl<'a> Drop for SampleGuard<'a> {
categories_from_constant_array!(1);
        for i in 0..edits {
}
        assert_eq!(utf16_units, 17);
    }
            revs: vec![rev],
            Assert(1, "ab".to_owned()),
}
    #[test]
            "n": n,
                if !inserts.is_empty() {

            ix = sel_end as isize;
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
            'X' => SampleEventType::CompleteDuration,
///
//! this central engine. It provides the ability to apply edits that depend on
        }
    // reachability calculation.
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
/// Returns the file name of the EXE if possible, otherwise the full path, or

    view_id: ViewId,
    }
        --#--
                                     event_type: SampleEventType)
                           styles: &StyleMap, style_spans: &Spans<Style>,
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
                match *other {
    {
struct FullPriority {
                    }
    }
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },

        } else if line == max_line {


/// # Performance
            }
    /// Constructs a Duration sample.  For use via xi_trace::closure.
    #[test]
            Assert(2, "b".to_owned()),

            to_undo.insert(i+1);
        if let Contents::Edit {priority, inserts, .. } = r.edit {
{

    #[allow(dead_code)]
    #[test]
        assert_eq!(1, r.line_of_offset(r.len() - 1));
            {
        let self_iv = Interval::new_closed_closed(0, self.len());
                        self.revs.push(Revision {
            let new_region = region_movement(movement, region, self,
        let mut retain_revs = BTreeSet::new();
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        assert_eq!(correct, res);
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
            'f' => SampleEventType::FlowEnd,
        let rope = Rope::from("hi\ni'm\nfour\nlines");
}
    ThreadSortIndex { sort_index: i32 },
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
pub enum SampleEventType {
                let (ins, _) = delta.factor();
    if a.is_empty() {

impl Metric<RopeInfo> for BaseMetric {

    {
        } else {
    }
    type Item = Cow<'a, str>;
                let (last, rest) = self.sel_regions().split_last().unwrap();
                    let e = &mut self.peers[ei];
            MetadataType::ProcessName {..} => "process_name",
            }
            session: default_session(),
    fn undo() {
    }
    }
        debug_subsets(&rebased_inserts);

    ObjectDestroyed,

        -##-
//
/// beginning.
            as_vec.push(Sample::new_metadata(
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
}
    #[cfg(feature = "benchmarks")]

        let mut cursor = Cursor::new(self, offset);
                          payload: Option<TracePayloadT>) -> Self
                            ops.push(self.build_update_op("skip", None, n_skip));
    #[test]
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    fn lines_raw_small() {
/// The payload associated with any sample is by default a string but may be
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
    }
        d_builder.delete(Interval::new_closed_open(10, 36));
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
            AssertMaxUndoSoFar(1,3),

//! text.
    #[test]
    pub pid: u64,
            };

    fn prev(s: &String, offset: usize) -> Option<usize> {
                        for line_num in start_line..end_line {
    }
    pub fn iter_chunks_all(&self) -> ChunkIter {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.

        engine.edit_rev(1, 1, first_rev, d1.clone());
    DurationBegin,
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
                len += 1;
        assert_eq!(utf16_units, 11);
                }
                if !inserts.is_empty() {
        self.lines_raw(0, self.len())
        match *self {
fn initial_revision_counter() -> u32 {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// Note: `edit` and `edit_str` may be merged, using traits.
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
#[derive(Clone, Debug)]


        engine.edit_rev(0, 2, first_rev, build_delta_2());
            pid: sys_pid::current_pid(),
        assert_eq!(soln, String::from(engine.get_head()));
        assert_eq!(trace.get_samples_count(), 1);
                    };
#[macro_use]
                },
/// configured via the `dict_payload` or `json_payload` features (there is an
        /// and new deletes_from_union

        assert_eq!(snapshot[5].name, "b");
        ];
        use self::MergeTestOp::*;
    /// `text`. The count of a character in `deletes_from_union` represents
}

    // A colliding session will break merge invariants and the document will start crashing Xi.
impl Sample {
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
                            (inserts, deletes)
    session1: u64,
        samples.sort();
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let result = closure();

            splitpoint
        self.drag_state = Some(DragState { base_sel, offset, min, max });
use std::str::FromStr;
}

    TRACE.closure(name, categories, closure)
    }
    ///
/// ```
    fn from(r: Rope) -> String {
    }
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
    }
                c.provide_context(&pl, self.pos() - poffset);
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
                    }


            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),

            Assert(1, "cb".to_owned()),
    {
    StaticArray(&'static[&'static str]),
}
    fn bench_trace_closure_disabled(b: &mut Bencher) {
                           styles: &StyleMap, style_spans: &Spans<Style>,
    /// Callers are expected to validate their input.

            'B' => SampleEventType::DurationBegin,
        let is_base = base_revs.contains(&rev.rev_id);
/// xi_trace::trace("something happened", &["rpc", "response"]);
        }
        assert_eq!(Some(3), a.next_codepoint_offset(1));


            Merge(0,2), Merge(1, 2),
            base_sel: selection.clone(),
        let mut soln = String::from("h");
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
pub fn samples_cloned_unsorted() -> Vec<Sample> {

                Contents::Undo { .. } => panic!(),
    /// Note: `edit` and `edit_str` may be merged, using traits.
use serde_json::Value;
/// }
    /// the same even if it is rebased or merged between devices.

///
            Assert(1, "ab".to_owned()),
/// A size, in pixel units (not display pixels).
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
    pub fn join(&self, sep: &str) -> String {
        let mut gc_dels = self.empty_subset_before_first_rev();
                        if !last_selection.is_caret() {
/// # Examples
                Some(Cow::from(s))
        engine.undo([1,2].iter().cloned().collect());
        -##-
mod fixed_lifo_deque;
categories_from_constant_array!(8);
        let new_deletes_from_union = {
            thread_name: Sample::thread_name(),
    ///
    /// New offset to be scrolled into position after an edit.
    }
        let replacement = match self.selection.last() {
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};

/// ```
        // current recording mechanism should see:
struct DeltaOp {
    use test::Bencher;
            }

}
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
            self.set_selection(text, sel);
                    priority, inserts, deletes,
        let inserted = inserts.inserted_subset();
            AssertAll("ac".to_owned()),
            ix = iv.end() as isize;
            Some(offset + len_utf8_from_first_byte(b))
                SelectionModifier::AddRemovingCurrent => {
                }
// Licensed under the Apache License, Version 2.0 (the "License");
        for _i in 0..50 {
    }
        }
                max_undo_so_far: i+1,
/// an argument.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    let e = &mut self.peers[ei];
/// Usage of static strings is encouraged for best performance to avoid copies.
    }
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
    }
        }
    text: Rope,
            "n": n,
                    }
    }
    fn build_delta_1() -> Delta<RopeInfo> {
    }

    }
        self.first_line = first;
            // cursor
        let trace = Trace::disabled();

impl PartialEq for Sample {
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.

            SampleGuard::new(&self, name, categories, Some(payload.into()))
        self.invalidate_selection(text);
    // This computes undo all the way from the beginning. An optimization would be to not
                // Deprecated (kept for client compatibility):
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        for find in &mut self.find {
    use test::black_box;
            SampleEventType::CompleteDuration => 'X',
        self.send_update_for_plan(text, client, styles,
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        as_vec
            if let Some(ref thread_name) = sample.thread_name {


    fn undo_3() {
                                deletes_bitxor: new_deletes_bitxor,
            tid: sys_tid::current_tid().unwrap(),
        let mut hls = Vec::new();
    }
            if let Some(ref thread_name) = sample.thread_name {
                         style_spans: &Spans<Style>) -> Vec<isize>
/// See `trace_payload` for a more complete discussion.
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    // revision might hold content from an undo group that would otherwise be gc'ed),
                    let e = &mut self.peers[ei];
    priority: usize,
                                           client, iv, new_len, px),
        let trace = Trace::enabled(Config::default());
            self.name == other.name &&
fn shuffle(text: &Rope, tombstones: &Rope,
    /// Returns the largest undo group ID used so far
macro_rules! categories_from_constant_array {

        // position after 'f' in four
        for u in s.chars() {
}
        ##
    }
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
    #[test]
        let mut cursor = Cursor::new(self, offset);
    }
            client.scroll_to(self.view_id, line, col);
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
impl Serialize for Rope {

        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
        self.revs.last().unwrap().rev_id

        engine.edit_rev(0, 2, first_rev, build_delta_2());
        let trace = Trace::disabled();
    /// The thread the sample was captured on.  Omitted for Metadata events that
        let b = a.slice(1, 10);
/// A flag used to indicate when legacy actions should modify selections
    #[should_panic]
    #[bench]
            };
impl RevId {
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
/// samples are ordered chronologically for several reasons:
            }
        assert_eq!(2, expand_by[1].0.priority);
                el.serialize_field(end)?;
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
/// Usage of static strings is encouraged for best performance to avoid copies.
// line iterators
        self.revs.iter().enumerate().rev()
            SampleEventType::DurationBegin => 'B',

                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
pub fn samples_cloned_sorted() -> Vec<Sample> {
        if offset == 0 {


        let (mut l, mut offset) = self.get_leaf()?;
                self.set_selection(text, SelRegion::caret(offset));
                metadata_name: None,
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
                },
        let (first_line, _) = self.offset_to_line_col(text, region.min());
        &leaf[offset..end]
                el.serialize_field(start)?;
        deletes_from_union
            duration_us: None,

/// * `name` - A string that provides some meaningful name to this sample.
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
                    linewrap::rewrap_width(breaks, text, width_cache,
    }
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
                    self.set_selection(text, selection);
    ///
        // rebase the delta to be on the head union instead of the base_rev union
    /// Toggles a caret at the given offset.
        ----
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
    where S: Into<StrCow>, C: Into<CategoriesT>
    fn gc_3() {
            self.categories == other.categories &&
        // Rust is unlikely to break the property that this hash is strongly collision-resistant


}
    /// of individual region movements become carets.
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let r = r + Rope::from(&b[MIN_LEAF..]);
                }
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        self.height
    #[inline]
        assert_eq!(2, b.offset_of_line(1));
        let a = Rope::from("a\nb\nc");
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        // find the lowest toggled undo group number
            let to_delete = if undone { &new_inserts } else { &new_deletes };
                    base_len: delta.base_len
            self.next::<BaseMetric>();
pub fn enable_tracing_with_config(config: Config) {

        assert_eq!(2, b.offset_of_line(1));
        let search_query = match self.selection.last() {
/// None if an irrecoverable error occured.
        if line > max_line {
}

/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.

    #[test]
        let text = Rope::from("13456");

                        inserts: transformed_inserts,
                        let (inserts, deletes) = if gc_dels.is_empty() {
        result
}
        revs.append(&mut revs_2);
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
        Some(pos) => minsplit + pos,
                        let offset = self.offset_of_line(text, start_line);
    /// of the chunks is indeterminate but for large strings will generally be
    // TODO: this should be a Cow
        *self = b.build();
            Assert(1, "abefg".to_owned()),
            Assert(1, "ab".to_owned()),
    base_sel: Selection,
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        -> SampleGuard
        assert_eq!(correct, rearranged_inserts);
    }
    }
    /// not account for any overhead of storing the data itself (i.e. pointer to
impl serde::Serialize for CategoriesT {
/// * `name` - A string that provides some meaningful name to this sample.
        let mut b = TreeBuilder::new();
        }
    pub fn set_scroll(&mut self, first: i64, last: i64) {
/// ```rust
        let first_rev = engine.get_head_rev_id().token();
                if is_base {

                cur_all_inserts = older_all_inserts;

        // We add selection after find because we want it to be preferred if the
        --#--

        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        engine.edit_rev(1, 2, first_rev, d1.clone());
        trace.closure_payload("y", &["test"], || {},
        ");
            } else {
/// For example, take a string that starts with a 0xC2 byte.
///

        let b_revs = basic_insert_ops(inserts, 2);
        b.iter(|| black_box(time::precise_time_ns()));
        {
/// A guard that when dropped will update the Sample with the timestamp & then
                        DeltaElement::Copy(start, end),

categories_from_constant_array!(1);
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        }

        if (b as i8) >= -0x40 {
                payload: payload,
    /// Splits current selections into lines.
//!
    }
        ];
            Assert(1, "ab".to_owned()),
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    /// in the range of 511-1024 bytes.
        all_samples.reset_limit(0);

}
    fn gc_5() {
        // that into our actual target.
                    // fast-forward this revision over all common ones after it

        assert_eq!(samples[0].name, "remote pid");
        a.lines_all().collect::<Vec<_>>());
mod fixed_lifo_deque;
/// let b = a.slice(1, 9);

        leaf.as_bytes()[pos]
            s.as_bytes()[offset - 1] == b'\n'
        /// and new deletes_from_union
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
            Assert(2, "b".to_owned()),
            pos
    fn merge_associative() {
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
            self.pid == other.pid &&
            let head = engine.get_head_rev_id().token();
        let (revs, text_2, tombstones_2, deletes_from_union_2) =

        let start = self.line_col_to_offset(text, line, 0);
        let line_len = MAX_LEAF + MIN_LEAF - 1;

            false => Selection::new(),
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
                }
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    }
            DeltaElement::Copy(ref start, ref end) => {
        }
                           style: &Style) -> usize {
    #[serde(skip_serializing_if = "Option::is_none")]
        memrchr(b'\n', &s.as_bytes()[..offset])

                    }

    /// how many times it has been deleted, so if a character is deleted twice
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>

        assert_eq!(Some(6), a.next_codepoint_offset(3));
        self.text = new_text;
            Assert(1, "ab".to_owned()),


            thread_name: Sample::thread_name(),
    }
        self.convert_metrics::<LinesMetric, BaseMetric>(line)

            Some(offset + len_utf8_from_first_byte(b))
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    #[serde(rename = "name")]
                println!("running {:?} at index {}", op, i);
pub struct SampleArgs {
                    a.merge(b);
///
                self.add_selection_by_movement(text, Movement::Down),
        MergeTestState::new(3).run_script(&script[..]);
    }
    pub fn enabled(config: Config) -> Self {
        let script = vec![
        MergeTestState::new(3).run_script(&script[..]);

    // in a single session.
    fn merge_simple_delete_2() {
        let first_rev = engine.get_head_rev_id().token();
    }
            let a_to_merge = &self.revs[base_index..];

    first_line: usize,
        // position after 'f' in four
            deletes_from_union = match rev.edit {
        let mut cur_len_utf16 = 0;
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
use delta::{Delta, InsertDelta};
        struct CategoriesTVisitor;
        engine.gc(&gc);
    /// Front end's line cache state for this view. See the `LineCacheShadow`
    /// height of visible portion
pub struct Sample {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
    }
    fn merge_session_priorities() {
        let mut a = Rope::from("hello world");
        }
            let b = s.as_bytes()[offset];
//
/// State required to resolve a drag gesture into a selection.

    pub fn default() -> Self {

categories_from_constant_array!(9);
    selection: Selection,
        assert_eq!(0, r.line_of_offset(a.len() - 1));
impl<'a> Iterator for Lines<'a> {
        let new_deletes_from_union = {
///
            }
impl<'de> Deserialize<'de> for Rope {
    }
        assert_eq!(snapshot[3].name, "y");

impl Trace {
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
                RenderTactic::Preserve => {
                false => x.start
        let new_deletes_from_union = expanded_deletes_from_union.union(&deletes);
    TRACE.get_samples_count()
        if self.idx <= self.current.unwrap().len() {
        Ok(b.build())
pub fn is_enabled() -> bool {
    StaticArray(&'static[&'static str]),
    /// via process_name/thread_name respectively.
        let d = RopeDelta_::deserialize(deserializer)?;

        // x, a, y, b, z, c
    fn next(s: &String, offset: usize) -> Option<usize> {
    }

        assert_eq!(Some(1), a.prev_codepoint_offset(3));
        Some(pos) => minsplit + pos,
        let mut selection = Selection::new();
            self.lc_shadow.edit(start, end, new_end - start);
        (self.session1, self.session2)
        }

                    Some(Contents::Edit {
    }
            sample.event_type = SampleEventType::DurationEnd;
    fn next(s: &String, offset: usize) -> Option<usize> {
#[derive(Serialize, Deserialize, Debug)]
            rendered_styles.push(sel_end as isize - sel_start as isize);
use std::hash::{Hash, Hasher};
}
#[cfg(feature = "json_payload")]
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
            offset,
        use std::hash::{Hash, Hasher};

            lc_shadow: LineCacheShadow::default(),
                         style_spans: &Spans<Style>) -> Vec<isize>
    /// Tracks whether find highlights should be rendered.

    identity_op,
// you may not use this file except in compliance with the License.
            return 0;
    pub timestamp_us: u64,
                }
    fn render_line(&self, client: &Client, styles: &StyleMap,
        // Rust is unlikely to break the property that this hash is strongly collision-resistant

            GestureType::ToggleSel => self.toggle_sel(text, offset),
///
impl Serialize for Rope {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
            }
            AssertAll("zacpb".to_owned()),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                    .with_horiz(horiz)

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
pub struct Replace {
    pub fn lines_all(&self) -> Lines {
    }
/// Find a set of revisions common to both lists

        // TODO: refine for upstream (caret appears on prev line)
        });

        // even though the actual sampling order (from timestamp of
/// the session ID component of a `RevId`
        MergeTestState::new(3).run_script(&script[..]);
            false => Selection::new(),
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
                MergeTestOp::Assert(ei, ref correct) => {
}
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
    /// how many times it has been deleted, so if a character is deleted twice
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        };
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        b.push(rhs);
        // and it only needs to be consistent over one execution.
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
/// None if an irrecoverable error occured.
    session_id: SessionId,
                metadata_name: None,
            sel.add_region(
        match *self {
    fn prev(s: &String, offset: usize) -> Option<usize> {
                        b.add_span(seg.n, 0, 0);
    /// Collapse all selections in this view into a single caret
                } else if click_count == Some(2) {

        self.find_changed = FindStatusChange::Matches;
    #[test]
    /// Time complexity: technically O(n log n), but the constant factor is so
    ObjectCreated,
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    fn bench_trace_closure(b: &mut Bencher) {

                return false;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
            }
        self.lines(0, self.len())
    #[cfg(feature = "benchmarks")]
                    // TODO: update (rather than re-render) in cases of text valid

        View {
                        &mut start[bi]
    }
}
    use test::Bencher;
        let (metadata_name, sort_index) = meta.consume();

                                     payload: Option<TracePayloadT>,
    deletes: Subset,
        let mut plan = RenderPlan::create(height, self.first_line, self.height);

    }
                }
        MergeTestState::new(3).run_script(&script[..]);
/// * `name` - A string that provides some meaningful name to this sample.
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
        for _i in 0..50 {
            undone_groups: BTreeSet::new(),
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
    fn delta_rev_head_3() {

                        let mut word_cursor = WordCursor::new(text, region.max());
                metadata_sort_index: None,
            MetadataType::ProcessName {..} => "process_name",
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
///
    // Note: this function would need some work to handle retaining arbitrary revisions,
            let splitpoint = find_leaf_split_for_merge(self);
    /// via process_name/thread_name respectively.
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    #[cfg(feature = "json_payload")]
    height: usize,
///
        ----
        assert_eq!(vec!["a\n", "b\n", "c"], a.lines_raw_all().collect::<Vec<_>>());

        assert!(a != empty);
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },

    TRACE.enable();
                    }
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },

/// }
                                     event_type: SampleEventType)


            SampleEventType::FlowEnd => 'f',

            // d-expand by other
        }
    #[cfg(feature = "benchmarks")]
    /// The state for finding text for this view.
struct Revision {

        MergeTestState::new(2).run_script(&script[..]);
    }
    }
/// However, anything that can be converted into a Cow string can be passed as
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
        while !leaf.is_char_boundary(end) {
    pub fn select_all(&mut self, text: &Rope) {

            Merge(1,0),
        }
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
            Assert(0, "acrpbdzj".to_owned()),
    {
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
            self.lc_shadow.edit(start, end, new_end - start);
/// ```
    #[serde(rename = "dur")]
                         style_spans: &Spans<Style>) -> Vec<isize>
    /// This is used to determined whether FindStatus should be sent to the frontend.
}
        let res = find_base_index(&a, &b);
    /// Determines whether the offset is in any selection (counting carets and


categories_from_constant_array!(0);
        let new_pos = self.pos() + (end - offset);
        b.add_span(height, 0, 0);
    #[test]
///
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
        Self {
impl CategoriesT {
    }
    ///
        #------
            let start = self.line_of_offset(last_text, iv.start());
                find_leaf_split_for_bulk(s)
        let mut style_map = style_map.borrow_mut();
        let (new_text, new_tombstones) =
                (drag_state.min, max(offset, drag_state.max))
        assert_eq!(0, b.line_of_offset(0));
                            deletes_bitxor.transform_shrink(&gc_dels)
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
        let guard = Self {
        ------#
            thread_name: Sample::thread_name(),
        priority: usize,
                    let transformed_inserts = inserts.transform_expand(&s);
            // copy the current state
        self.revs.reverse();
            .map(|pos| pos + 1)
                c.provide_context(&pl, self.pos() - poffset);

    fn next(s: &String, offset: usize) -> Option<usize> {
    /// The maximum number of entries the tracing data should allow.  Total
        if !self.lc_shadow.needs_render(plan) { return; }

    ///

            Merge(4,3),
        self.lines(0, self.len())
        assert_eq!(0, a.offset_of_line(0));
use rope::{Rope, RopeInfo};
    /// of individual region movements become carets.
    }
    }
        for i in 0..self.len() {
        let mut a = String::new();
        let a = Rope::concat(
///
                            ops.push(self.build_update_op("skip", None, n_skip));
            ix = iv.end() as isize;
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {

                }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
}
        let b = a.slice(2, 4);
            SampleEventType::FlowStart => 's',
                l = pl;
}
            timestamp_us: ns_to_us(timestamp_ns),
        if let Some(edit) = contents {
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
/// Valid within a session. If there's a collision the most recent matching

    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
            ix = iv.end() as isize;
#[derive(Serialize, Deserialize, Debug)]
            Assert(0, "acbd".to_owned()),
        let utf8_offset = 13;
        ).min_by_key(|x| {
        // since one of the two deletes was gc'd this should undo the one that wasn't
        ix
use std::cmp::{min,max};
}
        }
        for rev in &self.revs[first_candidate..] {
            return self.revs.len();
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

        assert_eq!(rope.line_of_offset(0), 0);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            }, to_payload("test_get_samples_nested_trace"));
    fn append_large() {
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
pub fn is_enabled() -> bool {
impl Eq for Sample {}
        }
    #[test]
}
impl Leaf for String {
        // todo: this will be changed once multiple queries are supported
    /// Return the line number corresponding to the byte index `offset`.

    }
        self.cursor.next_leaf();

            }
        let max_line = self.measure::<LinesMetric>() + 1;

    fn gc_6() {
    }
            engine.undo(undos.clone());
    for rev in revs.iter().rev() {
        if f.alternate() {
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
        assert_eq!(snapshot[7].name, "z");
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
        samples[1].timestamp_us = 5;
        self.set(new_pos);
        impl From<RopeDelta_> for Delta<RopeInfo> {
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
                std::thread::sleep(std::time::Duration::new(0, 1000));
            SampleEventType::ObjectSnapshot => 'O',
#[must_use]
                        s = &s[..s.len() - 1];
    // TODO: replace this with a version of `lines` that accepts a range
#![cfg_attr(feature = "cargo-clippy", allow(
use std::borrow::Cow;
}
    /// Front end's line cache state for this view. See the `LineCacheShadow`
        }
        // NOTE: 1 us sleeps are inserted as the first line of a closure to

        for _i in 0..50 {
            black_box(trace.block_payload(
enum MetadataType {
                    }
        }
    fn line_of_offset_panic() {
    fn delta_rev_head() {
                            }
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
use xi_rope::spans::Spans;
            true => self.selection.clone(),
    // TODO: replace this with a version of `lines` that accepts a range
        samples[1].timestamp_us = 5;
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
            match reverse {
            if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {

                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        let mut cursor = Cursor::new(self, offset);

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
    for &b in s.as_bytes() {
// Copyright 2016 The xi-editor Authors.
        let trace = Trace::enabled(Config::with_limit_count(20));
        // that into our actual target.

    use interval::Interval;
// distributed under the License is distributed on an "AS IS" BASIS,
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
}
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
    fn eq_med() {
        // set last selection or word under current cursor as search query
                        undone_groups = Cow::Owned(new_undone);
            timestamp_us: ns_to_us(time::precise_time_ns()),
/// A flag used to indicate when legacy actions should modify selections
        } else if line == max_line {

                }
    ns / 1000
    pub fn prev_codepoint(&mut self) -> Option<char> {
    fragment: &'a str
        b.push(rhs);
                    let e = &mut self.peers[ei];
        if let Some(last) = self.revs.last() {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
        // is the new edit in an undo group that was already undone due to concurrency?
        ];
                if self.fragment.is_empty() {
        let (mut l, mut offset) = self.get_leaf()?;
                }
                              payload: Option<TracePayloadT>,
const MIN_LEAF: usize = 511;
    fn can_fragment() -> bool { true }

            }
        let mut selection = self.selection.clone();
    ///
                (drag_state.min, max(offset, drag_state.max))

    ///
        let a = Rope::concat(
        impl From<RopeDelta_> for Delta<RopeInfo> {
            Merge(0,2), Merge(1, 2),
        let mut selection = match multi_select {

        CategoriesT::DynamicArray(c)
            'i' => SampleEventType::Instant,

///


        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
impl Add<Rope> for Rope {
    #[serde(rename = "dur")]
    fn gc_4() {
            Assert(1, "apb".to_owned()),
            x.next_occurrence(text, reverse, wrapped, &self.selection)
            .map(|pos| offset + pos + 1)
}
///     something_else_expensive(result);
        use self::MergeTestOp::*;
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
                            rev_id: rev.rev_id,
        let trace = Trace::enabled(Config::with_limit_count(11));
            rebased_deletes_from_union.union(to_delete)
        #------
    /// assumed to be forward).
    #[should_panic]
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R

                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));

                self.start_drag(offset, offset, offset);
    pub categories: Option<CategoriesT>,
        min
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
    #[cfg(feature = "benchmarks")]
                        deletes_from_union
                    };
    // TODO: a case can be made to hang this on Cursor instead
        samples.sort();
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
            trace: Some(&trace),
        }
                            let line = self.render_line(client, styles, text,
///
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
                c.provide_context(&pl, self.pos() - poffset);
                        }
        engine.undo([1,2].iter().cloned().collect());
        self.find_changed = FindStatusChange::Matches;
    }
        Some(pos) => minsplit + pos,
                    Some(chunk) => self.fragment = chunk,

    /// Toggles a caret at the given offset.
        }
            deletes = deletes.transform_expand(&new_trans_inserts);
    /// Tracks whether there has been changes in find results or find parameters.
// The advantage of using a session ID over random numbers is that it can be
            // I think it's a precondition that this will never be called
}
    for rev in revs.iter().rev() {
        } else {
        let head_rev = &self.revs.last().unwrap();
        true
                            plan: &RenderPlan, pristine: bool)
        MergeTestState::new(2).run_script(&script[..]);
                        let offset = self.offset_of_line(text, start_line);
        let mut soln = String::from("h");

                if self.fragment.is_empty() {

    /// controlled by features (default string).
            trace.instant("test_samples_pulse", &["test"]);
                selection.add_region(occurrence);
                            None
        }

        match self.selection.len() {
        }
        trace.disable();
        if let Some(new_scroll_pos) = self.scroll_to.take() {
    /// This case is a regression test reproducing a panic I found while using the UI.
        self.len()
            utf16_count += 1;
    }
                self.run_op(op);
    }
}
        deletes_bitxor: Subset,
                        .map(DeltaElement::from).collect(),
}

        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
    /// The current contents of the document as would be displayed on screen
/// xi_trace::trace("something happened", &["rpc", "response"]);
    fn rearrange_1() {


/// # Performance
    }
        assert_eq!(snapshot.len(), 5);
            }
                } else {
impl Metric<RopeInfo> for BaseMetric {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
/// Given the inital byte of a UTF-8 codepoint, returns the number of
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
// distributed under the License is distributed on an "AS IS" BASIS,
                            edit: Edit {
        assert_eq!(samples[1].name, "local pid");

                Some(Cow::from(s))
    }
                         hls: &[(usize, usize)],
                WrapWidth::None => (),
                      delta: &Delta<RopeInfo>, client: &Client,

                },
        }).collect()
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
            x.next_occurrence(text, reverse, wrapped, &self.selection)
        match self.inner.next() {
        where S: Into<StrCow>, C: Into<CategoriesT>

        let first_rev = engine.get_head_rev_id().token();
}
        let mut engine = Engine::new(Rope::from(TEST_STR));
}
            // TODO: finer grain invalidation for the line wrapping, needs info
    /// return if a delete is un-done or an insert is re- done.
        }

    // of the union string length *before* the first revision.
        value
    }
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
    // this should have the same behavior, but worse performance
        // NOTE: we derive to an interim representation and then convert
    TRACE.samples_cloned_unsorted()
    #[test]
    //TODO: implement iter_chunks using ranges and delete this
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
    edit: Contents,
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        self.set_dirty(text);

    pub fn new_duration<S, C>(name: S,
        }
            }
        // creation) is:
        self.start_drag(offset, region.start, region.end);
/// some way.
    AsyncStart,
                    }
        deletes: Subset,
        client.def_style(&style.to_json(ix));
                                        &selections, &hls, style_spans);

enum FindStatusChange {
            },
            Merge(0,2), Merge(1, 2),
        -#-
            Merge(0,2), Merge(1, 2),
    #[test]
/// let c = b.slice(1, 7);
    ///
        }
    pub fn empty() -> Engine {
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
//! It enables support for full asynchronous and even peer-to-peer editing.
        let mut samples = self.samples_cloned_unsorted();
            let new_region = region_movement(movement, region, self,
            self.current = next_chunk;
        AssertAll(String),
    {
fn clamp(x: usize, min: usize, max: usize) -> usize {
            let a_to_merge = &self.revs[base_index..];
    }
        self.sample_limit_count * size_of::<Sample>()
                if !inserts.is_empty() {
    fn to_payload(value: &'static str) -> &'static str {
                    match full_path_str {
        }
        let mut d_builder = Builder::new(TEST_STR.len());
}
/// Measured unit is newline amount.
    pub fn byte_at(&self, offset: usize) -> u8 {
            // Do it the other way on the copy
    }
///
        self.selection = sel;
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {

        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
            GestureType::PointSelect => {
        // shouldn't do anything since it was double-deleted and one was GC'd
    #[test]

        !self.selection.regions_in_range(offset, offset).is_empty()
        self.find_changed = FindStatusChange::Matches;
use unicode_segmentation::GraphemeIncomplete;
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
    ObjectSnapshot,
        }

            trace.record(sample);
///
    }
    deletes_from_union: Subset,
/// * `categories` - A static array of static strings that tags the samples in
                self.set_selection_raw(text, selection);

        b.push('\n');
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {

}
                            rev_id: rev.rev_id,
        // position after 'f' in four
use serde::de::{Deserialize, Deserializer};
    tombstones: Rope,


    #[bench]
    out.as_mut_slice().reverse();
        // +2 for exe & thread name.
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)

    #[test]
        engine.edit_rev(1, 3, new_head_2, d3);
        let tombstones_b = Rope::from("a");
    #[bench]
            return false;
            utf16_size: 0,
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
    }
            }
use word_boundaries::WordCursor;

                payload: None,
            None
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        let a = Rope::from("\n");
        if self.len() <= MAX_LEAF {
    pub fn set_session_id(&mut self, session: SessionId) {
    /// Get the contents of the document at a given revision number
    end: usize,
    fn next(&mut self) -> Option<Cow<'a, str>> {
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
/// # Returns
        // clamp to end of line
        assert_eq!(trace.get_samples_limit(), 20);
            self.select_next_occurrence(text, reverse, true, allow_same, modify_selection);
    end: usize,
        -##-
/// Revision 0 is always an Undo of the empty set of groups

        s.is_char_boundary(offset)

            duration_us: Some(ns_to_us(duration_ns)),
            } else {
impl<'a> Iterator for ChunkIter<'a> {

            tid: sys_tid::current_tid().unwrap(),
        let text_inserts = inserts.transform_shrink(&deletes_from_union);
        let new_head = engine.get_head_rev_id().token();
        if self.highlight_find {
impl From<Rope> for String {
        // spam cmd+z until the available undo history is exhausted
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
    fn build_delta_1() -> Delta<RopeInfo> {
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.

        self.set_selection(text, sel);
pub fn samples_len() -> usize {
        match symbol {

// You may obtain a copy of the License at
}
    }
        } else {

    }
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
            }

        }
            size: Size::default(),
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
    /// Tests that priorities are used to break ties correctly
    }
    }
            SampleEventType::FlowInstant => 't',
                        gc_dels = gc_dels.transform_expand(inserts);
///

        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
        Err(ref e) => {
                    }

            selection.delete_range(offset, offset, true);

/// # Arguments
/// Base unit is utf8 code unit.
        let mut selection = Selection::new();
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        ---#--
    }
#[derive(Serialize, Deserialize, Debug)]
        ");
                           pristine: bool)

/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        ];
        MergeTestState::new(3).run_script(&script[..]);
    #[test]
    pub fn new_disabled() -> Self {
            DeltaElement::Copy(ref start, ref end) => {
            // to replicate whiteboard, z must be before a tombstone
    {
        let rearranged = rearrange(&revs, &base, 7);

/// See `trace_payload` for a more complete discussion.
            base_len: usize
                        line_num = seg.their_line_num + seg.n;
                            if !deletes.is_empty() {
                if s.ends_with('\n') {


        // TODO: simplify this through the use of scopeguard crate
                    if seg.validity == line_cache_shadow::ALL_VALID {

/// Measured unit is utf8 code unit.

    fn is_boundary(s: &String, offset: usize) -> bool {
            }
    fn next(&mut self) -> Option<u8> {
                        } else {
        assert_eq!(snapshot.len(), 5);
    fn gc_3() {
#![cfg_attr(feature = "cargo-clippy", allow(
        let cur_deletes_from_union = &self.deletes_from_union;

        if offset == 0 {

/// some way.
            find.set_hls_dirty(false)
            self.next::<BaseMetric>();
    /// storage allocated will be limit * size_of<Sample>
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());
            // cursor
        }
                                                    style_spans, client,
    #[test]
/// ```
    #[bench]
            rev_id, max_undo_so_far,
            };
        } else {
/// feature makes the payload a `serde_json::Value` (additionally the library
    /// The line ending is stripped from the resulting string. The final line ending
                (region.is_upstream() && c == pos) ||
    /// End of the region selected when drag was started.

        for &(sel_start, sel_end) in sel {


        let mut retain_revs = BTreeSet::new();
        let first_rev = engine.get_head_rev_id().token();
            first_line: 0,
            Merge(0,2), Merge(1, 2), Merge(3, 2),
                if !region.is_caret() {
        if !selection.regions_in_range(offset, offset).is_empty() {
    {
    fn next(s: &String, offset: usize) -> Option<usize> {
use multiset::{Subset, CountMatcher};
#[derive(Clone, Copy)]
            }
/// See `trace_payload` for a more complete discussion.
/// Replace part of a `Rope`:
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
categories_from_constant_array!(5);
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
        client.def_style(&style.to_json(ix));
/// Create a `Rope` from a `String`:
                let mut peer = Engine::new(Rope::from(""));
        assert_eq!(Some(9), b.next_codepoint_offset(5));
    /// End of the region selected when drag was started.
            engine.edit_rev(1, i+1, head, d);
        MergeTestState::new(4).run_script(&script[..]);
///
/// * `name` - A string that provides some meaningful name to this sample.
        assert_eq!(samples[1].name, "local pid");
    {
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            }
    {
    TRACE.block(name, categories)
    /// For safety, this will panic if any revisions have already been added to the Engine.
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
        let expand_by = compute_transforms(revs);
            DeltaElement::Insert(ref node) =>
                          payload: Option<TracePayloadT>) -> Self

    #[test]
/// fn something_else_expensive() {
        let mut d_builder = Builder::new(TEST_STR.len());
        if f.alternate() {
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
            self.set_selection(text, selection);
    fn next(s: &String, offset: usize) -> Option<usize> {
            duration_us: None,
    fn edit_rev_simple() {
                    let after = new_full_priority >= full_priority;  // should never be ==
            Some((l, off)) => (l, off),
    #[test]
}
        }
        assert_eq!(samples[0].name, "remote pid");

        }
                    if retain_revs.contains(&rev.rev_id) {
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
    fn next_codepoint_offset_small() {
    impl MergeTestState {
        first_line..(last_line + 1)
        self.height = last - first;
            if let GraphemeIncomplete::PreContext(_) = incomp {
        /// The subset of the characters of the union string from after this
        assert_eq!(2, expand_by.len());
        selection.add_region(region);
/// ```
        // +2 for exe & thread name.
    }
        match *self {
            };
/// some way.
/// fn something_expensive() -> u32 {
    Undo {
///
        while !s.is_empty() {
        out.push(Revision {
                    self.fragment = "";
use std::fmt;
pub fn enable_tracing() {
                self.set(pos);
            }
/// However, anything that can be converted into a Cow string can be passed as
            Merge(2,0),
    }
        // current recording mechanism should see:
                SelectionModifier::AddRemovingCurrent => {
                max_undo_so_far: i,

    #[allow(dead_code)]
    fn prev(s: &String, offset: usize) -> Option<usize> {
        samples.sort();
        }
// distributed under the License is distributed on an "AS IS" BASIS,
            name: sample_name,

    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        assert!(end <= leaf.len());
        cursor.prev_grapheme()
    height: usize,
                let mut peer = Engine::new(Rope::from(""));
    first_line: usize,
    // reachability calculation.
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        // update only find highlights affected by change
        assert_eq!(1, expand_by[0].0.priority);
/// });

        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            // TODO: on double or triple click, quantize offset to requested granularity.
    }
                Rope::from(s1.clone()),
        let mut cur_len_utf16 = 0;

            sample.timestamp_us = ns_to_us(time::precise_time_ns());

                            max_undo_so_far: rev.max_undo_so_far,
/// fn something_else_expensive(value: u32) {
        deletes_from_union = new_deletes_from_union;
                    }
            self.idx = 0;
            offset = text.len();
    }
            duration_us: None,

        }
        let selection = SelRegion::new(0, text.len()).into();
        for _i in 0..50 {
            let next_chunk = self.inner.next();
            return 0;
        for &(sel_start, sel_end) in sel {
            // The deletes are already after our inserts, but we need to include the other inserts
    /// Tracks whether there has been changes in find results or find parameters.
            GestureType::RangeSelect => self.select_range(text, offset),
        self.enable_config(Config::default());
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
            let base_index = find_base_index(&self.revs, &other.revs);
/// The visual width of the buffer for the purpose of word wrapping.
        deletes: Subset,

        // if we have active find highlights, we don't collapse selections
    /// part of the initial contents since any two `Engine`s need a common
            }
        self.do_set_replace(replacement, false);
        if let Some(ref mut trace) = self.trace {
        let a_rope = Rope::from(&a);

        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    #[test]
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
            return ix;

                    } else {
        engine.undo([2].iter().cloned().collect());
            }
            utf16_size: count_utf16_code_units(s),
/// Find an index before which everything is the same
    #[serde(rename = "dur")]
            'n' => SampleEventType::AsyncInstant,
            // I think it's a precondition that this will never be called
        }

                        } else {
        assert_eq!(snapshot[1].name, "thread_name");
        assert!(r == a_rope.clone() + b_rope.clone());
            utf16_size: 0,
        let mut pos = self.pos();

        let initial_rev = engine.get_head_rev_id().token();

    }
        }
            if let Edit { ref inserts, .. } = rev.edit {
            }
                    // fast-forward this revision over all common ones after it
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    fn measure(info: &RopeInfo, _: usize) -> usize {
        assert_eq!(utf16_units, 9);
        engine.gc(&to_undo);
                              duration_ns: u64) -> Self
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        -> Self
            Assert(2, "ab".to_owned()),
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        ).min_by_key(|x| {
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("-r-") },
            }
        }
    #[test]
        assert_eq!(rope.offset_of_line(0), 0);
                            }
                    let end_of_line = match cursor.next::<LinesMetric>() {
pub struct Trace {

    for op in b_new {
    fn edit_rev_undo_2() {
            }

        for mut find in self.find.iter_mut() {
                        DeltaElement::Insert(Rope::from(s)),
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
    /// recomputing line wraps.
    #[test]
        b.iter(|| black_box(time::precise_time_ns()));

            }
        let trace = Trace::disabled();
            }),
    #[test]

        for find in &mut self.find {
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        // the generated JSON.
        };
        self.enable_config(Config::default());

    #[test]
    }
        // rebase insertions on text and apply
            Assert(0, "acbd".to_owned()),

        }
    }
///
            }
            match rev.edit {

            pending_render: false,
        trace.disable();
        ];
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
                if groups.contains(undo_group) {
        match self.selection.len() {
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        engine.undo([1].iter().cloned().collect());
            Assert(0, "ab".to_owned()),
            rendered_styles.push(1);
        self.revs.last().unwrap().max_undo_so_far
        }
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
///
    }

    /// Selects the next find match.
                    if !inserts.is_empty() {
    #[test]
use word_boundaries::WordCursor;
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
                          payload: Option<TracePayloadT>) -> Self
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
                Undo { ref toggled_groups, ref deletes_bitxor } => {
    #[test]
    fn from_chrome_id(symbol: char) -> Self {

        assert!(end <= leaf.len());
        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        ];
            if !s.is_empty() {
                            if !inserts.is_empty() {
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    pub fn max_undo_group_id(&self) -> usize {
        for i in 0..self.len() {
    rev_id: RevId,
//! pending edit in flight each.
pub struct Utf16CodeUnitsMetric(usize);
                    RopeDeltaElement_::Insert(s) =>
    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
    }
        }
//
        peers: Vec<Engine>,
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            "op": op,
        }
        let a = Rope::concat(
        }
                }
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
/// ```rust
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));

    }


                    if !deletes.is_empty() {
    /// Callers are expected to validate their input.
    fragment: &'a str
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
            base_sel: selection.clone(),
    // recompute the prefix up to where the history diverges, but it's not clear that's
    let new_text = del_delta.apply(text);
            }
    }
        assert_eq!(Some(3), a.next_codepoint_offset(1));
///
        assert_eq!("zcpbdj", String::from(&text_2));
    #[inline]
        } else {
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;

        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
/// a.edit_str(1, 9, "era");
                        let mut word_cursor = WordCursor::new(text, region.max());
        let start_pos = start_of_line.pos();
/// # Performance
        let trace = Trace::enabled(Config::default());
                    "something", &["benchmark"], || {},
    // ============== Merge script tests
    }
    fn undo_3() {
}
                payload: payload,
// you may not use this file except in compliance with the License.
            Merge(0,1),
        assert_eq!(trace.is_enabled(), true);
}
            Copy(usize, usize),
        let height = self.line_of_offset(text, text.len()) + 1;



    }

                    as_vec.push(Sample::new_metadata(
impl Leaf for String {
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
        assert!(a.slice(0, 0) == empty);
            // corner and I'm lazy -cmyr
    }

                SelectionModifier::Set => self.set_selection(text, occ),

    pub timestamp_us: u64,
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    // * grapheme clusters
///     something_expensive()

    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        tombstones = new_tombstones;
pub type RevToken = u64;
impl View {

    /// This is a `Subset` of the "union string" representing the characters
    /// that are currently deleted, and thus in `tombstones` rather than
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    fn len(&self) -> usize {
        engine.undo([1,2].iter().cloned().collect());
    idx: usize,

use std::cmp;
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    #[inline]
impl<'a> From<&'a Rope> for String {
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
            'i' => SampleEventType::Instant,
    // TODO: replace this with a version of `lines` that accepts a range
            // copy the current state

                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
            {
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
/// See `trace_payload` for a more complete discussion.
/// # Examples
            Merge(0,1),
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
                         styles: &StyleMap, style_spans: &Spans<Style>,
    // TODO: this should be a Cow
            breaks: None,

    /// The `pristine` argument indicates whether or not the buffer has
    #[test]
            Merge(1,2),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);

        }
                    rev_id: rev.rev_id,
            let splitpoint = find_leaf_split_for_merge(self);
            rendered_styles.push((sel_start as isize) - ix);
                if !region.is_caret() {
    inner: ChunkIter<'a>,
            }
                    RopeDeltaElement_::Insert(s) =>
        let first_rev = engine.get_head_rev_id().token();


        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
                    new_deletes = new_deletes.transform_expand(inserts);
#[cfg(feature = "benchmarks")]
}
/// Usage of static strings is encouraged for best performance to avoid copies.

    ///
                priority, undo_group, deletes,
pub struct SampleArgs {
        #------
    }
}
        let mut engine = Engine::new(Rope::from(TEST_STR));
    }
    }
    // * Unicode width (so CJK counts as 2)
type StyleMap = RefCell<ThemeStyleMap>;
    pub fn empty() -> Engine {
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    }
    }

                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
fn exe_name() -> Option<String> {
}
        // a, b, y, z, c, x
pub fn samples_cloned_unsorted() -> Vec<Sample> {
            engine.undo(undos);
            self.tid == other.tid &&
    fn delta_rev_head_2() {

extern crate log;
        }

        ");
use std::cell::RefCell;
        self.hash(&mut hasher);
        where S: Into<StrCow>, C: Into<CategoriesT>

    ///
        };
    }

    /// a point that should be scrolled into view.
            CategoriesT::StaticArray(ref self_arr) => {
        }
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
}
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        self.height

        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    fn is_boundary(s: &String, offset: usize) -> bool {
        guard
            let style_id = self.get_or_def_style_id(client, styles, &style);
                return None;
        Subset::new(len)
        assert!(r.clone().slice(0, a.len()) == a_rope);


/// conforms to is currently determined by the feature this library is compiled
    fn len(&self) -> usize {
            Merge(0,2),
    fn test_get_samples() {
        assert_eq!(snapshot.len(), 9);
pub type RopeDeltaElement = DeltaElement<RopeInfo>;

    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
                edit: contents.clone()
        let mut leaf_offset = pos - offset;
        } else {
}
/// # Performance
        } else {
    pub(crate) fn has_pending_render(&self) -> bool {


use internal::find::FindStatus;
    fn gc_scenario(edits: usize, max_undos: usize) {
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
    /// None of the find parameters or number of matches changed.
            let pos = bc.next::<BreaksMetric>();
    /// The line number is 0-based, thus this is equivalent to the count of newlines
    TRACE.disable();
        let start = time::precise_time_ns();
    use super::*;
        for _ in 0..in_measured_units {
#[macro_use]
    #[test]
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
        // likely be improved.
}
        rendered_styles
    }
                });
        for op in &delta_ops {
            sel.add_region(
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
/// first can make it ~1.7x slower than a regular trace.
///
    fn test_get_samples_nested_trace() {
/// An element in a `RopeDelta`.
        }
        ---#-
            inner: self.iter_chunks(start, end),
        // expand by each in expand_by
        let mut selection = Selection::new();
            FindNext { wrap_around, allow_same, modify_selection } =>
            Some(right_str)
                    s = &s[..s.len() - 1];
        engine.edit_rev(1, 2, initial_rev, d1.clone());
        // A with ring, hangul, regional indicator "US"
        assert_eq!(snapshot[6].name, "z");
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            }
    }
            // with offset == s.len(), but be defensive.
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
                l = nl;
                    let transformed_deletes = deletes.transform_expand(&s);
    }
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
            // I think it's a precondition that this will never be called
    }

        let a = Rope::from("a\r\nb\r\nc");
pub struct ChunkIter<'a> {
        }
            }
    /// Only number of matches changed
        if self.current.is_none() {
                        let (inserts, deletes) = if gc_dels.is_empty() {
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
            self.first_line = line;
        assert_eq!(snapshot[3].name, "a");
            panic!("line number {} beyond last line {}", line, max_line);
    #[test]


}

            }
    /// Sets the selection to a new value, without invalidating.
        assert_eq!(1, expand_by[0].0.priority);
    }
    fn gc_2() {
        self.replace_changed = true;
            self.start_drag(offset, offset, offset);
    pub args: Option<SampleArgs>
        Ok(Rope::from(s))
    }
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
        let a = Rope::from("a\rb\rc");
        assert_eq!(utf16_units, 20);
        self.set_dirty(text);
    pub fn get_samples_count(&self) -> usize {
        let all_caret = self.selection.iter().all(|region| region.is_caret());
        };
    /// Get next codepoint after cursor position, and advance cursor.
        let mut engine = Engine::new(Rope::from(TEST_STR));
            &self.deletes_from_union, &old_deletes_from_union);
    // TODO: maybe refactor this API to take a toggle set
    /// Time complexity: O(log n)
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
/// Disable tracing.  This clears all trace data (& frees the memory).


        inserts.into_iter().enumerate().map(|(i, inserts)| {
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
    pub fn default() -> Self {
                            ops.push(self.build_update_op("skip", None, n_skip));
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        self.prev::<BaseMetric>();
        let mut a = Rope::from("");
            lines: count_newlines(s),
///
    /// Move the selection by the given movement. Return value is the offset of
    #[test]
        struct RopeDelta_ {

        if self.replace_changed {
        for find in &mut self.find {
    #[bench]
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        let r = r + Rope::from(&b[MIN_LEAF..]);
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        if offset == s.len() {
    #[test]
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
}

///
        }
        assert!(self.current.is_some());
    /// vertical scroll position
            let next_chunk = self.inner.next();
    TRACE.get_samples_count()
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let new_head_2 = engine.get_head_rev_id().token();
            trace: Some(&trace),

    }
    }
    pub payload: Option<TracePayloadT>,
        }
    fn eq(&self, other: &CategoriesT) -> bool {
        tombstones = new_tombstones;
                //self.end - prev_pos
                    let e = &mut self.peers[ei];


    }
        let first_rev = engine.get_head_rev_id().token();
    #[test]
/// an argument.
/// None if an irrecoverable error occured.
/// a.edit_str(1, 9, "era");
        match self.breaks {
        }
extern crate time;
/// # use xi_rope::Rope;

        } else {
        {
    fn line_of_offset_small() {
        if self.is_enabled() {
    }
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))

    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        peers: Vec<Engine>,
    }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        let base_sel = Selection::new();
    find_leaf_split(s, MIN_LEAF)
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

        result
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                        let mut rendered_lines = Vec::new();
        trace.instant("1", &["test"]);
}
/// ```rust
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
        engine.edit_rev(1, 2, first_rev, d1.clone());
        let trace = Trace::disabled();
        -##-
    TRACE.get_samples_count()

                    }
                            }
        json!({"test": value})

pub struct LinesMetric(usize);  // number of lines
                    let end_of_line = match cursor.next::<LinesMetric>() {
        -> Result<CategoriesT, D::Error>
impl<T: AsRef<str>> From<T> for Rope {
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
pub fn disable_tracing() {
    #[test]

    fn eq_small() {
    #[test]
                    self.set_selection(text, selection);
                        let un_deleted = deletes_from_union.subtract(deletes);
        ];
        for rev in &self.revs[first_candidate..] {
}
    /// Get text of head revision.
const FLAG_SELECT: u64 = 2;
            // with offset == 0, but be defensive.
}
                            }
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
            end -= 1;
        use serde::de::Visitor;

    }
    }
            ModifySelection(movement) => self.do_move(text, movement, true),
        assert_eq!(trace.get_samples_limit(), 0);
        }
    }
        let a = Rope::from("a");
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());

            min: offset,
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        let a2 = Rope::from("a");
            sel.add_region(region);
}
            }
                              start_ns: u64,

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            Assert(1, "afc".to_owned()),
    ///
}
                    }
        }
/// ```
    }
        }
        #---
            min: offset,
    }
    fn rebase_1() {
        }
    revs: Vec<Revision>,
            self.event_type == other.event_type &&
            GestureType::ToggleSel => self.toggle_sel(text, offset),
            Assert(1, "arpbj".to_owned()),
        b.push('\n');
        // ensure that when the samples are sorted by time they come out in a
            MergeTestState { peers }
    fn prev_grapheme_offset() {
    }
        
    pub(crate) fn get_buffer_id(&self) -> BufferId {
                    result = cow_append(result, self.fragment);

            );
        assert_eq!(snapshot[4].name, "y");
        -> Self
        &leaf[offset..end]
        let new_head_2 = engine.get_head_rev_id().token();
            None => None
        let a = Rope::from("\n");
                break;
        engine.undo([1,2].iter().cloned().collect());
pub fn enable_tracing() {
            SelectAll => self.select_all(text),
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    #[allow(dead_code)]

pub struct Config {
categories_from_constant_array!(8);
    }
}
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
    }

        for _i in 0..50 {
            client.scroll_to(self.view_id, line, col);
        use self::ViewEvent::*;
            selection.delete_range(offset, offset, true);
                pos = leaf_offset + nl.len();
}
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
        let new_pos = self.pos() + (end - offset);
    }
                        } else {
    /// The maximum number of entries the tracing data should allow.  Total
#[inline]
                    let (start, end) = self.peers.split_at_mut(ai);
/// some way.
    /// If the cursor is at the end of the rope, returns the empty string.
#[inline]
        let initial_rev = engine.get_head_rev_id().token();
        }
    breaks: Option<Breaks>,
///
        }
                    to_payload(("some description of the closure")))));
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {

        /// revision that were deleted by this revision.
                    s = inserts.transform_union(&s);
            cur_len_utf8 += u.len_utf8();
        assert_eq!(snapshot[1].name, "thread_name");
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    #[test]
///
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            new_deletes = new_deletes.transform_expand(&new_inserts);

        /// The subset of the characters of the union string from after this
        let script = vec![
        b.add_span(height, 0, 0);
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;

            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
categories_from_constant_array!(8);
                                           client, iv, new_len, px),
                Contents::Undo { .. } => panic!(),

            self.set_dirty(text);
    /// Merge the new content from another Engine into this one with a CRDT merge

            Merge(0,2), Merge(1, 2),
    }
            true => self.selection.clone(),

            "n": n,
    fn into_chrome_id(&self) -> char {

                // sanitize input
                return None;
            args: Some(SampleArgs {
        b.push_str(new);
    }
    fn eq_med() {
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
    CompleteDuration,
        #------
        self.revs.last().unwrap().rev_id
        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(i));
    /// controlled by features (default string).
            highlight_find: false,
    },

        a.lines_all().collect::<Vec<_>>());
        for _ in 0..(edits-max_undos) {
        let base_sel = Selection::new();
        });
    #[serde(skip_serializing_if = "Option::is_none")]
        for i in 1..(s1.len() * 3) {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            self.first_line = line - (self.height - 1);
    #[test]
// Copyright 2016 The xi-editor Authors.
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
        let ix = self.find_rev_token(base_rev).expect("base revision not found");

}
                // This could be done by explicitly overriding, or by tweaking the
        if offset == s.len() {
    fn bench_trace_closure(b: &mut Bencher) {

    }
        assert_eq!(trace.is_enabled(), true);
        self.join(",").serialize(serializer)
                    to_payload(("some payload for the block"))));
    // partly because the reachability calculation would become more complicated (a
            SampleEventType::CompleteDuration => 'X',
    #[test]
        cursor.prev::<BaseMetric>()
    pub fn lines(&self, start: usize, end: usize) -> Lines {
    /// An iterator over the lines of a rope.
    #[test]
        }
    }
            deletes: Subset::new(0),
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let start = time::precise_time_ns();
            }
    #[test]
#[cfg(feature = "json_payload")]

enum WrapWidth {
            }
            breaks: None,
}
    /// An iterator over the lines of a rope.
                find_leaf_split_for_bulk(s)
        self.invalidate_selection(text);
        where S: Into<StrCow>, C: Into<CategoriesT>
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            categories: Some(categories.into()),
    pub fn get_samples_limit(&self) -> usize {
                    } else if !inserts.is_empty() {
    /// Only works well for ASCII, will probably not be maintained long-term.
        }
    }
// Unless required by applicable law or agreed to in writing, software
            Merge(2,0),
    /// Time complexity: O(log n)
    }
            Assert(0, "acpbdj".to_owned()),
    inner: LinesRaw<'a>
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
    DurationEnd,
    }
    trace: Option<&'a Trace>,
///
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
                }
            fragment: ""
    ///
    fn gc_3() {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        assert_eq!(snapshot[5].name, "z");
    fn bench_trace_block_payload(b: &mut Bencher) {
        self.do_set_replace(replacement, false);
        }
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    }
            warn!("Failed to get path to current exe: {:?}", e);
            None
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
fn find_leaf_split_for_bulk(s: &str) -> usize {
        assert_eq!(rope.line_of_offset(1), 0);
            }
                    }
        // if self.end is inside this chunk, verify that it is a codepoint boundary
            }
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>

    /// This function will panic if `offset > self.len()`. Callers are expected to
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
        if !self.lc_shadow.needs_render(plan) { return; }
impl FromStr for Rope {
        self.do_set_replace(replacement, false);
        for i in 1..(s1.len() * 3) {
/// Usage of static strings is encouraged for best performance to avoid copies.
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
            return None;
        -> SampleGuard
    }

                }
    /// Merge the new content from another Engine into this one with a CRDT merge
        _ => 4
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
                name, categories, payload, SampleEventType::DurationBegin)),

        trace.instant("2", &["test"]);
    }
        }
    fn line_of_offset_panic() {

        assert_eq!(snapshot[2].name, "x");
///
            trace: Some(&trace),
                c.provide_context(&pl, self.pos() - poffset);
use find::Find;
// Try to split at newline boundary (leaning left), if not, then split at codepoint
    }

                    let e = &mut self.peers[ei];
    TRACE.closure_payload(name, categories, closure, payload)
            Some(ref breaks) => {
        }
        let first_rev = engine.get_head_rev_id().token();
    }
        #------
#[cfg(test)]
                text.offset_of_line(line)

        };
        });
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
                    base_len: delta.base_len
pub type SessionId = (u64, u32);
    {
                name, categories, None, start, end - start));
            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
                _ => panic!("to_base_units called with arg too large")

        // additional tests for line indexing
        ];
        json!({"test": value})

            if let GraphemeIncomplete::PreContext(_) = incomp {
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
    }
    }
    fn test_get_samples_nested_trace() {
    /// storage allocated will be limit * size_of<Sample>
        if line < self.first_line {
}
    }

            }
}
    #[bench]
        &leaf[offset..end]
    fn test_samples_closure() {
                            None
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
}
///
    }
    }
        {
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        self.text = new_text;
        where S: Serializer
    pub height: f64,
            GotoLine { line } => self.goto_line(text, line),
    /// Note: `edit` and `edit_str` may be merged, using traits.

    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
        RopeInfo {
        let r = Rope::from(&a[..MAX_LEAF]);
    /// finer grain invalidation.
                        MetadataType::ThreadName { name: thread_name.to_string() },
    }
        #[derive(Serialize, Deserialize)]
        // +2 for exe & thread name.
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
    /// selection edges).
            pid: sys_pid::current_pid(),
                    let after = new_full_priority >= full_priority;  // should never be ==
    }
    }
    #[cfg(feature = "benchmarks")]
    /// The largest undo group number of any edit in the history up to this
/// monotonically increasing single global integer (when tracing) per creation
/// than a string that needs to be copied (or ~4.5x slower than a static string)
    #[test]
        // a, b, y, z, c, x
        }
    #[test]
    pub fn lines_all(&self) -> Lines {
    }
    /// Returns a u64 that will be equal for equivalent revision IDs and
    #[cfg(feature = "json_payload")]

                // Deprecated (kept for client compatibility):
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
    struct MergeTestState {
    fn next(&mut self) -> Option<Cow<'a, str>> {
                    new_deletes = new_deletes.transform_expand(inserts);
        }
            AssertMaxUndoSoFar(0,3),
            self.current = next_chunk;
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);



///
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
                    let (start, end) = {
    }
                    self.do_gesture(text, line, column, GestureType::WordSelect)
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        assert_eq!(rope.line_of_offset(15), 3);

        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            categories: Some(categories.into()),
    #[serde(default = "initial_revision_counter", skip_serializing)]
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        for rev in old_revs.into_iter().rev() {
        while let Err(incomp) = prev_boundary {
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
}
            Assert(0, "zacbd".to_owned()),
            let sel = {
    fn test_cross_process_samples() {
        } else {
    }
    /// The maximum amount of space the tracing data will take up.  This does
        let a = Rope::from("\n");
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
    inserts: InsertDelta<RopeInfo>,

        }
impl Serialize for DeltaElement<RopeInfo> {
        let mut all_samples = self.samples.lock().unwrap();
        assert_eq!(2, expand_by.len());
            let head = engine.get_head_rev_id().token();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
    fn is_boundary(s: &String, offset: usize) -> bool {
    pub fn max_undo_group_id(&self) -> usize {
            // TODO: finer grain invalidation for the line wrapping, needs info
            }
        }
        //};
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.
    #[test]
        assert_eq!(Some(17), a.next_grapheme_offset(9));
/// let a = Rope::from("hello world");
}
        a.lines_all().collect::<Vec<_>>());
    fn arr_eq(&self, other: &Vec<String>) -> bool {
        assert_eq!(rope.offset_of_line(1), 3);
/// Usage of static strings is encouraged for best performance to avoid copies.
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);

        self.revs.push(new_rev);

    highlight_find: bool,

            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
                Some(i) => {
            replace: None,
        if self.cursor.pos() >= self.end {
            Merge(0,2), Merge(1, 2),
            let mut peers = Vec::with_capacity(count);
        let self_iv = Interval::new_closed_closed(0, self.len());
                    if let Some(new_gc_dels) = new_gc_dels {
/// something_expensive();
    min: usize,
/// record it.
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        let trace = Trace::disabled();
        as_vec.extend(all_samples.iter().cloned());
                    } else {
    fn from(s: T) -> Rope {
    let mut out = Vec::with_capacity(revs.len());
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
        assert_eq!(a.len(), r.offset_of_line(1));

        MergeTestState::new(3).run_script(&script[..]);
        ");
        if initial_contents.len() > 0 {
                RenderTactic::Preserve => {
            r = op.inserts.apply(&r);
        if !self.is_point_in_selection(offset) {
        ChunkIter {
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        };
        let mut union_ins_delta = ins_delta.transform_expand(&deletes_at_rev, true);
    find_leaf_split(s, MIN_LEAF)
            trace.closure_payload("y", &["test"], || {
categories_from_constant_array!(6);
///
            Assert(1, "apbj".to_owned()),
extern crate libc;
// Unless required by applicable law or agreed to in writing, software
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
        } else {
            }

        CategoriesT::DynamicArray(c)
                //// if we aren't on a boundary we can't be at the end of the chunk
    /// unsaved changes.
        let guard = Self {
            Merge(2,0),
/// have to be considered in `rebase` substantially for normal editing
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
                metadata_sort_index: None,
        self.undone_groups = groups;
        use self::MergeTestOp::*;
            self.current = None;

pub fn disable_tracing() {
    #[serde(rename = "cat")]
            'B' => SampleEventType::DurationBegin,
            rendered_styles.push(style_id as isize);
impl MetadataType {
        assert_eq!(samples[1].name, "local pid");
    pub name: StrCow,
    /// Returns the largest undo group ID used so far
impl Sample {

    }
                serializer.serialize_newtype_variant("DeltaElement", 1,
    pub fn with_limit_bytes(size: usize) -> Self {
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);
                } else {
    Width(f64),
            // trans-expand other by expanded so they have the same context
// Copyright 2016 The xi-editor Authors.
    }
    }
        value
        let expand_by = compute_transforms(a_revs);
            SelectionForFind { case_sensitive } =>
pub fn enable_tracing_with_config(config: Config) {
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {

            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        for i in 0..edits {

/// let b = a.slice(1, 9);
///
        b.push(self);
            offset = text.len();
        // TODO: want to let caller retain more rev_id's.
        if offset >= next_line_offset {
            while !s.is_char_boundary(offset - len) {
        let tombstones_a = Rope::from("a");

        assert!(r != a_rope);
        assert_eq!(2, a.line_of_offset(5));
                }
            FindAll => self.do_find_all(text),
        for &(trans_priority, ref trans_inserts) in &expand_by {
        let a = Rope::from("a\nb\nc");

    }
            Some(right_str)
    {
pub struct Size {
            categories: Some(categories.into()),
    #[test]
        b.iter(|| black_box(sys_tid::current_tid()));
            }),
            // I think it's a precondition that this will never be called
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);

    /// unsaved changes.
///
    ///

    fn rebase_1() {
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
//! text.
    fn prev(s: &String, offset: usize) -> Option<usize> {
    #[should_panic]
        let inserts_2 = parse_subset_list("
            None => {
    pub fn lines_all(&self) -> Lines {
        let first_rev = engine.get_head_rev_id().token();
}
                    let end_of_line = match cursor.next::<LinesMetric>() {
                    }

        });
                        ops.push(self.build_update_op("copy", None, seg.n));

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    // reachability calculation.
            let c = i.to_string() + "\n";
enum Contents {

                        let mut rendered_lines = Vec::new();
///
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
        assert_eq!(snapshot[1].name, "thread_name");
/// }

    #[test]
}

    /// None of the find parameters or number of matches changed.
        assert_eq!(snapshot[0].name, "process_name");
        self.tombstones = tombstones;
/// Find a set of revisions common to both lists
            CategoriesT::DynamicArray(ref self_arr) => {
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        let len = match first_rev.edit {
/// # Performance
    /// Determines whether the offset is in any selection (counting carets and

        assert_eq!(snapshot[7].name, "c");
        assert_tokens(&rope, &[
fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
}
                    .with_affinity(affinity)
/// Revision will be used, which means only the (small) set of concurrent edits

        let replacement = match self.selection.last() {
        let inserted = inserts.inserted_subset();
            'i' => SampleEventType::Instant,
    }
    pub fn next_codepoint(&mut self) -> Option<char> {

/// # Performance
        }
                selections.push((sel_start_ix, sel_end_ix));

    pub fn get_rev(&self, rev: RevToken) -> Option<Rope> {
/// * `name` - A string that provides some meaningful name to this sample.
    }
    /// Highlights are only rendered when search dialog is open.
        let empty = Rope::from("");
    pub fn enable(&self) {
    fn accumulate(&mut self, other: &Self) {
            .map(|pos| offset + pos + 1)
                    }
        let first_rev = engine.get_head_rev_id().token();
        Err(ref e) => {
        ---#--
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
/// However, anything that can be converted into a Cow string can be passed as
}
        let first_rev = engine.get_head_rev_id().token();
        assert!(r.clone().slice(0, a.len()) == a_rope);
            self.lc_shadow.edit(start, end, new_end - start);
            rendered_styles.push(sel_end as isize - sel_start as isize);
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    }
    #[test]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },

#[inline]
        assert_eq!(0, b.line_of_offset(1));
        }
            }
                        })
        if !cursors.is_empty() {
        let self_iv = Interval::new_closed_closed(0, self.len());
                    if undone_groups.contains(undo_group) {
    Metadata
    where S: Into<StrCow>, C: Into<CategoriesT>
        Ok(Rope::from(s))
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
        let end = time::precise_time_ns();
        b.push_str(new);

            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
impl<'a> From<&'a Rope> for String {
    view_id: ViewId,
    }
        if !self.is_point_in_selection(offset) {
            let c = region.end;
/// let b = a.slice(1, 9);

#[inline]
                        &mut rest[bi - ai - 1]
    /// the heap, counters, etc); just the data itself.
            // Snap to grapheme cluster boundary
            //leaf.len() - start_pos
                MergeTestOp::Merge(ai, bi) => {
        // A with ring, hangul, regional indicator "US"
    /// The largest undo group number of any edit in the history up to this
        while !s.is_empty() {
    fn gc_6() {
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
    #[serde(deserialize_with = "deserialize_event_type")]
    pub fn merge(&mut self, other: &Engine) {

            MetadataType::ProcessLabels {..} => "process_labels",
pub type TracePayloadT = StrCow;
        max

            Merge(0,2), Merge(1, 2),
/// However, anything that can be converted into a Cow string can be passed as
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        let sample_name = to_cow_str(meta.sample_name());
    fn bench_single_timestamp(b: &mut Bencher) {
            MetadataType::ProcessName {..} => "process_name",
            AssertMaxUndoSoFar(0,2),
        }
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>

                        // no need to un-delete undone inserts since we'll just shrink them out
                metadata_sort_index: None,
                        s = &s[..s.len() - 1];
        }
                              start_ns: u64,
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
/// let b = Rope::from("world");
    }
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            args: Some(SampleArgs {
}
// distributed under the License is distributed on an "AS IS" BASIS,
            let style_id = self.get_or_def_style_id(client, styles, &style);
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        }
    fn from(s: T) -> Rope {
            // with offset == s.len(), but be defensive.
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        LinesRaw {
    fn gc_3() {
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        let a_revs = basic_insert_ops(inserts.clone(), 1);
    /// Returns a u64 that will be equal for equivalent revision IDs and
/// Represents a transform from one rope to another.

            "styles": styles,
    /// Offset of the point where the drag started.
// See the License for the specific language governing permissions and
            return;
        #[derive(Serialize, Deserialize)]
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
    /// Tracks whether there has been changes in find results or find parameters.
    /// state and new offset.
            // cursor
    }
    #[test]
                                             &text, false);
        }
        b.push_str(new);
        let mut offset = self.offset_of_line(text, line).saturating_add(col);
    pub fn with_limit_count(limit: usize) -> Self {
        assert_eq!(trace.get_samples_count(), 0);
        }
    Undo {
        assert_eq!(Some(17), a.next_grapheme_offset(9));
        let end = self.sel_regions().last().unwrap().end;
        Self::with_limit_count(size / size_of::<Sample>())
/// revisions not shared by both sides.
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
        self.select_next_occurrence(text, reverse, false, allow_same, modify_selection);
/// However, anything that can be converted into a Cow string can be passed as
            self.set_selection(text, sel);
        },
    /// inserted, including the ones that were later deleted, in the locations

        AssertMaxUndoSoFar(usize, usize),
                        &mut rest[bi - ai - 1]
#[macro_use]
                SelectionModifier::AddRemovingCurrent => {
extern crate lazy_static;
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
            word_cursor.select_word()
                payload: payload,

        where D: serde::Deserializer<'de>
use std;
    }
use std::collections::HashMap;
        where S: Into<StrCow>, C: Into<CategoriesT>
            for (i, op) in script.iter().enumerate() {
            let c = i.to_string() + "\n";
    /// 96 bits which is more than sufficient for this to never happen.
            Copy(usize, usize),
    {
        let height = self.line_of_offset(text, text.len()) + 1;
    pending_render: bool,


            Merge(0,2), Merge(1, 2),
            end += 1;

// Copyright 2016 The xi-editor Authors.
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        assert_eq!(vec!["\n"], a.lines_raw_all().collect::<Vec<_>>());
                Some(offset)
        match cmd {
    fn undo() {
    #[test]
            pid: sys_pid::current_pid(),
        // additional tests for line indexing
    #[cfg(feature = "benchmarks")]
                    if let Some(new_gc_dels) = new_gc_dels {
///
    }
            Some(b)

            Contents::Undo { .. } => panic!("can't merge undo yet"),
    ObjectCreated,
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {

            name: name.into(),
            if let GraphemeIncomplete::PreContext(_) = incomp {
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
        }
        assert_eq!(2, b.offset_of_line(1));
    }
    }
        });
        self.start_drag(offset, region.start, region.end);
// ======== Generic helpers
                    inserts: ins,
        if line > max_line {
/// Enable tracing with the default configuration.  See Config::default.
    // head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.
    #[bench]
        let delta_ops = compute_deltas(&revs, &text, &tombstones, &deletes_from_union);
        next_expand_by = Vec::with_capacity(expand_by.len());
struct DragState {
    fn test_samples_block() {
}
    fn delta_rev_head_2() {
        let inserts = parse_subset_list("

    let inverse_tombstones_map = old_deletes_from_union.complement();
extern crate lazy_static;
    pub categories: Option<CategoriesT>,
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
            inner: self.iter_chunks(start, end),
        ];
    /// and currently in a debugging state.
    /// The process the sample was captured in.
///
                c.provide_context(&pl, self.pos() - poffset);
        }
    }
                    self.do_gesture(text, line, column, GestureType::PointSelect)
            let splitpoint = find_leaf_split_for_merge(self);
    /// The largest undo group number of any edit in the history up to this
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
        fn run_script(&mut self, script: &[MergeTestOp]) {
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);

#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
pub struct BaseMetric(());
        s.is_char_boundary(offset)

        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
}
        leaf.as_bytes()[pos]
        // insert a character at the beginning
            let end = self.line_of_offset(last_text, iv.end()) + 1;
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
            // shouldn't be called with this, but be defensive
/// the `base_revs`. This allows the rest of the merge to operate on only
            utf16_count += 1;
struct Revision {
    use test::black_box;
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
    // ============== Merge script tests
            undone_groups: BTreeSet::new(),
        Some(&leaf[start_pos .. end])
    use std::collections::BTreeSet;
            let mut peers = Vec::with_capacity(count);
    pub fn get_head_rev_id(&self) -> RevId {
            MetadataType::ProcessLabels {..} => (None, None)
            end,
            Assert(2, "afc".to_owned()),
// See the License for the specific language governing permissions and
    fn eq_small() {

use internal::find::FindStatus;
        leaf.as_bytes()[pos]
#[inline]
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
/// version of Ropes, and if there are many copies of similar strings, the common parts

#[inline]
        let replacement = match self.selection.last() {


    ///
/// from multiple distributed sources (i.e. you want to sort the merged result
        }
/// Enable tracing with a specific configuration. Tracing is disabled initially
        assert_eq!(snapshot[0].name, "process_name");
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
    type L = String;
    }
        Self {
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
    rev_id_counter: u32,
    TRACE.enable();
    /// the heap, counters, etc); just the data itself.
    fn test_samples_pulse() {

}
            AddSelectionBelow =>
        ----
{
                }
        Self {
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
    fn is_ok_child(&self) -> bool {
            } else if incomp == GraphemeIncomplete::NextChunk {
        let base_sel = Selection::new();

        RevId { session1: 1, session2: 0, num: i as u32 }
    ///
        let rope = Rope::from("hi\ni'm\nfour\nlines");
///
        assert_eq!(1, res);
            "something", &["benchmark"],
                // Deprecated (kept for client compatibility):
        -> Self

    }
/// See `trace_payload` for a more complete discussion.
        let s = String::deserialize(deserializer)?;
                    text.slice_to_string(start, end)
    TRACE.is_enabled()
                        self.revs.push(Revision {

    use serde_test::{Token, assert_tokens};
        }



}
        -> Self
        let end = time::precise_time_ns();
// distributed under the License is distributed on an "AS IS" BASIS,
        ");
categories_from_constant_array!(3);
    /// want to set the process name (if provided then sets the thread name).
        assert_eq!(snapshot[2].name, "x");
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),

pub struct Sample {
          F: FnOnce() -> R
    pub fn set_scroll(&mut self, first: i64, last: i64) {
/// fn something_else_expensive(value: u32) {
    /// return if a delete is un-done or an insert is re- done.
            // with offset == 0, but be defensive.

    }
                None => {
    #[test]
    fn merge_simple_delete_1() {
            Some(ref breaks) => {

}
            Assert(0, "ab".to_owned()),
pub struct SampleArgs {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
///
    let mut last_priority: Option<usize> = None;
            line_cache_shadow::CURSOR_VALID
            None
    #[bench]
        Assert(usize, String),
    pub duration_us: Option<u64>,
        } else {
        max
                        self.revs.push(Revision {

            event_type: SampleEventType::CompleteDuration,
    ///
    }
            }, to_payload("test_get_samples_nested_trace"));
        }
            base_len: usize
        leaf.as_bytes()[pos]
                        let n_skip = seg.their_line_num - line_num;

                                gc_dels = gc_dels.transform_expand(inserts);
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
            first_line: 0,
    }
                max_undo_so_far: i,
        assert_eq!(snapshot[0].name, "process_name");
///
    {
    }
    }

//! a previously committed version of the text rather than the current text,
    {
    /// Return the line number corresponding to the byte index `offset`.
    samples: Mutex<FixedLifoDeque<Sample>>,
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
                    result = cow_append(result, self.fragment);
        use self::ViewEvent::*;
    #[test]
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
// See the License for the specific language governing permissions and
    pub fn get_samples_count(&self) -> usize {

                            warn!("Failed to get string representation: {:?}", e);
                Some(i) => {
                }
        b.iter(|| black_box(trace.instant_payload(
        where S: Into<StrCow>, C: Into<CategoriesT>
        self.find_changed = FindStatusChange::All;
    }
use rpc::{GestureType, MouseAction, SelectionModifier};
        }
        let base_sel = Selection::new();
        let mut selection = self.selection.clone();
            replace: None,
    #[test]

                self.set_selection(text, SelRegion::caret(offset));

            }
                if !region.is_caret() {
    fn can_fragment() -> bool { false }
        for &(sel_start, sel_end) in hls {
                self.set_dirty(text);
            // to replicate whiteboard, z must be before a tombstone
            SampleEventType::ObjectCreated => 'N',
                // TODO: small nit, merged region should be backward if end < start.
        engine.edit_rev(1, edits+1, head, d1);
            engine.undo(undos);
            Merge(1,0),

/// revisions on top of the revisions represented by `expand_by`.
    // TODO: this should be a Cow
        let first_rev = &self.revs.first().unwrap();
            engine.edit_rev(1, i+1, head, d);
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
            "styles": styles,
    }
                        if n_skip > 0 {
        let iv = Interval::new_closed_open(start, end);
        if let Some(ref mut trace) = self.trace {
        };
            tid: sys_tid::current_tid().unwrap(),
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
    }
}
        assert_eq!(snapshot[2].name, "x");

        self.enable_config(Config::default());
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        // +2 for exe & thread name.
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
                if rev.max_undo_so_far < lowest_group {
    pub fn new_duration_marker<S, C>(name: S,
//
        !self.selection.regions_in_range(offset, offset).is_empty()
                self.select_line(text, offset, line, false),
    }
    }
                              to_payload("test_get_samples"));

/// A flag used to indicate when legacy actions should modify selections
            Merge(1,0),
    priority: usize,
    }
                        line_num = seg.their_line_num + seg.n;
        engine.edit_rev(1, 1, first_rev, d1.clone());
impl Add<Rope> for Rope {
        // set last selection or word under current cursor as replacement string

    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
            Assert(1, "bdefg".to_owned()),

                                                        &mut line_cursor,
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
#[cfg(test)]
                            max_undo_so_far: rev.max_undo_so_far,
    fn undo() {
    }
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    {
        assert!(a.slice(0, 0) == empty);
#[derive(Clone, Copy)]
    TRACE.is_enabled()
                    s = s.transform_shrink(&transformed_inserts);

    #[inline]
            offset,
fn count_utf16_code_units(s: &str) -> usize {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    ///

impl<'de> Deserialize<'de> for Delta<RopeInfo> {
        // A with ring, hangul, regional indicator "US"
    }
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    /// The incrementing revision number counter for this session used for `RevId`s
    fn bench_trace_block(b: &mut Bencher) {
    #[cfg(feature = "benchmarks")]
            let pos = bc.next::<BreaksMetric>();
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
        let mut b = String::new();
    }
            pid: sys_pid::current_pid(),

        // A with ring, hangul, regional indicator "US"

        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
                    base_len: delta.base_len

        b.iter(|| black_box(time::precise_time_ns()));
        }
        Err(ref e) => {
    #[cfg(feature = "benchmarks")]
// You may obtain a copy of the License at
/// # Arguments
        let (iv, new_len) = delta.summary();
            } else {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
    #[test]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
                while cursor.pos() < region.max() {
                        self.revs.push(Revision {

                el.serialize_field(end)?;
        trace.instant("2", &["test"]);
        for i in 0..edits {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        }
        }
    fn deserialize<D>(deserializer: D)
                    .with_affinity(affinity)
        let mut b = TreeBuilder::new();
                // should be removed in favor of do_gesture
#![cfg_attr(feature = "collections_range", feature(collections_range))]
        let mut all_samples = self.samples.lock().unwrap();

            find_changed: FindStatusChange::None,
    }
        let closest_occurrence = self.find.iter().flat_map(|x|
                SelRegion::new(start, end)
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        cursor.is_boundary::<BaseMetric>()
/// let mut a = Rope::from("hello world");
}
    fn from(r: &Rope) -> String {
    #[cfg(feature = "benchmarks")]
    use std::collections::BTreeSet;
//! under `Engine::edit_rev`, which is considerably simpler than the usual
}
    session_id: SessionId,
    FlowStart,
fn initial_revision_counter() -> u32 {
        // This might be an over-specified test as it will
use xi_rope::interval::Interval;
    /// Get text of a given revision, if it can be found.

}
    }
                            let line = self.render_line(client, styles, text,
    /// Each instance represents a separate search query.
    }
        }
    }
    pub fn get_samples_limit(&self) -> usize {
            Assert(1, "zapbj".to_owned()),
    ProcessLabels { labels: String },
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
        let (ins_delta, deletes) = delta.factor();
    fn prev(s: &String, offset: usize) -> Option<usize> {
/// For example, take a string that starts with a 0xC2 byte.
        ];
                }
    pub fn closure_payload<S, C, P, F, R>(&self, name: S, categories: C,
    ///
    ProcessName { name: String },

                        let _ = s.pop();
    }
categories_from_constant_array!(2);
            trace.instant("test_samples_pulse", &["test"]);
                len += 1;
    }
            pid: sys_pid::current_pid(),
        peers: Vec<Engine>,
                _ => { }
#[derive(Serialize, Deserialize, Debug, Clone)]
    }
impl Eq for CategoriesT {}
    }
    let inverse_tombstones_map = old_deletes_from_union.complement();
                let offset = self.selection[0].start;
    #[allow(dead_code)]
        self.revs.last().unwrap().max_undo_so_far

    fn goto_line(&mut self, text: &Rope, line: u64) {
    pub fn disable(&self) {


        }
        ];
                         start: usize, end: usize, sel: &[(usize, usize)],
                }
    /// 96 bits which is more than sufficient for this to never happen.

    }
        b.build()
/// from multiple distributed sources (i.e. you want to sort the merged result
        let end = time::precise_time_ns();
        trace.closure_payload("x", &["test"], || (),
}
        }
                RenderTactic::Render => {

    }
// limitations under the License.
        self.revs.last().unwrap().rev_id
    fn is_boundary(s: &String, offset: usize) -> bool {

        a.lines_all().collect::<Vec<_>>());
use std::hash::{Hash, Hasher};
        let start = time::precise_time_ns();
    /// No wrapping in effect.
        if line > max_line {
    }
        client.def_style(&style.to_json(ix));
        }
///
    /// This uniquely represents the identity of this revision and it stays
use std::ops::Add;
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
        // probably change as the recording internals change.
}
    // TODO: replace this with a version of `lines` that accepts a range
        for op in &delta_ops {
            // d-expand by other
///
        let mut b = TreeBuilder::new();
use std::cell::RefCell;
    /// Get text of a given revision, if it can be found.

        trace.instant("4", &["test"]);
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
}

use std::cmp;
    #[bench]
            HighlightFind { visible } => {
                                gc_dels = gc_dels.union(deletes);
    }
/// * `categories` - A static array of static strings that tags the samples in
                }
    } else {
    fn eq(&self, other: &CategoriesT) -> bool {
    out.as_mut_slice().reverse();
                client.replace_status(self.view_id, &json!(replace))
            SampleEventType::CompleteDuration => 'X',
        }
                           styles: &StyleMap, style_spans: &Spans<Style>,

pub fn samples_len() -> usize {
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);

        while let Err(incomp) = prev_boundary {
            Some(Cow::Borrowed(mut s)) => {
            self.idx += 1;
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
        let d = engine.delta_rev_head(first_rev);
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        }
//See ../docs/MetricsAndBoundaries.md for more information.
        leaf.as_bytes()[pos]
            }
                }
    /// Update front-end with any changes to view since the last time sent.

    utf16_size: usize,
            AssertMaxUndoSoFar(0,3),
        assert_eq!(2, expand_by.len());
    }


        assert_eq!(Some(3), a.prev_codepoint_offset(6));
                    els: delta.els.drain(..)
            Merge(5,4),
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    /// validate their input.
    fn measure(_: &RopeInfo, len: usize) -> usize {
#[derive(Serialize, Deserialize, Clone, Debug)]
        }

            inner: self.iter_chunks(start, end),
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
                MergeTestOp::Merge(ai, bi) => {
    }
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    /// Returns a slice of the string from the byte range [`start`..`end`).

    /// Sorting priority between processes/threads in the view.
        // Any edit cancels a drag. This is good behavior for edits initiated through

    selection: Selection,
use serde::de::{Deserialize, Deserializer};
        // A with ring, hangul, regional indicator "US"
    }
        for find in &mut self.find {
                metadata_name: None,
                        };
    }
        assert_eq!(0, b.line_of_offset(0));
            let _ = trace.block("test_samples_block", &["test"]);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
}
    /// if there is not at least one edit.
//! conceptually represents the current text and all edit history for that
        }
            Assert(0, "acrbd".to_owned()),
    }
    for rev in revs.iter().rev() {
            result["cursor"] = json!(cursors);
                return false;
/// xi_trace::trace("something happened", &["rpc", "response"]);
        }
    }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
            end += 1;
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {
        trace.instant("1", &["test"]);
/// Find an index before which everything is the same
                } else if click_count == Some(2) {
            engine.edit_rev(1, i+1, head, d);


// you may not use this file except in compliance with the License.

        let utf8_offset = 19;
                }
    #[test]
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
    enabled: AtomicBool,
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {

    fn gc_4() {
    #[test]
    fn bench_get_tid(b: &mut Bencher) {
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
            Click(MouseAction { line, column, flags, click_count }) => {
    idx: usize,
                let (nl, noffset) = self.next_leaf()?;
    // This computes undo all the way from the beginning. An optimization would be to not
                priority, undo_group, deletes,
            },

            let splitpoint = find_leaf_split_for_merge(self);
    #[serde(skip_serializing_if = "Option::is_none")]
    fn prev_codepoint_offset_small() {
    /// not account for any overhead of storing the data itself (i.e. pointer to

            engine.undo(undos.clone());

        let script = vec![
        let mut leaf_offset = pos - offset;
        -##-
impl serde::Serialize for CategoriesT {
    }
/// returned value is dropped.  `trace_closure` may be prettier to read.

        self.find.iter().map(|find| {
    /// Determines whether the offset is in any selection (counting carets and
            size: Size::default(),
        if before {
}
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
    scroll_to: Option<usize>,
            let next_chunk = self.inner.next();
            // Do the merge one direction
            Assert(0, "acrbd".to_owned()),
        self.enable_config(Config::default());
                },
            // These two will be different without using session IDs
// Copyright 2016 The xi-editor Authors.
/// ```
pub type TracePayloadT = StrCow;

            {
/// version of Ropes, and if there are many copies of similar strings, the common parts
    #[serde(skip_serializing)]

type StyleMap = RefCell<ThemeStyleMap>;

    /// 96 bits which is more than sufficient for this to never happen.
        self.undone_groups = groups;
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
                        } else {
    /// Selects a specific range (eg. when the user performs SHIFT + click).
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
                c.provide_context(&pl, self.pos() - poffset);
        },
                    self.do_gesture(text, line, column, GestureType::WordSelect)
            let sel = {
    }

}
    fn is_boundary(s: &String, offset: usize) -> bool {
    bytecount::count(s.as_bytes(), b'\n')

        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
            Merge(0,1),
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        let utf8_offset = 13;
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        }, deletes_from_union)
        ##
                    inserts: ins,
    // this should have the same behavior, but worse performance
/// ```
        // Note: for committing plugin edits, we probably want to know the priority
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let mut all_samples = self.samples.lock().unwrap();
    /// if there is not at least one edit.
                cur_all_inserts = older_all_inserts;
        trace.instant("3", &["test"]);
        // This might be an over-specified test as it will
        assert_eq!("a", String::from(&tombstones_2));
    fn edit_rev_undo_3() {
    }
        }
    #[derive(Clone, Debug)]
        let inserts_1 = parse_subset_list("
            //leaf.len() - start_pos
            'X' => SampleEventType::CompleteDuration,
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        --#--
    #[test]
///
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
                },
//
pub type TracePayloadT = serde_json::Value;
                        });
    fn do_selection_for_replace(&mut self, text: &Rope) {
        for i in 0..self.len() {
    }
        }
              F: FnOnce() -> R
        d_builder.delete(Interval::new_closed_open(10, 36));
            Merge(0,1),

#[derive(Clone, Debug)]
    FlowEnd,

    }
    /// selection edges).
//! this central engine. It provides the ability to apply edits that depend on
    -> SampleGuard<'a>
            SampleEventType::ObjectDestroyed => 'D',
                }

        let inserts_1 = parse_subset_list("
        Self {
/// Create a `Rope` from a `String`:
                priority: new_priority,
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
/// returned value is dropped.  `trace_closure` may be prettier to read.
            match c.edit {
    }
    }
            }
///
    #[test]
        // NOTE: we derive to an interim representation and then convert
        let mut end = start_pos + len;
                }

            rendered_styles.push(sel_end as isize - sel_start as isize);
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    }
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
categories_from_constant_array!(0);
                l = pl;
        all_samples.reset_limit(config.max_samples());
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
    fn lines_raw_small() {
        let undone = self.undone_groups.contains(&undo_group);
        if self.idx <= self.current.unwrap().len() {

            GotoLine { line } => self.goto_line(text, line),
            }
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
            MetadataType::ProcessSortIndex {..} => "process_sort_index",

    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        assert_eq!(2, a.line_of_offset(4));
                        let mut word_cursor = WordCursor::new(text, region.max());
        ##
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            Assert(0, "ab".to_owned()),
        MergeTestState::new(3).run_script(&script[..]);
        self.prev::<BaseMetric>();
        deletes: Subset,

        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
    fn offset_of_line_panic() {
    #[test]
impl PartialEq for CategoriesT {
    /// The line number is 0-based.
    }
    /// return if a delete is un-done or an insert is re- done.
///
            if self[i] != other[i] {
                        Ok(s) => Some(s),
                    text.slice_to_string(start, end)
        let first_rev = engine.get_head_rev_id().token();
            Assert(0, "acbd".to_owned()),

            event_type: SampleEventType::CompleteDuration,
        }
    }
        let mut selection = Selection::new();
                }
    // revision might hold content from an undo group that would otherwise be gc'ed),
        -----#
    }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        /// The set of groups toggled between undone and done.
    pub fn do_find_all(&mut self, text: &Rope) {
    /// assumed to be forward).
            GestureType::WordSelect =>
    // Send the requested lines even if they're outside the current scroll region.
        where S: Into<StrCow>, C: Into<CategoriesT>

            let splitpoint = if s.len() > MAX_LEAF {
    }
        assert_eq!("-###-", &subset_str);
        assert_eq!(utf16_units, 11);
    #[bench]
use multiset::{Subset, CountMatcher};
    pub fn new_instant<S, C>(name: S, categories: C,
    /// Width in bytes (utf-8 code units).
        MergeTestState::new(3).run_script(&script[..]);
                    }
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
            samples: Mutex::new(FixedLifoDeque::new())

                metadata_sort_index: None,
            rebased_deletes_from_union.union(to_delete)
        match *self {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
pub type RevToken = u64;
                CategoriesT::StaticArray(c)
    pub height: f64,
        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
    pub fn disable(&self) {
    end: usize,
    fn into_chrome_id(&self) -> char {

        b.push(self);
    ///
    {
///
/// }
                    // of which undos were used to compute deletes_from_union in edits may be lost.
            if let Edit { ref inserts, .. } = rev.edit {
        assert_eq!(snapshot[7].name, "z");
extern crate serde_derive;
                let (pl, poffset) = self.prev_leaf()?;
    }
            GestureType::RangeSelect => self.select_range(text, offset),
            as_vec.push(Sample::new_metadata(
    fn merge_priorities() {
                        hls.push((sel_start_ix, sel_end_ix));
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
/// version of Ropes, and if there are many copies of similar strings, the common parts
        let offset = self.line_col_to_offset(text, line as usize, 0);

//! A rope data structure with a line count metric and (soon) other useful
                continue;
    // partly because the reachability calculation would become more complicated (a
        /// and new deletes_from_union
//
impl Metric<RopeInfo> for BaseMetric {
        }
        // the smallest values with which it still fails:
    // transform representing the characters added by common revisions after a point.
        let mut cursor = Cursor::new(self, offset);
        engine.undo([3].iter().cloned().collect());
        });
            name: name.into(),
        engine.undo([].iter().cloned().collect());
                    }
/// State required to resolve a drag gesture into a selection.

    offset: usize,
                    let transformed_deletes = deletes.transform_expand(&s);
    ///
                                toggled_groups: &toggled_groups - gc_groups,
        assert_eq!(Some(5), b.next_codepoint_offset(2));
        let mut engine = Engine::new(Rope::from(TEST_STR));
            rev_id: self.next_rev_id(),
            self.idx += 1;
        // todo: for now only a single search query is supported however in the future

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            trace.instant("something", &[]);
                        sample.tid));
        delta.end()
            selection: SelRegion::caret(0).into(),
        let first_rev = engine.get_head_rev_id().token();
        memrchr(b'\n', &s.as_bytes()[..offset])
    /// For safety, this will panic if any revisions have already been added to the Engine.
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
            Revision {


        b.build()
            samples: Mutex::new(FixedLifoDeque::new())
            _ => return
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
    #[serde(skip_serializing_if = "Option::is_none")]
                } else {
    #[inline]
        // same span exists in both sets (as when there is an active selection)
            }
    #[test]
    }

            }

        engine.edit_rev(1, 1, first_rev, d1);
}
    fn bench_get_pid(b: &mut Bencher) {
        }
                      delta: &Delta<RopeInfo>, client: &Client,

        assert_eq!(Some(2), b.next_codepoint_offset(0));
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        -----#
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
    #[test]
    }

            Sample::new_instant("remote pid", &[], None)];
        let trace = Trace::enabled(Config::default());
        assert_eq!(0, a.lines_raw_all().count());
    }
        deletes_bitxor: Subset,

    sample_limit_count: usize
            Assert(0, "cbd".to_owned()),
            SampleEventType::FlowStart => 's',
/// for single user cases, used by serde and ::empty
        let (ins_delta, deletes) = delta.factor();
                        word_cursor.select_word()
                        inserts: transformed_inserts,
                    inserts: ins,
                rev_id: basic_rev(i),
    }
        } else {
}
                self.start_drag(offset, offset, offset);
}

            "n": n,
        where S: Serializer
            }
                tid));
        }
///
///
            Merge(0,2), Merge(1, 2),
    }
impl Config {
        }

        }, to_payload("test_get_sorted_samples"));
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        let mut b = String::new();
    use super::*;
                if s.ends_with('\n') {
        let tid = all_samples.front()
    /// Highlights are only rendered when search dialog is open.
#[cfg(feature = "json_payload")]

    }
    }
use std::cell::RefCell;
    }

        self.start_drag(offset, region.start, region.end);
        // set last selection or word under current cursor as replacement string
        // even though the actual sampling order (from timestamp of
        if line < self.first_line {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
        }
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
                        if !last_selection.is_caret() {

/// ```
    ObjectSnapshot,
        /// together. For example, an auto-indent insertion would be un-done
                    text.slice_to_string(start, end)
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        // rebase insertions on text and apply
                leaf_offset = self.pos() - noffset;
            SampleEventType::DurationBegin => 'B',
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
            duration_us: Some(ns_to_us(duration_ns)),
use serde_json::Value;
    }
    }
        // rather than emitting an explicit start/stop to reduce the size of
        for sample in all_samples.iter() {

/// of Sample that determines order.
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    }
        let a = Rope::from("a\nb\n");
    }
                edit: contents.clone()
            std::thread::sleep(std::time::Duration::new(0, 1000));
use unicode_segmentation::GraphemeIncomplete;
        ##
        b.iter(|| {
/// some way.
    }
        let tid = all_samples.front()
        let mut cursor = Cursor::new(self, offset);
    fn lines_raw_small() {
        self.sample_limit_count
                    if seg.validity == line_cache_shadow::ALL_VALID {
                    };
    /// unsaved changes.
                                     event_type: SampleEventType)
/// # Arguments
    /// What kind of sample this is.
        let mut cursor = Cursor::new(self, offset);
    fn to_payload(value: &'static str) -> TracePayloadT {
    }
            event_type: SampleEventType::Metadata,
        b.set_dirty(true);
        engine.undo([1,2].iter().cloned().collect());
    /// Get the contents of the document at a given revision number

            inserts = inserts.transform_expand(trans_inserts, after);
// line iterators

    }

        let rev = Revision {
    fn edit_rev_simple() {
                        ops.push(self.build_update_op("invalidate", None, seg.n));
//
    #[test]
                RenderTactic::Discard => {
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {

                    self.fragment = &self.fragment[i + 1 ..];
impl<'de> serde::Deserialize<'de> for CategoriesT {
                // should be removed in favor of do_gesture
            inner: self.iter_chunks(start, end),
            MetadataType::ProcessLabels {..} => (None, None)
    #[test]
            for i in 0..count {
            // trans-expand other by expanded so they have the same context
        _ => 4
    /// Time complexity: technically O(n log n), but the constant factor is so

    #[test]
            last_line -= 1;
    /// that are currently deleted, and thus in `tombstones` rather than
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {
            'n' => SampleEventType::AsyncInstant,
        engine.undo([1].iter().cloned().collect());
    ///
        }
    TRACE.block(name, categories)
#[inline]

        engine.undo([1].iter().cloned().collect());

                           styles: &StyleMap, style_spans: &Spans<Style>,
            return;
/// conversions in both directions.
    fn len(&self) -> usize {
    }
    }
        hasher.finish()
            // shouldn't be called with this, but be defensive
            ix = sel_end as isize;
                //self.end - prev_pos
                metadata_name: None,
    fn compute_deltas_1() {

        assert_eq!(1, b.line_of_offset(2));
            GestureType::WordSelect =>
    pub name: StrCow,
        b if b < 0xe0 => 2,
                    }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
#[inline]
///
        engine.edit_rev(0, 2, first_rev, build_delta_2());
            'f' => SampleEventType::FlowEnd,
/// # Arguments
}
impl PartialEq for Sample {
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        let height = self.line_of_offset(text, text.len()) + 1;

        if wrap_col > 0 {
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        self.cursor.next_leaf();
// utility function to clamp a value within the given range
    }
    }
    }
        thread.name().map(|ref s| to_cow_str(s.to_string()))
            Merge(2,3),
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        let new_sel = selection_movement(movement, &self.selection,
            timestamp_us: ns_to_us(timestamp_ns),
                if groups.contains(undo_group) {
    }
            for rev in &self.revs {
            self.find.push(Find::new());
        self.set_dirty(text);
    }
            utf16_size: count_utf16_code_units(s),
        let invalid = if all_caret {
    }
    /// Invalidate the current selection. Note that we could be even more
                        if n_skip > 0 {
    rev_id_counter: u32,
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        let new_head = engine.get_head_rev_id().token();
    (1, 0)
        }
                                undo_group,
    fn gc_2() {
// Licensed under the Apache License, Version 2.0 (the "License");

            .map_or(0, |ref s| s.timestamp_us);
        use self::MergeTestOp::*;
    }
        let trace = Trace::enabled(Config::with_limit_count(10));
                                deletes_bitxor: new_deletes_bitxor,
    undo_group: usize,
        let (first_line, _) = self.offset_to_line_col(text, region.min());

                        } else {
    lc_shadow: LineCacheShadow,
            self.record(Sample::new_duration(
mod tests {
        }
impl<'a> Iterator for ChunkIter<'a> {
/// ```rust
        // position after 'f' in four

                    if sel_end_ix > sel_start_ix {
    fn merge_insert_only_whiteboard() {

            let first_rev = engine.get_head_rev_id().token();
        let snapshot = trace.samples_cloned_unsorted();
        #[serde(rename_all = "snake_case")]
            .map(|pos| offset + pos + 1)
        true
            rendered_styles.push(sel_end as isize - sel_start as isize);
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
#[derive(Serialize, Deserialize, Debug, Clone)]

impl PartialOrd for Sample {
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");

        assert_eq!(trace.samples_cloned_unsorted().len(), 0);

    }
        where S: serde::Serializer

        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
    /// the frontend.

/// a.edit_str(1, 9, "era");
        }
        self.set_selection_raw(text, selection);
impl Ord for Sample {
                           pristine: bool)
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
                    }
                                         self, text, modify);
        ];

        assert_eq!(snapshot[5].name, "b");
                        Ok(s) => Some(s),
    /// Selects an entire line and supports multi selection.
        if last_col == 0 && last_line > first_line {
    view_id: ViewId,
    // callers should be encouraged to use cursor instead
        let mut selections = Vec::new();
                        ops.push(self.build_update_op("invalidate", None, seg.n));
            rebased_deletes_from_union.union(to_delete)
        }
        }
/// implementation as efficient as a mutable version.
            while !s.is_char_boundary(offset - len) {
        let mut engine = Engine::new(Rope::from(""));
        }
    // TODO: don't construct transform if subsets are empty
                    } else if !inserts.is_empty() {


        Self {
        ];
    }
    /// Determines whether the offset is in any selection (counting carets and
    ///
        // rebase insertions on text and apply
///
    /// An iterator over the raw lines. The lines, except the last, include the
        if self.is_enabled() {
}
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
    }

            inner: self.lines_raw(start, end)
pub fn count_newlines(s: &str) -> usize {
        fn run_script(&mut self, script: &[MergeTestOp]) {
    }
    }
        delta.serialize_field("base_len", &self.base_len)?;
        ");
            a.push('a');
                match *other {


        });
        -> SampleGuard
        let all_caret = self.selection.iter().all(|region| region.is_caret());
                WrapWidth::Width(px) =>
    }
                            (inserts.transform_shrink(&gc_dels),
        self.set_selection_raw(text, selection);

            trace.record(sample);

            for find in self.find.iter() {
            inner: self.iter_chunks(start, end),
    }
                             client: &Client, style_spans: &Spans<Style>)

        let mut revs_3 = basic_insert_ops(inserts_3, 2);
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
/// let b = a.slice(1, 9);
    }

    #[test]
        assert_eq!("herald", String::from(a));
    // TODO: maybe refactor this API to take a toggle set
        ];
        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        let mut line_num = 0;  // tracks old line cache
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {


    if x < min {
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        assert_eq!(Some(2), b.prev_codepoint_offset(5));

/// # Examples

            // TODO: finer grain invalidation for the line wrapping, needs info
        }

    }
    //
        let start = time::precise_time_ns();
    replace_changed: bool,
        samples
                false => x.start
        let (metadata_name, sort_index) = meta.consume();
            } else {
/// acquires a dependency on the `serde_json` crate.
            Merge(0,2), Merge(1, 2),
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
                // TODO create InsertDelta directly and more efficiently instead of factoring
        } else {
    fn eq_small() {
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(rope.line_of_offset(3), 1);
    }
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
/// Returns all the samples collected so far.  There is no guarantee that the
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
            MetadataType::ProcessName {..} => "process_name",
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    fn bench_get_tid(b: &mut Bencher) {
            duration_us: None,
/// as opposed to thousands of revisions.
///
            engine.undo(to_undo.clone());
            .map(|(i, _)| i)

// you may not use this file except in compliance with the License.
    /// Generate line breaks based on width measurement. Currently batch-mode,

            Assert(0, "bdc".to_owned()),

            next_expand_by.push((trans_priority, new_trans_inserts));
        self.rev_id_counter += 1;
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
        assert_eq!(snapshot.len(), 9);
/// # Performance
        let trace = Trace::enabled(Config::default());
            false => Selection::new(),
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
    {
//!
        ---#--
    fn goto_line(&mut self, text: &Rope, line: u64) {

            find.set_hls_dirty(false)
                    if retain_revs.contains(&rev.rev_id) {

            view_id: view_id,

use rope::{Rope, RopeInfo};
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
    /// Selects the next find match.
    fn test_cross_process_samples() {
            SelectionForReplace => self.do_selection_for_replace(text),
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
    }
/// equivalent performance to a regular trace.  A string that needs to be copied
            Merge(1,0), Merge(2,0),
    type Item = Cow<'a, str>;
    fn test_get_samples_nested_trace() {
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

        self.find_changed = FindStatusChange::None;
/// creation.  Roughly corresponds to start_ns but instead there's a


                payload: payload,
                println!("running {:?} at index {}", op, i);
            match memchr(b'\n', self.fragment.as_bytes()) {
impl Leaf for String {
        serializer.serialize_str(&String::from(self))
// Copyright 2018 The xi-editor Authors.
    #[test]
                    let e = &mut self.peers[ei];
        }
        guard
        assert_eq!(snapshot[4].name, "y");
        MergeTestState::new(4).run_script(&script[..]);
    out

            None
                let (pl, poffset) = self.prev_leaf()?;
/// # Returns
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
                leaf_offset = self.pos() - poffset;

        // This might be an over-specified test as it will
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            while !s.is_char_boundary(offset - len) {
                        ops.push(self.build_update_op("copy", None, seg.n));
    #[test]
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
    }
extern crate serde_derive;
        });
        assert_eq!(Some(6), a.next_codepoint_offset(3));
            find: Vec::new(),
/// Boundary is trailing and determined by a newline char.
}
                    if let Some(new_gc_dels) = new_gc_dels {
            rev_id: self.next_rev_id(),
        sel.collapse();
}
use std::sync::Mutex;

            tid: sys_tid::current_tid().unwrap(),
//     http://www.apache.org/licenses/LICENSE-2.0
    // transform representing the characters added by common revisions after a point.
enum MetadataType {
        // multiple queries; select closest occurrence
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
                        Ok(s) => Some(s),
    }
// Try to split at newline boundary (leaning left), if not, then split at codepoint
        /// The subset of the characters of the union string from after this
            SelectionForReplace => self.do_selection_for_replace(text),
    fn measure(info: &RopeInfo, _: usize) -> usize {
        use self::ViewEvent::*;
        if let Some(ix) = style_map.lookup(style) {
    Metadata
                                     payload: Option<TracePayloadT>,
        let after_first_edit = engine.get_head_rev_id().token();
        where S: Serializer
            },
    /// Exposed for unit tests.
            if region.is_caret() {
use bytecount;
            Assert(0, "acrbdz".to_owned()),
        }
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
impl<'de> Deserialize<'de> for Rope {
                pos = leaf_offset + nl.len();
    /// update cycle. This should be a last resort, updates should generally cause
            Assert(0, "zacbd".to_owned()),
// distributed under the License is distributed on an "AS IS" BASIS,
            SampleEventType::DurationEnd => 'E',
    }


    #[serde(default = "initial_revision_counter", skip_serializing)]
        let mut a = Rope::from("");
                let (pl, poffset) = self.prev_leaf()?;
    /// If `line` is equal to one plus the current number of lines,
///
        let revs = basic_insert_ops(inserts, 1);
/// # Arguments
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
        plan.request_lines(first_line, last_line);
        }
        let new_deletes_from_union = {
    use delta::{Builder, Delta};
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        assert!(self.current.is_some());
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
                        &mut start[bi]
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
            }
        // 1 MB
            }
        assert_eq!("1234567", String::from(r));
    }
/// equivalent performance to a regular trace.  A string that needs to be copied

    /// is optional.
        let revs = basic_insert_ops(inserts, 1);
            Some(offset + len_utf8_from_first_byte(b))


            // On the next step we want things in expand_by to have op in the context
            if !s.is_empty() {
            }
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        trace.disable();

                    };

/// # Arguments
        b.iter(|| sys_pid::current_pid());
        self.push_str(&other[start..end]);

        self.scroll_to_cursor(text);

/// record it.
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        }
            }
    breaks: Option<Breaks>,
        assert_eq!(Some(9), a.next_grapheme_offset(3));
                        deletes_from_union
        let mut samples = self.samples_cloned_unsorted();
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    }
}


        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            AssertMaxUndoSoFar(0,3),
                },
    }
    /// The state for replacing matches for this view.
            .map(|(i, _)| i)
/// something_expensive();
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
                payload: None,
    }


    /// Invalidates the styles of the given range (start and end are offsets within
        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
                sel.add_region(SelRegion::new(last.start, offset));
        self.tombstones = tombstones;
            .map(|pos| pos + 1)
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
        engine.edit_rev(1, 1, first_rev, build_delta_1());
/// ```
            }
pub type TracePayloadT = StrCow;
// you may not use this file except in compliance with the License.
        self.len()
        {
    }
                    }
        assert_eq!(snapshot[3].name, "y");
        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
                            deletes_bitxor.transform_shrink(&gc_dels)

        cur_len_utf8
const FLAG_SELECT: u64 = 2;
    pub fn lines(&self, start: usize, end: usize) -> Lines {

    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    //TODO: implement iter_chunks using ranges and delete this
    // in a single session.
        let self_iv = Interval::new_closed_closed(0, self.len());
    #[test]
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
/// some way.
            Assert(2, "ab".to_owned()),
        let mut pos = self.pos();
        self.set_selection(text, new_sel);
    buffer_id: BufferId,
            pid: sys_pid::current_pid(),


        Err(ref e) => {
        if s.len() <= MAX_LEAF {
        let start = time::precise_time_ns();
                self.select_word(text, offset, true)
pub struct SampleArgs {
        }
        }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
                                undo_group,
                        deletes_from_union
/// have to be considered in `rebase` substantially for normal editing
            tid: sys_tid::current_tid().unwrap(),
        let line = self.line_of_offset(text, end);
            base_len: usize
                }
            } else {
        use self::MergeTestOp::*;

        trace.closure_payload("y", &["test"], || {},
                self.start_drag(offset, offset, offset);
                    let (start, end) = {
    #[serde(rename = "xi_payload")]
    {
    use super::*;
    /// The incrementing revision number counter for this session used for `RevId`s
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    fn find_base_1() {

            }
        }
            lines: count_newlines(s),
        });
                        deletes: transformed_deletes,
#[derive(Clone, Debug)]
            SelectionForReplace => self.do_selection_for_replace(text),
    }
        --#--
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
    fn is_ok_child(&self) -> bool {
            if self.line_of_offset(text, offset) <= line {
// You may obtain a copy of the License at

                        Cow::Owned(un_deleted.transform_shrink(inserts))
        };
    }
        String::from(&r)
                    let transformed_inserts = inserts.transform_expand(&s);

                    s = &s[..s.len() - 1];
        String::from(&r)

        }

/// conforms to is currently determined by the feature this library is compiled
    // revision might hold content from an undo group that would otherwise be gc'ed),
        a.lines_all().collect::<Vec<_>>());
    // reachability calculation.
                    let head = e.get_head_rev_id().token();
                        }
            // shouldn't be called with this, but be defensive
    fn test_samples_pulse() {
    fn next(s: &String, offset: usize) -> Option<usize> {
        let max_line = self.measure::<LinesMetric>() + 1;
            self.first_line = line - (self.height - 1);
        self.timestamp_us == other.timestamp_us &&
    }

        if wrap_col > 0 {

        };
}
        use self::MergeTestOp::*;
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)

///
            }
            GestureType::PointSelect => {
    }
            Assert(1, "pbj".to_owned()),
        }
    /// List of categories the event applies to.
        match *self {
categories_from_constant_array!(2);
            Assert(0, "acrbdz".to_owned()),
            sel.add_region(
    }
        --#--
            }
            Assert(2, "b".to_owned()),

        let start_pos = start_of_line.pos();
impl From<Vec<String>> for CategoriesT {
        });
    // * Code units in some encoding
//     http://www.apache.org/licenses/LICENSE-2.0
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
    }
    #[test]
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
        }
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
                }
            cur_len_utf16 += u.len_utf16();
    {
        // +2 for exe & thread name.
            self.next::<BaseMetric>();
            SampleEventType::CompleteDuration => 'X',
            None => return "",
/// Base unit is utf8 code unit.
    // callers should be encouraged to use cursor instead
                    text.slice_to_string(region.min(), region.max())
            Some(offset + len_utf8_from_first_byte(b))

/// See `trace_block` for how the block works and `trace_payload` for a
                len += 1;
pub struct ByteIter<'a> {
        assert_eq!(Some(10), a.next_codepoint_offset(6));
            tid: sys_tid::current_tid().unwrap(),
        let mut pos = self.pos();
    #[test]
/// }
            ix = sel_end as isize;
    /// Width in px units, requiring measurement by the front-end.
        let script = vec![
        } else {
        b.iter(|| black_box(sys_tid::current_tid()));
        if self.find.is_empty() {
    ProcessName { name: String },
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);

    ///
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));

    }
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard
        assert_eq!(Some(0), a.prev_grapheme_offset(3));
    /// state and new offset.
        let mut to_undo = BTreeSet::new();
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    }
        let trace = Trace::disabled();
        let mut all_samples = self.samples.lock().unwrap();
                el.serialize_field(start)?;
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
}

//! this central engine. It provides the ability to apply edits that depend on


        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
    }
            }
    }
        }
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
///

/// See `trace_payload` for a more complete discussion.
    #[serde(rename = "cat")]
        assert_eq!(None, a.prev_codepoint_offset(0));
    /// The empty string will yield a single empty slice. In all other cases, the
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
    #[test]
    #[test]
            }
/// * `categories` - A static array of static strings that tags the samples in
            Assert(1, "abefg".to_owned()),
                        self.revs.push(Revision {

        }
        // TODO: may make this method take the iv directly
    /// Find the first revision that could be affected by toggling a set of undo groups
#[cfg(feature = "json_payload")]
        };
    }
                    let head = e.get_head_rev_id().token();
        }
    fn is_ok_child(&self) -> bool {
                payload: payload,
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
            thread_name: Sample::thread_name(),
        a.lines_all().collect::<Vec<_>>());

    ///

        assert_eq!("herald", String::from(a));
    /// from the rope.
        let self_iv = Interval::new_closed_closed(0, self.len());
#[cfg(feature = "json_payload")]
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
    type Err = ParseError;
        // +2 for exe & thread name
    #[should_panic]
                    self.do_gesture(text, line, column, GestureType::WordSelect)
    /// Return the offset of the codepoint before `offset`.
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        }
        assert_eq!(Some(9), b.next_codepoint_offset(5));
        RevId { session1: 1, session2: 0, num: i as u32 }
        info.lines

/// Create an instantaneous sample without any payload.  This is the lowest
    }

            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
/// * `categories` - A static array of static strings that tags the samples in
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
            Assert(0, "abc".to_owned()),
/// fn something_else_expensive() {
    }
//! this central engine. It provides the ability to apply edits that depend on
                    as_vec.push(Sample::new_metadata(
        let trace = Trace::disabled();

        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            'n' => SampleEventType::AsyncInstant,
pub struct SampleGuard<'a> {
/// * `name` - A string that provides some meaningful name to this sample.
    }
    undo_group: usize,
                sel
        let mut result = json!({
        if !before {
            breaks: None,
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    #[test]
                out.push(DeltaOp {
    fn prev_grapheme_offset() {
        let trace = Trace::enabled(Config::with_limit_count(11));
    /// Constructs a Duration sample.  For use via xi_trace::closure.

            Insert(String),
        a.lines_all().collect::<Vec<_>>());
const FLAG_SELECT: u64 = 2;
/// between two utf8 code units that form a code point is considered invalid.

            }
            None

            let inserted = inserts.inserted_subset();
            Revision {
        }
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        assert_eq!(trace.get_samples_count(), 1);
        out.push(Revision {
            "op": op,
                WrapWidth::None => (),
    /// update cycle. This should be a last resort, updates should generally cause
        if let Some((l, offset)) = self.get_leaf() {
    }

                l = pl;
        leaf.as_bytes()[pos]
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        b.push_str(s);
        self.size = size;
        self.deletes_from_union = deletes_from_union;
        -> Self
                                            closure: F, payload: P) -> R
        self.revs.append(&mut new_revs);
    /// Only number of matches changed
            Assert(0, "ab".to_owned()),
        self.revs.iter().enumerate().rev()

        {
    pub fn next_codepoint(&mut self) -> Option<char> {
        ];
            let (start, end) = if offset < drag_state.offset {
        use self::MergeTestOp::*;
    #[serde(rename = "dur")]
                },
        let first_rev = engine.get_head_rev_id().token();
            rendered_styles.push(sel_end as isize - sel_start as isize);
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        assert_eq!(0, b.offset_of_line(0));
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                SelRegion::new(start, end)
            engine.edit_rev(0, 0, first_rev, delta);
        for &(trans_priority, ref trans_inserts) in &expand_by {

    }
            Assert(2, "adfc".to_owned()),
    }
            rendered_styles.push(sel_end as isize - sel_start as isize);
    rev_id_counter: u32,
            if !s.is_empty() {
                }
    }
            event_type: SampleEventType::Metadata,
        d
            match exe_name.clone().file_name() {
        }
        self.drag_state = None;
        assert_tokens(&rope, &[
        /// Used to order concurrent inserts, for example auto-indentation
        // 1 MB

    }
        }
            self.start_drag(offset, offset, offset);
///

    replace_changed: bool,
}
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
                    })
                self.do_selection_for_find(text, case_sensitive),
                        sample.tid));
    #[should_panic]
/// ```rust
        -##-
    }
/// Also note: in addition to the `From` traits described below, this module
        }
        where S: Serializer
        }
            AssertAll("ac".to_owned()),
        cursor.is_boundary::<BaseMetric>()
    if x < min {
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
            },

            Assert(0, "abc".to_owned()),
            rendered_styles.push(style_id as isize);
    fn undo() {
        // 1 for exe name & 1 for the thread name
        }
    }
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
            edit: Undo { toggled_groups, deletes_bitxor }
    }
    let mut out = Vec::with_capacity(b_new.len());
        let mut samples = self.samples_cloned_unsorted();
    pub tid: u64,
}
        assert!(end <= leaf.len());
    }
        // Any edit cancels a drag. This is good behavior for edits initiated through
            Merge(1,0),

        in_measured_units
const MAX_LEAF: usize = 1024;
    #[test]
/// on program launch.
            buffer_id: buffer_id,

        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
    /// Width in bytes (utf-8 code units).
                                deletes,
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
/// discussion on payload.
/// let b = a.slice(1, 9);
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,
        assert_eq!(0, b.line_of_offset(0));

        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
    }
        MergeTestState::new(3).run_script(&script[..]);
        let styles = self.render_styles(client, styles, start_pos, pos,

/// ```
        a.edit_str(1, 9, "era");
            Assert(0, "cbd".to_owned()),
///
        assert_eq!(None, a.prev_grapheme_offset(0));
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
                (drag_state.max, min(offset, drag_state.min))
        let mut engine = Engine::new(Rope::from(""));
            Assert(1, "cb".to_owned()),
    fn lines_raw_small() {
            SampleEventType::AsyncInstant => 'n',
            ix = sel_end as isize;
                self.drag_state = None;
        ");
/// * `name` - A string that provides some meaningful name to this sample.
        let mut cursor = Cursor::new(self, offset);
            Assert(1, "afc".to_owned()),
    fn merge_max_undo_so_far() {
    fn bench_trace_block(b: &mut Bencher) {
        let inserts_1 = parse_subset_list("
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
        assert!(end <= leaf.len());
            Assert(2, "afc".to_owned()),

    ($num_args: expr) => {
/// }
#[inline]
///
/// The result of the closure.
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        assert_tokens(&rope, &[
/// Measured unit is newline amount.
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            write!(f, "{}", String::from(self))
            buffer_id: buffer_id,
            // with offset == 0, but be defensive.
            Assert(0, "bdc".to_owned()),
    fn bench_trace_block(b: &mut Bencher) {
#[inline]
    fn bench_trace_closure_disabled(b: &mut Bencher) {
enum MetadataType {

        // current recording mechanism should see:

        // since one of the two deletes was gc'd this should undo the one that wasn't
    }
                        }
    pub height: f64,
    }

        let text_with_inserts = text_inserts.apply(&text);

use word_boundaries::WordCursor;
            args: Some(SampleArgs {

        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
                    RopeDeltaElement_::Insert(s) =>
use std::mem::size_of;
                    let (start, end) = {

        assert_eq!(snapshot[2].name, "a");
                    RopeDeltaElement_::Insert(s) =>
                    } else {
    }

/// Then offset=1 is invalid.
        assert_eq!(Some(1), a.next_codepoint_offset(0));
    {
    pub fn merge(&mut self, other: &Engine) {
        for _ in 0..(edits-max_undos) {
                                inserts,
            breaks: None,
        if !self.is_enabled() {
}
                        if n_skip > 0 {

    fn bench_trace_block_disabled(b: &mut Bencher) {
    ///
/// ```
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {
                self.select_line(text, offset, line, true),
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
            "something", &["benchmark"],
                        let _ = s.pop();

        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
        if (b as i8) >= -0x40 {

                },
            sample: None,
            return None;
        // +2 for exe & thread name
/// How tracing should be configured.
    fn rearrange_1() {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
        } else {
///
        --#--
        let deletes_from_union = Subset::new(0);
        let new_head_2 = engine.get_head_rev_id().token();
            sel.add_region(new_region);
                payload: None,
    ProcessLabels { labels: String },
        }
use linewrap;

    use multiset::Subset;
        } else {
            let right_str = self[splitpoint..].to_owned();
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
///
                if self.fragment.is_empty() {
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    // TODO find the maximum base revision.
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
            //}
    /// Returns a tuple of a new `Revision` representing the edit based on the
    #[test]
    fn merge_session_priorities() {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        // stable order since the resolution of timestamps is 1us.
    }
        }
        }
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
        } else {
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
        let mut pos = self.pos();
        // clamp to end of line
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R

    pub fn line_of_offset(&self, offset: usize) -> usize {

        let a = Rope::from("a\nb\nc");
/// Boundary is trailing and determined by a newline char.
        };
    }
/// stored as tracing could still be enabled but set with a limit of 0.
        }
        Cow::from(a.into_owned() + b)

    }
    /// Width in px units, requiring measurement by the front-end.
        }
pub fn len_utf8_from_first_byte(b: u8) -> usize {
}
/// * `name` - A string that provides some meaningful name to this sample.
        let line = line as usize;
/// equivalent performance to a regular trace.  A string that needs to be copied

            let splitpoint = if s.len() > MAX_LEAF {
    //TODO: implement lines_raw using ranges and delete this
        }
    /// An iterator over the lines of a rope.
    /// Returns the largest undo group ID used so far
                },

            Gesture { line, col, ty } =>
        let mut revs = basic_insert_ops(inserts_1, 1);

/// Enable tracing with a specific configuration. Tracing is disabled initially
pub struct RopeInfo {
                         styles: &StyleMap, style_spans: &Spans<Style>,
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
}
    ///
            name: name.into(),
        let (new_text, new_tombstones) =
                        b.add_span(seg.n, 0, 0);

                    } else {
                    }
    }

use interval::Interval;
        update
    // * Code units in some encoding
                                                     "insert", node)

        self.session = session;
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
        for _i in 0..50 {
    assert!(!a.is_empty() && !b.is_empty());

        samples[0].pid = 1;
        AssertAll(String),
/// from the new revisions on the left.
        -##-
        let correct = parse_subset_list("
    fn test_trace_disabled() {

/// Returns all the samples collected so far ordered chronologically by

        let mut delta = serializer.serialize_struct("Delta", 2)?;

        engine.edit_rev(1, 2, initial_rev, d1.clone());
            }
                payload: payload,
/// assert_eq!("herald", String::from(a));
    /// in the range of 511-1024 bytes.
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
            // I think it's a precondition that this will never be called

            Some(ref breaks) => {
/// Enable tracing with the default configuration.  See Config::default.

                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        for rev in &self.revs[rev_index + 1..] {


        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
        };
        let first_rev = &self.revs.first().unwrap();

            SampleGuard::new(&self, name, categories, Some(payload.into()))
/// 3. You may not care about them always being sorted if you're merging samples

            revs: vec![rev],
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    #[test]
    lines: usize,
    fn send_update_for_plan(&mut self, text: &Rope, client: &Client,
    }
    }
                for &region in rest {

    /// the pid or the tid depends on the name of the event
    ///
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    ///

    }
            Assert(2, "ab".to_owned()),
        }
        let all_caret = self.selection.iter().all(|region| region.is_caret());
                self.select_word(text, offset, true)

            self.breaks = Some(linewrap::linewrap(text, wrap_col));
                        None if cursor.pos() == text.len() => cursor.pos(),
categories_from_constant_array!(0);
/// Applies an optimization where it combines sequential revisions with the
    #[serde(skip_serializing_if = "Option::is_none")]


        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
                let (nl, noffset) = self.next_leaf()?;
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
                            Cursor::new(breaks, offset));
        };
    #[test]
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
}
    }
        let a = Rope::from("a");

        let start = time::precise_time_ns();
fn shuffle(text: &Rope, tombstones: &Rope,
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
            enabled: AtomicBool::new(true),
                peer.set_session_id(((i*1000) as u64, 0));
        let (first_line, _) = self.offset_to_line_col(text, region.min());
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        assert_eq!(b, String::from(a));
/// that sorted would be prohibitively expensive.
            engine.edit_rev(1, i+1, head, d);
            Assert(0, "zacpbdj".to_owned()),
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
            SampleGuard::new_disabled()
            None => None
        Engine {
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        let mut hasher = DefaultHasher::new();
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
}

        let mut plan = RenderPlan::create(height, self.first_line, self.height);
        b.iter(|| black_box(trace.instant_payload(
pub struct RopeInfo {
/// # Performance
            next_expand_by.push((trans_priority, new_trans_inserts));
            'e' => SampleEventType::AsyncEnd,
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
/// for strings, specialized for incremental editing operations. Most operations
/// # Performance
        for r in &self.revs[ix + 1..] {
#[cfg(test)]
        b if b < 0xf0 => 3,
    #[serde(default = "initial_revision_counter", skip_serializing)]
categories_from_constant_array!(4);
          F: FnOnce() -> R
        result
        assert_eq!(4, a.offset_of_line(2));
        let empty = Rope::from("");
                el.serialize_field(start)?;
        Self {
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    TRACE.closure(name, categories, closure)
        assert_eq!(b, String::from(a));
    /// they would be if they hadn't been deleted.
//! There is also a full CRDT merge operation implemented under

        }
        use self::MergeTestOp::*;
        assert_eq!(1, a.line_of_offset(3));
}
                                deletes.transform_shrink(&gc_dels))

            .map_or(0, |ref s| s.timestamp_us);
        }
    revs: Vec<Revision>,
            name: name.into(),
    fn rebase_1() {
            offset = text.len();
        d.insert(StrCow::from("test"), StrCow::from(value));
    }


        // move deleted or undone-inserted things from text to tombstones
///
        let mut plan = RenderPlan::create(height, self.first_line, self.height);
    }
                let (pl, poffset) = self.prev_leaf()?;
    }
        let l_str = text.slice_to_string(start_pos, pos);
    #[allow(dead_code)]
            Assert(0, "abc".to_owned()),
/// Measured unit is utf8 code unit.
    fn offset_of_line_panic() {
                            ops.push(self.build_update_op("skip", None, n_skip));
    pub fn push_str(&mut self, mut s: &str) {
            sel.add_region(region);
#[cfg(test)]

        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        }

        let offset = self.line_col_to_offset(text, line, col);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));

enum WrapWidth {
                            }
        self.replace_changed = true;
        /// The subset of the characters of the union string from after this
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
/// on program launch.
            trace.closure_payload("y", &["test"], || {
                            styles: &StyleMap, style_spans: &Spans<Style>,
        // insert character at end, when this test was added, it panic'd here


    pub event_type: SampleEventType,
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        // insert a character at the beginning
            self.first_line = line;
        //} else {
    /// the heap, counters, etc); just the data itself.

    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        self.scroll_to_cursor(text);
        /// Groups related edits together so that they are undone and re-done
        r.slice_to_string(0, r.len())
    fn offset_of_line_panic() {
        let trace = Trace::enabled(Config::default());
            Assert(0, "adc".to_owned()),
#[must_use]
        }
            trace.closure_payload("y", &["test"], || {
        // Note: for committing plugin edits, we probably want to know the priority
        // TODO: may make this method take the iv directly
    DurationBegin,
                //self.end - prev_pos

            }
            categories: None,
        assert_eq!(vec![&a[..line_len], &b[..line_len]], r.lines_all().collect::<Vec<_>>());

            b.push('b');
                RenderTactic::Preserve => {
            Merge(0,2), Merge(1, 2),
            //let prev_pos = self.cursor.pos();
        for (iv, style) in style_spans.iter() {
    // use own breaks if present, or text if not (no line wrapping)
        trace.record(guard.sample.as_ref().unwrap().clone());
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },

            Assert(1, "arpbzj".to_owned()),
    use engine::*;
}
/// # Returns

                let mut cursor = Cursor::new(&text, region.min());
    }
                        DeltaElement::Copy(start, end),
                SelectionModifier::Add => {
            }

        // set last selection or word under current cursor as search query
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    {
        let script = vec![
                } else {
    #[test]
    /// The semantics are intended to match `str::lines()`.
// you may not use this file except in compliance with the License.
        assert_eq!(correct, rebased_inserts);
    /// Get previous codepoint before cursor position, and advance cursor backwards.
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
#[macro_use]
    /// An iterator over the raw lines. The lines, except the last, include the

            let sel = {

    #[bench]
        if !before {
    #[test]
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    }
    }
    use std::collections::BTreeSet;
                }
    fn bench_get_tid(b: &mut Bencher) {

    // maybe explore grabbing leaf? would require api in tree
    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {

    type Err = ParseError;

    pub fn prev_codepoint(&mut self) -> Option<char> {
    pub fn enable(&self) {
    pub thread_name: Option<StrCow>,
// See the License for the specific language governing permissions and
    }
                         hls: &[(usize, usize)],
    fn can_fragment() -> bool { true }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        let end = time::precise_time_ns();
                    deletes: deletes.clone(),
        if !self.lc_shadow.needs_render(plan) { return; }

/// Returns the operations in `revs` that don't have their `rev_id` in
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
/// first can make it ~1.7x slower than a regular trace.
    }
    //
        let mut a = Rope::from("hello world");
    inner: LinesRaw<'a>
                              categories: C,
}
pub struct Config {
        if self.current.is_none() {
        assert_eq!(rope.line_of_offset(1), 0);
    /// Highlights are only rendered when search dialog is open.
            Assert(0, "b".to_owned()),
        ids.iter().cloned().map(|i| {
    }
    first_line: usize,

            categories: Some(categories.into()),

        assert_eq!(None, a.prev_codepoint_offset(0));
    fn is_boundary(s: &String, offset: usize) -> bool {
        };

use xi_rope::delta::Delta;
// The advantage of using a session ID over random numbers is that it can be

    FlowStart,
enum MetadataType {
            SampleGuard::new(&self, name, categories, None)
}
    rev_id: RevId,
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
                offset = prev;
    #[cfg(feature = "benchmarks")]
        assert_eq!(None, b.next_codepoint_offset(9));
                (drag_state.max, min(offset, drag_state.min))
    pub fn set_selection<S: Into<Selection>>(&mut self, text: &Rope, sel: S) {

        // rebase the deletion to be after the inserts instead of directly on the head union
    }
            Merge(2,3),
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
                    linewrap::rewrap_width(breaks, text, width_cache,
    use super::*;
        }
    fn bench_trace_instant(b: &mut Bencher) {
}
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
            self.breaks = Some(linewrap::linewrap(text, wrap_col));

    //TODO: implement lines_raw using ranges and delete this
/// let b = Rope::from("world");
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
        };
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// See `trace_payload` for a more complete discussion.
        String::from(&r)
    }
        _ => 4
    max_undo_so_far: usize,
        engine.edit_rev(1, 3, new_head_2, d3);
        let base_sel = Selection::new();
        let offset = self.line_col_to_offset(text, line, col);
/// revisions on top of the revisions represented by `expand_by`.
    }
        //} else {
//
    {
}
    }
    }
        trace.closure_payload("x", &["test"], || {
                    deletes: deletes.clone(),
        for i in 0..self.len() {
            sel.add_region(
        ]);

/// An element in a `RopeDelta`.
        }
    /// The `pristine` argument indicates whether or not the buffer has

            priority: 0,
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {

        }
                                        &selections, &hls, style_spans);
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(None, a.prev_grapheme_offset(0));
    fn goto_line(&mut self, text: &Rope, line: u64) {
    }
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);
            }
                let (ins, _) = delta.factor();


fn default_session() -> (u64,u32) {
            SampleEventType::AsyncEnd => 'e',

            Assert(2, "ab".to_owned()),
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
///
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
#[macro_use]
    /// Tracks whether there has been changes in find results or find parameters.
    /// the text).
        assert_eq!(a.len(), r.offset_of_line(1));
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {

        assert!(r != b_rope + a_rope);
    // partly because the reachability calculation would become more complicated (a
    pub fn next_grapheme(&mut self) -> Option<usize> {
                    ops.push(self.build_update_op("invalidate", None, seg.n));
    }
            buffer_id: buffer_id,
}
            Assert(1, "abefg".to_owned()),
                    if let Some(last_selection) = self.selection.last() {
        }
// Licensed under the Apache License, Version 2.0 (the "License");
    /// What kind of sample this is.


            duration_us: None,
extern crate serde_json;
        self.join(",").serialize(serializer)
    TRACE.enable_config(config);
                RenderTactic::Render => {
        debug_subsets(&rebased_inserts);
    /// What kind of sample this is.
        for region in self.selection.iter() {
                if !region.is_caret() {
            }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// The maximum number of samples that should be stored.
        assert_eq!(utf16_units, 9);
        } else {
        self.text = new_text;
        } else {
    deletes_from_union: Subset,
    }
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
                    } else {
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
            CategoriesT::StaticArray(ref self_arr) => {
        }
        // only one of the deletes was gc'd, the other should still be in effect
impl<'a> Iterator for ChunkIter<'a> {
        self.invalidate_selection(text);
            Some(b)
    /// Starts a drag operation.
}
        }
    }
}
        }
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
        match self.selection.len() {
        ];
    pub fn gc(&mut self, gc_groups: &BTreeSet<usize>) {
        ");
        if let Some(last) = self.revs.last() {
    }
                    };
    }
    ///
            black_box(time::precise_time_ns());
        for rev in &self.revs[first_candidate..] {
        self.set_selection(text, sel);
    }
                        hls.push((sel_start_ix, sel_end_ix));
//
        } else {
categories_from_constant_array!(6);
/// Revision 0 is always an Undo of the empty set of groups
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
    /// The largest undo group number of any edit in the history up to this
        /// Used to store a reversible difference between the old
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            pos
                    match full_path_str {
    fn is_boundary(s: &String, offset: usize) -> bool {
        #[derive(Serialize, Deserialize)]
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
    }
    }
    fn eq_med() {
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    #[test]
                    text.slice_to_string(start, end)
/// * `name` - A string that provides some meaningful name to this sample.
            black_box(trace.block_payload(
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            duration_us: Some(ns_to_us(duration_ns)),
    FlowInstant,
                Rope::from(String::from(s1.clone()) + "\u{1f1fa}"),
            self.find.push(Find::new());
        MergeTestState::new(3).run_script(&script[..]);
    /// update cycle. This should be a last resort, updates should generally cause
                payload: None,

        assert!(leaf.is_char_boundary(end));
use selection::{Affinity, Selection, SelRegion};
        assert_eq!(trace.is_enabled(), true);
    // TODO(vlovich): Replace all of this with serde flatten + rename once
            a = a + Rope::from(&c);
    fn build_delta_2() -> Delta<RopeInfo> {
            next_boundary = c.next_boundary(&l, leaf_offset);
        assert_eq!(1, b.line_of_offset(2));
/// See `trace_payload` for a more complete discussion.
    }
        self.enabled.store(true, AtomicOrdering::Relaxed);
    selection: Selection,
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
    /// Selects an entire line and supports multi selection.
        }
        LinesRaw {
    fn from(r: &Rope) -> String {
}
    /// if there is not at least one edit.
    #[test]
/// the session ID component of a `RevId`
use serde_json::Value;
            if (c > start_pos && c < pos) ||
                        let _ = s.pop();
            };
            let style_id = self.get_or_def_style_id(client, styles, &style);
        // 1 MB
            SelectionForFind { case_sensitive } =>
                    }
        let mut b = line_cache_shadow::Builder::new();
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        };
{

    #[test]
            }
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
                el.end()
            //self.cursor.set(self.end);
        }
            let deletes = Subset::new(inserts.len());
            height: 10,
                        priority, undo_group,
            base_sel: selection.clone(),

/// * `name` - A string that provides some meaningful name to this sample.
        }
            sample: Some(Sample::new_duration_marker(
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
}

    }
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
                let mut cursor = Cursor::new(&text, region.min());
        b.push_str(s);
    /// Tracks whether this view has been scheduled to render.
                           pristine: bool)
            Merge(1,0),
                        let end_line = start_line + seg.n;

        // We add selection after find because we want it to be preferred if the
        });
    /// a point that should be scrolled into view.
                        if n_skip > 0 {

                    let e = &mut self.peers[ei];
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
            size: Size::default(),
                }

/// creation.  Roughly corresponds to start_ns but instead there's a
        MergeTestState::new(3).run_script(&script[..]);
        } else { // no toggled groups, return past end

            offset = text.len();
    }
/// Base unit is utf8 code unit.
        assert_eq!(snapshot.len(), 9);
            }

                                          closure: F, payload: P)

        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
                    }
            if let Edit { priority, ref inserts, .. } = r.edit {
        let plan = RenderPlan::create(height, self.first_line, self.height);
///
            return false;
    /// is optional.
                let offset = self.selection[0].start;
    pub chars: String,
    {

    pub metadata_name: Option<StrCow>,
            }
    DynamicArray(Vec<String>),
/// See `trace_closure` for how the closure works and `trace_payload` for a
            Some(offset - len)
        let mut line_num = 0;  // tracks old line cache
            edit: Undo { toggled_groups, deletes_bitxor }
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
pub struct Lines<'a> {
    }

    fn line_of_offset_small() {
        let head_rev = &self.revs.last().unwrap();
            session: default_session(),
/// ```rust
    }
        let mut all_samples = self.samples.lock().unwrap();
// limitations under the License.
                first_sample_timestamp,
    fn test_ser_de() {
    }
                }
        engine.edit_rev(1, 1, first_rev, d1.clone());
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
        let script = vec![
    #[derive(Debug)]
        ];

                        b.add_span(seg.n, 0, 0);
    #[bench]
        };
            revs: vec![rev],
        // only one of the deletes was gc'd, the other should still be in effect
                    b.add_span(seg.n, 0, 0);
/// assert_eq!("llo wo", String::from(c));
    cursor: Cursor<'a, RopeInfo>,
        &self.selection
    // TODO: switch to a persistent Set representation to avoid O(n) copying
        result
}
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
        all_samples.push_back(sample);
    }
    }
    /// Selects all find matches.
}
    // How should we count "column"? Valid choices include:
        self.prev::<BaseMetric>();
        let inserts_3 = parse_subset_list("
        // insert `edits` letter "b"s in separate undo groups
        /// should go before typed text.
        self.sample_limit_count * size_of::<Sample>()
}
        let col = col as usize;
            match reverse {
/// Enable tracing with the default configuration.  See Config::default.
    }
            SampleEventType::AsyncEnd => 'e',
        }
    fn bench_trace_instant_disabled(b: &mut Bencher) {
    }

    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
        assert_eq!(snapshot[2].name, "a");


            // to replicate whiteboard, z must be before a tombstone
// Try to split at newline boundary (leaning left), if not, then split at codepoint
                RenderTactic::Render => {
            utf16_count += 1;
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
        if self.find.is_empty() {
        let inserts = parse_subset_list("
//
    // of the union string length *before* the first revision.


                println!("running {:?} at index {}", op, i);
        (line, offset - self.offset_of_line(text, line))
            Assert(2, "adfc".to_owned()),
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
            }
            None
        let rebased_inserts: Vec<Subset> = revs.into_iter().map(|c| {
            match modify_selection {
        // even though the actual sampling order (from timestamp of
        let d = engine.delta_rev_head(first_rev);
/// 3. You may not care about them always being sorted if you're merging samples
                    if !retain_revs.contains(&rev.rev_id) && gc_groups.contains(undo_group) {
            } else {
    All,
    /// What kind of sample this is.
    /// if it is non-empty. It needs to be a separate commit rather than just
            Assert(2, "ab".to_owned()),
                            None

        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        result
        #------
/// The result of the closure.
    /// Get the Subset to delete from the current union string in order to obtain a revision's content

        let first = max(first, 0) as usize;
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
        }
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
        } else {
        self.lines(0, self.len())
    }
    // Note: this function would need some work to handle retaining arbitrary revisions,
            Some(ref breaks) => {
            let right_str = self[splitpoint..].to_owned();
/// some way.
    pub fn default() -> Self {
    /// Selects the given region and supports multi selection.
    // TODO: insert from keyboard or input method shouldn't break undo group,
    // TODO: this should be a Cow
        let first_rev = engine.get_head_rev_id().token();
                MergeTestOp::Assert(ei, ref correct) => {
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
    }
        let trace = Trace::enabled(Config::default());
    /// None of the find parameters or number of matches changed.
                            edit: Edit {
}

    #[allow(dead_code)]

        cursor.next_grapheme()
// Unless required by applicable law or agreed to in writing, software
                Edit { priority, undo_group, inserts, deletes } => {
    session2: u32,
                    let (start, end) = {
use std::ops::Add;
                metadata_name: None,
    }
        self.set_dirty(text);
    /// The line ending is stripped from the resulting string. The final line ending
        where D: Deserializer<'de>,
                    })
    /// The line number is 0-based.
        };
    }
    }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let tombstones_b = Rope::from("a");

            "n": n,
        // clamp to end of line
    }
                                gc_dels = gc_dels.transform_union(inserts);
    fn next_grapheme_offset() {

    #[cfg(feature = "dict_payload")]
categories_from_constant_array!(0);
///

        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
            Some(offset + len_utf8_from_first_byte(b))
}
                   style_spans: &Spans<Style>, line_num: usize) -> Value
    /// Find the first revision that could be affected by toggling a set of undo groups
        -#-


    pub fn join(&self, sep: &str) -> String {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },

    }
        first_line..(last_line + 1)
        match ty {
            undo_group: 0,
}
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    fn delta_rev_head_3() {
            SampleEventType::AsyncEnd => 'e',
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
        }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
#![cfg_attr(feature = "cargo-clippy", allow(
        }


            }
        MergeTestState::new(3).run_script(&script[..]);
            find.set_hls_dirty(false)
    #[test]
        engine.undo([1,2].iter().cloned().collect());
    }
    fn arr_eq(&self, other: &[&'static str]) -> bool {
        // ensure that when the samples are sorted by time they come out in a
                    if !deletes.is_empty() {
        loop {
                (drag_state.min, max(offset, drag_state.max))

/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]

            Assert(1, "ab".to_owned()),
        };
                    let sel_start = cursor.pos();
        assert!(a != empty);
                                             &text, false);
            Assert(2, "adfc".to_owned()),
    }
        let mut engine = Engine::new(Rope::from(""));
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
categories_from_constant_array!(10);

                        priority, undo_group,
}
        }).unwrap_or(text.len());
        }
            let matches_only = self.find_changed == FindStatusChange::Matches;
// limitations under the License.
        assert_eq!(0, a.line_of_offset(0));
        }

{
        #------
        self.set_dirty(text);
            Merge(2,1),
            rev_id: self.next_rev_id(),
        self.set_dirty(text);
        let empty = Rope::from("");
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
        let snapshot = trace.samples_cloned_sorted();
        }

    pub fn is_enabled(&self) -> bool {
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
                RenderTactic::Render => {
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
                Some(offset)
    /// Returns the regions of the current selection.
            return false;
    fn test_get_samples() {
        for find in self.find.iter() {

            engine.edit_rev(0, 0, first_rev, delta);
        assert_eq!(2, r.line_of_offset(r.len()));
use std::cmp;
        as_vec.extend(all_samples.iter().cloned());
    fn next(s: &String, offset: usize) -> Option<usize> {
    }

        let new_full_priority = FullPriority { priority: new_priority, session_id: self.session };
/// overhead tracing routine available.
    }
    1
        engine.undo([3].iter().cloned().collect());

///
                        let mut line_cursor = Cursor::new(text, offset);
        -> SampleGuard

        }
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
            Some(offset + len_utf8_from_first_byte(b))
}

            pending_render: false,
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
        if offset == s.len() {
    }
        assert!(end <= leaf.len());
        }
///
                Contents::Edit {inserts, ..} => inserts,
            }
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
            // Go crazy
        engine.edit_rev(1, edits+1, head2, d2);

    inner: ChunkIter<'a>,
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let script = vec![
        ];

                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
    #[test]
    pub timestamp_us: u64,
    #[serde(rename = "name")]
                    if !deletes.is_empty() {
    None,


        assert_eq!(utf16_units, 17);
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
    pub width: f64,

            s = &s[splitpoint..];
            Assert(0, "abc".to_owned()),
            name: name.into(),
    /// List of categories the event applies to.
        // This might be an over-specified test as it will
                            (inserts.transform_shrink(&gc_dels),

fn compute_deltas(revs: &[Revision], text: &Rope, tombstones: &Rope, deletes_from_union: &Subset) -> Vec<DeltaOp> {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
                        ops.push(self.build_update_op("copy", None, seg.n));
            engine.undo(undos.clone());
        }
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
            }
                            styles: &StyleMap, style_spans: &Spans<Style>,
        assert_eq!(Some(9), b.next_codepoint_offset(5));
            }
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
                    result = cow_append(result, self.fragment);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        }
        where S: Into<StrCow>, C: Into<CategoriesT>
        //for next line
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    /// tiny it is effectively O(n). This iterator does not allocate.
            name: name.into(),
    #[test]
                max_undo_so_far: i+1,
            'D' => SampleEventType::ObjectDestroyed,
    }
        &leaf[offset..end]
        // selection state, and for scrolling it into view if needed. This choice can
pub fn is_enabled() -> bool {
        self.view_id
                    let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
        // probably change as the recording internals change.
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());
                    ops.push(self.build_update_op("invalidate", None, seg.n));
impl PartialEq for CategoriesT {
        assert!(r.clone().slice(0, a.len()) == a_rope);
                        }
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
/// fn something_else_expensive() {
                let (nl, noffset) = self.next_leaf()?;
}
    pub fn enable(&self) {

        let mut result = Cow::from("");
            pos

            // These two will be different without using session IDs
        let rearranged = rearrange(&revs, &base, 7);
        if let Some(ix) = style_map.lookup(style) {
                let offset = self.selection[0].start;
    }
}
/// * `categories` - A static array of static strings that tags the samples in
        self.scroll_to = Some(end);
        }
        let end = self.line_col_to_offset(text, line + 1, 0);
        assert_eq!(Some(1), a.next_codepoint_offset(0));
        let after_first_edit = engine.get_head_rev_id().token();
    pub categories: Option<CategoriesT>,


                    let (mut a, rest) = end.split_first_mut().unwrap();
                            warn!("Failed to get string representation: {:?}", e);
            Merge(2,0),
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);
        }
    /// The current contents of the document as would be displayed on screen
        // insert `edits` letter "b"s in separate undo groups
    }
/// # Performance
    }
    fn append_large() {
/// Returns the file name of the EXE if possible, otherwise the full path, or

                            (inserts, deletes)
        samples[1].timestamp_us = 5;
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
                    }
    ObjectCreated,
    #[bench]
            pid: sys_pid::current_pid(),
    ///
    pub fn is_point_in_selection(&self, offset: usize) -> bool {
    new_without_default_derive,

        let height = self.line_of_offset(text, text.len()) + 1;
            Assert(2, "ab".to_owned()),

    }
        }
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
        min
                    self.set_selection(text, selection);
        assert_eq!(rope.line_of_offset(0), 0);
        // TODO: simplify this through the use of scopeguard crate
        let r = r + Rope::from(&b[MIN_LEAF..]);

            self.record(Sample::new_instant(name, categories, Some(payload.into())));
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);

                self.do_drag(text, line, column, Affinity::default()),
        self.join(",").serialize(serializer)
    }
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
            Assert(0, "acbd".to_owned()),
        tombstones = new_tombstones;
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
//
        let new_head = engine.get_head_rev_id().token();
                self.do_selection_for_find(text, case_sensitive),
            return None;
                metadata_sort_index: None,

    fn replace_small() {
            AssertAll("zacpb".to_owned()),
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
                        } else {
        trace.closure_payload("x", &["test"], || (),
    }
                         styles: &StyleMap, style_spans: &Spans<Style>,
///
            self.set_selection(text, selection);
/// of Sample that determines order.
    }
                }
            }
            Merge(1,2),
            let a_to_merge = &self.revs[base_index..];
                }

            trace.instant("test_samples_pulse", &["test"]);
                                gc_dels = gc_dels.union(deletes);
        b.push('\n');
        self.lc_shadow = b.build();
    cursor: Cursor<'a, RopeInfo>,
            },
    #[test]
            timestamp_us: ns_to_us(time::precise_time_ns()),
trait StringArrayEq<Rhs: ?Sized = Self> {
        }
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
        match *self {
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
    }
        }
    DurationBegin,
                self.set_selection_raw(text, selection);
            name: sample_name,
        engine.undo([].iter().cloned().collect());
//! which is sufficient for asynchronous plugins that can only have one
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
        self.tombstones = new_tombstones;
            a.push('a');
            engine.edit_rev(0, 0, first_rev, delta);
            CategoriesT::DynamicArray(ref self_arr) => {
        self.enabled.store(true, AtomicOrdering::Relaxed);
            }
    #[serde(rename = "sort_index")]
            if sel_end_ix > sel_start_ix {
            event_type: SampleEventType::Instant,
        let self_iv = Interval::new_closed_closed(0, self.len());
    }
            inserts: Subset::new(0),
        if let Some(lines) = lines {
    #[test]
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
    #[test]
        where S: Serializer
            // corner and I'm lazy -cmyr
                }
        let mut hasher = DefaultHasher::new();
pub struct BaseMetric(());
                }
    /// Starts a drag operation.
}
            while !s.is_char_boundary(offset - len) {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        assert_eq!(Some(17), a.next_grapheme_offset(9));
        let line = self.line_of_offset(text, offset);
    // since undo and gc replay history with transforms, we need an empty set
                    }
            if self[i] != other[i] {


                    self.fragment = &self.fragment[i + 1 ..];
        let mut sel = Selection::new();
        }
impl<'a> SampleGuard<'a> {
}
                                           client, iv, new_len, px),

    }
///
        }
        assert!(a.slice(0, 0) == empty);
        // rather than emitting an explicit start/stop to reduce the size of
    {
{

    }
                        let new_deletes_bitxor = if gc_dels.is_empty() {
}
///

            match reverse {
use xi_rope::delta::Delta;
///
}
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
        };
    pub fn disabled() -> Self {
        MergeTestState::new(2).run_script(&script[..]);
        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
            engine.edit_rev(1, i+1, head, d);
    /// Select the next occurrence relative to the last cursor. `reverse` determines whether the
    }
            Merge(1,0),
    }
    }
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    }
            let end = self.line_of_offset(last_text, iv.end()) + 1;
    pub thread_name: Option<StrCow>,
    fn gc_2() {
    }
        }
            self.first_line = line;


        let b = a.slice(1, 10);
                Ok(CategoriesT::DynamicArray(categories))
        Assert(usize, String),
    #[serde(rename = "dur")]

            AssertMaxUndoSoFar(0,3),
}
                        }
    fn test_samples_closure() {
                    "something", &["benchmark"], || {},
        for rev in &self.revs[rev_index + 1..] {
    fn bench_two_timestamps(b: &mut Bencher) {
        Err(ref e) => {
}
        MergeTestState::new(6).run_script(&script[..]);
    /// description for the invariant.
        let mut cur_len_utf8 = 0;
    /// Tracks whether this view has been scheduled to render.
            let horiz = None;
    }
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
            let (start, end) = if offset < drag_state.offset {
                },
            //leaf.len() - start_pos
                self.do_set_replace(chars, preserve_case),
                CategoriesT::StaticArray(c)

        samples.sort_unstable();
            None
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
    }
            "op": op,
            let mut sel = drag_state.base_sel.clone();
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
            }
}
            self.next()
        // find the lowest toggled undo group number
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        let mut retain_revs = BTreeSet::new();
                if !inserts.is_empty() {
        x
        undo_group: usize,
        a.push('\n');
                        let start_line = seg.our_line_num;
                Some(i) => {

            None
        });
                metadata_name: None,
        self.invalidate_selection(text);
/// }
            Assert(0, "acbd".to_owned()),
    }
    pub fn empty() -> Engine {
    /// No wrapping in effect.
    priority: usize,
            SampleEventType::DurationEnd => 'E',
        for _ in 0..in_measured_units {
                              to_payload("test_get_samples"));
        }
    }
    }
            match memchr(b'\n', self.fragment.as_bytes()) {
        where D: serde::Deserializer<'de>
    pub fn new(initial_contents: Rope) -> Engine {
/// Creates a duration sample that measures how long the closure took to execute.
        }
/// # Arguments
        for i in 0..self.len() {
            Assert(1, "abc".to_owned()),

        assert_eq!("1234567", String::from(r));
    }
use width_cache::WidthCache;


        }
        None => {
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
        }).collect()
        deletes_from_union = new_deletes_from_union;
            pid: sys_pid::current_pid(),
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.

                self.set_selection_raw(text, selection);
        engine.edit_rev(1, 1, first_rev, d1.clone());
/// # Performance
extern crate log;

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    /// inserted, including the ones that were later deleted, in the locations
    }

        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        b.iter(|| black_box(trace.closure_payload(
    breaks: Option<Breaks>,
// Try to split at newline boundary (leaning left), if not, then split at codepoint
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
            Assert(0, "adc".to_owned()),
        /// should go before typed text.
    #[test]

            Assert(1, "ab".to_owned()),
}
            } else {
                Contents::Undo { .. } => panic!(),
            end -= 1;
            Assert(0, "bdc".to_owned()),
            let inserted = inserts.inserted_subset();
        let mut a = String::new();
        gc_scenario(35,20);
        let script = vec![
        assert_eq!(0, a.lines_raw_all().count());
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
/// An element in a `RopeDelta`.
/// ```
        offset
    }
                    return Some(result);


    /// Garbage collection means undo can sometimes need to replay the very first
        } else {
    fn undo_5() {
            sel.add_region(
        -----#
    inserts: InsertDelta<RopeInfo>,
    /// Selects the given region and supports multi selection.
use xi_rope::spans::Spans;

    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {

    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
            Assert(0, "bdc".to_owned()),
        MergeTestState::new(3).run_script(&script[..]);
                let (pl, poffset) = self.prev_leaf()?;
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
        }

#[derive(Clone, Copy)]
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                self.set_selection_raw(text, selection);
                           style: &Style) -> usize {
            return self.len();




            .map(|(i, _)| i)
        assert_eq!("#---#--", &subset_str);
    use test::Bencher;
        assert!(empty == empty);
    /// The line number is 0-based.
    // This computes undo all the way from the beginning. An optimization would be to not
///     something_else_expensive(result);
/// creation.  Roughly corresponds to start_ns but instead there's a

    // maybe explore grabbing leaf? would require api in tree
            }
                payload: payload,
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {

        b if b < 0xe0 => 2,
    ///
    /// should be as unlikely to collide as two random u64s.
            GestureType::RangeSelect => self.select_range(text, offset),
                                deletes,
/// equivalent performance to a regular trace.  A string that needs to be copied
                        let mut line_cursor = Cursor::new(text, offset);
/// acquires a dependency on the `serde_json` crate.
///
            first_line: 0,
    /// Exposed for unit tests only.
        }
    {
                    None
/// xi_trace::trace("something happened", &["rpc", "response"]);
    let mut utf16_count = 0;
    }
}
        self.tombstones = new_tombstones;
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
    #[bench]
/// from multiple distributed sources (i.e. you want to sort the merged result
        -----#
    use serde_test::{Token, assert_tokens};
            engine.edit_rev(0, 0, first_rev, delta);
        Some(pos) => minsplit + pos,
    fn next_rev_id(&self) -> RevId {
    #[test]
    pub(crate) fn record(&self, sample: Sample) {
    idx: usize,
        }
        }
                            if !inserts.is_empty() {
                formatter.write_str("comma-separated strings")

        let trace = Trace::enabled(Config::with_limit_count(10));
                        // no need to un-delete undone inserts since we'll just shrink them out
//! This module actually implements a mini Conflict-free Replicated Data Type
}
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
        // that into our actual target.

                }
        match self.breaks {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        assert_eq!(1, res);

        ---#--

        // todo: for now only a single search query is supported however in the future
        let script = vec![
            Assert(0, "acrbd".to_owned()),
    Edit {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
        Engine {
        },
    AsyncEnd,
    }

}
    /// Each chunk is a `&str` slice borrowed from the rope's storage. The size
enum FindStatusChange {
        }
    }
            Assert(0, "ab".to_owned()),

            let first_rev = engine.get_head_rev_id().token();
        json!({"test": value})
        assert_eq!(None, a.prev_codepoint_offset(0));


    #[cfg(feature = "benchmarks")]
}
}
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        // position after 'f' in four
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    /// Selects all find matches.
        assert_eq!(snapshot[6].name, "z");
        a.edit_str(1, 9, "era");
                        word_cursor.select_word()
impl<'a> SampleGuard<'a> {
    /// For safety, this will panic if any revisions have already been added to the Engine.
                    }
pub type TracePayloadT = serde_json::Value;
                if !inserts.is_empty() {
    #[inline]
        /// together. For example, an auto-indent insertion would be un-done
fn find_leaf_split_for_merge(s: &str) -> usize {
    -> SampleGuard<'a>
///
        Cow::from(a.into_owned() + b)

        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
    }
        s.is_char_boundary(offset)
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
    TRACE.closure(name, categories, closure)
        for region in self.selection.iter() {
            thread_name: Sample::thread_name(),
    fn gc_scenario(edits: usize, max_undos: usize) {

    pub fn push_str(&mut self, mut s: &str) {

                Delta {
    }
    /// Selects an entire word and supports multi selection.
}
        let trace = Trace::enabled(Config::with_limit_count(10));
impl Trace {
    fn gc_2() {
            // I think it's a precondition that this will never be called
        let tombstones_b = Rope::from("a");
///
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {

    }
        engine.edit_rev(1, 2, first_rev, d1.clone());
}
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        gc_scenario(35,20);
    }
            inner: self.iter_chunks(start, end),
        //};
        for find in &mut self.find {
    fn next(s: &String, offset: usize) -> Option<usize> {
impl<'a> Iterator for ByteIter<'a> {
    Matches
                RenderTactic::Render => {
        assert_eq!(snapshot[4].name, "y");
                           style: &Style) -> usize {
    fn prev_grapheme_offset() {
                                toggled_groups: &toggled_groups - gc_groups,
    AsyncEnd,
/// }
            self.start_drag(offset, offset, offset);
        let mut cursor = Cursor::new(self, offset);
    #[inline]
        }, to_payload("test_get_sorted_samples"));
/// Also note: in addition to the `From` traits described below, this module
            categories: Some(categories.into()),

        engine.gc(&to_undo);
            Merge(0,2), Merge(1, 2), Merge(3, 2),
            Merge(1,0),
        self.find_changed = FindStatusChange::None;
        b.iter(|| sys_pid::current_pid());
        d_builder.delete(Interval::new_closed_open(58, 61));
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        } else {
        offset
    }

/// # Performance

    #[test]
pub enum CategoriesT {
        let trace = Trace::enabled(Config::default());
        engine.edit_rev(1, 3, new_head_2, d3);
    }
                Contents::Edit {inserts, ..} => inserts,
        }

        self.selection = sel;
}
            l[offset..].chars().next()
    fn accumulate(&mut self, other: &Self) {
                }
use xi_rope::spans::Spans;
    // * Unicode width (so CJK counts as 2)
                        }
    }
///
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
    /// Returns an iterator over chunks of the rope.
    pub fn prev_grapheme(&mut self) -> Option<usize> {
                payload: None,
        });
            // with offset == s.len(), but be defensive.
    }
    let mut out = Vec::with_capacity(b_new.len());

    /// ties in edit priorities. Otherwise the results may be inconsistent.
                WrapWidth::Width(px) =>
            Some(region) => {
    }

    ///
        }
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

            SampleGuard::new(&self, name, categories, None)

    }
const FLAG_SELECT: u64 = 2;
/// }
                           styles: &StyleMap, style_spans: &Spans<Style>,
        assert_eq!(trace.is_enabled(), true);
    ///
// Licensed under the Apache License, Version 2.0 (the "License");
// easily delta-compressed later.
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
    }

        result
        }
                            styles: &StyleMap, style_spans: &Spans<Style>,
            AssertAll("ac".to_owned()),
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        }
    /// the other doesn't make it re-appear.
            sample: None,
        let a = Rope::from("");
        self.tombstones = tombstones;
            SampleEventType::FlowInstant => 't',
    fn merge_simple_delete_1() {
                    selection.add_region(occ);
            args: Some(SampleArgs {
            self.record(Sample::new_instant(name, categories, None));

        assert_eq!(0, a.offset_of_line(0));
        Subset::new(len)
    TRACE.enable_config(config);
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },

        }
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    }



fn initial_revision_counter() -> u32 {
            }
        use self::MergeTestOp::*;
            sample: None,
}
        }, deletes_from_union)

                el.end()
                }
    /// # Panics

    /// For safety, this will panic if any revisions have already been added to the Engine.
    /// If the cursor is at the end of the rope, returns the empty string.
        ");
}
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
    ///
            deletes = deletes.transform_expand(&new_trans_inserts);
            self.first_line = line - (self.height - 1);

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!-") },
/// Represents the current state of a document and all of its history
            MetadataType::ProcessName {name} => (Some(name), None),
        // interior of first line should be first line
    #[serde(rename = "cat")]
                                                                0, "copy", 2)?;
        // x, a, y, b, z, c
        use std::hash::{Hash, Hasher};
        self.text = new_text;
use xi_rope::tree::Cursor;
/// Contains replacement string and replace options.

    // this is the cost contributed by the timestamp to trace()
    }
        self.invalidate_selection(text);
            );
            // if using breaks update cursor
    }
            //let prev_pos = self.cursor.pos();
                        inserts: transformed_inserts,
    /// Update front-end with any changes to view since the last time sent.
    Metadata
            GestureType::MultiLineSelect =>
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    #[test]
    // TODO find the maximum base revision.
    }
    highlight_find: bool,
    /// The line ending is stripped from the resulting string. The final line ending
/// let c = b.slice(1, 7);
}
/// # use xi_rope::Rope;
                    self.fragment = "";
        let revs = basic_insert_ops(inserts, 1);
/// See `trace_payload` for a more complete discussion.
        // todo: this will be changed once multiple queries are supported
    // this is the cost contributed by the timestamp to
                    a.merge(b);
        if let Some((l, offset)) = self.get_leaf() {
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
    Width(f64),
        let (leaf, offset) = match self.get_leaf() {
        self.revs.append(&mut new_revs);
        let height = self.line_of_offset(text, text.len()) + 1;
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        let chars_left = (edits-max_undos)+1;
/// are shared.
            // trans-expand other by expanded so they have the same context
            self.next::<BaseMetric>();
///
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        // TODO: refine for upstream (caret appears on prev line)
    #[cfg(feature = "dict_payload")]


        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());

    }
}
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
    #[test]
        let old_revs = std::mem::replace(&mut self.revs, Vec::new());
    #[test]
        }
                        _ => break
                if !inserts.is_empty() {
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
                self.add_selection_by_movement(text, Movement::Up),
    #[test]
                        let un_deleted = deletes_from_union.subtract(deletes);
            //} else {
    /// The maximum number of bytes the tracing data should take up.  This limit

/// acquires a dependency on the `serde_json` crate.
        !self.selection.regions_in_range(offset, offset).is_empty()
                } else {
    #[test]
            warn!("Failed to get path to current exe: {:?}", e);
    fn do_selection_for_replace(&mut self, text: &Rope) {
                let previous_name = thread_names.insert(sample.tid, thread_name.clone());
        assert_eq!(trace.get_samples_limit(), 11);
    }
    }
        assert_eq!(Some(0), b.prev_codepoint_offset(2));

    /// should be constructed via SampleGuard.
        }
    inner: LinesRaw<'a>
    pub fn iter_chunks_all(&self) -> ChunkIter {
    fn identity() -> Self {
    fn test_samples_block() {
        if self.current.is_none() {
            }
///
/// of Sample that determines order.
        if let Some(edit) = contents {

        self.find_changed = FindStatusChange::None;
        cursor.is_boundary::<BaseMetric>()
            black_box(time::precise_time_ns());
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
            engine.undo(undos.clone());

            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },

                        let new_deletes_bitxor = if gc_dels.is_empty() {
                    let mut selection = self.selection.clone();
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
impl FromStr for Rope {
        Ok(exe_name) => {

    fn merge_max_undo_so_far() {

/// some way.
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
        }
                        assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
            Assert(1, "arpbj".to_owned()),
    pub payload: Option<TracePayloadT>,
            },
                    let (start, end) = {
        assert_eq!(trace.is_enabled(), true);
            }
    }
                    let new_gc_dels = if inserts.is_empty() {


        }
            Some(Cow::Borrowed(mut s)) => {
        self.invalidate_selection(text);
                CategoriesT::StaticArray(c)
}
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        assert_eq!(b, String::from(a));
        self.deletes_from_union = new_deletes_from_union;


    }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
        }
        } else {
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
        }
        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
        }
impl<'a> Iterator for LinesRaw<'a> {
    pub fn is_enabled(&self) -> bool {
            if (c > start_pos && c < pos) ||
                        &mut start[bi]
        let head = engine.get_head_rev_id().token();
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        let trace = Trace::enabled(Config::with_limit_count(11));
/// With `json_payload` feature:

        if let Some(new_scroll_pos) = self.scroll_to.take() {
            }

    /// The maximum number of samples that should be stored.
            let b_to_merge = &other.revs[base_index..];
    }
        assert_eq!(0, b.line_of_offset(0));
        let trace = Trace::disabled();
    }



                return None;
    /// the frontend.
        let mut delta = serializer.serialize_struct("Delta", 2)?;
    pub fn push_str(&mut self, mut s: &str) {
            }
pub struct Replace {

        false
                        if n_skip > 0 {

        let end = time::precise_time_ns();
    /// Return the offset of the codepoint before `offset`.
/// Internally, the implementation uses reference counting (not thread safe, though
        engine.edit_rev(1, 1, first_rev, d1.clone());
                } else {

        assert_eq!(Some(3), a.next_grapheme_offset(0));
use unicode_segmentation::GraphemeIncomplete;
            SelectionIntoLines => self.do_split_selection_into_lines(text),

        if self.len() != other.len() {
        engine.edit_rev(0, 2, first_rev, build_delta_2());
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {

            'i' => SampleEventType::Instant,
    first_line: usize,
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        let utf8_offset = 19;
/// However, anything that can be converted into a Cow string can be passed as
                }
                selection.add_region(occurrence);
    ///
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
///

        trace.closure_payload("x", &["test"], || (),
                    }
                // TODO: small nit, merged region should be backward if end < start.

        self.replace.clone()
    fn offset_of_line_small() {
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
            Contents::Undo { .. } => panic!("can't merge undo yet"),

/// let a = Rope::from("hello ");
        let first_rev = &self.revs.first().unwrap();
            {
impl<'a> Iterator for Lines<'a> {
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    /// Merge the new content from another Engine into this one with a CRDT merge
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
            'b' => SampleEventType::AsyncStart,

            Some(Cow::Owned(mut s)) => {

            }
        assert_eq!(None, a.prev_codepoint_offset(0));
    cursor: Cursor<'a, RopeInfo>,
                                                                0, "copy", 2)?;
// Unless required by applicable law or agreed to in writing, software
        assert_eq!(rope.line_of_offset(0), 0);
/// an argument.
        d_builder.delete(Interval::new_closed_open(10, 36));
/// Valid within a session. If there's a collision the most recent matching
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
/// ```

impl<'a> Cursor<'a, RopeInfo> {

                el.serialize_field(end)?;

    }
            }
                    let (mut a, rest) = end.split_first_mut().unwrap();
//! `Engine::merge`, which is more powerful but considerably more complex.
                            }
impl RevId {
    fn compute_transforms_1() {

}
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
        while let Err(incomp) = next_boundary {
                },
        for _ in 0..line_len {
                RenderTactic::Preserve => {
    #[test]
    Matches
            }),
        ##
/// required). Mutations are generally copy-on-write, though in-place edits are
            MetadataType::ThreadSortIndex {sort_index} => (None, Some(sort_index)),
    ///

            SampleEventType::DurationEnd => 'E',
                } else if click_count == Some(3) {
    #[test]
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
                                                        style_spans, line_num);
/// Represents the current state of a document and all of its history
    fn sample_name(&self) -> &'static str {
                }

        }
            None
/// Represents a transform from one rope to another.
        let new_sel = selection_movement(movement, &self.selection,
                    let mut selection = self.selection.clone();
    ///
                let categories = v.split(",").map(|s| s.to_string()).collect();
    // Delta that deletes the right bits from the text
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
        assert_eq!("-###-", &subset_str);
///
            return None;

//
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
    TRACE.disable();

    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {

pub struct Trace {
            let b_to_merge = &other.revs[base_index..];
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
        assert_eq!(snapshot[3].name, "b");
    }

            sel.add_region(new_region);
// line iterators
impl Serialize for Rope {
            categories: Some(categories.into()),
#[derive(Clone, Debug)]
                                  style_spans, &plan, pristine);
            inserts = inserts.transform_expand(trans_inserts, after);

    /// Highlights are only rendered when search dialog is open.
        ChunkIter {
    find: Vec<Find>,
            if sel_end_ix > sel_start_ix {
        } else {
        /// Used to store a reversible difference between the old
    {

/// Measured unit is utf8 code unit.
    /// The line ending is stripped from the resulting string. The final line ending
            categories: Some(categories.into()),
        // the generated JSON.
        for seg in self.lc_shadow.iter_with_plan(plan) {
        cur_len_utf8

            // TODO: on double or triple click, quantize offset to requested granularity.
                self.set(pos);

    /// If `modify` is `true`, the selections are modified, otherwise the results
use delta::{Delta, DeltaElement};
        a.lines_all().collect::<Vec<_>>());
    fn compute_deltas_1() {
                    let (start, end) = {
        }
            Some((l, off)) => (l, off),
            GestureType::RangeSelect => self.select_range(text, offset),
            let next_chunk = self.inner.next();
    // * Code units in some encoding
    }
                self.add_selection_by_movement(text, Movement::Up),
        // This might be an over-specified test as it will
    }
        LinesRaw {
    #[bench]
    TRACE.instant(name, categories);
    end: usize,
pub fn samples_len() -> usize {
        LinesRaw {
    ProcessName { name: String },
        }
    // maybe explore grabbing leaf? would require api in tree
}

                           styles: &StyleMap, style_spans: &Spans<Style>,

/// * `name` - A string that provides some meaningful name to this sample.

        samples.sort_unstable();
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
        assert_eq!(snapshot[3].name, "y");
    pub(crate) fn record(&self, sample: Sample) {
        let col = col as usize;
    }
        assert_eq!(snapshot[8].name, "c");

            let not_in_tombstones = self.deletes_from_union.complement();
            rev_id, max_undo_so_far,
            .map(|(i, _)| i)
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    }
/// Usage of static strings is encouraged for best performance to avoid copies.
        use self::MergeTestOp::*;
// Licensed under the Apache License, Version 2.0 (the "License");
    where S: serde::Serializer {
    }
        self.rev_id_counter += 1;
/// discussion on payload.
            Assert(1, "pbj".to_owned()),
            if self.line_of_offset(text, offset) <= line {
                        };
    assert!(a[0].rev_id == b[0].rev_id);
                                  style_spans, &plan, pristine);
    }
                self.find_changed = FindStatusChange::All;
            let new_region = region_movement(movement, region, self,
            sample_limit_count: limit
impl Eq for Sample {}
use serde::de::{Deserialize, Deserializer};
        let a_revs = basic_insert_ops(inserts.clone(), 1);
                }
            Assert(0, "acrbdz".to_owned()),

    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
        let script = vec![

    session: SessionId,
        where S: Into<StrCow>, C: Into<CategoriesT>
        let first_rev = engine.get_head_rev_id().token();
pub fn count_newlines(s: &str) -> usize {
    fn bench_single_timestamp(b: &mut Bencher) {
    /// Time complexity: O(log n)
        }
        } else {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
                } else {
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
    pub fn set_size(&mut self, size: Size) {
        let mut selection = match multi_select {
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
/// from the new revisions on the left.
        let subset_str = format!("{:#?}", expand_by[0].1);
mod sys_tid;
            let expand_by = compute_transforms(a_new);
    #[serde(rename = "ph")]

            SampleEventType::AsyncEnd => 'e',
/// Usage of static strings is encouraged for best performance to avoid copies.
            categories: Some(categories.into()),
            Assert(1, "acb".to_owned()),
    /// the frontend.
            r = op.inserts.apply(&r);
    }
        }
        where S: Into<StrCow>, C: Into<CategoriesT>
    #[serde(rename = "sort_index")]
            }
            a.push('a');

    #[bench]
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    }
    {
        }).collect();

/// ```
    #[bench]
// Licensed under the Apache License, Version 2.0 (the "License");
        let first_rev = engine.get_head_rev_id().token();
    pub fn token(&self) -> RevToken {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// `text`. The count of a character in `deletes_from_union` represents
        let mut b = String::new();
            self.mk_new_rev(priority, undo_group, base_rev, delta);
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    }
pub enum CategoriesT {
    #[test]
/// conversions in both directions.
#[inline]
    }
    #[test]
            // Go crazy
    /// The maximum number of entries the tracing data should allow.  Total
            Drag(MouseAction { line, column, .. }) =>


    fn from(c: Vec<String>) -> CategoriesT {

        engine.edit_rev(1, 1, first_rev, d1.clone());
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
    }
        assert_eq!(utf16_units, 11);
                RenderTactic::Preserve => {
}
        if offset == s.len() {
#![cfg_attr(feature = "benchmarks", feature(test))]
    pub(crate) fn get_view_id(&self) -> ViewId {
/// An element in a `RopeDelta`.
    {
        assert_eq!(5, a.offset_of_line(3));
    }
                            None
        let mut cur_len_utf8 = 0;
            None
                },
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
            tid: sys_tid::current_tid().unwrap(),


        }
        }
        }
        self.invalidate_selection(text);

    // TODO: this should be a Cow
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
    pub fn set_dirty(&mut self, text: &Rope) {
        }
        let inserts = parse_subset_list("
            rendered_styles.push(sel_end as isize - sel_start as isize);
    ///
    fn bench_trace_block_payload(b: &mut Bencher) {
        }
    let mut s = Subset::new(head_len);
            offset += 1;
        } else {
    #[test]
///
            first_line: 0,
                }

        tombstones = new_tombstones;
            }
    where S: Into<StrCow>, C: Into<CategoriesT>
}
    /// Selects an entire line and supports multi selection.
    }
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
    /// The selection state for this view. Invariant: non-empty.

            self.record(Sample::new_instant(name, categories, Some(payload.into())));
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        self.revs.last().unwrap().rev_id

                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
    /// Find the first revision that could be affected by toggling a set of undo groups
    fn next_codepoint_offset_small() {
type StyleMap = RefCell<ThemeStyleMap>;
    pub(crate) fn set_has_pending_render(&mut self, pending: bool) {
/// samples are ordered chronologically for several reasons:

    }
                if !inserts.is_empty() {

        let mut cursor = Cursor::new(self, offset);
        let script = vec![
            }
            self.current = None;
        }
        impl<'de> Visitor<'de> for CategoriesTVisitor {
            rendered_styles.push(1);
                } else {
        };
        for find in &mut self.find {
/// Indicates what changed in the find state.

            // trans-expand other by expanded so they have the same context
    fn delta_rev_head_2() {
            inserts: Subset::new(0),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
            let b = self.current.unwrap().as_bytes()[self.idx];
            return false;
            Merge(0,2), Merge(1, 2),
    fn next(&mut self) -> Option<Cow<'a, str>> {
    }
/// A rope data structure.
    }

    /// Splits current selections into lines.
/// of Sample that determines order.
                len += 1;
pub struct Engine {
//
    fn eq_small() {
        let mut b = line_cache_shadow::Builder::new();
    /// Tracks whether the replacement string or replace parameters changed.
/// assert_eq!("herald", String::from(a));
    #[test]
/// # Examples
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
///
            offset = text.prev_grapheme_offset(offset + 1).unwrap();
/// revisions not shared by both sides.
    #[test]
    }
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
            AssertAll("zacpb".to_owned()),
                sel
            cursor: Cursor::new(self, start),
pub struct SampleGuard<'a> {
                break;
            Drag(MouseAction { line, column, .. }) =>
            Merge(0,1),
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    pub width: f64,
        let b = a.slice(2, 4);
    /// Move the selection by the given movement. Return value is the offset of
            }
#[must_use]
            Some(right_str)
#[inline]
        }
            // d-expand by other
        assert_eq!(snapshot[3].name, "y");
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
            true => self.selection.clone(),
#![cfg_attr(feature = "collections_range", feature(collections_range))]

    // trace_block()/trace_closure
            thread_name: Sample::thread_name(),
    /// This is used to determined whether FindStatus should be sent to the frontend.
        // clamp to end of line
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let after_first_edit = engine.get_head_rev_id().token();
mod sys_tid;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        let revs = basic_insert_ops(inserts, 1);
    /// This function will panic if `offset > self.len()`. Callers are expected to
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>

        assert_eq!("a", String::from(&tombstones_2));
    {
pub type RopeDelta = Delta<RopeInfo>;

        impl<'de> Visitor<'de> for CategoriesTVisitor {
    }
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
    #[serde(serialize_with = "serialize_event_type")]
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {

               a.lines_all().collect::<Vec<_>>());
fn default_session() -> (u64,u32) {

        // invert the changes to deletes_from_union starting in the present and working backwards
        d_builder.build()
        // a, b, y, z, c, x

            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
        let first_rev = engine.get_head_rev_id().token();
}
        // the generated JSON.
                }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        engine.gc(&gc);

    pub fn new_instant<S, C>(name: S, categories: C,
        }
    fn next_rev_id(&self) -> RevId {
use client::Client;
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    /// Get the contents of the document at a given revision number
}
            // TODO: finer grain invalidation for the line wrapping, needs info
                                  style_spans, &plan, pristine);
}
                    if !inserts.is_empty() {
                let (pl, poffset) = self.prev_leaf()?;
        assert_eq!(trace.get_samples_count(), 0);
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len());
    }
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
/// creation.  Roughly corresponds to start_ns but instead there's a
        });
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
use std::sync::Mutex;
}
        next_expand_by = Vec::with_capacity(expand_by.len());
        as_vec.extend(all_samples.iter().cloned());
        let first_rev = engine.get_head_rev_id().token();
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
            size: Size::default(),
                }
/// Create an instantaneous sample with a payload.  The type the payload

        for sample in all_samples.iter() {
/// }
/// 3. You may not care about them always being sorted if you're merging samples
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
                let (last, rest) = self.sel_regions().split_last().unwrap();
    }
    }
                        });
        RopeInfo {
            trace.closure("something", &[], || ());
                                                     "insert", node)
        assert_eq!(snapshot[5].name, "z");
    }
    #[test]
        // that into our actual target.
        for _ in 0..in_measured_units {
    /// Determines the current number of find results and search parameters to send them to
            } else {
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
        if let Some(edit) = contents {
        RopeInfo {
    /// in the range of 511-1024 bytes.
        update
                el.serialize_field(end)?;
    Instant,
#[derive(Serialize, Deserialize, Debug)]
            Some(offset - len)
    }
use xi_rope::spans::Spans;
            None
        for rev in &self.revs[first_candidate..] {
    /// All the selection regions other than the one being dragged.
    #[serde(rename = "ph")]
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
                false => x.start
            Merge(3, 0), Merge(4, 1), Merge(5, 2),
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            Copy(usize, usize),
    #[test]
            // These two will be different without using session IDs
/// samples are ordered chronologically for several reasons:
            },
// you may not use this file except in compliance with the License.
            }
    enabled: AtomicBool,
            "text": &l_str,
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
}
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
        engine.edit_rev(1, 1, initial_rev, d1.clone());
        }

            Assert(0, "abc".to_owned()),
        } else {
                        self.revs.push(Revision {
        let mut cur_len_utf16 = 0;
        }
            utf16_size: 0,
///
        match self.breaks {

        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
//! It enables support for full asynchronous and even peer-to-peer editing.
    AsyncEnd,
        });

        //println!("push_maybe_split [{}] [{}] {:?}", self, other, iv);
        Merge(usize, usize),
            self.name == other.name &&
macro_rules! categories_from_constant_array {
        if self.find_changed != FindStatusChange::None {
pub type RevToken = u64;
            }
    pub(crate) fn get_buffer_id(&self) -> BufferId {
        let new_pos = self.pos() + (end - offset);
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
/// ```
        let head2 = engine.get_head_rev_id().token();
    }
}
    // * Unicode width (so CJK counts as 2)
            lines: 0,
#[cfg(feature = "json_payload")]
          F: FnOnce() -> R
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        self.revs.push(new_rev);
                engine.gc(&to_gc)
            SampleEventType::FlowInstant => 't',

        let tid = all_samples.front()
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
}
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
    }
    TRACE.instant_payload(name, categories, payload);
                },
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),

    text: Rope,

        self.find_changed = FindStatusChange::None;
            Assert(1, "arpbj".to_owned()),
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
            fragment: ""
                    }
        let offset = self.line_col_to_offset(text, line, col);
    a_ids.intersection(&b_ids).cloned().collect()
                },


/// See `trace_block` for how the block works and `trace_payload` for a
                            plan: &RenderPlan, pristine: bool)

    fn arr_eq(&self, other: &Vec<String>) -> bool {
    #[test]
        assert_eq!(snapshot[1].name, "thread_name");
        engine.undo([1,3].iter().cloned().collect());
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        let expand_by = compute_transforms(revs);
                        },
            pos
        while !leaf.is_char_boundary(end) {
                //self.cursor.next::<BaseMetric>().unwrap() - prev_pos
        // insert `edits` letter "b"s in separate undo groups
        engine.edit_rev(1, 1, first_rev, build_delta_1());
            GestureType::WordSelect =>
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        impl<'de> Visitor<'de> for CategoriesTVisitor {
                                toggled_groups: &toggled_groups - gc_groups,
                        undone_groups = Cow::Owned(new_undone);
        ------#
        if offset == 0 {

        // +2 for exe & thread name
        let new_sel = self.drag_state.as_ref().map(|drag_state| {
    /// Determines the current number of find results and search parameters to send them to
        --#-
        self.drag_state = Some(DragState {
/// discussion on payload.
    }
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
    #[test]
        let expand_by = compute_transforms(revs);
pub fn is_enabled() -> bool {
                inserts: new_inserts,
//
                WrapWidth::Width(px) =>
            lines: count_newlines(s),
            } else {
    /// ancestor in order to be mergeable.
        Some(pos) => minsplit + pos,
        }
        //} else {
        self.tombstones = new_tombstones;
        let b = a.slice(1, 10);
    ThreadSortIndex { sort_index: i32 },
        match *self {
    ProcessSortIndex { sort_index: i32 },
                    if undone_groups.contains(undo_group) {
        for rev in &self.revs[first_candidate..] {

        let mut style_map = style_map.borrow_mut();
        let trace = Trace::enabled(Config::default());
    /// they would be if they hadn't been deleted.
        };
}
    #[cfg(feature = "benchmarks")]
            let mut len = 1;
    #[test]
                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
                Delta {
extern crate libc;

/// (such as insert, delete, substring) are O(log n). This module provides an immutable


            if let Edit { priority, ref inserts, .. } = r.edit {
                Edit { priority, undo_group, inserts, deletes } => {
    }
                out.push((prio, inserts));
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    Bytes(usize),
                Some(Cow::from(s))
        self.set_selection(text, SelRegion::caret(offset));
                offset = prev;
        }
    }
        let contents = match rev.edit {
            while !s.is_char_boundary(offset - len) {

        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                true => x.end,

    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    pub fn max_samples(&self) -> usize {

            if let Some(pos) = pos { start_of_line.set(pos) }
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
impl Serialize for Delta<RopeInfo> {
    ///
}
        assert_eq!(correct, rearranged_inserts);
                rev_id: basic_rev(i+1),

use find::Find;
            return false;
            Assert(0, "zcbd".to_owned()),
                        });
                pos = leaf_offset + pl.len();
    }
    #[test]
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
/// None if an irrecoverable error occured.
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        gc_scenario(4,3);
            pid: sys_pid::current_pid(),
    ThreadSortIndex { sort_index: i32 },
        offset
            // Do it the other way on the copy


                    let _ = s.pop();
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
    fn build_delta_2() -> Delta<RopeInfo> {
            let base_index = find_base_index(&self.revs, &other.revs);
    }
/// Returns the file name of the EXE if possible, otherwise the full path, or
    // TODO find the maximum base revision.
///
    #[test]
        self.deletes_from_union = new_deletes_from_union;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    pub fn lines(&self, start: usize, end: usize) -> Lines {
        }
        assert_eq!(snapshot[7].name, "c");

                true => x.end,
/// ```
    pub fn new_instant<S, C>(name: S, categories: C,
        engine.gc(&to_undo);
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
pub fn enable_tracing() {
        ];
                            }
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
    } else {
}
                    Some(chunk) => self.fragment = chunk,

        AssertAll(String),
// You may obtain a copy of the License at
            let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
                }
        let other_subset = self.find_rev(other_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            // with offset == s.len(), but be defensive.
impl Serialize for DeltaElement<RopeInfo> {
    /// Returns the byte offset corresponding to the line `line`.
//     http://www.apache.org/licenses/LICENSE-2.0
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        }
#[cfg(feature = "benchmarks")]
pub enum SampleEventType {
        self.set_selection(text, SelRegion::caret(offset));
        ]);
                tid));
                            rev_id: rev.rev_id,
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    match memrchr(b'\n', &s.as_bytes()[minsplit - 1..splitpoint]) {

    fn test_cross_process_samples() {
}
        (self.pid, self.timestamp_us).hash(state);
}
            }

                    self.set_selection(text, selection);
        // probably change as the recording internals change.
            rendered_styles.push(1);
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
            None
                let (ins, _) = delta.factor();
    #[bench]
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
    // There will probably never be a document with more than 4 billion edits
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    linewrap::rewrap_width(breaks, text, width_cache,
    }
        }
    fn test_get_samples() {
        // 1 for exe name & 1 for the thread name
        }
        as_vec.extend(all_samples.iter().cloned());
    #[test]
            let horiz = None;

    #[cfg(feature = "json_payload")]
use interval::Interval;
            Merge(0,2), Merge(1, 2),
///
            }
// See the License for the specific language governing permissions and
            }
        let mut a = String::new();
            categories: None,
// Unless required by applicable law or agreed to in writing, software
            AddSelectionBelow =>
            a.push('a');
impl<'a> Iterator for Lines<'a> {
/// }
            for rev in &self.revs {
#[derive(Clone, Copy)]
    pub(crate) fn unset_find(&mut self) {
        self.sample_limit_count * size_of::<Sample>()
            black_box(time::precise_time_ns());
            pending_render: false,
    fn undo_3() {
        }
            Merge(4,3),
    /// Note: unlike movement based selection, this does not scroll.
                warn!("Usage of click is deprecated; use do_gesture");
// you may not use this file except in compliance with the License.
    ($num_args: expr) => {
            enabled: AtomicBool::new(true),

        rendered_styles
            //}
}
                    if seg.validity == line_cache_shadow::ALL_VALID {

        assert_eq!(rope.offset_of_line(0), 0);
        /// along with the newline that triggered it.
        let mut b = line_cache_shadow::Builder::new();

    }
                        let mut word_cursor = WordCursor::new(text, region.max());
    pub fn with_limit_bytes(size: usize) -> Self {
    #[bench]
                        deletes_from_union

    }
        let (new_text, new_tombstones) =
        peers: Vec<Engine>,
    }
///
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        cur_len_utf8
    /// The process the sample was captured in.
            self.args == other.args
impl<'a> Drop for SampleGuard<'a> {
            l[offset..].chars().next()
use std::collections::hash_map::DefaultHasher;
/// as opposed to thousands of revisions.
/// xi_trace::trace("something happened", &["rpc", "response"]);
/// Valid within a session. If there's a collision the most recent matching
    where S: Into<StrCow>, C: Into<CategoriesT>
    }
    }
pub struct Sample {
            Assert(0, "zacpb".to_owned()),
        assert_eq!("1234567", String::from(r));
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        for _ in 0..in_measured_units {
        assert_eq!(1, res);
/// # Examples
            }
        -##-
        let r = r + Rope::from(&b[MIN_LEAF..]);
        first_line..(last_line + 1)
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());

        let last = max(last, 0) as usize;
        self.set_selection(text, SelRegion::caret(offset));
            // cursor
                let (ins, _) = delta.factor();
        assert_eq!(Some(2), b.next_codepoint_offset(0));
        trace.instant("1", &["test"]);
pub fn samples_cloned_sorted() -> Vec<Sample> {

        -##-
        let contents = match rev.edit {
            rev_id, max_undo_so_far,
        // +2 for exe & thread name
        if !new_inserts.is_empty() {
                                                          new_len, col),
    #[test]
        let utf8_offset = rope.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    /// The line ending is stripped from the resulting string. The final line ending
                Undo { ref toggled_groups, ref deletes_bitxor } => {

/// }
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
// Low level functions
                // TODO create InsertDelta directly and more efficiently instead of factoring
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
impl Trace {


    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
                        DeltaElement::Insert(Rope::from(s)),
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
                }
            Assert(0, "ab".to_owned()),
    fn eq(&self, other: &Sample) -> bool {
/// Atomicity is implicit, putting the offset
    #[cfg(feature = "benchmarks")]
                    base_len: delta.base_len
categories_from_constant_array!(7);
    }
        }
                let offset = self.selection[0].start;
        ---#--
        MergeTestState::new(4).run_script(&script[..]);
    fn edit_rev_undo_3() {
    // this is the cost contributed by the timestamp to trace()
    enum MergeTestOp {
    }
            Merge(0,2), Merge(1, 2),
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        debug_subsets(&rebased_inserts);
    }
        let mut hasher = DefaultHasher::new();
    /// Time complexity: technically O(n log n), but the constant factor is so
/// # Examples
/// overhead tracing routine available.

            }
    #[bench]

            rendered_styles.push(sel_end as isize - sel_start as isize);
    #[cfg(feature = "benchmarks")]

    }
            revs: vec![rev],
        let trace = Trace::enabled(Config::with_limit_count(10));
        self.deletes_from_union_before_index(rev_index + 1, true)
        let start = self.line_col_to_offset(text, line, 0);
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        --#-
//     http://www.apache.org/licenses/LICENSE-2.0
            min: offset,
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    /// The semantics are intended to match `str::lines()`.
        Self {
        assert_eq!("0123456789abcDEEFghijklmnopqr999stuvz", String::from(engine.get_head()));
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        engine.edit_rev(1, 1, first_rev, d1);
    /// terminating newline.
            let mut sel = drag_state.base_sel.clone();
        soln.push('f');
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            line_cache_shadow::CURSOR_VALID
use xi_rope::interval::Interval;
            self.push_leaf(s[..splitpoint].to_owned());
    rev_id: RevId,

    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        d_builder.delete(Interval::new_closed_open(10, 36));
    }
            trace.closure("test_samples_closure", &["test"], || {});
    pub fn set_size(&mut self, size: Size) {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
            duration_us: Some(ns_to_us(duration_ns)),
            Merge(0,1),
    /// The session ID used to create new `RevId`s for edits made on this device
    /// than this will panic.
    fn merge_insert_only_whiteboard() {
    }
            self.first_line = line;
    fn is_ok_child(&self) -> bool {
#[derive(PartialEq, Debug)]
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                return None;
///
            }
                sel.add_region(SelRegion::new(last.start, offset));
    for op in b_new {
                let categories = v.split(",").map(|s| s.to_string()).collect();
        {
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
                                     payload: Option<TracePayloadT>,

            utf16_size: count_utf16_code_units(s),
                //self.end - prev_pos
    }
            match reverse {
        }
            "something", &["benchmark"],
                } else {
#[cfg(feature = "json_payload")]
        let mut engine = Engine::new(Rope::from(TEST_STR));
}
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
                },
        let line = line as usize;

fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
        let trace = Trace::enabled(Config::default());
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
        let mut selection = self.selection.clone();
        let mut samples = self.samples_cloned_unsorted();

                     modify_selection: &SelectionModifier) {
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
categories_from_constant_array!(10);
    ($num_args: expr) => {
use width_cache::WidthCache;
    }
    #[test]

/// the `base_revs`. This allows the rest of the merge to operate on only
                                             &text, false);

        let tombstones_a = Rope::from("a");
    }
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
            match modify_selection {
            rendered_styles.push(style_id as isize);
        rope.line_of_offset(20);
        let first_rev = engine.get_head_rev_id().token();
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);

                self.push_leaf(s.to_owned());
}
    },
        let new_head_2 = engine.get_head_rev_id().token();
))]
        }
                    };
                MergeTestOp::Assert(ei, ref correct) => {
            Assert(2, "afc".to_owned()),
        for i in 1..(s1.len() * 3) {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
            self.record(Sample::new_instant(name, categories, None));


            self.first_line = line;
    priority: usize,
        assert_eq!(None, b.next_codepoint_offset(9));
            self.unset_find();
            let b_to_merge = &other.revs[base_index..];
        Self {
    pub fn next_codepoint(&mut self) -> Option<char> {
                self.add_selection_by_movement(text, Movement::Up),
            SampleEventType::FlowEnd => 'f',
            None
        // TODO: simplify this through the use of scopeguard crate
    fn find_common_1() {
                }
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
/// * `name` - A string that provides some meaningful name to this sample.
        let tid = all_samples.front()
        result
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
    }
        ");
                Contents::Edit {inserts, ..} => inserts,
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
        }

            Some(ref breaks) => {
            GestureType::RangeSelect => self.select_range(text, offset),
    pub fn sel_regions(&self) -> &[SelRegion] {
            }
            // Go crazy
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
                    let e = &mut self.peers[ei];
        delta.serialize_field("base_len", &self.base_len)?;
    pub fn with_limit_count(limit: usize) -> Self {
        }
                            edit: Edit {
categories_from_constant_array!(7);
#![cfg_attr(feature = "collections_range", feature(collections_range))]
/// beginning.
    #[test]
    ///
        assert_eq!(utf16_units, 17);

    #[test]
    fn measure(info: &RopeInfo, _: usize) -> usize {
    /// unsaved changes.
                                                        style_spans, line_num);
categories_from_constant_array!(10);
              F: FnOnce() -> R
        ---#--
        self.revs.append(&mut new_revs);
    rev_id: RevId,
extern crate serde_json;
    #[test]
    /// assumed to be forward).
/// fn something_else_expensive() {


                self.push_leaf(s.to_owned());
        assert_eq!(0, a.offset_of_line(0));
    }
                let (pl, poffset) = self.prev_leaf()?;
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
/// Revision will be used, which means only the (small) set of concurrent edits
            .map(|pos| offset + pos + 1)
            type Value = CategoriesT;

        self.samples.lock().unwrap().limit()
impl FromStr for Rope {

        self.revs.iter().enumerate().rev()
    pub duration_us: Option<u64>,
            Assert(0, "adfc".to_owned()),
        self.lc_shadow = b.build();


    }
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
        assert_eq!(snapshot[6].name, "z");
            Assert(5, "zacpb".to_owned()),
        let rearranged_inserts: Vec<Subset> = rearranged.into_iter().map(|c| {


    #[serde(serialize_with = "serialize_event_type")]
        assert_eq!(snapshot[1].name, "thread_name");
    for &b in s.as_bytes() {

                pos = leaf_offset + pl.len();
        d_builder.build()
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
use unicode_segmentation::GraphemeIncomplete;
                metadata_name: None,
        assert_eq!(snapshot.len(), 9);
    fn compute_info(s: &String) -> Self {
        }).collect()
/// an argument.
    /// Tracks whether the replacement string or replace parameters changed.

        info.utf16_size
        }
    pub metadata_name: Option<StrCow>,
    ///
        assert_eq!(trace.is_enabled(), true);
    pub fn iter_chunks_all(&self) -> ChunkIter {
                return;
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
    }
        }, to_payload("test_get_sorted_samples"));

        }
                         style_spans: &Spans<Style>) -> Vec<isize>
        }
    }
                    } else {
                edit: contents.clone()
                    // we don't want new revisions before this to be transformed after us


/// monotonically increasing single global integer (when tracing) per creation
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
            };
        revs.append(&mut revs_2);
                // merge logic.
        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
#[inline]
/// Tracing is disabled initially on program launch.
            SampleEventType::ObjectDestroyed => 'D',
    }
            sel.add_region(region);
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
    }
        let first_sample_timestamp = all_samples.front()
            self.truncate(splitpoint);
    type Output = Rope;
            Some(Cow::Borrowed(mut s)) => {
        self.scroll_to = Some(end);
}
            }, to_payload("test_get_samples_nested_trace"));
        }
#[inline]

            tid: sys_tid::current_tid().unwrap(),
        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
    #[cfg(feature = "benchmarks")]
                    let head = e.get_head_rev_id().token();
        // +2 for exe & thread name.
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
    {
                self.select_word(text, offset, true)
/// Revision will be used, which means only the (small) set of concurrent edits
            // shouldn't be called with this, but be defensive
                        Err(e) => {
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    FlowStart,
    /// height of visible portion
            undone_groups: BTreeSet::new(),

        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            match *op {
        b.iter(|| black_box(sys_tid::current_tid()));
    struct MergeTestState {
///
            trace.record(sample);
        }
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        if offset == 0 {
            ModifySelection(movement) => self.do_move(text, movement, true),
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
            self.event_type == other.event_type &&

impl<'de> Deserialize<'de> for Rope {
    AsyncInstant,
    fn is_boundary(s: &String, offset: usize) -> bool {

    let mut next_expand_by = Vec::with_capacity(expand_by.len());
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        assert_eq!(None, b.prev_codepoint_offset(0));
        self.convert_metrics::<LinesMetric, BaseMetric>(line)
                        let start_line = seg.our_line_num;
// you may not use this file except in compliance with the License.
        ##
    // * Actual measurement in text layout
        Engine {
        if !cursors.is_empty() {
//     http://www.apache.org/licenses/LICENSE-2.0
    fn next(s: &String, offset: usize) -> Option<usize> {
    ///
//! under `Engine::edit_rev`, which is considerably simpler than the usual
mod fixed_lifo_deque;
        if let Some(ref mut trace) = self.trace {
    undo_group: usize,
                Some(filename) => {
        // probably change as the recording internals change.
        assert_eq!(trace.get_samples_count(), 0);
    pub event_type: SampleEventType,
        self.invalidate_selection(text);
        }
            'f' => SampleEventType::FlowEnd,
    }
    //
                undo_group,
        peers: Vec<Engine>,
    }

    /// a point that should be scrolled into view.
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
                name, categories, payload, SampleEventType::DurationBegin)),
        use self::MergeTestOp::*;
    }
        result
            line_cache_shadow::CURSOR_VALID
            self.push_leaf(s[..splitpoint].to_owned());
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        let new_sel = selection_movement(movement, &self.selection,
pub type RopeDelta = Delta<RopeInfo>;
        ];
    }
            Assert(2, "ab".to_owned()),
        }
    /// The largest undo group number of any edit in the history up to this


    }
impl Sample {
    ///
        let mut samples = vec![
    pub fn max_undo_group_id(&self) -> usize {
//
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);
        for _ in 0..(edits-max_undos) {
        });
        assert_eq!(Some(9), a.next_grapheme_offset(3));
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
    FlowEnd,
    fn merge_insert_only_whiteboard() {
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
    }
    }
    lc_shadow: LineCacheShadow,
            'b' => SampleEventType::AsyncStart,
        let mut cursor = Cursor::new(self, offset);
        let trace = Trace::enabled(Config::default());
/// ```
    pub fn session_id(&self) -> SessionId {
            } else {
                MergeTestOp::Assert(ei, ref correct) => {

        ]);
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
            }
use unicode_segmentation::GraphemeCursor;

    for &b in s.as_bytes() {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
                    .with_horiz(horiz)
        if let Some(last) = self.revs.last() {
        if self.len() != other.len() {
        }
pub fn samples_cloned_sorted() -> Vec<Sample> {
                    let after = new_full_priority >= full_priority;  // should never be ==
        };
use rpc::{GestureType, MouseAction, SelectionModifier};
        let after_first_edit = engine.get_head_rev_id().token();

/// * `name` - A string that provides some meaningful name to this sample.
    /// Time complexity: O(log n)
/// The payload associated with any sample is by default a string but may be
            Insert(String),
        for &(trans_priority, ref trans_inserts) in &expand_by {
            Merge(4,3),
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
        });
    fn delta_rev_head_3() {
    #[bench]
        engine.edit_rev(1, 1, initial_rev, d1.clone());

    fn bench_trace_closure(b: &mut Bencher) {
/// supported as an optimization when only one reference exists, making the
                if is_base {
    current: Option<&'a str>,
}
            s.as_bytes()[offset - 1] == b'\n'
        let trace = Trace::enabled(Config::default());
            timestamp_us: ns_to_us(time::precise_time_ns()),
        // is the new edit in an undo group that was already undone due to concurrency?
    /// that are currently deleted, and thus in `tombstones` rather than
    //
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
        println!("{:#?}", b_delta_ops);
                l = nl;
            s = &s[splitpoint..];
    /// `text`. The count of a character in `deletes_from_union` represents
    let new_text = del_delta.apply(text);

    /// they would be if they hadn't been deleted.
                            None
    }
            while !s.is_char_boundary(offset - len) {
            replace_changed: false,
    }
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
///     0
        let mut cursor = Cursor::new(self, offset);
        }

                                deletes,
    /// Create a new Engine with a single edit that inserts `initial_contents`
                }
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            first_line: 0,
        {
pub type Rope = Node<RopeInfo>;
                    "something", &["benchmark"],
        let b = Rope::from("b");
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
    #[test]
    }
        let sample_name = to_cow_str(meta.sample_name());
        MergeTestState::new(2).run_script(&script[..]);

                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
            // corner and I'm lazy -cmyr
        let (new_text, new_tombstones) =

            offset += 1;
/// Then offset=1 is invalid.
            rev_id, max_undo_so_far,
        all_samples.reset_limit(0);
    pub fn get_caret_offset(&self) -> Option<usize> {
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
    pub fn session_id(&self) -> SessionId {
    }

            }
        samples[1].pid = 2;
                    let mut selection = self.selection.clone();
            self.idx = 0;
    struct MergeTestState {
                match self.inner.next() {

        // creation) is:
        let (start, end) = iv.start_end();
        assert_eq!(snapshot[0].name, "process_name");
    } else if x < max {
        // clamp to end of line
            tid: sys_tid::current_tid().unwrap(),
        engine.edit_rev(1, 2, first_rev, d1.clone());
        // position after 'f' in four
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
            AssertMaxUndoSoFar(1,1),
//
                                     categories: C,
            duration_us: None,
            Merge(3, 0), Merge(4, 1), Merge(5, 2),

        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
                formatter.write_str("comma-separated strings")
    fn bench_trace_instant_with_payload(b: &mut Bencher) {
                            None
    pub fn samples_cloned_sorted(&self) -> Vec<Sample> {
        assert_eq!("herald", String::from(a));
    /// Find the first revision that could be affected by toggling a set of undo groups
pub struct BaseMetric(());
/// # use xi_rope::Rope;
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
            inner: self.lines_raw(start, end)
            out.push(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
    #[cfg(feature = "benchmarks")]
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
        if offset >= next_line_offset {
        #------
        /// together. For example, an auto-indent insertion would be un-done
            }

        // TODO: may make this method take the iv directly
            lines: 0,

                        ops.push(self.build_update_op("ins", Some(rendered_lines), seg.n));
            Merge(1,0),
// See the License for the specific language governing permissions and
            trace.instant_payload("a", &["test"], to_payload("test_get_samples_nested_trace"));
    fn edit_rev_undo_3() {
                                priority,
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
                        &mut rest[bi - ai - 1]
        let mut b = String::new();
    #[bench]
    }
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
    fn bench_two_timestamps(b: &mut Bencher) {

/// However, anything that can be converted into a Cow string can be passed as
        Some(&leaf[start_pos .. end])
        // TODO: want to let caller retain more rev_id's.
        }

/// For example, take a string that starts with a 0xC2 byte.
}
    /// You could construct the "union string" from `text`, `tombstones` and

}
    rev_id: RevId,
        (Revision {
    /// terminating newline.
                    to_payload(("some description of the closure")))));
        self.len()
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
        d_builder.replace(Interval::new_closed_open(59, 60), Rope::from("HI"));
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
                self.find_changed = FindStatusChange::All;
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },

    fn lines_med() {

    /// Return the line number corresponding to the byte index `offset`.
        -##-
            max_undo_so_far: 0,

            None
        }
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    /// height of visible portion
pub struct Lines<'a> {
                    // fast-forward this revision over all common ones after it
    #[bench]
        Err(ref e) => {
                //// if we aren't on a boundary we can't be at the end of the chunk
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
/// # Arguments
        let script = vec![
            return None;
    #[test]
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
            Merge(0,2), Merge(1, 2),
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    text.slice_to_string(start, end)
        if let Contents::Edit {priority, inserts, .. } = r.edit {
            Insert(String),
/// an argument.
            if let Edit { ref inserts, .. } = rev.edit {

    }
                match *other {
        });
            GestureType::LineSelect =>
    samples: Mutex<FixedLifoDeque<Sample>>,
/// Find a set of revisions common to both lists
                    els: delta.els.drain(..)

    fn gc_3() {
        for &(sel_start, sel_end) in sel {

            AssertAll("zacpb".to_owned()),
    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
    }
    }
    /// they would be if they hadn't been deleted.
        trace.closure_payload("z", &["test"], || {},
    /// validate their input.
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
/// implementation as efficient as a mutable version.
    /// Return the byte offset corresponding to the line number `line`.
    fn prev(s: &String, offset: usize) -> Option<usize> {
}
/// some way.

        deletes_from_union
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)
                MergeTestOp::AssertAll(ref correct) => {
        // +2 for exe & thread name.
    }
    /// Tracks whether there has been changes in find results or find parameters.
    }
        !self.selection.regions_in_range(offset, offset).is_empty()
            //} else {

    fn lines_med() {
    /// Returns the regions of the current selection.
        a.edit_str(1, 9, "era");
    size: Size,
        assert_eq!(correct, res);
        let trace = Trace::enabled(Config::with_limit_count(10));
extern crate lazy_static;

        let script = vec![
    TRACE.samples_cloned_sorted()
        self.lc_shadow.partial_invalidate(first_line, last_line, line_cache_shadow::STYLES_VALID);
use delta::{Delta, DeltaElement};
        ---#--
        if self.scroll_to.is_none() && wrap {
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(trace.samples_cloned_unsorted().len(), 7);
                    // we don't want new revisions before this to be transformed after us
/// Get a slice of a `Rope`:

pub struct LinesRaw<'a> {
            // if using breaks update cursor
                                           client, iv, new_len, px),
use self::Contents::*;
                //self.end - prev_pos
            AssertAll("zacpb".to_owned()),
                let (ins, _) = delta.factor();
    pub fn block<S, C>(&self, name: S, categories: C) -> SampleGuard

        Some(&leaf[start_pos .. end])
    bytecount::count(s.as_bytes(), b'\n')

            AssertMaxUndoSoFar(1,3),
    }
                where E: serde::de::Error

}
                        gc_dels = gc_dels.transform_expand(inserts);
            } else {

        for i in 0..5_000 {
        if self.find_changed != FindStatusChange::None {
            inner: self.lines_raw(start, end)
        if let Contents::Edit {priority, inserts, .. } = r.edit {
        let result = closure();
                let (ins, _) = delta.factor();
        let snapshot = trace.samples_cloned_unsorted();
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
        assert_eq!(0, b.offset_of_line(0));
                    // are empty, could send update removing the cursor.
    }
    /// the frontend.
    /// Merge the new content from another Engine into this one with a CRDT merge
use self::Contents::*;
// You may obtain a copy of the License at
            SampleGuard::new_disabled()

    fn lines_med() {
                                           client, iv, new_len, px),
    None,
        }
            }
impl PartialOrd for Sample {
        self.height

        assert_eq!(samples[0].name, "remote pid");
    }

            for (i, op) in script.iter().enumerate() {
    pub fn prev_codepoint_offset(&self, offset: usize) -> Option<usize> {
    fn prev_grapheme_offset() {


/// Indicates what changed in the find state.
    /// after an edit is applied, to allow batching with any plugin updates.
        }

impl FromStr for Rope {
                         start: usize, end: usize, sel: &[(usize, usize)],
        }
pub type TracePayloadT = serde_json::Value;
}
pub fn len_utf8_from_first_byte(b: u8) -> usize {


        let mut end = leaf.len().min(offset.saturating_add(chunk_size));
        } else {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
        let mut pos = self.pos();
    deletes_from_union: Subset,

/// let b = a.slice(1, 9);
        } else {
    }
struct DeltaOp {
        let params = json!({
        }).collect()
                    if invert_undos {



            if let Edit { priority, ref inserts, .. } = r.edit {
/// });
    }

            Some(offset - len)
        }
        let first_rev = engine.get_head_rev_id().token();

/// See `trace_block` for how the block works and `trace_payload` for a
        self.set_selection_raw(text, selection);

        #---

        } else {
        let expand_by = compute_transforms(revs);
                metadata_sort_index: None,
                            }
        assert_eq!(snapshot[8].name, "c");
    #[serde(skip_serializing_if = "Option::is_none")]
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new
            pid: sys_pid::current_pid(),
        ---#--
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
}
mod tests {
    fn gc_5() {
            // d-expand by other
    }
    /// Each instance represents a separate search query.
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
    None,

            deletes: Subset::new(0),

use rpc::{GestureType, MouseAction, SelectionModifier};
    // TODO find the maximum base revision.
}
            None
    TRACE.instant_payload(name, categories, payload);
        let mut engine = Engine::new(Rope::from(TEST_STR));
//!
        let d = engine.delta_rev_head(first_rev);
    /// What kind of sample this is.
                Some(Cow::from(s))
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {
            let head = engine.get_head_rev_id().token();
        for op in &delta_ops {
            warn!("Failed to get path to current exe: {:?}", e);
                    if !inserts.is_empty() {
    }
    find: Vec<Find>,

                    undo_group: i+1,
impl Leaf for String {
                         first_line: usize, last_line: usize, pristine: bool) {
            Assert(0, "acbd".to_owned()),
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
    /// Time complexity: O(log n)
    }
    let mut out = Vec::new();
/// let a = Rope::from("hello world");
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
///
        }
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
    }
                }
        }
// Copyright 2016 The xi-editor Authors.
        let mut b = String::new();
    ProcessLabels { labels: String },

}
    out
    }
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),


// Licensed under the Apache License, Version 2.0 (the "License");
//     http://www.apache.org/licenses/LICENSE-2.0
        View {
        let trace = Trace::enabled(Config::with_limit_count(10));


    /// You could construct the "union string" from `text`, `tombstones` and
        }
    #[serde(skip_serializing_if = "Option::is_none")]
        deletes_from_union = new_deletes_from_union;

                        },
        self.set_selection_raw(text, sel.into());
        Self {
            cursor: Cursor::new(self, start),
        memchr(b'\n', &s.as_bytes()[offset..])
            }
                                toggled_groups: &toggled_groups - gc_groups,
/// configured via the `dict_payload` or `json_payload` features (there is an

        d_builder.delete(Interval::new_closed_open(58, 61));
            MergeTestState { peers }
    selection: Selection,

    /// An arbitrary payload to associate with the sample.  The type is
        }, to_payload("test_get_samples_nested_trace"));
            Rope::from(s1.clone()),
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
pub fn disable_tracing() {
/// # Examples
        use self::MergeTestOp::*;
        }
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    TRACE.samples_cloned_sorted()
        while !leaf.is_char_boundary(end) {


        assert_eq!(TEST_STR, String::from(engine.get_head()));

    /// The thread the sample was captured on.  Omitted for Metadata events that
        }
/// The `dict_payload` or `json_payload` feature makes this ~1.3-~1.5x slower.

    }
        let new_head = engine.get_head_rev_id().token();
    /// Width in bytes (utf-8 code units).
            timestamp_us: ns_to_us(time::precise_time_ns()),
            Some(region) => {
    fn from(s: T) -> Rope {
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");

    }
    /// The process the sample was captured in.
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
            Some(offset - len)

    }
    {
    let mut out = Vec::new();
        let mut ops = Vec::new();

        // insert character at end, when this test was added, it panic'd here
        let first_rev = engine.get_head_rev_id().token();
        a.lines_all().collect::<Vec<_>>());
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
                    None
            Merge(0,2), Merge(1, 2), Merge(3, 2),

        Edit { ei: usize, p: usize, u: usize, d: Delta<RopeInfo> },
        b.iter(|| black_box(trace.instant("nothing", &["benchmark"])));
    /// assumed to be forward).
        /// The set of groups toggled between undone and done.
            engine.undo(to_undo.clone());


/// an argument.
        }
        }
        let first_rev = engine.get_head_rev_id().token();
                                                    self.size.width));
        self.height
        r.slice_to_string(0, r.len())
    /// Returns the byte offset corresponding to the line `line`.
}
}
// limitations under the License.
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
            }

            l[offset..].chars().next()
/// State required to resolve a drag gesture into a selection.
        }).collect()
    fn from(r: &Rope) -> String {
    }
            Assert(0, "acbd".to_owned()),
        let thread = std::thread::current();
// Licensed under the Apache License, Version 2.0 (the "License");
    fn merge_max_undo_so_far() {
// ======== Merge helpers
    }
/// However, anything that can be converted into a Cow string can be passed as
                    self.set_selection(text, selection);
                self.select_word(text, offset, true)

    /// We attempt to reduce duplicate renders by setting a small timeout
        // current recording mechanism should see:
    }
        self.drag_state = Some(DragState {
///
fn find_leaf_split_for_merge(s: &str) -> usize {
    TRACE.instant_payload(name, categories, payload);
    }
        }
    /// Note: `edit` and `edit_str` may be merged, using traits.
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

            'N' => SampleEventType::ObjectCreated,
                        b.add_span(seg.n, 0, 0);
        if offset == 0 {
            b.push_str(&c);
        let first_rev = engine.get_head_rev_id().token();
                MergeTestOp::AssertAll(ref correct) => {
            },
        // expand by each in expand_by
    fn gc_6() {
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
        --#--
    }

            let after = full_priority >= trans_priority;  // should never be ==
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
/// * `name` - A string that provides some meaningful name to this sample.
}
        where S: Serializer
        }
            args: Some(SampleArgs {
        assert_eq!(snapshot[8].name, "c");
            rebased_deletes_from_union.union(to_delete)
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        where S: Into<StrCow>, C: Into<CategoriesT>
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
            // I think it's a precondition that this will never be called
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();
trait StringArrayEq<Rhs: ?Sized = Self> {
    // TODO: a case can be made to hang this on Cursor instead

    }
        }
                return None;
    /// storage allocated will be limit * size_of<Sample>
    fn delta_rev_head_3() {

    }

    }
            find.set_hls_dirty(false)
                              to_payload("test_get_samples"));
        use self::MergeTestOp::*;
            Cancel => self.do_cancel(text),
    use super::*;
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
}
            let start = self.line_of_offset(last_text, iv.start());
                                                        soft_breaks.as_mut(),

        }
        let a = Rope::from("a\nb\n");
        trace.closure_payload("z", &["test"], || {},
    Bytes(usize),
    }
                self.do_find_next(text, false, wrap_around, allow_same, &modify_selection),
        });


                        }
            tombstones: Rope::default(),
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
    pub(crate) fn wrap_width(&mut self, text: &Rope, width_cache: &mut WidthCache,
        let _t = trace_block("View::wrap_width", &["core"]);
    }
        }
/// ```
                el.serialize_field(end)?;
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    fn arr_eq(&self, other: &Rhs) -> bool;
                                                        soft_breaks.as_mut(),
    /// Invalidate the current selection. Note that we could be even more
///     something_else_expensive();
        assert_eq!(trace.get_samples_limit(), 11);
/// between two utf8 code units that form a code point is considered invalid.
        b.iter(|| black_box(trace.closure_payload(
}
            self.breaks = Some(linewrap::linewrap(text, wrap_col));

    use test::black_box;

        let mut pos = self.pos();
    }
    }
        guard
    #[inline]
/// });
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
    }
        a.lines_all().collect::<Vec<_>>());
    }
        }
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
        }
                    let (start, end) = {
        let chars_left = (edits-max_undos)+1;
        Self {
        let mut d_builder = Builder::new(TEST_STR.len());
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
#[derive(Clone, Copy)]
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
use std::collections::hash_map::DefaultHasher;


    /// Get the Subset to delete from the current union string in order to obtain a revision's content
#[derive(Debug, Default, PartialEq, Serialize, Deserialize)]
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
            result["cursor"] = json!(cursors);
/// rather than just this processe's samples).
                    if undone_groups.contains(undo_group) {
use std::collections::HashMap;
trait StringArrayEq<Rhs: ?Sized = Self> {
impl Add<Rope> for Rope {
    }
                                inserts,

    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
            } else {

}
        for find in &mut self.find {

}
        d_builder.delete(Interval::new_closed_open(10, 36));
    #[test]
        } else {
    {
    /// What kind of sample this is.
    /// The selection state for this view. Invariant: non-empty.

            }),
        }
    fn lines_small() {
        use self::MergeTestOp::*;

        let a = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
            self.event_type == other.event_type &&
    revs: Vec<Revision>,
                break;
    }
    TRACE.closure_payload(name, categories, closure, payload)
            enabled: AtomicBool::new(true),
            }
            s.as_bytes()[offset - 1] == b'\n'
        let selection = SelRegion::new(0, text.len()).into();
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
pub struct RopeInfo {
        d_builder.build()

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        b.iter(|| black_box(trace.closure_payload(
    pub fn token(&self) -> RevToken {
            inner: self.iter_chunks(start, end),

    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
        let tombstones_a = Rope::from("a");

    /// vertical scroll position
    CompleteDuration,
            },
            Merge(1,0), Merge(2,0),

    /// This case is a regression test reproducing a panic I found while using the UI.

}
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
            Edit { ei: 1, p: 3, u: 3, d: parse_delta("-!") },
use linewrap;
                        };
    /// The incrementing revision number counter for this session used for `RevId`s
        }
categories_from_constant_array!(6);
            'b' => SampleEventType::AsyncStart,
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {
    /// This method is responsible for updating the cursors, and also for
                    None
                let mut sel = Selection::new();
/// discussion on payload.
            Assert(1, "ab".to_owned()),
pub struct BaseMetric(());
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
        let b_revs = basic_insert_ops(inserts, 2);
            'X' => SampleEventType::CompleteDuration,
/// Boundary is trailing and determined by a newline char.
        self.deletes_from_union = new_deletes_from_union;
        None => {
        let first_rev = engine.get_head_rev_id().token();
            if !s.is_empty() {
/// discussion on payload.
        for i in 0..edits {
    TRACE.get_samples_count()
    /// The name to associate with the pid/tid.  Whether it's associated with
    #[test]
            soln.push('b');
                    if !inserts.is_empty() {
        ");
    /// borrowed from the rope.
                }
        }
            }
            },
    // How should we count "column"? Valid choices include:
                                  style_spans, &plan, pristine);
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
/// fn something_else_expensive(value: u32) {
                metadata_sort_index: sort_index,
                //self.end - prev_pos
    }
    }
        let snapshot = trace.samples_cloned_sorted();

                    deletes: deletes.clone(),
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
            }
            engine.undo(undos.clone());
}
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
/// # Arguments
                }
//! under `Engine::edit_rev`, which is considerably simpler than the usual
        let d = engine.delta_rev_head(first_rev);
    {
// Copyright 2018 The xi-editor Authors.
pub fn trace<S, C>(name: S, categories: C)

    }
    -> SampleGuard<'a>
        self.timestamp_us.cmp(&other.timestamp_us)

    #[test]
                continue;
            Assert(1, "arpb".to_owned()),
        // TODO: simplify this through the use of scopeguard crate
    /// Return the offset of the codepoint before `offset`.
    pub fn with_limit_bytes(size: usize) -> Self {
/// assert!("hello world" == String::from(a + b));
        deserializer.deserialize_str(CategoriesTVisitor)
                    } else {
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
        min
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
///
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
    ///
                let (last, rest) = self.sel_regions().split_last().unwrap();
                c.provide_context(&pl, self.pos() - poffset);
}
    pub fn next_codepoint(&mut self) -> Option<char> {

                None => {
    }
}

    }
            Merge(0,1), // the merge from the whiteboard scan
        // insert a character at the beginning
            match modify_selection {
    fn eq(&self, other: &Sample) -> bool {
        }
/// between two utf8 code units that form a code point is considered invalid.
    }
// you may not use this file except in compliance with the License.
/// Find an index before which everything is the same
            let mut sample = self.sample.take().unwrap();
    #[test]
        ];
    fn from_base_units(s: &String, in_base_units: usize) -> usize {

                    sel.add_region(region);
        }
            },
                            ops.push(self.build_update_op("skip", None, n_skip));
    fn gc_scenario(edits: usize, max_undos: usize) {
#[inline]
        ");

        Self {
    //
    }
}
        last_line += if last_col > 0 { 1 } else { 0 };
}

                    filename.to_str().map(|s| s.to_string())
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

        let mut b = String::new();

    ///
/// bytes required to represent the codepoint.
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
}
        };
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
        let first_rev = engine.get_head_rev_id().token();
            HighlightFind { visible } => {
    type Output = Rope;
        let trace = Trace::enabled(Config::default());
        enum RopeDeltaElement_ {

        let new_sel = selection_movement(movement, &self.selection,
/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        assert_eq!(correct, rearranged_inserts);
///
struct FullPriority {
    }
    /// It does undos and gcs in a pattern that can actually happen when using the editor.

    /// The line number is 0-based.
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    /// Return the offset of the codepoint after `offset`.
    /// An iterator over the lines of a rope.
    }
        result


        enum RopeDeltaElement_ {
        }
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.

///
            inner: self.lines_raw(start, end)
        let a = Rope::from("a\r\nb\r\nc");
    fn test_get_sorted_samples() {
    fn prev(s: &String, offset: usize) -> Option<usize> {
        }
/// let a = Rope::from("hello world");

}

    }

                    if !inserts.is_empty() {
    pending_render: bool,
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
            return self.len();
        let b = a.slice(2, 4);
    TRACE.is_enabled()
    }
    FlowInstant,
    /// If the cursor is at the end of the rope, returns the empty string.
                        };
        trace.closure_payload("x", &["test"], || {
///

        let result = closure();
        self.invalidate_selection(text);
        let a = Rope::from("a\nb\nc");
        let first_rev = engine.get_head_rev_id().token();
                                  style_spans, &plan, pristine);
        assert_eq!(Some(2), b.next_codepoint_offset(0));
    /// after an edit is applied, to allow batching with any plugin updates.
    #[test]
                        }

                    None
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
                }
        let mut engine = Engine::new(Rope::from(""));
        self.enabled.store(true, AtomicOrdering::Relaxed);
        let mut samples = vec![
    }
        deletes_from_union = new_deletes_from_union;
                },
            Assert(0, "bdc".to_owned()),
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));

        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            return;
    pub fn new(initial_contents: Rope) -> Engine {
    /// Generate line breaks based on width measurement. Currently batch-mode,
    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {
    /// Starts a drag operation.
pub struct Replace {
/// feature makes the payload a `serde_json::Value` (additionally the library

    }
            text: Rope::default(),
        engine.edit_rev(1, 3, new_head_2, d3);
        assert_eq!(None, a.next_codepoint_offset(10));
pub type TracePayloadT = StrCow;
                        b.add_span(seg.n, seg.our_line_num, line_cache_shadow::ALL_VALID);

                        ops.push(self.build_update_op("copy", None, seg.n));
        };
            }

use interval::Interval;
                                          closure: F, payload: P)
    /// Width in px units, requiring measurement by the front-end.
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            if let GraphemeIncomplete::PreContext(_) = incomp {
            rendered_styles.push(iv.end() as isize - iv.start() as isize);
            soln.push('b');
        let mut c = GraphemeCursor::new(pos, self.total_len(), true);
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        engine.gc(&gc);
    #[test]
        }
    lines: usize,
                }

            match exe_name.clone().file_name() {
            }
    // TODO: maybe refactor this API to take a toggle set
///
            // cursor
    fn bench_trace_block_disabled(b: &mut Bencher) {
        self.push_subseq(&mut b, self_iv.suffix(edit_iv));
        if self.replace_changed {
        ##
        // the smallest values with which it still fails:

            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
        }

        d_builder.delete(Interval::new_closed_open(58, 61));
        deletes: Subset,
        let first_sample_timestamp = all_samples.front()
    Edit {
use serde::ser::{Serialize, Serializer, SerializeStruct, SerializeTupleVariant};
            duration_us: None,
        assert_eq!(2, a.offset_of_line(1));
        self.set_dirty(text);
        self.iter_chunks(0, self.len())
            MetadataType::ProcessLabels {..} => "process_labels",
    fn render_line(&self, client: &Client, styles: &StyleMap,

    #[test]
    ObjectDestroyed,
        assert_eq!(r.len(), r.offset_of_line(2));
    fn next_rev_id(&self) -> RevId {
}
    fn test_get_sorted_samples() {

            SampleEventType::Instant => 'i',
        self.buffer_id
                        },

    }
    #[cfg(feature = "benchmarks")]
                edit: contents.clone()
            self.categories == other.categories &&
#[inline]
    Metadata
                    }

        let script = vec![
}
        samples[0].pid = 1;
    /// The maximum amount of space the tracing data will take up.  This does
// Additional APIs custom to strings
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
                    let full_path = exe_name.into_os_string();
    // println!("shuffle: old={:?} new={:?} old_text={:?} new_text={:?} old_tombstones={:?}",
        use serde::de::Visitor;
        // likely be improved.
/// (also known as [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure))
                    } else {
    fn lines_raw_small() {
        assert_eq!(utf16_units, 17);
                SelRegion::new(start, end)
impl serde::Serialize for CategoriesT {
    /// If `line` is equal to one plus the current number of lines,
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
    fn next_grapheme_offset_with_ris_of_leaf_boundaries() {
            Merge(0,2),
        let new_head_2 = engine.get_head_rev_id().token();
            'M' => SampleEventType::Metadata,
        assert_eq!(snapshot.len(), 9);
        let deletes_from_union = Subset::new(0);
        } else {
                sel
                    filename.to_str().map(|s| s.to_string())
#[macro_use]

    }
            }
        /// revision that were deleted by this revision.

            return None;
    /// The process the sample was captured in.
    {
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
    #[test]
    }
    1

                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
            }
        if let Some(lines) = lines {
    fn arr_eq(&self, other: &Rhs) -> bool;
        assert_eq!(1, expand_by[0].0.priority);
            return false;
        }
        for u in s.chars() {

/// # Examples
            self.set_selection(text, sel);
        if self.find_changed != FindStatusChange::None {
            Merge(0,1),
    }

        let replacement = match self.selection.last() {
            }
            match modify_selection {
    /// An arbitrary payload to associate with the sample.  The type is
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    #[serde(deserialize_with = "deserialize_event_type")]
        {

    /// Get previous codepoint before cursor position, and advance cursor backwards.
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
        match rev.edit {
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
//! which is sufficient for asynchronous plugins that can only have one
            pos -= 1;
    session_id: SessionId,
    /// The state for replacing matches for this view.
        }
        if (b as i8) >= -0x40 {

    pub fn prev_codepoint(&mut self) -> Option<char> {
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
    }
        assert_eq!(Some(2), b.next_codepoint_offset(0));
    }
    #[test]
//
        assert_eq!(0, a.lines_all().count());
        if self.is_enabled() {
        self.enable_config(Config::default());

        // original values this test was created/found with in the UI:
    #[serde(rename = "cat")]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        


    /// tiny it is effectively O(n). This iterator does not allocate.
    }

                self.drag_state = None;
        for find in &mut self.find {

    pub pid: u64,
            Assert(2, "b".to_owned()),
            // I think it's a precondition that this will never be called
    // A colliding session will break merge invariants and the document will start crashing Xi.
    }
    fn is_boundary(s: &String, offset: usize) -> bool {

        samples[1].timestamp_us = 5;
impl<'a> Cursor<'a, RopeInfo> {
        }
        // since character was inserted after gc, editor gcs all undone things
    type L = String;
// Low level functions

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
}
        }
            self.next::<BaseMetric>();
        assert_eq!(trace.get_samples_limit(), 11);
            Move(movement) => self.do_move(text, movement, false),
#[inline]
    /// Tests that merging again when there are no new revisions does nothing
    }

            ModifySelection(movement) => self.do_move(text, movement, true),

/// # Performance
            let matches_only = self.find_changed == FindStatusChange::Matches;
    /// Garbage collection means undo can sometimes need to replay the very first
                         styles: &StyleMap, style_spans: &Spans<Style>,

    fn test_ser_de() {
                RenderTactic::Discard => {
            let a_to_merge = &self.revs[base_index..];
//
            // I think it's a precondition that this will never be called
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
    pub fn enabled(config: Config) -> Self {

                        s = &s[..s.len() - 1];
                        deletes_from_union = deletes_from_union.transform_union(inserts);
use std::borrow::Cow;
    #[cfg(feature = "benchmarks")]
#[cfg(test)]

    /// tiny it is effectively O(n). This iterator does not allocate.
        count_utf16_code_units(&s[..in_base_units])
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.
        for i in 1..(s1.len() * 3) {
        let trace = Trace::enabled(Config::with_limit_count(10));
    #[bench]
        engine.undo([2].iter().cloned().collect());
    type Err = ParseError;
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);

            inner: self.iter_chunks(start, end),
        in_measured_units
            highlight_find: false,
    /// part of the initial contents since any two `Engine`s need a common
        memchr(b'\n', &s.as_bytes()[offset..])

        assert_eq!(utf16_units, 17);
                        deletes_from_union = deletes_from_union.transform_expand(inserts);
            Gesture { line, col, ty } =>
    pub fn next_codepoint(&mut self) -> Option<char> {
        for i in 0..edits {
    type Item = &'a str;
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
    }
impl<'de> Deserialize<'de> for Delta<RopeInfo> {
    #[cfg(feature = "benchmarks")]
                name, categories, payload, SampleEventType::DurationBegin)),
            lines: count_newlines(s),
        use self::MergeTestOp::*;
        let ix = style_map.add(style);
            ix = sel_end as isize;
            SelectionIntoLines => self.do_split_selection_into_lines(text),
            find.set_hls_dirty(false)
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            engine.edit_rev(0, 0, first_rev, delta);
        }, to_payload("test_get_sorted_samples"));
    }

    /// The line ending is stripped from the resulting string. The final line ending
            Assert(1, "zpbj".to_owned()),
    fn render_line(&self, client: &Client, styles: &StyleMap,
    deletes: Subset,
            Some(right_str)
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        if !new_inserts.is_empty() {

    fn bench_get_tid(b: &mut Bencher) {
    /// Move the selection by the given movement. Return value is the offset of
                breaks.convert_metrics::<BreaksBaseMetric, BreaksMetric>(offset)
    pub fn get_samples_limit(&self) -> usize {
            't' => SampleEventType::FlowInstant,
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },
                    // of which undos were used to compute deletes_from_union in edits may be lost.
    ///
            // selection with interior
    use interval::Interval;
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        let len = match first_rev.edit {
            Click(MouseAction { line, column, flags, click_count }) => {
        assert_eq!("#-####-", &subset_str);
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
    }

        a.push('\n');

        }, to_payload("test_get_sorted_samples"));
        }
        let mut cursor = Cursor::new(self, offset);
    fn bench_trace_closure(b: &mut Bencher) {
        MergeTestState::new(3).run_script(&script[..]);
                            edit: Edit {
        } else {
    #[inline]
    }
    }
                    }
            first_line: 0,
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
            to_undo.insert(i+1);

///
    fn line_of_offset_panic() {
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
{


    /// When was the sample started.
            let splitpoint = if s.len() > MAX_LEAF {
    #[test]
/// associated performance hit across the board for turning it on).
        }
    for op in b_new {

                client.replace_status(self.view_id, &json!(replace))
            );
// Licensed under the Apache License, Version 2.0 (the "License");
            trace: None,
                        gc_dels = gc_dels.transform_expand(inserts);
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },

        let mut b = String::new();
                        gc_dels = gc_dels.transform_expand(inserts);
    fn test_samples_pulse() {
    /// Time complexity: technically O(n log n), but the constant factor is so
            std::thread::sleep(std::time::Duration::new(0, 1000));
        assert_eq!(4, a.offset_of_line(2));
        result
    /// controlled by features (default string).
    /// The return type is a `Cow<str>`, and in most cases the lines are slices
    #[allow(dead_code)]
                splitpoint -= 1;
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
        // spam cmd+z until the available undo history is exhausted
            }
    }
            args: Some(SampleArgs {
                match *other {
        }

///

        (self.session1, self.session2)
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
            undo_group: 0,
    #[bench]
    //
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
            Merge(0,1),
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
}
        ).min_by_key(|x| {
            std::thread::sleep(std::time::Duration::new(0, 1000));
        ]);

        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
        });

        Self::with_limit_count(size / size_of::<Sample>())
    fn do_cancel(&mut self, text: &Rope) {
/// fn something_expensive() -> u32 {
            }
    /// # Panics
    /// 96 bits which is more than sufficient for this to never happen.
    ///
        assert_eq!(4, a.offset_of_line(2));
            // The deletes are already after our inserts, but we need to include the other inserts
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
    #[derive(Debug)]

    /// point. Used to optimize undo to not look further back.
    // TODO: replace this with a version of `lines` that accepts a range

/// # use xi_rope::Rope;


}
            }
            Merge(0,1), // the merge from the whiteboard scan
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();

            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        d.insert(StrCow::from("test"), StrCow::from(value));
        if self.scroll_to.is_none() && wrap {
                    }
categories_from_constant_array!(0);
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        trace.record(guard.sample.as_ref().unwrap().clone());
// distributed under the License is distributed on an "AS IS" BASIS,
                    let sel_start = cursor.pos();
        });
    /// description for the invariant.

        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());


        let mut to_undo = BTreeSet::new();
                }
        let mut engine = Engine::new(Rope::from(TEST_STR));
                Some(offset)
            tid: sys_tid::current_tid().unwrap(),

    #[test]
            Merge(1,2),
/// rather than just this processe's samples).
            let next_chunk = self.inner.next();
    #[test]
    #[test]
pub type Rope = Node<RopeInfo>;
        assert_eq!(snapshot[2].name, "x");
///     0
                    sel.add_region(region);
    /// state and new offset.
                           pristine: bool)
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
            timestamp_us: ns_to_us(start_ns),
                serializer.serialize_newtype_variant("DeltaElement", 1,
    fn set_selection_raw(&mut self, text: &Rope, sel: Selection) {
    fn thread_name() -> Option<StrCow> {
    tombstones: Rope,
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
pub type TracePayloadT = serde_json::Value;
    rev_id_counter: u32,

                None => {
                      delta: &Delta<RopeInfo>, client: &Client,
    }

        where S: Into<StrCow>, C: Into<CategoriesT>
        // send updated find status only if there have been changes
        gc_scenario(35,20);
        thread.name().map(|ref s| to_cow_str(s.to_string()))
        let a = Rope::from("");
    /// The maximum amount of space the tracing data will take up.  This does
            deletes: Subset::new(0),
    pub(crate) fn unset_find(&mut self) {
    /// This function does not perform any scrolling.
            let first_rev = engine.get_head_rev_id().token();
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
            Some(offset + len_utf8_from_first_byte(b))
            sample.event_type = SampleEventType::DurationEnd;
                el.serialize_field(start)?;
        let col = col as usize;

            let mut len = 1;
        result
/// ```
/// as opposed to thousands of revisions.
        self.text = new_text;
        Ok(b.build())
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("c"), TEST_STR.len());
use std::borrow::Cow;
        ");
            let mut peers = Vec::with_capacity(count);
    /// assumed to be forward).
            pos -= 1;
        where S: Into<StrCow>, C: Into<CategoriesT>
        use self::MergeTestOp::*;
            tombstones: Rope::default(),
// Copyright 2016 The xi-editor Authors.
/// typing a paragraph) will be combined into a single segment in a transform
        let expand_by = compute_transforms(revs);
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
    }
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        }
{
        Self::with_limit_bytes(1 * 1024 * 1024)
            args: Some(SampleArgs {
///

            trace.instant("something", &[]);
        let first_line = self.line_of_offset(text, start);
    let mut s = Subset::new(head_len);
                    if seg.validity == line_cache_shadow::ALL_VALID {
    // even worth the code complexity.
    fn arr_eq(&self, other: &[&'static str]) -> bool {
                if self.fragment.is_empty() {
                return false;
        assert_eq!(snapshot[0].name, "process_name");
            }
    }
        }).collect()
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
        }

/// With `json_payload` feature:
    pub fn instant<S, C>(&self, name: S, categories: C)
    /// # Panics
            let not_in_tombstones = self.deletes_from_union.complement();
    fn accumulate(&mut self, other: &Self) {
    ($num_args: expr) => {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
                    // are empty, could send update removing the cursor.
    /// fine-grained in the case of multiple cursors, but we also want this
                if (flags & FLAG_SELECT) != 0 {
                match *other {
    }
    out
            let start = self.line_of_offset(last_text, iv.start());
    }
            drag_state: None,
        let script = vec![
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
        use self::MergeTestOp::*;
    /// Imagine a "union string" that contained all the characters ever
/// # Performance
        let mut selection = match multi_select {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
}
            let mut len = 1;
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
    #[test]
        b if b < 0xe0 => 2,
                if (flags & FLAG_SELECT) != 0 {
    /// finer grain invalidation.

                        deletes_from_union
    /// Garbage collection means undo can sometimes need to replay the very first
            if let Some(pos) = pos { start_of_line.set(pos) }
            match c.edit {

        match rev.edit {
#[macro_use]

        let res = find_common(&a, &b);

    pub fn set_dirty(&mut self, text: &Rope) {
        debug_subsets(&rearranged_inserts);
    /// The incrementing revision number counter for this session used for `RevId`s
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
        MergeTestState::new(3).run_script(&script[..]);
    }
            SampleEventType::AsyncInstant => 'n',

            if let Some(replace) = self.get_replace() {

        // since one of the two deletes was gc'd this should undo the one that wasn't
    AsyncInstant,
                    inserts: ins,
    {
        // original values this test was created/found with in the UI:
        ];
                undo_group,
        });


        let script = vec![
        // position after 'f' in four
        let first_rev = engine.get_head_rev_id().token();
        for i in ((edits-max_undos)..edits).rev() {
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        samples.sort_unstable();

    pub fn scroll_height(&self) -> usize {
                        if self.undone_groups.contains(undo_group) {
    }
        // ensure that when the samples are sorted by time they come out in a
// utility function to clamp a value within the given range
impl<T: AsRef<str>> From<T> for Rope {
        }
        deletes_from_union
    fn undo_4() {
impl Serialize for Rope {
        assert_eq!(0, a.lines_all().count());
            find_changed: FindStatusChange::None,
        }
    #[test]
use movement::{Movement, region_movement, selection_movement};
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
}
            }
            Some(offset + len_utf8_from_first_byte(b))
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
        impl From<RopeDeltaElement_> for DeltaElement<RopeInfo> {
            duration_us: None,
    #[serde(skip_serializing)]
        debug_subsets(&rebased_inserts);
            AddSelectionAbove =>
                      delta: &Delta<RopeInfo>, client: &Client,
#[derive(Clone, Copy)]
        for region in self.selection.regions_in_range(start_pos, pos) {
}
            to_payload("some description of the trace"))));
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            //let prev_pos = self.cursor.pos();

    pub fn get_head(&self) -> &Rope {
/// could trigger incorrect behavior if they collide, so u64 is safe.
        self.do_set_replace(replacement, false);
                RenderTactic::Render => {
fn initial_revision_counter() -> u32 {
    #[cfg(feature = "benchmarks")]
    /// height of visible portion

    where S: Into<StrCow>, C: Into<CategoriesT>
        samples
        assert_eq!("herald", String::from(a));
        engine.gc(&to_undo);

    // TODO: insert from keyboard or input method shouldn't break undo group,
/// assert_eq!("ello wor", String::from(&b));
        len
    }
        }
use std::ops::Range;

        None => {

        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
    }
    fn edit_rev_undo() {
                    None => return if result.is_empty() { None } else { Some(result) }

                SelRegion::new(start, end)
    offset: usize,
        for i in 0..self.len() {
/// ```
            Merge(1,0),
pub type SessionId = (u64, u32);
}
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
    /// Selects a specific range (eg. when the user performs SHIFT + click).
            }
    /// the same even if it is rebased or merged between devices.
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
}
    ///
        let (mut l, mut offset) = self.get_leaf()?;
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
/// ```rust
        let (metadata_name, sort_index) = meta.consume();
    }
    }
///
    pub timestamp_us: u64,
    fn to_payload(value: &'static str) -> TracePayloadT {
        {
    Bytes(usize),
            Assert(0, "acpbdj".to_owned()),
    TRACE.enable();
                c.provide_context(&pl, self.pos() - poffset);
                    if seg.validity == line_cache_shadow::ALL_VALID {

        assert_eq!(0, a.lines_all().count());
                MetadataType::ProcessName {name: exe_name},
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
///
                        MetadataType::ThreadName { name: thread_name.to_string() },
    /// indicates a search for the next occurrence past the end of the file.
/// # use xi_rope::Rope;
                        _ => break
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
    #[serde(skip_serializing_if = "Option::is_none")]
        b.iter(|| black_box(trace.instant_payload(
            edit: Contents::Edit {
        ----
        // TODO: simplify this through the use of scopeguard crate
    pub fn max_samples(&self) -> usize {
        let first_rev = engine.get_head_rev_id().token();
use std;
/// that sorted would be prohibitively expensive.
                    })
    pub(crate) fn get_replace(&self) -> Option<Replace> {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        );
                selections.push((sel_start_ix, sel_end_ix));
impl Serialize for DeltaElement<RopeInfo> {
            // I think it's a precondition that this will never be called
                self.find_changed = FindStatusChange::All;
/// fn something_else_expensive() {
                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
    /// inserted, including the ones that were later deleted, in the locations
    }
///


    /// and currently in a debugging state.
        struct CategoriesTVisitor;
/// Find an index before which everything is the same
            match memchr(b'\n', self.fragment.as_bytes()) {
    1
///
            GestureType::RangeSelect => self.select_range(text, offset),
}
                                  style_spans, &plan, pristine);
/// ```
            Merge(0,2), Merge(1, 2),

// you may not use this file except in compliance with the License.
            SampleEventType::DurationBegin => 'B',
        self.scroll_to = Some(end);
        }
impl<'a> Iterator for ByteIter<'a> {
    }
        assert_eq!(0, a.offset_of_line(0));
                } else {
    fn bench_trace_block_disabled(b: &mut Bencher) {
    fn undo() {
        assert_eq!(Some(6), a.prev_codepoint_offset(10));
            ModifySelection(movement) => self.do_move(text, movement, true),
//     http://www.apache.org/licenses/LICENSE-2.0
        // if we have active find highlights, we don't collapse selections

        }, to_payload("test_get_sorted_samples"));
            .find(|&(_, ref rev)| rev.rev_id == rev_id)

        assert!(a != empty);

            let mut len = 1;

/// Stores the relevant data about a sample for later serialization.
            let not_in_tombstones = self.deletes_from_union.complement();
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
                    if !deletes.is_empty() {

        /// The subset of the characters of the union string from after this
            "styles": styles,
    /// borrowed from the rope.
        let region = SelRegion::caret(offset);
    fn prev_codepoint_offset_small() {
                            rendered_lines.push(line);

    /// how many times it has been deleted, so if a character is deleted twice
        }
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
            },
                                     categories: C,
        self.set_selection_raw(text, sel.into());
        // rebase delta to be on the base_rev union instead of the text

        assert_eq!(Some(5), b.prev_codepoint_offset(9));
    /// All the selection regions other than the one being dragged.
    type Output = Rope;
        assert_eq!(snapshot[0].name, "process_name");
        use self::MergeTestOp::*;
/// A flag used to indicate when legacy actions should modify selections
    fn next(&mut self) -> Option<Cow<'a, str>> {
    pub fn scroll_height(&self) -> usize {
        engine.edit_rev(1, 3, new_head_2, d3);
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
            find.unset();
}
            ModifySelection(movement) => self.do_move(text, movement, true),
            Sample::new_instant("local pid", &[], None),
            if (c > start_pos && c < pos) ||

    #[allow(dead_code)]
        }

                        sample.tid));
///
        let inserts_2 = parse_subset_list("
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    fn measure(info: &RopeInfo, _: usize) -> usize {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
    /// The session ID used to create new `RevId`s for edits made on this device
                let (pl, poffset) = self.prev_leaf()?;
impl<'a> Iterator for ChunkIter<'a> {


                        Cow::Owned(un_deleted.transform_shrink(inserts))
    #[inline]
    }

        match self.breaks {

    TRACE.get_samples_count()
                self.set_selection_raw(text, selection);
mod sys_tid;
            self.first_line = line - (self.height - 1);
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

            self.categories == other.categories &&
    #[test]
            self.record(Sample::new_instant(name, categories, Some(payload.into())));
            self.event_type == other.event_type &&
        ];
        }
        assert_eq!(snapshot[7].name, "z");
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
    /// Constructs a Duration sample.  For use via xi_trace::closure.
        assert_eq!(1, a.line_of_offset(2));
        }
                        Ok(s) => Some(s),
        cursor.prev::<BaseMetric>()
    }
    /// The thread the sample was captured on.  Omitted for Metadata events that
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
        Self {
        let chars_left = (edits-max_undos)+1;
            Merge(0,1), // the merge from the whiteboard scan

            find.set_hls_dirty(false)
        if !self.is_enabled() {

            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
                SelectionModifier::Add => {
}
        assert_eq!(2, b.offset_of_line(1));
                    }
        let first_rev = engine.get_head_rev_id().token();
        assert_eq!(rope.offset_of_line(1), 3);


    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
/// State required to resolve a drag gesture into a selection.
    edit: Contents,

        let expand_by = compute_transforms(revs);
                                gc_dels = gc_dels.transform_union(inserts);
                },
    let mut out = Vec::with_capacity(b_new.len());


            Assert(2, "ab".to_owned()),
        use self::MergeTestOp::*;
    fn do_selection_for_replace(&mut self, text: &Rope) {
        }

    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
                if rev.max_undo_so_far < lowest_group {
            Some(ref breaks) => {
    /// Return the line number corresponding to the byte index `offset`.
        if before {
            Sample::new_instant("remote pid", &[], None)];
            Assert(0, "acbd".to_owned()),
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,


}


        trace.disable();
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        });
        for &(sel_start, sel_end) in hls {
use self::Contents::*;

}
    // partly because the reachability calculation would become more complicated (a

extern crate serde;
    }
        } else {
                RenderTactic::Preserve => {
    use super::*;
        // Rust is unlikely to break the property that this hash is strongly collision-resistant
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
                        MetadataType::ThreadName { name: thread_name.to_string() },
            lines: count_newlines(s),
    }
                                                          new_len, col),
        for mut find in self.find.iter_mut() {
    }
        deletes: Subset,
                self.set_selection(text, SelRegion::caret(offset));
use client::Client;

use std::borrow::Cow;
    AsyncEnd,

                         styles: &StyleMap, style_spans: &Spans<Style>,
    // since undo and gc replay history with transforms, we need an empty set
            SampleEventType::AsyncInstant => 'n',

}
    /// # Panics
                        self.revs.push(Revision {
                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
        assert_eq!(Some(5), b.next_codepoint_offset(2));

        }
    pub fn offset_of_line(&self, text: &Rope, line: usize) -> usize {
    }
#[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
                    // TODO: update (rather than re-render) in cases of text valid
    /// return if a delete is un-done or an insert is re- done.
use word_boundaries::WordCursor;
                self.add_selection_by_movement(text, Movement::Down),

        let trace = Trace::enabled(Config::with_limit_count(10));
    ///
// Licensed under the Apache License, Version 2.0 (the "License");
        assert_eq!(0, b.offset_of_line(0));
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
        let start = time::precise_time_ns();

        /// along with the newline that triggered it.
enum Contents {
        let edit_iv = Interval::new_closed_open(start, end);

            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
                pos = leaf_offset + nl.len();
 //additional cursor features
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    }
        if self.breaks.is_some() {
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
}

        self.cursor.next_leaf();
        let mut b = String::new();
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    /// The name to associate with the pid/tid.  Whether it's associated with
pub type TracePayloadT = serde_json::Value;
            sel
        engine.edit_rev(1, 1, first_rev, d1.clone());
        let full_priority = FullPriority { priority, session_id: rev_id.session_id() };
    pub fn get_samples_count(&self) -> usize {
        Self {

extern crate serde_json;

    /// The maximum number of bytes the tracing data should take up.  This limit
        }
        }
/// # Examples

        let mut next_boundary = c.next_boundary(&l, leaf_offset);
        assert_eq!(snapshot[0].name, "process_name");
        }).collect();
        count_newlines(&s[..in_base_units])
    pub event_type: SampleEventType,
        --#--
//
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),

        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
        // expand by each in expand_by
        let a = Rope::from("a\nb\nc");

}
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        let new_deletes_from_union = {
            match *op {
        assert_eq!(utf16_units, 11);
                (c == pos && c == text.len() && self.line_of_offset(text, c) == line_num)
    #[test]
    pub payload: Option<TracePayloadT>,
                        s = &s[..s.len() - 1];
            sel.add_region(new_region);
                        if !last_selection.is_caret() {
        rope.line_of_offset(20);
        result
        let script = vec![
        self.find_changed = FindStatusChange::Matches;
        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
    ///
        let line = self.line_of_offset(text, end);

categories_from_constant_array!(0);
            Some(region) => {
        #---
        assert_eq!(trace.samples_cloned_unsorted().len(), 3);
/// Usage of static strings is encouraged for best performance to avoid copies.
        // set last selection or word under current cursor as search query
    }



        let mut selection = Selection::new();
    /// Exposed for unit tests only.
            'n' => SampleEventType::AsyncInstant,
        assert_eq!(None, b.next_codepoint_offset(9));
    ///
    }
#[derive(Clone, Copy)]
    }
/// }
        };
        let head = engine.get_head_rev_id().token();
    ns / 1000

pub struct Sample {
        self.sample_limit_count
/// See `trace_payload` for a more complete discussion.
        min
        ];
            args: Some(SampleArgs {
        undo_group: usize,

    fn deletes_from_cur_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
        // TODO: simplify this through the use of scopeguard crate
    }
            enabled: AtomicBool::new(true),
}

                    let full_priority = FullPriority { priority, session_id: r.rev_id.session_id() };
            Edit { ei: 1, p: 3, u: 1, d: parse_delta("--efg!") },
                    if invert_undos {
        self.view_id
        // find the lowest toggled undo group number
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
                    s = inserts.transform_union(&s);
        inserts: Subset,

    }
// Copyright 2018 The xi-editor Authors.

    #[test]
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
    1
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
        assert_eq!(trace.get_samples_count(), 0);
        #------
            find.unset();
    /// Set the selection to a new value.
        // insert `edits` letter "b"s in separate undo groups
}
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
    }
                    }
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
// should make this generic, but most leaf types aren't going to be sliceable
        }
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    pub fn lines_all(&self) -> Lines {
        ];
use std::sync::Mutex;
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        let trace = Trace::enabled(Config::default());
}
            thread_name: Sample::thread_name(),
            if self[i] != other[i] {
mod tests {
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
    fn arr_eq(&self, other: &Rhs) -> bool;
    find_changed: FindStatusChange,
            Assert(0, "adc".to_owned()),
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),

            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
}
        as_vec.extend(all_samples.iter().cloned());
                // should be removed in favor of do_gesture
    pub fn lines(&self, start: usize, end: usize) -> Lines {
                self.run_op(op);
            self.first_line = line - (self.height - 1);
        }

                    // of which undos were used to compute deletes_from_union in edits may be lost.
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
    }
                        // no need to un-delete undone inserts since we'll just shrink them out
            self.find.push(Find::new());
        };
}
            let splitpoint = find_leaf_split_for_merge(self);

    }
        assert_eq!(snapshot[3].name, "y");
        // TODO: may make this method take the iv directly
        for &(trans_priority, ref trans_inserts) in &expand_by {
                                gc_dels = gc_dels.transform_expand(inserts);
                    };
        // original values this test was created/found with in the UI:
        }
    fn eq(&self, other: &Sample) -> bool {
    fn bench_trace_closure(b: &mut Bencher) {
                // merge logic.
                self.add_selection_by_movement(text, Movement::Up),
    fn next_grapheme_offset() {
        let mut offset = 0;
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
    #[serde(rename = "xi_payload")]
        }


fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>
    FlowInstant,
        engine.edit_rev(1, 2, first_rev, d1.clone());



        assert_eq!(snapshot[5].name, "z");
                        &mut rest[bi - ai - 1]
                        Some(gc_dels.transform_shrink(&inserts))
        next_boundary.unwrap_or(None)
        ChunkIter {
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
//

        }
        // We add selection after find because we want it to be preferred if the
        let a = Rope::from("a");
    fn gc_5() {
/// Usage of static strings is encouraged for best performance to avoid copies.
        let mut all_samples = self.samples.lock().unwrap();
                                                        style_spans, line_num);
}
            Merge(0,2), Merge(1, 2),
        }
        assert_eq!("1234567", String::from(r));
                    self.do_gesture(text, line, column, GestureType::PointSelect)
        let trace = Trace::enabled(Config::with_limit_count(10));
                Contents::Undo { .. } => panic!(),
        }

        let mut selection = match multi_select {
        match *self {
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
            if let Edit { priority, ref inserts, .. } = r.edit {
            thread_name: Sample::thread_name(),
        rope.offset_of_line(5);

    /// Returns a tuple of a new `Revision` representing the edit based on the
    #[test]
}
        match rev.edit {
        }
}
/// a.edit_str(1, 9, "era");
pub fn samples_len() -> usize {
            };
        let utf8_offset = 9;
    pub fn is_equivalent_revision(&self, base_rev: RevId, other_rev: RevId) -> bool {
    -> SampleGuard<'a>
        let mut a = Rope::from("hello world");
            lines: 0,
            Assert(0, "zacpb".to_owned()),
            SampleEventType::ObjectDestroyed => 'D',
}
/// # Arguments
        if let Some((l, offset)) = self.get_leaf() {
            's' => SampleEventType::FlowStart,
        self.drag_state = None;

    /// Returns the byte offset corresponding to the line `line`.
            els: Vec<RopeDeltaElement_>,
// distributed under the License is distributed on an "AS IS" BASIS,
///
    }
        if self.find.is_empty() {
    /// The process the sample was captured in.
            'O' => SampleEventType::ObjectSnapshot,
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
    /// Tracks whether this view has been scheduled to render.
                //// if we aren't on a boundary we can't be at the end of the chunk
                None => {
        // insert character at end, when this test was added, it panic'd here
    fn prev_grapheme_offset() {
                            edit: Edit {
// Low level functions
    wrap_col: WrapWidth,
        let snapshot = trace.samples_cloned_unsorted();

/// stored as tracing could still be enabled but set with a limit of 0.
    }
    }

                    self.do_gesture(text, line, column, GestureType::PointSelect)

/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
    use std::collections::BTreeSet;
    /// finer grain invalidation.
                }
    fn basic_rev(i: usize) -> RevId {

            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
        if !before {
#[cfg(feature = "benchmarks")]
            AssertMaxUndoSoFar(1,3),
            Cancel => self.do_cancel(text),
    #[test]
    #[serde(rename = "cat")]
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {
                        }
        use serde::de::Visitor;
                    inserts: ins,
    /// What kind of sample this is.
// Copyright 2016 The xi-editor Authors.
//     http://www.apache.org/licenses/LICENSE-2.0
/// std::mem::drop(trace_guard); // finalize explicitly if


            SampleGuard::new(&self, name, categories, Some(payload.into()))
            sel.add_region(region);
        a.push('\n');
    }
            result["cursor"] = json!(cursors);
        }
    /// the pid or the tid depends on the name of the event
        };
    /// part of the initial contents since any two `Engine`s need a common
    #[test]
            Some(offset - len)
                        }
            }),
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
    fn from_str(s: &str) -> Result<Rope, Self::Err> {

    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
        engine.edit_rev(1, 1, initial_rev, d1.clone());


                        first_sample_timestamp,
    assert!(a[0].rev_id == b[0].rev_id);
    #[serde(deserialize_with = "deserialize_event_type")]
///
/// than a string that needs to be copied (or ~4.5x slower than a static string)
    #[test]
            max: offset,
            Assert(1, "arpbj".to_owned()),
            }
///
                                inserts,
/// Usage of static strings is encouraged for best performance to avoid copies.

        ");
            //}
            tombstones: Rope::default(),

        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
                    }
    }
                    self.fragment = &self.fragment[i + 1 ..];
        trace.instant("2", &["test"]);
use std::mem::size_of;
            //self.cursor.set(self.end);
    pub(crate) fn get_view_id(&self) -> ViewId {
#[must_use]
                        inserts: transformed_inserts,
            }
        if let Some(last) = self.revs.last() {
    /// All the selection regions other than the one being dragged.

    /// Move the selection by the given movement. Return value is the offset of
        // rebase the delta to be on the head union instead of the base_rev union
                            if !inserts.is_empty() {
///
    fn append_large() {
                }
        if !selection.is_empty() { // todo: invalidate so that nothing selected accidentally replaced
        View {

            &rebased_deletes_from_union, &new_deletes_from_union);
            a.push('a');
        });
        where S: Into<StrCow>, C: Into<CategoriesT>
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        match ty {
        }
        assert_eq!(utf16_units, 11);
        }
    fn test_samples_block() {
    /// a point that should be scrolled into view.
    }
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        trace.closure_payload("x", &["test"], || {
//! conceptually represents the current text and all edit history for that
        // the smallest values with which it still fails:
        ChunkIter {


        let iv = Interval::new_closed_open(start, end);
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
impl Serialize for Rope {
            // TODO: on double or triple click, quantize offset to requested granularity.
    // TODO: maybe refactor this API to take a toggle set
        b.set_dirty(true);
        let a = Rope::from("a\nb\n");
        self.revs.push(new_rev);
// you may not use this file except in compliance with the License.
            Assert(0, "acrbdz".to_owned()),
                Ok(CategoriesT::DynamicArray(categories))
        assert_eq!(utf16_units, 9);
/// });
    }
        for &(sel_start, sel_end) in hls {
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
    #[serde(rename = "name")]
            None
        for r in &self.revs[ix + 1..] {
                return None;
            name: name.into(),
            duration_us: None,
    // transform representing the characters added by common revisions after a point.
pub struct Replace {
/// Measured unit is newline amount.
        assert!(self.current.is_some());
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
        /// together. For example, an auto-indent insertion would be un-done
    where S: Into<StrCow>, C: Into<CategoriesT>
            event_type: event_type,
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
                WrapWidth::None => (),
            lines: 0,

            SampleEventType::FlowStart => 's',
        let correct = parse_subset_list("
        let script = vec![
        }
/// assert_eq!("herald", String::from(a));
        use self::MergeTestOp::*;
                return;
    }
use std::borrow::Cow;
        self.text = new_text;
        ");


            .map(|(i, _)| i)
struct FullPriority {
                    }
        // interior of first line should be first line
    /// of individual region movements become carets.
    }
            rebase(expand_by, b_deltas, self.text.clone(), self.tombstones.clone(), self.deletes_from_union.clone(), max_undo)

}
        *self = b.build();

        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    #[serde(rename = "cat")]
// Licensed under the Apache License, Version 2.0 (the "License");
    #[bench]
            std::thread::sleep(std::time::Duration::new(0, 1000));

        assert_eq!(rope.offset_of_line(4), rope.len());
fn find_leaf_split_for_bulk(s: &str) -> usize {
/// {
        self.text = new_text;
        } else {
        let tid = all_samples.front()
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());

        trace.instant("4", &["test"]);
        }
    }
use std::collections::BTreeSet;
    pub metadata_name: Option<StrCow>,

                    } else if !inserts.is_empty() {
            Drag(MouseAction { line, column, .. }) =>
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
            return None;
    }
    #[test]
        self.find_changed = FindStatusChange::Matches;
        first_line..(last_line + 1)
            let _ = trace.block("test_samples_block", &["test"]);
            categories: Some(categories.into()),
        a.push('\n');
        for i in 0..edits {
            scroll_to: Some(0),
        let new_pos = self.pos() + (end - offset);
                } else {
                selection.add_region(occurrence);
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
                    }
            sel.add_region(new_region);
/// The payload associated with any sample is by default a string but may be
            'E' => SampleEventType::DurationEnd,
        samples[0].pid = 1;
                let (pl, poffset) = self.prev_leaf()?;
            if i >= max_undos {

                out.push(DeltaOp {
                             client: &Client, style_spans: &Spans<Style>)
    #[test]
            }
    }
            if (c > start_pos && c < pos) ||
        assert_eq!(1, expand_by[0].0.priority);
            sel.add_region(new_region);
/// # use xi_rope::Rope;
                    None => return if result.is_empty() { None } else { Some(result) }
                },
    ///
    }
            Assert(0, "cbd".to_owned()),
    /// update cycle. This should be a last resort, updates should generally cause
        b.push_str(s);

        assert_eq!(0, b.line_of_offset(1));
        let mut update = json!({
    buffer_id: BufferId,


        let mut d = TracePayloadT::with_capacity(1);
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
        assert!(a != empty);
    fn next(s: &String, offset: usize) -> Option<usize> {
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,

        match rev.edit {
    undo_group: usize,
    }
        }
        match cmd {
    }
        (line, offset - self.offset_of_line(text, line))
            base_sel: selection.clone(),
    ///
    }
    /// I have a scanned whiteboard diagram of doing this merge by hand, good for reference
        assert_eq!(trace.get_samples_count(), 0);
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
    }
            Merge(0,1),
///
        // creation) is:
                    if s.ends_with('\r') {

                },
        let script = vec![
        for _i in 0..50 {
                metadata_sort_index: None,
    #[cfg(feature = "benchmarks")]
    fn prev(s: &String, offset: usize) -> Option<usize> {
    fn merge_associative() {
        // x, a, y, b, z, c
            }
            }
            Some(offset - len)
        let replacement = match self.selection.last() {
mod tests {
            find.find_status(matches_only)
                        Ok(s) => Some(s),
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
                peers.push(peer);
            None
        ];
    /// Determine whether `offset` lies on a codepoint boundary.

    undone_groups: BTreeSet<usize>,  // set of undo_group id's
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
    }
            Assert(0, "b".to_owned()),
    }
        self.wrap_col = WrapWidth::Width(self.size.width);
/// ```
            let b = s.as_bytes()[offset];
    #[test]
        if offset == 0 {
        assert_eq!("a", String::from(&tombstones_2));
            find: Vec::new(),

    #[inline]
        assert_eq!(Some(2), b.next_codepoint_offset(0));
            if Some(priority) == last_priority {
        trace.instant("5", &["test"]);
    /// When was the sample started.
use std::cmp::{min,max};
/// ```rust
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        self.rev_id_counter += 1;
            rendered_styles.push((sel_start as isize) - ix);
    #[serde(rename = "cat")]
use std::collections::BTreeSet;
/// # use xi_rope::Rope;
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    }
/// an argument.
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
//


        assert_eq!(5, a.offset_of_line(3));
        Ok(Rope::from(s))
    // https://github.com/serde-rs/serde/issues/1189 is fixed.
                self.run_op(op);
            self.breaks = None
impl From<Vec<String>> for CategoriesT {
    #[test]

    /// the same even if it is rebased or merged between devices.
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
        if self.len() != other.len() {
        let first_rev = engine.get_head_rev_id().token();
        match self.breaks {
trait StringArrayEq<Rhs: ?Sized = Self> {
/// discussion on payload.
        self.hash(&mut hasher);
            edit: Contents::Edit {
                              categories: C,
//
        let mut revs_3 = basic_insert_ops(inserts_3, 2);

    #[test]
            offset = text.len();
    #[test]
        LinesRaw {
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
    pub fn enabled(config: Config) -> Self {
            // to replicate whiteboard, z must be before a tombstone
        b.iter(|| black_box(time::precise_time_ns()));
}
/// });
    None,
                        });
                            }
/// However, anything that can be converted into a Cow string can be passed as
            },
pub type Rope = Node<RopeInfo>;
        let new_head_2 = engine.get_head_rev_id().token();
impl PartialEq for CategoriesT {
    fn bench_trace_instant(b: &mut Bencher) {

        for op in &delta_ops {
        assert_eq!(Some(5), b.next_codepoint_offset(2));
///

            let splitpoint = find_leaf_split_for_merge(self);

    }

                Some(i) => {
    /// Move the selection by the given movement. Return value is the offset of
            SampleEventType::FlowEnd => 'f',
                    self.fragment = "";

            buffer_id: buffer_id,
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    }
    // use own breaks if present, or text if not (no line wrapping)
    fn hash<H: Hasher>(&self, state: &mut H) {
                if !inserts.is_empty() {
    }

        self.view_id
/// fn something_expensive() -> u32 {
        self.lines += other.lines;
        }
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
        let is_base = base_revs.contains(&rev.rev_id);
    out
        fn run_op(&mut self, op: &MergeTestOp) {

            if let Edit { ref inserts, .. } = rev.edit {
        assert_eq!(rope.line_of_offset(3), 1);
    //     old_deletes_from_union, new_deletes_from_union, text, new_text, tombstones);
                    let (start, end) = self.peers.split_at_mut(ai);
            Merge(3, 0), Merge(4, 1), Merge(5, 2),

    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
        }
    #[serde(skip_serializing_if = "Option::is_none")]
}
        while offset < l.len() && !l.is_char_boundary(offset) {
                }
            let new_trans_inserts = trans_inserts.transform_expand(&inserted);
            Some(ref breaks) => {
    }
            Merge(0,2), Merge(1, 2), Merge(3, 2),
        }
        self.first_line = first;
            self.record(Sample::new_instant(name, categories, None));
    {
    fn test_trace_disabled() {
            } else {
pub struct Utf16CodeUnitsMetric(usize);
        d_builder.delete(Interval::new_closed_open(10, 36));

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        if let Some((l, offset)) = self.get_leaf() {
    pub fn sel_regions(&self) -> &[SelRegion] {
                leaf_offset = self.pos() - poffset;
        if offset == s.len() {

        let a = Rope::from("a\nb\nc");
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
impl PartialOrd for Sample {
    fn arr_eq(&self, other: &Rhs) -> bool;
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
use std::collections::HashMap;
        assert!(r.clone().slice(a.len(), r.len()) == b_rope);
    #[test]
    revs: Vec<Revision>,
                    if s.ends_with('\r') {
    pub fn max_undo_group_id(&self) -> usize {
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
pub fn disable_tracing() {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
        update
// You may obtain a copy of the License at
            let mut len = 1;
                    if seg.validity == line_cache_shadow::ALL_VALID {
        -#-
use styles::{Style, ThemeStyleMap};
    pub fn get_samples_limit(&self) -> usize {
// limitations under the License.
}
                              duration_ns: u64) -> Self
        // that into our actual target.
                    union_ins_delta = union_ins_delta.transform_expand(inserts, after);
/// A flag used to indicate when legacy actions should modify selections
            for &occurrence in find.occurrences().iter() {
                    if !inserts.is_empty() {
        trace.instant("3", &["test"]);
    utf16_size: usize,
        if self.is_enabled() {

                c.provide_context(&pl, self.pos() - poffset);
            Merge(1,2),
/// assert_eq!("ello wor", String::from(&b));
        engine.edit_rev(1, 3, new_head_2, d3);
                        }
    /// set with this function, which will make the revisions they create not have colliding IDs.
        }
        undo_group: usize,
                    assert_eq!(correct, e.max_undo_group_id(), "for peer {}", ei);
/// typing a paragraph) will be combined into a single segment in a transform
        let new_deletes_from_union = {
    // TODO: maybe refactor this API to take a toggle set
    #[test]
}
    fn consume(self) -> (Option<String>, Option<i32>) {
    }
            GestureType::ToggleSel => self.toggle_sel(text, offset),
                        DeltaElement::Copy(start, end),
            None => return "",
        // move deleted or undone-inserted things from text to tombstones
/// Computes a series of priorities and transforms for the deltas on the right
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
}
                    text.slice_to_string(region.min(), region.max())

        /// and new deletes_from_union
    }
        let mut cur_len_utf16 = 0;
                    } else {
use word_boundaries::WordCursor;
impl<'a> Iterator for Lines<'a> {
        self.rev_id_counter += 1;
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
        assert_eq!(snapshot[8].name, "c");
            l[offset..].chars().next()
        let mut b = line_cache_shadow::Builder::new();
}
        }
        b.iter(|| {
    }
            event_type: SampleEventType::Metadata,
        }
                        if n_skip > 0 {
#[inline]
// distributed under the License is distributed on an "AS IS" BASIS,

        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
use std::cmp::{min,max};
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
        }

        if self.find.is_empty() {
    }
            while !s.is_char_boundary(offset - len) {
        // interior of last line should be last line
        assert_eq!(Some(6), a.next_codepoint_offset(3));
    }

            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        assert_eq!("-###-", &subset_str);

    {
                        word_cursor.select_word()
            // I think it's a precondition that this will never be called
/// Returns the operations in `revs` that don't have their `rev_id` in
    pub fn collapse_selections(&mut self, text: &Rope) {
                            edit: Undo {
            }
    // since undo and gc replay history with transforms, we need an empty set
        engine.undo([3].iter().cloned().collect());
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    /// should be constructed via SampleGuard.
/// beginning.
                    match full_path_str {
        let mut samples = self.samples_cloned_unsorted();
        trace.instant("1", &["test"]);
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
        let mut engine = Engine::new(Rope::from(TEST_STR));
    #[test]
                    priority, undo_group,
            self.first_line = line - (self.height - 1);
        let mut b = String::new();
/// revisions on top of the revisions represented by `expand_by`.
    #[serde(skip_serializing_if = "Option::is_none")]
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());
    /// The return type is a `Cow<str>`, and in most cases the lines are slices borrowed
            Assert(0, "zcbd".to_owned()),
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
            Assert(2, "ab".to_owned()),
                    priority, inserts, deletes,
        }
        }

    /// Get revision id of head revision.
    FlowInstant,
        Cow::from(b)
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
        // update only find highlights affected by change
        self.tombstones = tombstones;
            Gesture { line, col, ty } =>
/// of Sample that determines order.
}
            let mut len = 1;
            pos

    TRACE.enable();

    // TODO: switch to a persistent Set representation to avoid O(n) copying
                        Some(end) => max(0, end - 1),
            Assert(0, "b".to_owned()),
    }
            lc_shadow: LineCacheShadow::default(),
/// # use xi_rope::Rope;
        leaf.as_bytes()[pos]
        let contents = match rev.edit {
                    } else {
        count_newlines(&s[..in_base_units])
    #[bench]
    }
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
            SampleEventType::ObjectSnapshot => 'O',
use std::hash::{Hash, Hasher};
            self.first_line = line;
                    }

                                                          new_len, col),

    }
/// Transform `revs`, which doesn't include information on the actual content of the operations,
        }

        }
        use self::MergeTestOp::*;
}
    }
    inner: ChunkIter<'a>,
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
        let mut cursor = Cursor::new(self, offset);
extern crate libc;

        let rope = Rope::from("hi\ni'm\nfour\nlines");
/// ```
        // TODO: this does 2 calls to Delta::synthesize and 1 to apply, this probably could be better.
            } else {
}
        self.timestamp_us.cmp(&other.timestamp_us)
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    /// The revision history of the document
            max_undo_so_far: 0,
        let all_caret = self.selection.iter().all(|region| region.is_caret());

/// See `trace_closure` for how the closure works and `trace_payload` for a
        // since one of the two deletes was gc'd this should re-do the one that wasn't
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    #[cfg(feature = "benchmarks")]
categories_from_constant_array!(8);
                                inserts,
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
    /// Storage for all the characters that have been deleted  but could
}
///
    #[test]
            None
        loop {
        let region = SelRegion::caret(offset);
    match std::env::current_exe() {
        first_line..(last_line + 1)
    /// tiny it is effectively O(n). This iterator does not allocate.
impl CategoriesT {
    }
        let mut pos = self.pos();
}
                        if n_skip > 0 {
    }
        let height = self.line_of_offset(text, text.len()) + 1;
    }

                let tombstones_here = shuffle_tombstones(text, tombstones, deletes_from_union, &older_all_inserts);
    }

///
    type Item = Cow<'a, str>;
#[cfg(test)]

                    let (start, end) = {
                true => x.end,
use xi_rope::tree::Cursor;
    {
        assert_eq!(snapshot[1].name, "thread_name");
        let utf8_offset = 9;
        self.lines += other.lines;
                SelectionModifier::Add => {
            let next_chunk = self.inner.next();
            // Go crazy
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);

}
    }
                        })
    #[test]
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
            'B' => SampleEventType::DurationBegin,
// See the License for the specific language governing permissions and
        };

        assert_eq!(2, expand_by.len());
    pub fn is_enabled(&self) -> bool {
/// For example, take a string that starts with a 0xC2 byte.
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
            duration_us: None,

/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
///
        client.update_view(self.view_id, &params);
        let mut engine = Engine::new(Rope::from(TEST_STR));
                    let full_path_str = full_path.into_string();
    /// how many times it has been deleted, so if a character is deleted twice
            {
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            let first_rev = engine.get_head_rev_id().token();
        // todo: the correct Find instance needs to be updated with the new parameters
    }
    /// Returns the visible line number containing the given offset.
    /// Merge the new content from another Engine into this one with a CRDT merge

    fn find_base_1() {
    fn rearrange_1() {
            write!(f, "Rope({:?})", String::from(self))
    TRACE.closure_payload(name, categories, closure, payload)
    pub fn empty() -> Engine {

        MergeTestState::new(2).run_script(&script[..]);
                    } else {

            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let mut selections = Vec::new();
//
            els: Vec<RopeDeltaElement_>,
        // even though the actual sampling order (from timestamp of
                }
        }
        for &(sel_start, sel_end) in sel {
                    let end_of_line = match cursor.next::<LinesMetric>() {
        }

            );
        engine.undo([1].iter().cloned().collect());

}
                },
            Some(Cow::Borrowed(mut s)) => {
            Assert(0, "acbd".to_owned()),
/// Create a `Rope` from a `String`:
                    result = cow_append(result, self.fragment);


            Edit { ei: 1, p: 3, u: 1, d: parse_delta("-c-") },
            offset -= 1;
                self.select_word(text, offset, false),
///
            ModifySelection(movement) => self.do_move(text, movement, true),
    #[inline]
    }
        while let Err(incomp) = prev_boundary {
    /// No wrapping in effect.

                    let _ = s.pop();
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);

            }
    }
            height: 10,
use edit_types::ViewEvent;
        let (mut l, mut offset) = self.get_leaf()?;
            event_type: SampleEventType::CompleteDuration,
    /// wherever there's a non-zero-count segment in `deletes_from_union`.
        Engine {

pub struct Engine {
#[cfg(feature = "json_payload")]
    /// Tests that merging again when there are no new revisions does nothing
        assert_eq!(Some(3), a.prev_codepoint_offset(6));

        });
        ");
    pub name: StrCow,
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
        }
/// ```
                              to_payload("test_get_samples"));
            DeltaElement::Copy(ref start, ref end) => {
}
            CategoriesT::DynamicArray(ref vec) => vec.join(sep),
                            Cursor::new(breaks, offset));
    //TODO: implement iter_chunks using ranges and delete this
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
use edit_types::ViewEvent;
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
        if offset == 0 {

    /// Sorting priority between processes/threads in the view.
        // if self.end is inside this chunk, verify that it is a codepoint boundary
    #[test]
/// }
    {
        let mut b = String::new();
///     something_else_expensive();
        // rebase delta to be on the base_rev union instead of the text
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
    }
/// Stores the tracing data.
            }
            if self[i] != other[i] {
}
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
///

                    filename.to_str().map(|s| s.to_string())
        self.revs.iter().enumerate().rev()
    /// 96 bits which is more than sufficient for this to never happen.
impl Engine {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
        self.send_update_for_plan(text, client, styles,
    }
    #[test]
    #[serde(rename = "ph")]
        }
            Assert(0, "acpbdj".to_owned()),
        }
/// ```
    // this should have the same behavior, but worse performance
    fn merge_priorities() {

        self.set_selection_raw(text, selection);
            }
                Contents::Undo { .. } => panic!(),
        // send updated find status only if there have been changes
            Merge(0,2),

            if next_chunk.is_none() { return None; }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
                        };
    ProcessName { name: String },
            self.args == other.args
            match *op {

        let utf8_offset = rope_with_emoji.convert_metrics::<Utf16CodeUnitsMetric, BaseMetric>(utf16_units);
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
    /// An iterator over the raw lines. The lines, except the last, include the
    }
                max_undo_so_far: i,
/// ```
                serializer.serialize_newtype_variant("DeltaElement", 1,
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        let mut selection = Selection::new();
        if !selection.regions_in_range(offset, offset).is_empty() {
    /// ancestor in order to be mergeable.

        #------
                _ => { }

    pub fn slice(&self, start: usize, end: usize) -> Rope {
        in_base_units
        let cursor = Cursor::new(self, offset);
                } else {
pub struct Config {

                        };
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
            Cancel => self.do_cancel(text),
impl Metric<RopeInfo> for LinesMetric {
                }
        deserializer.deserialize_str(CategoriesTVisitor)
        assert_eq!(snapshot[0].name, "process_name");
    fn append_large() {
            Assert(1, "bdefg".to_owned()),
        None => {
        let (revs, text_2, tombstones_2, deletes_from_union_2) =
            //} else {
            enabled: AtomicBool::new(true),
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        let utf16_units = rope_with_emoji.measure::<Utf16CodeUnitsMetric>();
    1

    }
    }

        let head_rev = &self.revs.last().unwrap();
    #[inline]
    }
        let mut offset = 0;
    /// Replacement string.
                    // we don't want new revisions before this to be transformed after us
    /// set with this function, which will make the revisions they create not have colliding IDs.
        assert_eq!(utf16_units, 9);
    }
        ];
                priority: new_priority,
    /// This case is a regression test reproducing a panic I found while using the UI.

        ];
        a.lines_all().collect::<Vec<_>>());
            "styles": styles,
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            Assert(0, "zacpb".to_owned()),
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    }

}
        assert_eq!("-###-", &subset_str);
    /// fine-grained in the case of multiple cursors, but we also want this
                cur_all_inserts = older_all_inserts;
        let mut selection = match multi_select {
        assert_eq!(Some(17), a.next_grapheme_offset(9));
extern crate libc;
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("---j") },
        }

    fn edit_rev_undo_2() {
    #[test]
    fn prev_grapheme_offset() {
        let mut d = TracePayloadT::with_capacity(1);
            SelectionForReplace => self.do_selection_for_replace(text),
                Some(offset)

/// Returns all the samples collected so far ordered chronologically by
}
// should make this generic, but most leaf types aren't going to be sliceable
pub type TracePayloadT = serde_json::Value;
    /// selection edges).
        let new_sel = selection_movement(movement, &self.selection,
            // selection with interior
    fn cmp(&self, other: &Sample) -> cmp::Ordering {
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
    }
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));

        engine.edit_rev(1, 1, first_rev, build_delta_1());
            }
        struct RopeDelta_ {
            SampleEventType::AsyncEnd => 'e',
    }
    /// of individual region movements become carets.
        assert_eq!(TEST_STR, String::from(engine.get_head()));

        _ => 4
    }
        }

        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
    FlowStart,
    pub fn collapse_selections(&mut self, text: &Rope) {
    {
        ---#--
        let s = String::deserialize(deserializer)?;

    }
            a.push('a');


    }
        assert_eq!(Some(17), a.next_grapheme_offset(9));
enum Contents {
    fn is_boundary(s: &String, offset: usize) -> bool {
            self.lc_shadow.edit(start, end, new_end - start);
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {



            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
#[derive(Clone, Copy)]
/// configured via the `dict_payload` or `json_payload` features (there is an
        result
            Assert(0, "acbd".to_owned()),
        samples[0].timestamp_us = 10;

    }
    fn bench_single_timestamp(b: &mut Bencher) {
            inserts = inserts.transform_expand(trans_inserts, after);
    fn bench_trace_block(b: &mut Bencher) {
            line_cache_shadow::CURSOR_VALID
            categories: None,
        cursor.prev::<BaseMetric>()
    /// via process_name/thread_name respectively.
/// Stores the relevant data about a sample for later serialization.
            find_changed: FindStatusChange::None,
            SampleGuard::new(&self, name, categories, None)
        let b_revs = basic_insert_ops(inserts, 2);
}
    cursor: Cursor<'a, RopeInfo>,
    pending_render: bool,
use selection::{Affinity, Selection, SelRegion};
                    let end_of_line = match cursor.next::<LinesMetric>() {
                }
                            edit: Edit {
        //for next line
        let mut leaf_offset = pos - offset;
                Undo { ref toggled_groups, ref deletes_bitxor } => {
        // TODO: may make this method take the iv directly
    match std::env::current_exe() {
        engine.edit_rev(1, 3, new_head_2, d3);
///
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    /// if there is not at least one edit.
        assert_eq!(snapshot[3].name, "b");

        assert_eq!(snapshot.len(), 9);
    pub fn slice(&self, start: usize, end: usize) -> Rope {
            std::thread::sleep(std::time::Duration::new(0, 1000));
            // about what wrapped.
    fn render_line(&self, client: &Client, styles: &StyleMap,

        count_newlines(&s[..in_base_units])
        for &region in self.sel_regions() {

/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
    #[test]
                _ => { }
    }
                self.set_dirty(text);
                Some(offset)

        // Any edit cancels a drag. This is good behavior for edits initiated through

    // https://github.com/serde-rs/serde/issues/1189 is fixed.
        samples[1].pid = 2;
///
        }
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
/// xi_trace::trace("something happened", &["rpc", "response"]);
            Assert(1, "abefg".to_owned()),
            // The deletes are already after our inserts, but we need to include the other inserts
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                    None
        let initial_rev = engine.get_head_rev_id().token();
        info.utf16_size
                    }


    }
    }
    {
impl Metric<RopeInfo> for BaseMetric {
        inserts: Subset,
        self.tombstones = tombstones;
/// ```

}
                    result = cow_append(result, &self.fragment[.. i + 1]);
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));
                } else {
}
        // spam cmd+z until the available undo history is exhausted
    }
pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    }
        if self.is_enabled() {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    /// method to be fast even when the selection is large.
            'e' => SampleEventType::AsyncEnd,
        }
        if initial_contents.len() > 0 {
    where S: Into<StrCow>, C: Into<CategoriesT>
fn clamp(x: usize, min: usize, max: usize) -> usize {
        (line, offset - self.offset_of_line(text, line))
    /// tiny it is effectively O(n). This iterator does not allocate.
/// Returns all the samples collected so far.  There is no guarantee that the
            'X' => SampleEventType::CompleteDuration,
    fn measure(_: &RopeInfo, len: usize) -> usize {
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {

    }
        thread.name().map(|ref s| to_cow_str(s.to_string()))
            let b = self.current.unwrap().as_bytes()[self.idx];
    ObjectDestroyed,
    fn next(&mut self) -> Option<&'a str> {
    ///
use interval::Interval;
//! info.
    }
                     modify_selection: &SelectionModifier) {
            let (start, end) = if offset < drag_state.offset {
#[macro_use]
    fn thread_name() -> Option<StrCow> {
/// # Performance
    FlowEnd,
/// 3. You may not care about them always being sorted if you're merging samples
                              start_ns: u64,
    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
            for (i, op) in script.iter().enumerate() {

        self.pending_render
            return false;
                return false;
        assert!(end <= leaf.len());
fn find_leaf_split(s: &str, minsplit: usize) -> usize {
        for i in (s1.len() * 3 + 1)..(s1.len() * 3 + 4) {
            let first_rev = engine.get_head_rev_id().token();
    #[test]
        undo_test(false, [1,2].iter().cloned().collect(), TEST_STR);
    /// Sets the selection to a new value, without invalidating.
fn clamp(x: usize, min: usize, max: usize) -> usize {
                        word_cursor.select_word()
    /// The maximum number of samples that should be stored.
}

        engine.edit_rev(1, 1, first_rev, d1.clone());

                }
        assert_eq!("zcpbdj", String::from(&text_2));

            let b = self.current.unwrap().as_bytes()[self.idx];
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
                pos = leaf_offset + nl.len();
impl Leaf for String {
                    if !deletes.is_empty() {
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
    }
    }
                                            closure: F, payload: P) -> R
        }
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
        }
            Assert(1, "ab".to_owned()),
            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {

        match self {
    fn find_base_1() {
    fn test_samples_block() {
        let mut cur_len_utf16 = 0;
        let mut offset = 0;
        let height = self.line_of_offset(text, text.len()) + 1;
}
            if self[i] != other[i] {
    fn test_samples_pulse() {

                            }
use std::collections::HashMap;
                Some(offset)
use std::borrow::Cow;
    None,
        Self {

/// samples are ordered chronologically for several reasons:
        loop {
        ");
            enabled: AtomicBool::new(false),
///
        count_newlines(&s[..in_base_units])
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
                match *other {
        self.text = text;

        let mut b = String::new();



            Assert(1, "acpbdj".to_owned()),
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
            std::thread::sleep(std::time::Duration::new(0, 1000));

        let b_rope = Rope::from(&b);
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());


    fn do_selection_for_replace(&mut self, text: &Rope) {
            's' => SampleEventType::FlowStart,
    fn next(s: &String, offset: usize) -> Option<usize> {

    /// ties in edit priorities. Otherwise the results may be inconsistent.
        // a, b, y, z, c, x
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
            }
    }
            // I think it's a precondition that this will never be called
struct DeltaOp {

    buffer_id: BufferId,
}
        let start = self.line_col_to_offset(text, line, 0);
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
}
    /// 96 bits which is more than sufficient for this to never happen.
                        Cow::Owned(deletes_from_union.transform_shrink(inserts))

        engine.edit_rev(1, 3, new_head_2, d3);
    pub fn delta_rev_head(&self, base_rev: RevToken) -> Delta<RopeInfo> {
    fn test_disable_drops_all_samples() {
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
            self.current = None;
                if !inserts.is_empty() {
        engine.edit_rev(1, 1, first_rev, d1.clone());
        });
    #[inline]

    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    }
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
        let head = engine.get_head_rev_id().token();
        let expand_by = compute_transforms(revs);
/// the `base_revs`. This allows the rest of the merge to operate on only
    }
    fn gc_5() {
    fn measure(info: &RopeInfo, _: usize) -> usize {
        let text = Rope::from("13456");
    }
            duration_us: None,

    /// Find what the `deletes_from_union` field in Engine would have been at the time
    /// and currently in a debugging state.
fn rebase(mut expand_by: Vec<(FullPriority, Subset)>, b_new: Vec<DeltaOp>, mut text: Rope, mut tombstones: Rope,
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
        where S: Into<StrCow>, C: Into<CategoriesT>
    }
        trace.instant("3", &["test"]);

        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
    }
///
}
}
            end,
        }
///
}
                    let transformed_inserts = inserts.transform_expand(&s);
    #[serde(default = "default_session", skip_serializing)]
        match *self {
        use self::MergeTestOp::*;
    }
                Delta {
}

#![cfg_attr(feature = "collections_range", feature(collections_range))]
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
            cur_len_utf16 += u.len_utf16();
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    size: Size,
        /// The set of groups toggled between undone and done.
    }
                }
            engine.undo(undos.clone());
            pid: sys_pid::current_pid(),
use std::ops::Range;
    out
            'X' => SampleEventType::CompleteDuration,
    fn thread_name() -> Option<StrCow> {
/// returned value is dropped.  `trace_closure` may be prettier to read.
            let b = s.as_bytes()[offset];
        cursor.next_grapheme()

    // revision might hold content from an undo group that would otherwise be gc'ed),
            client.scroll_to(self.view_id, line, col);
        as_vec.extend(all_samples.iter().cloned());
}
    }
        let mut all_samples = self.samples.lock().unwrap();
    pub fn merge(&mut self, other: &Engine) {
fn clamp(x: usize, min: usize, max: usize) -> usize {
        }
    {
    out
        // TODO(vlovich): optimize this path to use the Complete event type
    for rev in revs.iter().rev() {
        } else {
/// an argument.
            FindAll => self.do_find_all(text),
        assert_eq!(snapshot[1].name, "thread_name");
            pos += 1;


            Some(Cow::Owned(mut s)) => {


///
    priority: usize,

        engine.gc(&gc);
            }
                }

    priority: usize,
                        self.revs.push(Revision {
    {
        let text_ins_delta = union_ins_delta.transform_shrink(cur_deletes_from_union);
    #[test]
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {


                                toggled_groups: &toggled_groups - gc_groups,
        self.find.iter().map(|find| {
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        Self {
//! under `Engine::edit_rev`, which is considerably simpler than the usual
}
    pub event_type: SampleEventType,
    // How should we count "column"? Valid choices include:
    pub(crate) fn get_view_id(&self) -> ViewId {
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
            GestureType::PointSelect => {
            deletes_from_union,
    pub fn select_range(&mut self, text: &Rope, offset: usize) {
        // same span exists in both sets (as when there is an active selection)
    /// state and new offset.
            SampleGuard::new(&self, name, categories, None)
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
    }
                SelRegion::new(start, end)
        let first_rev = engine.get_head_rev_id().token();
//See ../docs/MetricsAndBoundaries.md for more information.
        // move deleted or undone-inserted things from text to tombstones
    use test::Bencher;

            r = op.inserts.apply(&r);
        }
    }
        };
    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.
    // for simplicity.
}
        (self.pid, self.timestamp_us).hash(state);

        if all_samples.is_empty() {
/// # Examples

        let text_a = Rope::from("zcbd");
        self.deletes_from_union = new_deletes_from_union;
            warn!("Failed to get path to current exe: {:?}", e);
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
    let a_ids: BTreeSet<RevId> = a.iter().map(|r| r.rev_id).collect();
        let mut result = json!({
        let trace = Trace::enabled(Config::with_limit_count(10));

#[cfg(feature = "json_payload")]
        assert_eq!(snapshot[8].name, "x");
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
/// ```
                }
    /// selection edges).
    /// List of categories the event applies to.
        b.iter(|| {
            };
            self.breaks = None
    fn is_boundary(s: &String, offset: usize) -> bool {
                return None;
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
        let tombstones_a = Rope::from("a");
        assert_eq!(utf16_units, 17);
            replace_changed: false,
    }
    /// Start of the region selected when drag was started (region is
    fn measure(_: &RopeInfo, len: usize) -> usize {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            for (i,rev) in self.revs.iter().enumerate().rev() {
    /// This uniquely represents the identity of this revision and it stays
    ///
            Assert(0, "adfc".to_owned()),
            Find { chars, case_sensitive, regex, whole_words } =>
                    self.do_gesture(text, line, column, GestureType::PointSelect)

                    return i + 1; // +1 since we know the one we just found doesn't have it
            // which we can do with another peer that inserts before a and merges.
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
/// some way.
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",

        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
// Unless required by applicable law or agreed to in writing, software
        ];
    // * Unicode codepoints
    fn test_ser_de() {
            Merge(0,1), Merge(1,0), Merge(0,1), Merge(1,0),
        b.push_str(new);
                self.highlight_find = visible;
        let end = self.sel_regions().last().unwrap().end;
    /// An iterator over the lines of a rope.
    #[test]
                        let new_deletes_bitxor = if gc_dels.is_empty() {
        // even though the actual sampling order (from timestamp of
                        })
        let style = style_map.merge_with_default(style);
        let text_b = Rope::from("zpbj");
        assert_eq!(1, expand_by.len());
        }
        match self {
        for mut find in self.find.iter_mut() {
            // I think it's a precondition that this will never be called
        if let Some(exe_name) = exe_name() {
        if let Some(ix) = style_map.lookup(style) {
    /// The process the sample was captured in.
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
        if offset >= text.len() {
///
/// Revision will be used, which means only the (small) set of concurrent edits
    }
        // multiple queries; select closest occurrence
                    self.do_gesture(text, line, column, GestureType::WordSelect)
        };
            't' => SampleEventType::FlowInstant,
// easily delta-compressed later.
/// Returns the file name of the EXE if possible, otherwise the full path, or
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {

    #[test]
    #[test]
    use interval::Interval;
    // Delta that deletes the right bits from the text
        assert_eq!(trace.get_samples_count(), 1);
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        // x, a, y, b, z, c
        let next_line_offset = self.offset_of_line(text, line + 1);
        let new_inserts = union_ins_delta.inserted_subset();

                self.do_set_replace(chars, preserve_case),

        View {
            min: offset,
    /// `deletes_from_union` by splicing a segment of `tombstones` into `text`
    fn test_get_sorted_samples() {

        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
    #[test]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
    /// Returns the regions of the current selection.
                out.push(DeltaOp {
        let mut result = Cow::from("");
        }
        }
    /// via process_name/thread_name respectively.
        let (leaf, offset) = match self.get_leaf() {
///
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)
        Rope::from_str(s.as_ref()).unwrap()
                        ops.push(self.build_update_op("copy", None, seg.n));
            // trans-expand other by expanded so they have the same context
            Merge(0,2), Merge(1, 2),
            // shouldn't be called with this, but be defensive
                                                    self.size.width));
        deletes: Subset,
}
    find: Vec<Find>,
        true

        &leaf[offset..end]
                    } else {

        let trace = Trace::enabled(Config::default());
///
        engine.edit_rev(1, edits+1, head, d1);
use serde::de::{Deserialize, Deserializer};
        assert!(a == a2);
    /// ancestor in order to be mergeable.
        true
    }
                return offset;
        if offset >= text.len() {
                Edit { priority, undo_group, inserts, deletes } => {
/// A rope data structure.
use word_boundaries::WordCursor;
            // corner and I'm lazy -cmyr
}
    AsyncInstant,
/// }
        assert_eq!(snapshot.len(), 9);
    pub fn lines_all(&self) -> Lines {
    }
            _ => panic!("Unexpected chrome sample type '{}'", symbol)

        result
/// The payload associated with any sample is by default a string but may be
            Assert(1, "acpbdj".to_owned()),
// See the License for the specific language governing permissions and
    #[test]
    /// Get revision id of head revision.
        match *self {
#[inline]
        _ => 4
        }
        -> Result<CategoriesT, D::Error>

    use rope::{Rope, RopeInfo};
                let (last, rest) = self.sel_regions().split_last().unwrap();
                    None
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            fn from(elem: RopeDeltaElement_) -> DeltaElement<RopeInfo> {
        assert_eq!(trace.get_samples_limit(), 11);
        let offset = self.line_col_to_offset(text, line, col);
        self.convert_metrics::<BaseMetric, LinesMetric>(offset)
                              start_ns: u64,
            enabled: AtomicBool::new(true),
                s.len()
    }
        for _ in 0..line_len {

    /// Sets the selection to a new value, invalidating the line cache as needed.
        let (leaf, offset) = match self.get_leaf() {
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
                        if self.undone_groups.contains(undo_group) {
                },
    /// Returns the largest undo group ID used so far
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
    ///
    pub fn max_size_in_bytes(&self) -> usize {
    fn prev_codepoint_offset_small() {
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            GestureType::MultiLineSelect =>
//! which is sufficient for asynchronous plugins that can only have one
    /// Lines are ended with either Unix (`\n`) or MS-DOS (`\r\n`) style line endings.
        samples[1].timestamp_us = 5;
            Assert(2, "ab".to_owned()),
        let mut b = String::new();
        let tombstones = Rope::from("27");
                    selection.add_region(occ);
    }

        b.iter(|| black_box(trace.instant_payload(

        assert_eq!(None, a.next_grapheme_offset(s1.len() * 3 + 4));
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
}
                    } else {
            Undo { ref deletes_bitxor, .. } => deletes_bitxor.count(CountMatcher::All),
            return 0;
        // even though the actual sampling order (from timestamp of

        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
    }
        d_builder.build()
        // update only find highlights affected by change
        s.is_char_boundary(offset)
    #[test]
            {
                // sanitize input
#[derive(Clone, Debug, PartialEq, Eq)]
                    // we don't want new revisions before this to be transformed after us
        }

            }
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
        samples[0].timestamp_us = 10;
    pub fn set_size(&mut self, size: Size) {

{
    }
///
                        MetadataType::ThreadName { name: thread_name.to_string() },
                            ops.push(self.build_update_op("skip", None, n_skip));
                        // no need to un-delete undone inserts since we'll just shrink them out
use fixed_lifo_deque::FixedLifoDeque;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("-d-") },
        // a, b, y, z, c, x
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
        if let Some(last) = self.revs.last() {
/// Stores the relevant data about a sample for later serialization.
/// for single user cases, used by serde and ::empty
            trace: Some(&trace),
/// from multiple distributed sources (i.e. you want to sort the merged result
        // creation) is:
    }
    {
                    } else {
    }
    }
/// let a = Rope::from("hello ");
            Assert(1, "arpbzj".to_owned()),
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {

            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);


    /// Get revision id of head revision.
            };
enum FindStatusChange {
fn shuffle(text: &Rope, tombstones: &Rope,
#[inline]

    fn gc() {
        }
        ");
use xi_rope::rope::{Rope, LinesMetric, RopeInfo};
                MetadataType::ProcessName {name: exe_name},
        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
            };

    {
    }
        } else if self.first_line + self.height <= line {
    // Delta that deletes the right bits from the text
        for (iv, style) in style_spans.iter() {
use std::cell::RefCell;
    fn from(s: T) -> Rope {
            }
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
        }
                    self.set_selection(text, selection);
    /// is optional.
    fn set_selection_for_edit(&mut self, text: &Rope, sel: Selection) {
    }
///
    fn len(&self) -> usize {
/// ```
    }
            soln.push('b');
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("--j") },
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
            rendered_styles.push(1);
    }
impl serde::Serialize for CategoriesT {
    //TODO: implement lines_raw using ranges and delete this
            pid: sys_pid::current_pid(),
        engine.undo([1,2].iter().cloned().collect());
    }
    }
                deletes: new_deletes,
    }
impl View {
    }
/// With `json_payload` feature:
        engine.undo([1,2].iter().cloned().collect());
}
pub struct Lines<'a> {
#[macro_use]
    pub fn do_find(&mut self, text: &Rope, chars: String, case_sensitive: bool, is_regex: bool,
    }

            let mut word_cursor = WordCursor::new(text, offset);
    /// Each instance represents a separate search query.
    #[test]

    }
        let trace = Trace::enabled(Config::with_limit_count(10));
        }
        engine.edit_rev(1, 2, new_head, d2); // note this is based on d1 before, not the undo
    }
        if before {
            }
        ];
            self.collapse_selections(text);

        assert_eq!(None, a.next_codepoint_offset(10));
        }

    pub thread_name: Option<StrCow>,
            tid: sys_tid::current_tid().unwrap(),
        assert_eq!(utf8_offset, 19);
        Ok(Delta::from(d))
    }




            }


        let line_len = MAX_LEAF + MIN_LEAF - 1;
        while !leaf.is_char_boundary(end) {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                }

                self.select_word(text, offset, false),
trait StringArrayEq<Rhs: ?Sized = Self> {
            x.next_occurrence(text, reverse, wrapped, &self.selection)
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
/// let a = Rope::from("hello world");
        } else {
        b.iter(|| black_box(trace.closure("something", &["benchmark"], || {})));
//
    /// 96 bits which is more than sufficient for this to never happen.


                max_undo_so_far: i+1,
            lc_shadow: LineCacheShadow::default(),
                        if n_skip > 0 {

    /// Width in px units, requiring measurement by the front-end.
        ];
    }
            }
            .map(|pos| offset + pos + 1)
        let mut style_map = style_map.borrow_mut();
/// Create an instantaneous sample with a payload.  The type the payload

    1
                },
impl Hash for Sample {

                        let mut line_cursor = Cursor::new(text, offset);
            'i' => SampleEventType::Instant,
use client::Client;
            end += 1;
        assert_eq!(snapshot[6].name, "z");
        // current recording mechanism should see:
        Merge(usize, usize),
    ///

/// # Performance
        let edit_iv = Interval::new_closed_open(start, end);
    fn merge_simple_delete_2() {
                    return i + 1; // +1 since we know the one we just found doesn't have it
    /// want to set the process name (if provided then sets the thread name).
        for rev in &self.revs[rev_index + 1..] {
    pub fn set_session_id(&mut self, session: SessionId) {
        b.add_span(height, 0, 0);
            }
/// # Examples
            Merge(0,1),
    #[bench]
        let style = style_map.merge_with_default(style);
#[derive(Serialize, Deserialize, Clone, Debug)]
        let mut cursor = Cursor::new(self, offset);
        assert_eq!(snapshot[4].name, "z");
        let r = Rope::from(&a[..MAX_LEAF]);
                            }
        let mut end = start_pos + len;
use serde_json::Value;
pub struct LinesMetric(usize);  // number of lines
use selection::{Affinity, Selection, SelRegion};
            CategoriesT::DynamicArray(ref self_arr) => {
}
    priority: usize,
        self.revs.reverse();
    #[test]
                self.set_dirty(text);


/// revisions on top of the revisions represented by `expand_by`.
                    deletes: deletes.clone(),
        }
    pub metadata_sort_index: Option<i32>,
            Merge(0,2), Merge(1, 2),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        in_measured_units
        let mut selection = match multi_select {

            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        self.deletes_from_union_before_index(rev_index + 1, true)
                    return Some(result);
        engine.undo([1].iter().cloned().collect());
    #[bench]
#[inline]
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,10), Rope::from(""), TEST_STR.len());
            Merge(0,2), Merge(1, 2),
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
        let s1 = "\u{1f1fa}\u{1f1f8}".repeat(100);
            },
        serializer.serialize_str(&String::from(self))
        cursor.next::<BaseMetric>()
        #[derive(Serialize, Deserialize)]
                        Err(e) => {
    /// that are currently deleted, and thus in `tombstones` rather than
                len += 1;
        {
            Assert(0, "acpbdj".to_owned()),
                        ops.push(self.build_update_op("copy", None, seg.n));
                if !inserts.is_empty() {
/// With `json_payload` feature:
            offset = text.len();
}
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
            Replace { chars, preserve_case } =>

            },
// Copyright 2016 The xi-editor Authors.
            Some(offset - len)
    size: Size,
                        let mut word_cursor = WordCursor::new(text, region.max());
/// let b = a.slice(1, 9);

    fn is_boundary(s: &String, offset: usize) -> bool {
        assert!(self.current.is_some());
        // likely be improved.
            for rev in &self.revs {
        }
    fn new<S, C>(trace: &'a Trace, name: S, categories: C, payload: Option<TracePayloadT>)
                    if undone_groups.contains(undo_group) {
            }
        assert_eq!(snapshot[4].name, "y");
            line_cache_shadow::CURSOR_VALID

            // with offset == s.len(), but be defensive.
    /// Set the selection to a new value.
use xi_trace::trace_block;
    {

use tabs::{ViewId, BufferId};
    }
    StaticArray(&'static[&'static str]),
// Try to split at newline boundary (leaning left), if not, then split at codepoint
    /// End of the region selected when drag was started.

    fn consume(self) -> (Option<String>, Option<i32>) {
    scroll_to: Option<usize>,
    /// if there is not at least one edit.

        }
            ix = iv.end() as isize;
///
//
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
    }
                        if !last_selection.is_caret() {

impl CategoriesT {
        let deletes_from_union = parse_subset("-#----#");
        if self.len() != other.len() {
    fn delta_rev_head_3() {
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
    height: usize,
use std::collections::hash_map::DefaultHasher;
        ");
        let a = Rope::from("a\r\nb\r\nc");
        let new_sel = selection_movement(movement, &self.selection,
        trace.instant("5", &["test"]);
        assert_eq!(1, expand_by.len());
            ),
        // Rust is unlikely to break the property that this hash is strongly collision-resistant


        use self::MergeTestOp::*;
/// conforms to is currently determined by the feature this library is compiled
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        let mut sel = Selection::new();
    pub(crate) fn record(&self, sample: Sample) {
        // set last selection or word under current cursor as replacement string
}
                name, categories, Some(payload.into()), start, end - start));
    #[serde(deserialize_with = "deserialize_event_type")]
        AssertAll(String),

        if let Some((l, offset)) = self.get_leaf() {


    for &b in s.as_bytes() {
            Assert(2, "ab".to_owned()),
/// Create a `Rope` from a `String`:
            let (start, end) = if offset < drag_state.offset {
        for i in 0..edits {
impl serde::Serialize for CategoriesT {
}
    #[test]
{
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {

pub struct LinesRaw<'a> {
    #[test]
    #[test]
        // it will be immediately transform_expanded by inserts if it is an Edit, so length must be before
                    let head = e.get_head_rev_id().token();
                }
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    }
    fn sample_name(&self) -> &'static str {
        b if b < 0xf0 => 3,
    /// update cycle. This should be a last resort, updates should generally cause
            GestureType::LineSelect =>
            let b = self.current.unwrap().as_bytes()[self.idx];

                SelectionModifier::Add => {
    /// List of categories the event applies to.
                } else {
        inserts: Subset,
            }
                }
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
        assert_eq!(trace.is_enabled(), true);

    }
            if let GraphemeIncomplete::PreContext(_) = incomp {
    }
// Unless required by applicable law or agreed to in writing, software
    height: usize,
/// patterns. Any large runs of typing in the same place by the same user (e.g
/// # Returns

/// # Performance

//!
    pub fn edit_rev(&mut self, priority: usize, undo_group: usize,
}
    }
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        }
    All,
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
}
    pub fn new_disabled() -> Self {

    #[test]
        trace.instant("1", &["test"]);
                }
        // since one of the two deletes was gc'd this should undo the one that wasn't
/// However, anything that can be converted into a Cow string can be passed as
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
        //for next line
}
        // send updated replace status if changed
    {
                (drag_state.min, max(offset, drag_state.max))
        self.session = session;
    /// It does undos and gcs in a pattern that can actually happen when using the editor.
        assert_tokens(&rope, &[
                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
                metadata_name: None,
    pub metadata_sort_index: Option<i32>,
}
}
            if let Some(prev) = text.prev_grapheme_offset(next_line_offset) {
        assert_eq!(1, r.line_of_offset(a.len()));
    }
    }
        assert_eq!(b, String::from(a));
    #[bench]
    /// Selects an entire line and supports multi selection.
            Assert(1, "bdefg".to_owned()),
    fn prev(s: &String, offset: usize) -> Option<usize> {
        let initial_rev = engine.get_head_rev_id().token();

        self.wrap_col = WrapWidth::Width(self.size.width);
                    s = &s[..s.len() - 1];
        }
            // On the next step we want things in expand_by to have op in the context
    // Note: this function would need some work to handle retaining arbitrary revisions,
    }
        self.revs.iter().enumerate().rev()
}
    fn gc_scenario(edits: usize, max_undos: usize) {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
        ---#--


        };
    #[test]
            SampleEventType::FlowInstant => 't',
        debug_subsets(&rearranged_inserts);

            self.truncate(splitpoint);
                        None
        };
///
    for op in b_new {
pub struct ByteIter<'a> {
        len
        if offset >= text.len() {
        let tombstones = Rope::from("27");
        // since one of the two deletes was gc'd this should undo the one that wasn't
/// Creates a duration sample that measures how long the closure took to execute.
    /// We attempt to reduce duplicate renders by setting a small timeout
        assert_eq!(snapshot.len(), 9);
            result.push_str(chunk);
                    to_payload(("some payload for the block"))));

    // TODO: does Cow really help much here? It certainly won't after making Subsets a rope.

    pub fn max_size_in_bytes(&self) -> usize {
        }, to_payload("test_get_sorted_samples"));
            return 0;
    }
    #[inline]
        }

        }
        let new_head_2 = engine.get_head_rev_id().token();
    #[should_panic]
    }
    pub name: StrCow,
    /// List of categories the event applies to.
        #------
            SampleGuard::new_disabled()
            if !s.is_empty() {
pub enum SampleEventType {
    }

impl RevId {
}
        assert_eq!(snapshot.len(), 5);
    fn gc_3() {
            {
/// Get a slice of a `Rope`:
                match *other {
    }
    }
            highlight_find: false,
        b.iter(|| {
        -> R
            MetadataType::ProcessName {name} => (Some(name), None),
                },
/// ```
        }
        for rev in &self.revs[first_candidate..] {
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
    new_without_default_derive,
                if (flags & FLAG_SELECT) != 0 {
            lines: 0,

impl<'de> Deserialize<'de> for Delta<RopeInfo> {
        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();


        }).collect()
fn shuffle(text: &Rope, tombstones: &Rope,
        let rope = Rope::from("hi\ni'm\nfour\nlines");
            sel.add_region(region);
    ns / 1000
    /// Get the contents of the document at a given revision number

impl<'a> From<&'a Rope> for String {
        next_expand_by = Vec::with_capacity(expand_by.len());
                    if let Some(last_selection) = self.selection.last() {
//
                },
            }
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);


            sample: Some(Sample::new_duration_marker(
    fn do_set_replace(&mut self, chars: String, preserve_case: bool) {
        }
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        let first_line = self.line_of_offset(text, start);
/// for single user cases, used by serde and ::empty
        memrchr(b'\n', &s.as_bytes()[..offset])
    }
        // stable order since the resolution of timestamps is 1us.

    }
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },

                where E: serde::de::Error
        if line < self.first_line {
    fn undo_2() {
        }).collect::<Vec<FindStatus>>()
    // transform representing the characters added by common revisions after a point.
        let head2 = engine.get_head_rev_id().token();
        #------
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
            session: default_session(),
        impl From<&'static[&'static str; $num_args]> for CategoriesT {
            trace.closure("test_samples_closure", &["test"], || {});
        (Revision {
            1 if self.selection[0].is_caret() => {
        let b = a.slice(2, 4);
            let expand_by = compute_transforms(a_new);

    fn len(&self) -> usize {
    /// The revision history of the document
    #[cfg(feature = "benchmarks")]
        let trace = Trace::enabled(Config::with_limit_count(10));
            }),
            }
        for mut find in self.find.iter_mut() {
        let mut sel = Selection::new();
        self.find.clear();
    /// Constructs a Duration sample.  For use via xi_trace::closure.
}
            sel.add_region(

    fn len(&self) -> usize {
                    if s.ends_with('\r') {
    /// a point that should be scrolled into view.
    }
    }
            Find { chars, case_sensitive, regex, whole_words } =>
            self.start_drag(offset, offset, offset);
            Contents::Undo { .. } => panic!("can't merge undo yet"),
        assert_eq!(TEST_STR, String::from(engine.get_head()));

mod fixed_lifo_deque;
                   whole_words: bool) {
            Assert(0, "zacpbdj".to_owned()),
        /// revision that were deleted by this revision.
}
        let new_head_2 = engine.get_head_rev_id().token();
        undo_test(true, [1,2].iter().cloned().collect(), TEST_STR);
use styles::{Style, ThemeStyleMap};
    }
            match memchr(b'\n', &s.as_bytes()[offset..]) {
                                           client, iv, new_len, px),
        memchr(b'\n', &s.as_bytes()[offset..])
        MergeTestState::new(2).run_script(&script[..]);
            let mut len = 1;
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
                        };
        assert_eq!(trace.get_samples_limit(), 0);
    }
                                toggled_groups: &toggled_groups - gc_groups,
            Merge(0,1), // the merge from the whiteboard scan
        self.selection = sel;
        engine.undo([2].iter().cloned().collect());
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
/// See `trace_block` for how the block works and `trace_payload` for a
    height: usize,


            .find(|&(_, ref rev)| rev.rev_id == rev_id)

    }
        assert_eq!(rope.line_of_offset(1), 0);
        }
/// Computes a series of priorities and transforms for the deltas on the right
                         hls: &[(usize, usize)],
}

                         first_line: usize, last_line: usize, pristine: bool) {
    type Item = u8;
            return self.revs.len();
        let mut a = String::new();

        engine.edit_rev(0, 2, first_rev, build_delta_2());
                            (inserts, deletes)
            Merge(0,1), // the merge from the whiteboard scan
            prev_boundary = c.prev_boundary(&l, leaf_offset);
        let styles = self.render_styles(client, styles, start_pos, pos,
use edit_types::ViewEvent;
        // TODO: simplify this through the use of scopeguard crate
        text = new_text;
/// conforms to is currently determined by the feature this library is compiled
            },
            self.find.push(Find::new());
        }
        }
        self.lc_shadow.partial_invalidate(first_line, last_line, invalid);
        samples[0].pid = 1;
        let head = engine.get_head_rev_id().token();
use std::borrow::Cow;
        let mut cur_len_utf16 = 0;

            if self[i] != other[i] {
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
                   whole_words: bool) {
        }
    #[test]
        });
        struct CategoriesTVisitor;
        if s.len() <= MAX_LEAF {
            timestamp_us: ns_to_us(time::precise_time_ns()),
    Undo {
                        word_cursor.select_word()

    // * grapheme clusters
        a.lines_all().collect::<Vec<_>>());
}
        #------
    ThreadName { name: String },
        self.enabled.store(true, AtomicOrdering::Relaxed);
//     http://www.apache.org/licenses/LICENSE-2.0
        assert_eq!(utf16_units, 9);
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
pub struct SampleGuard<'a> {
            Some(offset + len_utf8_from_first_byte(b))
            write!(f, "Rope({:?})", String::from(self))
        // only one of the deletes was gc'd, the other should still be in effect
    }
        }
    }
    /// controlled by features (default string).

/// Stores the tracing data.
// The advantage of using a session ID over random numbers is that it can be
        b.push(rhs);
        impl From<RopeDelta_> for Delta<RopeInfo> {
            pid: sys_pid::current_pid(),

    pub fn undo(&mut self, groups: BTreeSet<usize>) {
    fn delta_rev_head_2() {
                                priority,
        let (mut l, mut offset) = self.get_leaf()?;
                        s = &s[..s.len() - 1];
/// on program launch.
                max_undo_so_far: i,
        a.lines_all().collect::<Vec<_>>());
    undo_group: usize,
        let first_rev = engine.get_head_rev_id().token();
// You may obtain a copy of the License at
                    text.slice_to_string(region.min(), region.max())

        MergeTestState::new(6).run_script(&script[..]);
        Subset::new(len)
    fn replace_small() {
            engine.undo(undos.clone());

    #[cfg(feature = "benchmarks")]
        });
impl Sample {
        // a, b, y, z, c, x
                metadata_name: metadata_name.map(|s| Cow::Owned(s)),
    }

    }
    /// Returns the visible line number containing the given offset.
        if (b as i8) >= -0x40 {
            Some(Cow::Borrowed(mut s)) => {
/// * `categories` - A static array of static strings that tags the samples in
    #[test]

            if sel_end_ix > sel_start_ix {
    // * Unicode codepoints
        }
///
        #---
pub struct Replace {
    #[bench]
    /// Exposed for unit tests.
    }
        });
        let mut gc_dels = self.empty_subset_before_first_rev();
    }
    }
    let mut cur_all_inserts = Subset::new(deletes_from_union.len());

    fn bench_two_timestamps(b: &mut Bencher) {
            x.next_occurrence(text, reverse, wrapped, &self.selection)
    1


    }
                Some(Cow::from(s))
            let new_region = region_movement(movement, region, self,
                        &mut start[bi]
    let mut out = Vec::with_capacity(revs.len() - base_revs.len());
        let mut engine = Engine::new(Rope::from(TEST_STR));
        engine.undo([1].iter().cloned().collect());
            }
            Merge(1,0), Merge(2,0),
    }
        Self {
    fn len(&self) -> usize {
        result
            Find { chars, case_sensitive, regex, whole_words } =>
            // with offset == 0, but be defensive.
        MergeTestState::new(3).run_script(&script[..]);
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
///
            if next_chunk.is_none() { return None; }

                if !region.is_caret() {
/// on program launch.
            return false;
        }
///
        let trace = Trace::enabled(Config::with_limit_count(10));
use delta::{Delta, DeltaElement};
    }
    }
/// ```rust
    pub fn session_id(&self) -> SessionId {
///
            if let Some(pos) = pos { start_of_line.set(pos) }
    pub fn get_samples_count(&self) -> usize {
        let ix = style_map.add(style);
    /// Selects a specific range (eg. when the user performs SHIFT + click).
            offset += 1;
            Assert(1, "bdefg".to_owned()),
                tid));
// You may obtain a copy of the License at
//
        }

    AsyncEnd,
        let tombstones = Rope::from("27");
                    undo_group: i+1,
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
        }
        Some(&leaf[start_pos .. end])
            if let Edit { priority, ref inserts, .. } = r.edit {

/// fn something_else_expensive(value: u32) {
                }
        let deletes_from_union = parse_subset("-#----#");
/// assert_eq!("hello world", String::from(a.clone() + b.clone()));
            // selection with interior
            let horiz = None;
        for rev in self.revs[rev_index..].iter().rev() {

        }

        first_line..(last_line + 1)
        assert_eq!(None, a.prev_grapheme_offset(0));
        let b_rope = Rope::from(&b);
            text: Rope::default(),
        if !self.is_enabled() {
}
        assert_eq!(correct, res);
        delta.apply(&self.text)
/// returned value is dropped.  `trace_closure` may be prettier to read.
        if self.scroll_to.is_none() && wrap {
                        line_num = seg.their_line_num + seg.n;


    fn merge_priorities() {
        (Revision {
                        &mut rest[bi - ai - 1]
    /// Return the byte offset corresponding to the line number `line`.

        let mut selections = Vec::new();
        ----
))]
pub struct LinesRaw<'a> {
            a = a + Rope::from(&c);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        assert_tokens(&rope, &[
        if let Some((l, offset)) = self.get_leaf() {
        let script = vec![
        if offset >= next_line_offset {
        let start = time::precise_time_ns();
        // even though the actual sampling order (from timestamp of
            rebased_deletes_from_union.union(to_delete)
use rope::{Rope, RopeInfo};
        let head_rev = &self.revs.last().unwrap();
        enum RopeDeltaElement_ {
                                            closure: F, payload: P) -> R
///
    ///
        let trace = Trace::enabled(Config::with_limit_count(10));
            self.record(Sample::new_instant(name, categories, None));
    }
/// See `trace_closure` for how the closure works and `trace_payload` for a
                              to_payload("test_get_samples"));
        {
        self.invalidate_selection(text);
    max: usize,
/// an argument.
    ThreadName { name: String },
            Assert(0, "acbd".to_owned()),
        }
        d
        engine.edit_rev(1, 1, first_rev, d1);
                sel
        /// and new deletes_from_union
    /// the same even if it is rebased or merged between devices.
            GestureType::LineSelect =>
        }
        guard
    {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
    pub fn prev_grapheme(&mut self) -> Option<usize> {
                    result = cow_append(result, &self.fragment[.. i + 1]);
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
    } else {
            MetadataType::ProcessLabels {..} => "process_labels",
        s.is_char_boundary(offset)
            Edit { ei: 3, p: 7, u: 1, d: parse_delta("z--") },
            }
        }
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
///
    /// End of the region selected when drag was started.
    }
    fn bench_trace_closure(b: &mut Bencher) {
    pub fn enable_config(&self, config: Config) {

                SelectionModifier::Set => self.set_selection(text, occ),
        }
    }
}
            // to replicate whiteboard, z must be before a tombstone
/// that sorted would be prohibitively expensive.
    pub fn iter_chunks_all(&self) -> ChunkIter {
    #[test]
        }
                        inserts: transformed_inserts,
/// fn something_else_expensive(value: u32) {
        CategoriesT::DynamicArray(c)
    }
    }
        self.deletes_from_union_before_index(rev_index + 1, true)
                                gc_dels = gc_dels.transform_union(inserts);
    pub fn disabled() -> Self {
        }
    }
    /// Time complexity: technically O(n log n), but the constant factor is so
    }
    fn thread_name() -> Option<StrCow> {
        prev_boundary.unwrap_or(None)
    fn from(c: Vec<String>) -> CategoriesT {
/// discussion on payload.

        }

        trace.disable();
            None => None
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    pub fn set_size(&mut self, size: Size) {
            categories: None,
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`

            }
        }).collect()
        assert_eq!(0, a.offset_of_line(0));
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
    }
    pub fn new_instant<S, C>(name: S, categories: C,
    fn undo_5() {
        engine.gc(&gc);
    pub fn sel_regions(&self) -> &[SelRegion] {
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
            Assert(1, "abefg".to_owned()),
        // TODO: want to let caller retain more rev_id's.
            scroll_to: Some(0),
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },

        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let tombstones_b = Rope::from("a");
                            }
        let empty = Rope::from("");
/// For example, take a string that starts with a 0xC2 byte.
        ix
    fn test_trace_disabled() {
    fn bench_trace_block_payload(b: &mut Bencher) {
    }
        }
                              to_payload("test_get_samples"));
            // d-expand by other
            ix = sel_end as isize;
//! A rope data structure with a line count metric and (soon) other useful
        let r = Rope::from(&a[..MAX_LEAF]);
#[derive(Serialize, Deserialize, Debug)]
use bytecount;
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);

pub type SessionId = (u64, u32);

/// ```rust,ignore
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
        }
        let new_inserts = union_ins_delta.inserted_subset();
    /// Get next codepoint after cursor position, and advance cursor.
///
            // Do it the other way on the copy

        let d = engine.delta_rev_head(first_rev);
        --#--
impl View {
    // recompute the prefix up to where the history diverges, but it's not clear that's
                self.do_drag(text, line, column, Affinity::default()),


        ];
        ---#--
        deletes_from_union
    find_leaf_split(s, max(MIN_LEAF, s.len() - MAX_LEAF))
    } else if x < max {
                el.serialize_field(end)?;
            MetadataType::ProcessName {name} => (Some(name), None),

    /// tiny it is effectively O(n). This iterator does not allocate.
//! pending edit in flight each.
            // d-expand by other
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
            ),
        let utf8_offset = 13;
        b.iter(|| black_box(trace.block("something", &["benchmark"])));
        self.drag_state = Some(DragState { base_sel, offset, min, max });
    #[serde(skip_serializing_if = "Option::is_none")]
//! A rope data structure with a line count metric and (soon) other useful
        self.invalidate_selection(text);
            //} else {
        let line_len = MAX_LEAF + MIN_LEAF - 1;
    /// Sets the selection to a new value, without invalidating.
    #[derive(Clone, Debug)]
                        });
    #[should_panic]
    }
    fn test_get_sorted_samples() {
        let (new_text, new_tombstones) =
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
    // TODO: replace this with a version of `lines` that accepts a range

        rope.offset_of_line(5);
        }
        assert_eq!("herald", String::from(a));
    {
            return Vec::with_capacity(0);
    }
    pub metadata_sort_index: Option<i32>,
    /// This function will panic if `offset > self.len()`. Callers are expected to
/// the `base_revs`. This allows the rest of the merge to operate on only
        _ => 4
    /// Return the line number corresponding to the byte index `offset`.
            }
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));



        if !cursors.is_empty() {

        }).collect()
        // expand by each in expand_by
                          payload: Option<TracePayloadT>) -> Self

    priority: usize,
            _ => None
            duration_us: Some(ns_to_us(duration_ns)),
        ---#--
        for _i in 0..50 {
    /// This case is a regression test reproducing a panic I found while using the UI.
    fn arr_eq(&self, other: &Rhs) -> bool;
    }
        let b = a.slice(1, 10);
        let text_b = Rope::from("zpbj");
            name: name.into(),
            ModifySelection(movement) => self.do_move(text, movement, true),

pub struct ByteIter<'a> {

        self.size = size;
    lc_shadow: LineCacheShadow,
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);
categories_from_constant_array!(5);
    first_line: usize,
                } else {
                        self.revs.push(Revision {
    pub fn select_next_occurrence(&mut self, text: &Rope, reverse: bool, wrapped: bool,
    serde::Deserialize::deserialize(d).map(|ph : char| SampleEventType::from_chrome_id(ph))
        assert_eq!(0, a.line_of_offset(1));
        for &(sel_start, sel_end) in sel {

}
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
        };
                find_leaf_split_for_bulk(s)
                        s = &s[..s.len() - 1];
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
/// Represents the current state of a document and all of its history
///     something_else_expensive(result);
#[inline]
        let empty = Rope::from("");

                    selection.add_region(occ);
    #[test]

                    Some(chunk) => self.fragment = chunk,
/// ```rust
                   style_spans: &Spans<Style>, line_num: usize) -> Value
        }
        assert_eq!(snapshot[3].name, "y");
        assert_eq!(2, a.line_of_offset(4));
                        let n_skip = seg.their_line_num - line_num;
    fn prev(s: &String, offset: usize) -> Option<usize> {
                }
/// could trigger incorrect behavior if they collide, so u64 is safe.
        trace.instant("2", &["test"]);
/// ```
#[derive(Serialize, Deserialize, Debug)]

            self.current = next_chunk;
            Assert(0, "adfc".to_owned()),

    /// ancestor in order to be mergeable.
    /// Find what the `deletes_from_union` field in Engine would have been at the time
        let (leaf, offset) = match self.get_leaf() {
    TRACE.closure(name, categories, closure)
                    selection.add_region(SelRegion::new(sel_start, end_of_line));
            if cur_len_utf16 >= in_measured_units {
                                inserts,
    fn compute_undo(&self, groups: &BTreeSet<usize>) -> (Revision, Subset) {
        engine.edit_rev(1, 2, first_rev, d1.clone());
        if let Some((l, offset)) = self.get_leaf() {
        }, to_payload("test_get_samples_nested_trace"));
    }
        // x, a, y, b, z, c
    pending_render: bool,
    } else {
        MergeTestState::new(4).run_script(&script[..]);
        });
                        gc_dels = new_gc_dels;
        let toggled_groups = self.undone_groups.symmetric_difference(&groups).cloned().collect();
mod tests {
    /// ancestor in order to be mergeable.
                        word_cursor.select_word()
        engine.gc(&to_undo);
            };
        MergeTestState::new(2).run_script(&script[..]);
//! This module actually implements a mini Conflict-free Replicated Data Type
#[derive(Clone, Copy)]
            self.name == other.name &&
    use super::*;
        text = new_text;
    fn line_of_offset_panic() {
#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq)]
        b.push(rhs);
        }
            args: Some(SampleArgs {
    #[test]
/// let b = Rope::from("world");

        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        MergeTestState::new(3).run_script(&script[..]);


    fn find_common_1() {
use serde_json::Value;
            None
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    }
                }

    #[cfg(feature = "benchmarks")]
                Some(pos) => offset += pos + 1,

    #[cfg(feature = "benchmarks")]
#[inline]
use std;
/// Boundary is trailing and determined by a newline char.
        sel.collapse();
    ns / 1000
    AsyncInstant,
// Copyright 2016 The xi-editor Authors.
    fn is_boundary(s: &String, offset: usize) -> bool {
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {

        ");
        assert_eq!(utf16_units, 17);
    #[test]
/// # use xi_rope::Rope;
            return 0;
            .map_or(0, |ref s| s.timestamp_us);
        }).collect::<Vec<FindStatus>>()
        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
    }
    #[serde(skip_serializing_if = "Option::is_none")]
        let tombstones = Rope::from("27");
/// How tracing should be configured.
    }


    TRACE.is_enabled()

    }
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    view_id: ViewId,
            ix = iv.end() as isize;
            find: Vec::new(),
    }
    {
        }).unwrap_or(text.len());
                    let full_path_str = full_path.into_string();
            text: Rope::default(),
        if self.current.is_none() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
/// Returns the operations in `revs` that don't have their `rev_id` in
            let delta = Delta::simple_edit(Interval::new_closed_closed(0,0), initial_contents, 0);

mod fixed_lifo_deque;
        let res = find_base_index(&a, &b);
    pub fn set_session_id(&mut self, session: SessionId) {
            .map(|(i, _)| i)
    fn basic_insert_ops(inserts: Vec<Subset>, priority: usize) -> Vec<Revision> {
            Token::BorrowedStr("a\u{00A1}\u{4E00}\u{1F4A9}"),
    }
            'i' => SampleEventType::Instant,
        // and it only needs to be consistent over one execution.
            },
        if let Some(breaks) = self.breaks.as_mut() {
    pub fn get_line_range(&self, text: &Rope, region: &SelRegion) -> Range<usize> {
    }
            {


pub struct SampleGuard<'a> {
    fn build_delta_2() -> Delta<RopeInfo> {
        let mut all_samples = self.samples.lock().unwrap();
                }
        // This might be an over-specified test as it will
    // TODO: don't construct transform if subsets are empty
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};

        }
///
                self.select_line(text, offset, line, true),
    fn edit_rev_undo() {
/// creation.  Roughly corresponds to start_ns but instead there's a
    // of the union string length *before* the first revision.
impl<'a> SampleGuard<'a> {
        for _i in 0..50 {
                    if seg.validity == line_cache_shadow::ALL_VALID {
            inserts = inserts.transform_expand(trans_inserts, after);
                    let head = e.get_head_rev_id().token();
        }
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
            _ => return
    fn bench_trace_closure_disabled(b: &mut Bencher) {
            utf16_count += 1;
    #[test]
    fn next(&mut self) -> Option<&'a str> {
        d
        }
        let a = Rope::from("a\nb\nc");

        assert_eq!(utf16_units, 11);
            self.tid == other.tid &&
    fn bench_two_timestamps(b: &mut Bencher) {
                            plan: &RenderPlan, pristine: bool)
    fn line_of_offset_panic() {

        /// The set of groups toggled between undone and done.
/// * `name` - A string that provides some meaningful name to this sample.

    #[serde(rename = "name")]

// you may not use this file except in compliance with the License.
#[derive(Serialize, Deserialize, Debug)]
    pub fn render_if_dirty(&mut self, text: &Rope, client: &Client,
        let first_rev = engine.get_head_rev_id().token();
/// Then offset=1 is invalid.
                let mut peer = Engine::new(Rope::from(""));
        where D: serde::Deserializer<'de>
#[cfg(test)]
    #[test]
    }
                }
            pid: sys_pid::current_pid(),
            duration_us: None,
                            None
        assert!(a == a2);
        out.push(Revision {
            let first_rev = engine.get_head_rev_id().token();
impl Ord for Sample {
// ======== Merge helpers
}
            session: default_session(),
    /// ancestor in order to be mergeable.

    /// The maximum number of bytes the tracing data should take up.  This limit
{
        }, to_payload("test_get_sorted_samples"));
                sel.add_region(SelRegion::new(last.start, offset));
use edit_types::ViewEvent;
    #[test]

        self.invalidate_selection(text);
    match b {
                        let _ = s.pop();
    let mut out = Vec::with_capacity(revs.len());
    fn find_rev_token(&self, rev_token: RevToken) -> Option<usize> {

        let ix = style_map.add(style);
            Revision {
        assert_eq!(output, String::from(engine.get_head()));
                        let new_deletes_bitxor = if gc_dels.is_empty() {
            els: Vec<RopeDeltaElement_>,
                if !region.is_caret() {
            Assert(1, "cb".to_owned()),
    /// Invalidates front-end's entire line cache, forcing a full render at the next
        hasher.finish()
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {
/// With `json_payload` feature:
/// # Performance
///




    }
        #------

        let mut samples = vec![
struct FullPriority {
pub struct SampleArgs {

        }
            match memchr(b'\n', self.fragment.as_bytes()) {
            // Go crazy
            name: name.into(),
    }
                        let mut line_cursor = Cursor::new(text, offset);
        }
        }
        let empty = Rope::from("");
    /// after an edit is applied, to allow batching with any plugin updates.
///     something_else_expensive(result);
    }
            self.categories == other.categories &&
}
        }
                metadata_sort_index: None,
            self.wrap_col = WrapWidth::Bytes(wrap_col);
            Assert(2, "b".to_owned()),
        engine

    }
    #[inline]
    #[test]
            self.truncate(splitpoint);
                Delta {
            duration_us: None,
                                deletes_bitxor: new_deletes_bitxor,
        deletes_from_union = new_deletes_from_union;
        /// revision that were deleted by this revision.
            self.current = None;
            b.push_str(&c);
categories_from_constant_array!(2);
        }).collect()
    }
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    AsyncInstant,
/// Returns all the samples collected so far.  There is no guarantee that the
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
            utf16_count += 1;
        for i in 0..edits {
    fn merge_simple_delete_1() {
    pub chars: String,
}
            buffer_id: buffer_id,
//! There is also a full CRDT merge operation implemented under
    /// This function will panic if `line > self.measure::<LinesMetric>() + 1`.
            // with offset == s.len(), but be defensive.
    pub fn instant<S, C>(&self, name: S, categories: C)
    }


            }
        } else if line == max_line {
        assert_eq!(Some(3), a.prev_codepoint_offset(6));
                max_undo_so_far: i,
pub fn samples_cloned_unsorted() -> Vec<Sample> {

        // TODO: may make this method take the iv directly
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
))]
                        None
            cur_len_utf8 += u.len_utf8();
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
        self.rev_id_counter += 1;
    /// The incrementing revision number counter for this session used for `RevId`s
        let search_query = match self.selection.last() {
        let rope = Rope::from("hi\ni'm\nfour\nlines");
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("abc") },

/// on program launch.
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
fn find_leaf_split_for_bulk(s: &str) -> usize {
    #[cfg(feature = "benchmarks")]
                                         self, text, modify);
    }

        ];
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
        assert_eq!(0, a.lines_raw_all().count());
/// }
    }
use interval::Interval;
            utf16_count += 1;
            Assert(1, "ab".to_owned()),
///
    // of the union string length *before* the first revision.
            SampleEventType::FlowInstant => 't',
        }
    fn delta_rev_head_2() {
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
use delta::{Delta, DeltaElement};
    pub fn collapse_selections(&mut self, text: &Rope) {
            for &occurrence in find.occurrences().iter() {
        assert_eq!(4, a.offset_of_line(2));
use xi_rope::tree::Cursor;
        // position after 'f' in four
    new_without_default_derive,
            let horiz = None;
        self.replace = Some(Replace { chars, preserve_case });

            Assert(0, "zcpbdj".to_owned()),
        let start = time::precise_time_ns();
                self.set(pos);
            },
        trace.closure_payload("x", &["test"], || {
impl Add<Rope> for Rope {
/// Usage of static strings is encouraged for best performance to avoid copies.

                } else {
                last_priority = Some(priority);
    // since undo and gc replay history with transforms, we need an empty set
            self.wrap_col = WrapWidth::Bytes(wrap_col);
        MergeTestState::new(3).run_script(&script[..]);
        // +2 for exe & thread name.
fn ns_to_us(ns: u64) -> u64 {
        let revs = basic_insert_ops(inserts, 1);
            size: Size::default(),
                } else if click_count == Some(2) {
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
            // Snap to grapheme cluster boundary
        assert_eq!(snapshot.len(), 5);
        let mut cur_len_utf8 = 0;

            SampleGuard::new(&self, name, categories, None)
    fn compute_transforms_2() {
    /// the frontend.

        for &(sel_start, sel_end) in sel {
        let snapshot = trace.samples_cloned_sorted();
#[must_use]
        assert_eq!(snapshot[0].name, "process_name");
        Lines {
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
    }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
        for i in 0..self.len() {
            Some(ref breaks) => {

        }
        let text_b = Rope::from("zpbj");
        let mut d_builder = Builder::new(TEST_STR.len());
        self.find_changed = FindStatusChange::All;
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
                          payload: Option<TracePayloadT>) -> Self
        soln.push('f');
        let mut all_samples = self.samples.lock().unwrap();
        let inserted = inserts.inserted_subset();
pub struct Engine {
        assert_eq!("0!3456789abcDEEFGIjklmnopqr888999stuvHIz", String::from(engine.get_head()));
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
                }
        // todo: this will be changed once multiple queries are supported
/// # Returns
categories_from_constant_array!(7);
impl Sample {
    /// The maximum amount of space the tracing data will take up.  This does
}
                            (inserts.transform_shrink(&gc_dels),

        assert!(r.clone().slice(0, a.len()) == a_rope);
                    // TODO: update (rather than re-render) in cases of text valid
        }
                pos = leaf_offset + pl.len();
                    result = cow_append(result, &self.fragment[.. i + 1]);
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
            for (i, op) in script.iter().enumerate() {
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        }
    {
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                    let new_gc_dels = if inserts.is_empty() {
        ---#--
               a.lines_all().collect::<Vec<_>>());
#[inline]
                el.end()
            self.find.push(Find::new());


        View {
        MergeTestState::new(2).run_script(&script[..]);
        let trace = Trace::enabled(Config::default());
            duration_us: None,
    fn test_disable_drops_all_samples() {
    /// Only number of matches changed
        assert_eq!(rope.offset_of_line(4), rope.len());

        // rebase insertions on text and apply
    pub fn new(view_id: ViewId, buffer_id: BufferId) -> View {
            let (line, col) = self.offset_to_line_col(text, new_scroll_pos);
        for i in 0..5_000 {
/// creation.  Roughly corresponds to start_ns but instead there's a
        b.push_str(s);
categories_from_constant_array!(0);
                                         self, text, modify);
        // find the lowest toggled undo group number
        let correct: BTreeSet<RevId> = [0,2,4,8].iter().cloned().map(basic_rev).collect();
    /// The name to associate with the pid/tid.  Whether it's associated with
    fn test_samples_block() {
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
    /// description for the invariant.
        Ok(exe_name) => {
        if !self.is_enabled() {
                    }
        let mut retain_revs = BTreeSet::new();
}
            // Go crazy
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
    fn next(s: &String, offset: usize) -> Option<usize> {

    /// Time complexity: O(log n)
    fn merge_whiteboard() {
        #------
                                                        style_spans, line_num);
    }
                // This could be done by explicitly overriding, or by tweaking the
            }
        ");
        trace.instant("3", &["test"]);
            FindPrevious { wrap_around, allow_same, modify_selection } =>
            }

                }
        }
//See ../docs/MetricsAndBoundaries.md for more information.
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
            if let GraphemeIncomplete::PreContext(_) = incomp {
            Assert(1, "bdefg".to_owned()),
            SampleEventType::AsyncEnd => 'e',
    where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        let (start, end) = {
            None
                    if sel_end_ix > sel_start_ix {
//! pending edit in flight each.
        for r in &self.revs[ix + 1..] {
            }
            Revision {
        assert!(a == a2);
    }
        }).collect();
/// # Performance


            SampleEventType::DurationBegin => 'B',
        }

        // insert character at end, when this test was added, it panic'd here
        d
    /// Width in px units, requiring measurement by the front-end.
            client.scroll_to(self.view_id, line, col);

        #------
                    let e = &mut self.peers[ei];
        }
    #[cfg(all(not(feature = "dict_payload"), not(feature = "json_payload")))]
            Some(offset + len_utf8_from_first_byte(b))
    }
        if !new_inserts.is_empty() {
        let text_a = Rope::from("zcbd");
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
        let mut c = GraphemeCursor::new(pos, l.len() + leaf_offset, true);

        let mut engine = Engine::empty();

            SampleEventType::Instant => 'i',
/// The result of the closure.
    }

/// ```
        let first_line = self.line_of_offset(text, start);

                Some(pos) => offset += pos + 1,
                   soft_breaks: Option<&mut Cursor<BreaksInfo>>,
        let correct = parse_subset_list("
    where S: Into<StrCow>, C: Into<CategoriesT>
fn serialize_event_type<S>(ph: &SampleEventType, s: S) -> Result<S::Ok, S::Error>


        let cursor = Cursor::new(self, offset);
/// Usage of static strings is encouraged for best performance to avoid copies.
        assert_eq!(snapshot[2].name, "x");
///
        engine.edit_rev(1, 1, first_rev, build_delta_1());

        self.rev_id_counter += 1;
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let a = Rope::from("a\rb\rc");
                _ => panic!("to_base_units called with arg too large")
    pub duration_us: Option<u64>,
    pub duration_us: Option<u64>,

    }
        toggled_groups: BTreeSet<usize>,  // set of undo_group id's
    /// Find the first revision that could be affected by toggling a set of undo groups
    min: usize,
use std::fmt;
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            while !s.is_char_boundary(offset - len) {
    }
    }
    /// Selects all find matches.
                self.do_gesture(text, line, col, ty),
    }
            MetadataType::ProcessLabels {..} => "process_labels",
        // rebase the deletion to be after the inserts instead of directly on the head union
    Matches
            selection.delete_range(offset, offset, true);
}
        ------#

            deletes_from_union,
            }
        assert_eq!("1234567", String::from(r));
    fn build_delta_2() -> Delta<RopeInfo> {

            }

    }
            MetadataType::ThreadName {name} => (Some(name), None),
                    undo_group: i+1,
                if !inserts.is_empty() {
pub fn samples_cloned_sorted() -> Vec<Sample> {
#[derive(Serialize, Deserialize, Clone, Debug)]
            let style_id = self.get_or_def_style_id(client, styles, &style);
    }
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
            CategoriesT::StaticArray(ref self_arr) => {
        self.wrap_col = WrapWidth::Width(self.size.width);
// Additional APIs custom to strings
            args: Some(SampleArgs {
        engine.undo([1,2].iter().cloned().collect());
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
    ThreadSortIndex { sort_index: i32 },
        assert!(a != b);
        let correct = parse_subset_list("
        assert_eq!(snapshot[0].name, "process_name");
        a.lines_all().collect::<Vec<_>>());
fn cow_append<'a>(a: Cow<'a, str>, b: &'a str) -> Cow<'a, str> {


// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        gc_scenario(4,3);
        if self.is_enabled() {
        b.iter(|| black_box(time::precise_time_ns()));
    out
        }
/// # use xi_rope::Rope;
        let utf8_offset = 19;
            } else {
        }

            },
/// conversions in both directions.
            next_boundary = c.next_boundary(&l, leaf_offset);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
    pub fn do_find_next(&mut self, text: &Rope, reverse: bool, wrap: bool, allow_same: bool,
                return false;
                    let (start, end) = self.peers.split_at_mut(ai);
        let mut engine = Engine::new(Rope::from(TEST_STR));
}

        let mut result = String::new();
        let mut leaf_offset = pos - offset;
            //let prev_pos = self.cursor.pos();
        use serde::de::Visitor;

                   whole_words: bool) {
            event_type: SampleEventType::Instant,

        let mut pos = self.pos();
    }
            trace.closure_payload("y", &["test"], || {
    /// # Panics
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
}

        assert_eq!(snapshot[2].name, "x");
    /// An arbitrary payload to associate with the sample.  The type is
    session2: u32,
        }

    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
        let mut b = String::new();
        self.text = new_text;
/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]
                    return Some(result);

        assert_eq!(None, a.next_codepoint_offset(10));


    fn do_split_selection_into_lines(&mut self, text: &Rope) {
            let not_in_tombstones = self.deletes_from_union.complement();
        }
    pub fn new_disabled() -> Self {

    #[bench]
/// See `trace_payload` for a more complete discussion.
        -> R
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
                return None;
        }
        self.set_dirty(text);
// utility function to clamp a value within the given range
    first_line: usize,
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let mut engine = Engine::new(Rope::from(TEST_STR));
                            plan: &RenderPlan, pristine: bool)
    /// Get the line range of a selected region.
    /// fine-grained in the case of multiple cursors, but we also want this
        }
// You may obtain a copy of the License at
            // I think it's a precondition that this will never be called
                },
        let subset_str = format!("{:#?}", expand_by[1].1);
    #[bench]
    /// The line number is 0-based.

            AssertMaxUndoSoFar(1,1),
        let closest_occurrence = self.find.iter().flat_map(|x|
    }
            'D' => SampleEventType::ObjectDestroyed,
        assert_eq!(snapshot.len(), 9);
            match memchr(b'\n', &s.as_bytes()[offset..]) {

            event_type: SampleEventType::Metadata,
    }
            categories: Some(categories.into()),
        let trace = Trace::enabled(Config::with_limit_count(10));
        self.set_selection_for_edit(text, new_sel);
/// let mut a = Rope::from("hello world");
            Some(offset - len)
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
            end,

        let empty = Rope::from("");
            Assert(1, "ab".to_owned()),
        let end = time::precise_time_ns();

    /// Exposed for unit tests.
        }
    }

        // TODO: simplify this through the use of scopeguard crate
        trace.instant("3", &["test"]);
                        None if cursor.pos() == text.len() => cursor.pos(),
            result.push_str(chunk);
#[cfg(feature = "dict_payload")]
#[inline]
    #[serde(rename = "ph")]
    fn do_selection_for_replace(&mut self, text: &Rope) {
{
    /// Get text of head revision.
            },
            edit: Undo { toggled_groups, deletes_bitxor }
            max: offset,
    identity_op,

    pub fn enable_config(&self, config: Config) {
    }
            }
            return;
        }
        next_expand_by = Vec::with_capacity(expand_by.len());
        let first = max(first, 0) as usize;
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
                self.do_set_replace(chars, preserve_case),
}

// limitations under the License.
        assert_eq!(utf16_units, 17);
        let len = match first_rev.edit {
            if let GraphemeIncomplete::PreContext(_) = incomp {
                           style: &Style) -> usize {
            if self.line_of_offset(text, offset) <= line {
    } else if x < max {
        }
categories_from_constant_array!(4);
            SampleEventType::FlowInstant => 't',

    wrap_col: WrapWidth,
            Merge(0,1),
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
    /// The revision history of the document
        }


            Assert(0, "adc".to_owned()),
        self.revs.iter().enumerate().rev()

        let mut leaf_offset = pos - offset;
            to_undo.insert(i+1);
        self.set_selection_raw(text, selection);
    fn test_samples_closure() {
}

        }
/// assert_eq!("ello wor", String::from(&b));
    pub height: f64,
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
    }
        priority: usize,
            b.push('b');
/// for single user cases, used by serde and ::empty
        let line_len = MAX_LEAF + MIN_LEAF - 1;
                                undo_group,
        }
            text: Rope::default(),
        }
        let mut revs_2 = basic_insert_ops(inserts_2, 4);
    }
            while !s.is_char_boundary(splitpoint) {
        }
// utility function to clamp a value within the given range
        // interior of first line should be first line

use interval::Interval;
            }),
        self.tombstones = new_tombstones;
            // I think it's a precondition that this will never be called
/// Enable tracing with the default configuration.  See Config::default.
                    sel.add_region(region);

    /// Splits current selections into lines.
        // rebase the delta to be on the head union instead of the base_rev union
        Ok(b.build())
impl<'a> From<&'a Rope> for String {
            }

        Assert(usize, String),
        self.wrap_col = WrapWidth::Width(self.size.width);
pub struct BaseMetric(());

    }
        let text_a = Rope::from("zcbd");
/// * `name` - A string that provides some meaningful name to this sample.
            }),
        let mut leaf_offset = pos - offset;

            let horiz = None;
impl<'a> SampleGuard<'a> {
        let thread = std::thread::current();
    s.serialize_char(ph.into_chrome_id())

pub fn samples_cloned_sorted() -> Vec<Sample> {
        assert_eq!(correct, res);
}
                WrapWidth::None => (),
                        } else {
use serde_json::Value;
    }
    fn next(&mut self) -> Option<Cow<'a, str>> {
    }
/// Stores the tracing data.
            categories: Some(categories.into()),
            }
        CategoriesT::DynamicArray(c)
///
        }
    }
            pid: sys_pid::current_pid(),
        assert_eq!(Some(9), a.next_grapheme_offset(3));
/// Enable tracing with the default configuration.  See Config::default.
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
                    let transformed_deletes = deletes.transform_expand(&s);
    /// This function does not perform any scrolling.
                        let n_skip = seg.their_line_num - line_num;

        match rev.edit {

            // cursor
        // x, a, y, b, z, c
    }




/// assert_eq!("ello wor", String::from(&b));
        let rev = Revision {
}
            {
/// ```

            }
use linewrap;
            AssertAll("zacpb".to_owned()),
                    } else {
            DeltaElement::Copy(ref start, ref end) => {
/// Applies an optimization where it combines sequential revisions with the
/// The result of the closure.

        let b = Rope::from("b");
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
    /// if it is non-empty. It needs to be a separate commit rather than just
        let snapshot = trace.samples_cloned_unsorted();
}
    /// Start of the region selected when drag was started (region is
    }
        let script = vec![
        self.set_selection_raw(text, selection);
}
            .map_or_else(|| sys_tid::current_tid().unwrap(), |ref s| s.tid);
    {
    /// No wrapping in effect.
                }
/// are shared.
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {

    priority: usize,
            result["cursor"] = json!(cursors);
    /// Get text of a given revision, if it can be found.

                        let un_deleted = deletes_from_union.subtract(deletes);
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
}

    find_leaf_split(s, MIN_LEAF)
        }

        let new_inserts = union_ins_delta.inserted_subset();
        }).unwrap_or(text.len());


                    let b = if bi < ai {

        let b_rope = Rope::from(&b);
        assert_eq!("#-####-", &subset_str);
            // if using breaks update cursor
        ];
            view_id: view_id,
    fn gc_5() {
        assert_eq!(correct, rebased_inserts);
//
        let mut engine = Engine::new(Rope::from(TEST_STR));
            let mut sample = self.sample.take().unwrap();
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
            AddSelectionBelow =>
            let mut sel = drag_state.base_sel.clone();
                Some(filename) => {
    max: usize,
    Undo {
                let (pl, poffset) = self.prev_leaf()?;
    fn bench_two_timestamps(b: &mut Bencher) {
        let trace = Trace::enabled(Config::default());

                pos = leaf_offset + pl.len();
        assert_eq!(Some(s1.len() * 3), a.prev_grapheme_offset(s1.len() * 3 + 4));
        let mut end = start_pos + len;
        -> Self
        self.deletes_from_union_before_index(rev_index + 1, true)
            None
    /// # Panics
    }

/// ```rust
        } else {

pub struct Size {
    {
                            max_undo_so_far: rev.max_undo_so_far,
    #[test]
    }

    }
        for _ in 0..line_len {
    fn merge_session_priorities() {
#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]
            None => {
    fn lines_small() {
    #[test]
    /// Constructs an instantaneous sample.
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
    fn empty_subset_before_first_rev(&self) -> Subset {
/// Contains replacement string and replace options.
    }
            'D' => SampleEventType::ObjectDestroyed,
        let text_b = Rope::from("zpbj");
                SelectionModifier::Add => {
    }
    fn measure(_: &RopeInfo, len: usize) -> usize {
        assert_eq!(1, r.line_of_offset(a.len()));
    {
}
}
        engine.undo([1].iter().cloned().collect());
    pub fn do_move(&mut self, text: &Rope, movement: Movement, modify: bool) {

        assert_eq!(trace.is_enabled(), true);
    rev_id_counter: u32,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },
        if offset == 0 {
            "text": &l_str,
                }
    /// No wrapping in effect.
    }
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
        gc_scenario(35,20);
    rev_id: RevId,
use xi_rope::interval::Interval;
        assert_eq!(utf8_offset, 19);
}
    /// the pid or the tid depends on the name of the event
                    undo_group: i+1,
                    let b = if bi < ai {
            base_rev: RevToken, delta: Delta<RopeInfo>) -> (Revision, Rope, Rope, Subset) {
    pub duration_us: Option<u64>,

        let (mut l, mut offset) = self.get_leaf()?;
    fn is_boundary(s: &String, offset: usize) -> bool {
    /// # Panics
    /// Returns the largest chunk of valid utf-8 with length <= chunk_size.
#[inline]
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
            // about what wrapped.
struct FullPriority {
            categories: None,
        assert_eq!(vec!["a", "b"], a.lines_all().collect::<Vec<_>>());

            Merge(1,0),
#[derive(Serialize, Deserialize, Debug, Clone)]
        });
            let (start, end) = if offset < drag_state.offset {
            let a_to_merge = &self.revs[base_index..];
        }
        engine.undo([1,2].iter().cloned().collect());
    max: usize,
        Self {
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
                let (pl, poffset) = self.prev_leaf()?;
        }
    fn rev_content_for_index(&self, rev_index: usize) -> Rope {
            rendered_styles.push((sel_start as isize) - ix);
}
}
    /// vertical scroll position
        self.revs.last().unwrap().rev_id
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
        b.iter(|| sys_pid::current_pid());
        let b = a.slice(2, 4);
#[inline]

        // since one of the two deletes was gc'd this should undo the one that wasn't
impl Serialize for Rope {
        if self.breaks.is_some() {
    (1, 0)
    #[cfg(feature = "benchmarks")]
        self.drag_state = Some(DragState { base_sel, offset, min, max });
        deserializer.deserialize_str(CategoriesTVisitor)

    /// If `modify` is `true`, the selections are modified, otherwise the results
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
impl Serialize for Delta<RopeInfo> {
fn shuffle_tombstones(text: &Rope, tombstones: &Rope,
                              to_payload("test_get_samples"));
        let first_rev = engine.get_head_rev_id().token();
            Assert(2, "adfc".to_owned()),
            self.start_drag(offset, offset, offset);
                    RopeDeltaElement_::Copy(start, end) =>
            Merge(2,0),
    {
        self.tombstones = new_tombstones;
        let prev_from_union = self.deletes_from_cur_union_for_index(ix);
            Assert(2, "afc".to_owned()),
    #[serde(skip_serializing_if = "Option::is_none")]
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
}
    // This computes undo all the way from the beginning. An optimization would be to not
        let expand_by = compute_transforms(a_revs);
                // TODO: small nit, merged region should be backward if end < start.
    #[test]
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
                return offset;
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {

    /// Return the offset of the codepoint after `offset`.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    let mut out = Vec::with_capacity(revs.len());
                }

pub fn trace_closure<S, C, F, R>(name: S, categories: C, closure: F) -> R
    // Thus, it's easiest to defer gc to when all plugins quiesce, but it's certainly
                tid));

    }
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =


        let mut as_vec = Vec::with_capacity(all_samples.len() + 10);

// Licensed under the Apache License, Version 2.0 (the "License");
        trace.instant("3", &["test"]);
    }
                self.do_selection_for_find(text, case_sensitive),
/// typing a paragraph) will be combined into a single segment in a transform
    pub fn get_samples_limit(&self) -> usize {
            Assert(1, "zpbj".to_owned()),
        ----#
            }
    /// update cycle. This should be a last resort, updates should generally cause
        } else {
            'n' => SampleEventType::AsyncInstant,
                                             &text, false);
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        let mut d_builder = Builder::new(TEST_STR.len());
                return;

                }
        }
    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the
}
    #[test]
            let right_str = self[splitpoint..].to_owned();
    pub fn select_line(&mut self, text: &Rope, offset: usize, line: usize, multi_select: bool) {
            }),
impl Eq for Sample {}
            }
        assert_eq!(Some(1), a.prev_codepoint_offset(3));
/// supported as an optimization when only one reference exists, making the
        assert_eq!(1, r.line_of_offset(a.len()));
        if self.find.is_empty() {
                // merge logic.
    }
                selections.push((sel_start_ix, sel_end_ix));
        let offset = self.line_col_to_offset(text, line as usize, 0);
        fn new(count: usize) -> MergeTestState {

                undo_group,
    ///
        let subset_str = format!("{:#?}", expand_by[0].1);

        // This might be an over-specified test as it will
        use self::MergeTestOp::*;
    /// validate their input.
                            plan: &RenderPlan, pristine: bool)
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
                                                    self.size.width));
        }
            let c = region.end;
        if self.is_enabled() {
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("----j") },

/// Create a `Rope` from a `String`:
///
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));
impl TreeBuilder<RopeInfo> {
///
    for r in revs {



        self.revs.push(new_rev);
    fn edit_rev_concurrent() {
        assert_eq!(Some(3), a.prev_grapheme_offset(9));
/// Usage of static strings is encouraged for best performance to avoid copies.
        let mut b = line_cache_shadow::Builder::new();
                        let mut word_cursor = WordCursor::new(text, region.max());
                    if s.ends_with('\r') {
        info.lines
    fn from(s: T) -> Rope {
                selection.add_region(SelRegion::caret(region.max()));
        }
            SampleEventType::FlowInstant => 't',
            }),

///
    #[test]
    }
            to_undo.insert(i+1);
/// ```
    }

        self.set_selection(text, selection);
                }
        let (leaf, pos) = cursor.get_leaf().unwrap();
    TRACE.disable();
            Assert(0, "zacpbdj".to_owned()),
        undo_test(true, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
        // position after 'f' in four
                    let b = if bi < ai {
        engine.undo([1].iter().cloned().collect());
        a.lines_all().collect::<Vec<_>>());
        RevId { session1: 1, session2: 0, num: i as u32 }
    pub tid: u64,
        assert_eq!(rope.offset_of_line(1), 3);
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        /// Used to order concurrent inserts, for example auto-indentation
        let a: Vec<Revision> = ids_to_fake_revs(&[0,2,4,6,8,10,12]);
            to_payload("some description of the trace"))));
                Ok(CategoriesT::DynamicArray(categories))
        let first_line = self.line_of_offset(text, self.selection.first().unwrap().min());
/// State required to resolve a drag gesture into a selection.
                c.provide_context(&pl, self.pos() - poffset);
        assert_eq!(snapshot[7].name, "z");
    // TODO(vlovich): Replace all of this with serde flatten + rename once
        assert_eq!(2, a.line_of_offset(4));
    /// and currently in a debugging state.
                Some(Cow::from(s))
                        // no need to un-delete undone inserts since we'll just shrink them out
    }
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
        };
                        MetadataType::ThreadName { name: thread_name.to_string() },
        let a = Rope::from("");

//
            thread_name: None,
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        self.invalidate_selection(text);
                match *other {
        engine.edit_rev(1, 1, first_rev, d1);
                    self.set_selection(text, selection);
    session: SessionId,
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
        self.utf16_size += other.utf16_size;
/// The result of the closure.
        self.selection = sel;
        // that into our actual target.
        let a = Rope::from("\n");
                }
                leaf_offset = self.pos() - noffset;

        self.revs.append(&mut new_revs);
fn find_leaf_split_for_bulk(s: &str) -> usize {
    }
            Contents::Edit {priority, undo_group, ref inserts, ref deletes} => {
        self.lines_raw(0, self.len())
    }
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
                    to_payload(("some description of the closure")))));
        assert_eq!(vec![a.as_str(), b.as_str()], r.lines_raw_all().collect::<Vec<_>>());
            name: name.into(),
            .map(|pos| offset + pos + 1)
        match self.selection.len() {
            pid: sys_pid::current_pid(),
            1 if self.selection[0].is_caret() => {
        ");
    }

            Merge(2,3),
    AsyncInstant,
///
lazy_static! { static ref TRACE : Trace = Trace::disabled(); }
impl View {
        assert_eq!(Some(6), a.prev_codepoint_offset(10));

    #[bench]
#[derive(Clone, Debug, PartialEq, Eq)]

/// Measured unit is newline amount.
                }
/// ```rust,ignore
    }
    }
        let mut ops = Vec::new();
            self.idx += 1;
    #[test]
            SampleEventType::DurationEnd => 'E',
        let rebased_deletes_from_union = cur_deletes_from_union.transform_expand(&new_inserts);
        while let Err(incomp) = next_boundary {
            Assert(2, "ab".to_owned()),
        assert_eq!(b, String::from(a));
            return;
    /// Get the line range of a selected region.
            word_cursor.select_word()
        assert_eq!(0, a.lines_all().count());
                }
    // Of course, all these are identical for ASCII. For now we use UTF-8 code units
        if let Some(exe_name) = exe_name() {
        }
            rev_id_counter: 1,

                self.select_word(text, offset, false),
    /// The line number is 0-based.
                        } else {
            tid: sys_tid::current_tid().unwrap(),
    }

    }
    }
    },
        }
    /// We attempt to reduce duplicate renders by setting a small timeout
            let not_in_tombstones = self.deletes_from_union.complement();
                    let head = e.get_head_rev_id().token();
        count_newlines(&s[..in_base_units])
        }
        let height = self.line_of_offset(text, text.len()) + 1;
            if Some(priority) == last_priority {

                    let e = &mut self.peers[ei];
    fn invalidate_selection(&mut self, text: &Rope) {
            self.name == other.name &&
                let (pl, poffset) = self.prev_leaf()?;
        assert_eq!(trace.get_samples_limit(), 11);

        } else {

    }

        }
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        let ix = self.find_rev_token(base_rev).expect("base revision not found");
    /// The `pristine` argument indicates whether or not the buffer has
            Some(b)
    deletes_from_union: Subset,
    }
        enum RopeDeltaElement_ {
pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
    {
        };
                peer.set_session_id(((i*1000) as u64, 0));
        *self = b.build();
}

        engine.edit_rev(1, 1, first_rev, d1.clone());
        where S: Into<StrCow>, C: Into<CategoriesT>
        let (mut new_revs, text, tombstones, deletes_from_union) = {
/// How tracing should be configured.
    pub fn new_instant<S, C>(name: S, categories: C,
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
    }
            CategoriesT::StaticArray(ref arr) => arr.join(sep),
                Some(filename) => {

        }
        let line = self.line_of_offset(text, end);
                                        &selections, &hls, style_spans);
///
    /// Tracks whether this view has been scheduled to render.

            Merge(0,2), Merge(1, 2), Merge(3, 2),
                }
    use multiset::Subset;
                while cursor.pos() < region.max() {
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
        MergeTestState::new(2).run_script(&script[..]);
            let splitpoint = if s.len() > MAX_LEAF {
            {
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        for chunk in self.iter_chunks(start, end) {
categories_from_constant_array!(10);
    pub fn set_dirty(&mut self, text: &Rope) {
        assert_eq!(1, expand_by[0].0.priority);
        hasher.finish()
pub struct LinesRaw<'a> {
        let selection = SelRegion::new(0, text.len()).into();
            }
}
                let delta = Delta::synthesize(&tombstones_here, &older_all_inserts, &cur_all_inserts);


        for _ in 0..line_len {
    // callers should be encouraged to use cursor instead
    end: usize,
        use self::MergeTestOp::*;
}
    pub fn select_all(&mut self, text: &Rope) {
            },
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
/// it would be easy enough to modify to use `Arc` instead of `Rc` if that were
    #[cfg(feature = "benchmarks")]
            .map(|(i, _)| i)
        let (mut l, mut offset) = self.get_leaf()?;
    /// New offset to be scrolled into position after an edit.
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
                self.highlight_find = visible;
/// Given the inital byte of a UTF-8 codepoint, returns the number of
        engine.undo([1].iter().cloned().collect());
            }
        }
                    let transformed_deletes = deletes.transform_expand(&s);
            event_type: SampleEventType::CompleteDuration,
        // position after 'f' in four

}
    fn deletes_from_union_before_index(&self, rev_index: usize, invert_undos: bool) -> Cow<Subset> {

                    selection.add_region(SelRegion::new(sel_start, end_of_line));
/// revisions not shared by both sides.
            GotoLine { line } => self.goto_line(text, line),
                    let (start, end) = {
#[inline]
        let trace = Trace::enabled(Config::with_limit_count(11));
            undone_groups: BTreeSet::new(),
    ///
            ),
    /// controlled by features (default string).

    pub fn do_find_all(&mut self, text: &Rope) {
        let base_subset = self.find_rev(base_rev).map(|rev_index| self.deletes_from_cur_union_for_index(rev_index));
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
            Assert(2, "ab".to_owned()),
                if !inserts.is_empty() {
                        let mut line_cursor = Cursor::new(text, offset);
        ).min_by_key(|x| {
        assert_eq!(snapshot[6].name, "z");
    #[test]

        a.lines_all().collect::<Vec<_>>());
// Licensed under the Apache License, Version 2.0 (the "License");
        let height = self.line_of_offset(text, text.len()) + 1;
    /// should be as unlikely to collide as two random u64s.
            }
            Assert(0, "ab".to_owned()),
            Merge(0,1),
        ids.iter().cloned().map(|i| {
        assert_eq!(a.len(), r.offset_of_line(1));
        let mut d = TracePayloadT::with_capacity(1);
    session2: u32,
    }
#[cfg(test)]
use delta::{Delta, InsertDelta};
        let expand_by = compute_transforms(revs);
        out.push(Revision {
            AssertMaxUndoSoFar(1,3),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
    replace: Option<Replace>,
            // shouldn't be called with this, but be defensive
                                     categories: C,
}
    }
            Merge(0,1),
    }
///     something_expensive()
    let mut last_priority: Option<usize> = None;

        let first_rev = engine.get_head_rev_id().token();
                if rev.max_undo_so_far < lowest_group {
    }
    base_sel: Selection,


        // todo: the correct Find instance needs to be updated with the new parameters
            }
pub fn enable_tracing() {
                MergeTestOp::AssertMaxUndoSoFar(ei, correct) => {
                self.select_word(text, offset, true)
    }
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
    #[inline]
        assert_eq!(rope.offset_of_line(4), rope.len());
        assert_eq!(trace.get_samples_limit(), 0);
    }
            categories: None,
    #[test]
    pub fn sel_regions(&self) -> &[SelRegion] {
use std::mem::size_of;
        self.send_update_for_plan(text, client, styles,
                         styles: &StyleMap, style_spans: &Spans<Style>,
                        deletes_from_union = deletes_from_union.union(deletes);
                    let (start, end) = {
            let first_rev = engine.get_head_rev_id().token();
pub fn count_newlines(s: &str) -> usize {
                rev_id: basic_rev(i),
                leaf_offset = self.pos() - noffset;
            Merge(0,2), Merge(1, 2),
        self.samples.lock().unwrap().len()
        assert_eq!(correct, rearranged_inserts);
        b.iter(|| {

        result
            self.name == other.name &&
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
// Unless required by applicable law or agreed to in writing, software


            a.push('a');


            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
    // even worth the code complexity.
            FindPrevious { wrap_around, allow_same, modify_selection } =>
        engine.edit_rev(1, 2, initial_rev, d1.clone());
    fn hash<H: Hasher>(&self, state: &mut H) {

        self.push_subseq(&mut b, self_iv.prefix(edit_iv));
                                                                0, "copy", 2)?;
        // This might be an over-specified test as it will
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
            deletes_from_union = match rev.edit {
        if let Contents::Edit {priority, inserts, .. } = r.edit {
        };
    pub fn get_head(&self) -> &Rope {
        }
        self.set_selection(text, SelRegion::caret(offset));
#[must_use]
            trace.instant("something", &[]);
    highlight_find: bool,
        }
        result
                // TODO create InsertDelta directly and more efficiently instead of factoring
        if offset == s.len() {
    fn lines_small() {
///
    pub width: f64,
    }
            Assert(0, "zcbd".to_owned()),
                    return i + 1; // +1 since we know the one we just found doesn't have it
                self.set_selection_raw(text, selection);
    pub fn new_disabled() -> Self {
}
        }
                self.do_find(text, chars, case_sensitive, regex, whole_words),
            let not_in_tombstones = self.deletes_from_union.complement();
    find_changed: FindStatusChange,
}
                        deletes_from_union = deletes_from_union.union(deletes);
        let new_inserts = union_ins_delta.inserted_subset();
    }
/// conforms to is currently determined by the feature this library is compiled
        let first_line = self.line_of_offset(text, start);
                              payload: Option<TracePayloadT>,
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,

        }
    /// controlled by features (default string).
            self.record(Sample::new_instant(name, categories, None));

    inner: ChunkIter<'a>,

        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
        }
            let to_delete = if undone { &new_inserts } else { &new_deletes };
        self.scroll_to_cursor(text);
            // if using breaks update cursor
            }
}
        let (new_text, new_tombstones) =
}

    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)
            GestureType::ToggleSel => self.toggle_sel(text, offset),
        assert_eq!(trace.samples_cloned_unsorted().len(), 0);
        }

    fn next(s: &String, offset: usize) -> Option<usize> {
        let d = engine.delta_rev_head(first_rev);
impl FromStr for Rope {
        let empty = Rope::from("");
        self.text = new_text;

        /// The set of groups toggled between undone and done.
    pub fn token(&self) -> RevToken {
    FlowInstant,
        RevId { session1: self.session.0, session2: self.session.1, num: self.rev_id_counter }
        let selection = SelRegion::new(0, text.len()).into();
    }
    fn empty_subset_before_first_rev(&self) -> Subset {
                inserts: new_inserts,
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        let a = Rope::from("a\nb\n");
            Edit { ei: 1, p: 1, u: 1, d: parse_delta("-f-") },
        assert_eq!(2, b.offset_of_line(1));
        engine.edit_rev(0, 2, first_rev, build_delta_2());
                                  style_spans, &plan, pristine);

            's' => SampleEventType::FlowStart,
                }
            }
        b.iter(|| {
    #[test]
    /// Highlights are only rendered when search dialog is open.

    /// New offset to be scrolled into position after an edit.
    /// Returns a slice of the string from the byte range [`start`..`end`).
        }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> Rope {
        ];
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
                } else {
    {

    }

impl TreeBuilder<RopeInfo> {
            write!(f, "Rope({:?})", String::from(self))
            Merge(0,2),
            let splitpoint = find_leaf_split_for_merge(self);
        let trace = Trace::enabled(Config::default());
            Assert(1, "abefg".to_owned()),
            inserts: Subset::new(0),
    // allowing us to use the same method to insert the text into the tombstones.

            categories: None,
/// * `categories` - A static array of static strings that tags the samples in

fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {
    #[test]

        // that into our actual target.
    /// inserted, including the ones that were later deleted, in the locations
    }
        #------
        } else {
            match seg.tactic {

                }
#[inline]
    pub(crate) fn get_buffer_id(&self) -> BufferId {
    }
    fn next_grapheme_offset() {
            match rev.edit {

        #[derive(Serialize, Deserialize)]
        let d = engine.delta_rev_head(first_rev);
///
            FindPrevious { wrap_around, allow_same, modify_selection } =>
            Assert(1, "arpbj".to_owned()),
            // I think it's a precondition that this will never be called
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        --#--
            Assert(0, "ab".to_owned()),
    // for simplicity.
            write!(f, "Rope({:?})", String::from(self))
                    }
        if wrap_col > 0 {
            ModifySelection(movement) => self.do_move(text, movement, true),
    /// This function will panic if `offset > self.len()`. Callers are expected to
                match elem {
#[inline]
                }


        self.len() >= MIN_LEAF

                        deletes_from_union = deletes_from_union.transform_union(inserts);
            trace.block_payload("z", &["test"], to_payload("test_get_sorted_samples"));
            },
        }
}
        });
            MetadataType::ProcessName {..} => "process_name",
            engine.undo(undos);
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        // position after 'f' in four
use selection::{Affinity, Selection, SelRegion};
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
// utility function to clamp a value within the given range
        ");
    let move_delta = Delta::synthesize(text, &inverse_tombstones_map, &new_deletes_from_union.complement());
}
    }
            Some(Cow::Owned(mut s)) => {

/// Usage of static strings is encouraged for best performance to avoid copies.
        b.push(rhs);
    let mut out = Vec::with_capacity(revs.len());
    fn deletes_from_union_for_index(&self, rev_index: usize) -> Cow<Subset> {
use xi_rope::breaks::{Breaks, BreaksInfo, BreaksMetric, BreaksBaseMetric};
        assert!(a != b);
    impl MergeTestState {
        where D: Deserializer<'de>,
    }
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
            let expand_by = compute_transforms(a_new);
    pub fn toggle_sel(&mut self, text: &Rope, offset: usize) {
            if (c > start_pos && c < pos) ||
    pub(crate) fn get_replace(&self) -> Option<Replace> {
    where D: serde::Deserializer<'de> {
}
    /// This is a regression test to ensure that session IDs are used to break
    use test::Bencher;
                                deletes.transform_shrink(&gc_dels))
        }
/// }
            deletes = deletes.transform_expand(&new_trans_inserts);
            samples: Mutex::new(FixedLifoDeque::with_limit(config.max_samples())),
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>

        let start = time::precise_time_ns();
/// Base unit is utf8 code unit.

        }
        match ty {
        }
            b.push('b');
}
            max: offset,
        }
    }
                } else {
        let text_a = Rope::from("zcbd");
                } else {
        // find the lowest toggled undo group number
                        let mut rendered_lines = Vec::new();
            find.set_hls_dirty(false)
            SampleEventType::FlowInstant => 't',
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
    /// Imagine a "union string" that contained all the characters ever
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
                        if !last_selection.is_caret() {
                rev_id: basic_rev(i+1),

#[inline]
        Self {
        Self {
/// ```
        undo_test(false, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
///
/// Given the inital byte of a UTF-8 codepoint, returns the number of

    /// Only works well for ASCII, will probably not be maintained long-term.
        let offset = self.line_col_to_offset(text, line, col);

    fn find_first_undo_candidate_index(&self, toggled_groups: &BTreeSet<usize>) -> usize {
        let mut engine = Engine::new(Rope::from(TEST_STR));
    type Output = Rope;
                return;
    #[test]

                                gc_dels = gc_dels.union(deletes);
    }
        let after_first_edit = engine.get_head_rev_id().token();
                leaf_offset = self.pos() - poffset;
    #[test]
            } else if incomp == GraphemeIncomplete::NextChunk {
    /// Collapse all selections in this view into a single caret

        self.pending_render = pending

fn find_leaf_split(s: &str, minsplit: usize) -> usize {
    fn gc_3() {

                self.run_op(op);
    }
        // todo: the correct Find instance needs to be updated with the new parameters
            thread_name: Sample::thread_name(),
    impl MergeTestState {
    /// The name to associate with the pid/tid.  Whether it's associated with
        }
    }
    // ============== Merge script tests
    // since undo and gc replay history with transforms, we need an empty set
                                                     "insert", node)
        // expand by each in expand_by
    pub fn max_size_in_bytes(&self) -> usize {
    }

                name, categories, None, start, end - start));
            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
fn default_session() -> (u64,u32) {
            let inserted = inserts.inserted_subset();
                name, categories, payload, SampleEventType::DurationBegin)),

struct Revision {
    #[test]
    /// part of the initial contents since any two `Engine`s need a common
    /// This is used to determined whether FindStatus should be sent to the frontend.
    }
        }
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            Replace { chars, preserve_case } =>
        assert!(a != empty);
fn find_common(a: &[Revision], b: &[Revision]) -> BTreeSet<RevId> {
                if previous_name.is_none() || previous_name.unwrap() != *thread_name {
    #[bench]
    fn to_base_units(s: &String, in_measured_units: usize) -> usize {
        assert_eq!(0, a.line_of_offset(1));
            let b = self.current.unwrap().as_bytes()[self.idx];
    fn gc_3() {
///
        engine.gc(&gc);
//
    pub pid: u64,
        assert_eq!(snapshot[8].name, "c");
    fn bench_trace_block_payload(b: &mut Bencher) {
                    selection.add_region(occ);
/// let result = xi_trace::trace_closure("something_expensive", &["rpc", "request"], || {
    pub fn select_all(&mut self, text: &Rope) {
    }
    #[bench]
        let text_b = Rope::from("zpbj");
        let trace = Trace::enabled(Config::with_limit_count(10));
    #[bench]
            "ops": ops,
        assert_eq!(snapshot[5].name, "b");
        self.drag_state = None;

    fn is_boundary(s: &String, offset: usize) -> bool {
    }
        }
impl Rope {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        self.revs.iter().enumerate().rev()
}


        let mut a = String::new();
            thread_name: None,
        let utf16_units = rope_with_emoji.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        }).collect();
    AsyncEnd,
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
        ];
            rendered_styles.push(1);
            }
/// some way.
///
        }

/// ```
        Some(self.cmp(other))
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
        // a, b, y, z, c, x
            1 if self.selection[0].is_caret() => {
        self.set_dirty(text);


            Edit { ei: 2, p: 4, u: 1, d: parse_delta("---z") },
        assert_eq!(snapshot[0].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
}
        }
}
        let styles = self.render_styles(client, styles, start_pos, pos,
        deletes_bitxor: Subset,
        next_expand_by = Vec::with_capacity(expand_by.len());
//
    }
            let not_in_tombstones = self.deletes_from_union.complement();
            Merge(2,0),
        assert_eq!(None, a.prev_grapheme_offset(0));
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
                    })
    fn is_ok_child(&self) -> bool {
/// # Examples
        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
            trace.closure_payload("y", &["test"], || {

            CategoriesT::StaticArray(ref arr) => arr.join(sep),
        let first_rev = &self.revs.first().unwrap();
        let d = engine.delta_rev_head(after_first_edit);
        for _i in 0..50 {
    /// Width in px units, requiring measurement by the front-end.
        let mut d = TracePayloadT::with_capacity(1);
                c.provide_context(&pl, self.pos() - poffset);

        let mut cursor = Cursor::new(self, offset);
                                  style_spans, &plan, pristine);
                peer.set_session_id(((i*1000) as u64, 0));
            self.tombstones = dels_from_tombstones.delete_from(&self.tombstones);
        }).collect();
// You may obtain a copy of the License at
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
        MergeTestState::new(6).run_script(&script[..]);
    }
        }
                    let sel_start = cursor.pos();
                payload: payload,
        selection.add_region(region);
        self.find_changed = FindStatusChange::None;
        let trace = Trace::enabled(Config::with_limit_count(10));
        if offset == s.len() {
        }
            pos
        if line < self.first_line {
            // cursor
#[macro_use]
                SelRegion::new(start, end)
    fn bench_single_timestamp(b: &mut Bencher) {
    use super::*;
    session: SessionId,
            Copy(usize, usize),
    let mut out = Vec::with_capacity(revs.len());
            }
    }
    out.as_mut_slice().reverse();
        }
// See the License for the specific language governing permissions and
            b.push('b');
    // this is the cost contributed by the timestamp to trace()


    fn test_samples_pulse() {
        match *self {
            Merge(3,1), Merge(5,3),

            let head = engine.get_head_rev_id().token();
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>

    #[test]
        println!("{:#?}", b_delta_ops);

        assert_eq!(utf16_units, 17);
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        let a = Rope::from("a\nb\nc");
            None

        let mut b = String::new();
    }

    #[inline]
        info.utf16_size
                WrapWidth::None => (),
//

        use serde::de::Visitor;
                metadata_name: None,
                        for line_num in start_line..end_line {
            replace: None,
        all_samples.push_back(sample);

            s = &s[splitpoint..];
    /// The name to associate with the pid/tid.  Whether it's associated with
}
                   style_spans: &Spans<Style>, line_num: usize) -> Value
}
        where S: Into<StrCow>, C:Into<CategoriesT>, P: Into<TracePayloadT>
        }
    None,
                for &region in rest {
    }
                    priority, inserts, deletes,
        // NOTE: we derive to an interim representation and then convert
        struct CategoriesTVisitor;
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-") },
                    }
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
pub fn trace_block_payload<'a, S, C, P>(name: S, categories: C, payload: P)
    }
        self.revs.last().unwrap().max_undo_so_far

        self.send_update_for_plan(text, client, styles,

    }
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
///
        //for next line
    #[serde(skip_serializing_if = "Option::is_none")]
    /// Selects a specific range (eg. when the user performs SHIFT + click).
        self.set_selection(text, sel);
            thread_name: Sample::thread_name(),
    fn from_base_units(s: &String, in_base_units: usize) -> usize {
        self.start_drag(offset, region.start, region.end);

    // TODO: have `base_rev` be an index so that it can be used maximally efficiently with the


                if previous_name.is_none() || previous_name.unwrap() != *thread_name {

        assert_eq!(Some(6), a.next_codepoint_offset(3));
    #[test]
    }
}
        b if b < 0xe0 => 2,

                        word_cursor.select_word()

        });
        let script = vec![
/// same priority into one transform to decrease the number of transforms that
// Copyright 2016 The xi-editor Authors.
        }
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),
#[inline]
#[derive(Clone, Debug, PartialEq, Eq)]

    ///
        /// Groups related edits together so that they are undone and re-done
        assert_eq!(snapshot[3].name, "b");
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
}
    } else if x < max {
    pub(crate) fn rewrap(&mut self, text: &Rope, wrap_col: usize) {
        ");
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,

            thread_name: None,
        Err(ref e) => {
        for i in 0..self.len() {
    pub fn request_lines(&mut self, text: &Rope, client: &Client,
}
            match memchr(b'\n', self.fragment.as_bytes()) {
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
        count_newlines(&s[..in_base_units])
    fn lines_med() {
    -> SampleGuard<'a>
    }
        assert_eq!(snapshot[1].name, "thread_name");
                    // fast-forward this revision over all common ones after it
    pub fn max_samples(&self) -> usize {
    selection: Selection,

use xi_rope::interval::Interval;
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
        // We add selection after find because we want it to be preferred if the
        self.tombstones = new_tombstones;
        fn run_script(&mut self, script: &[MergeTestOp]) {
#[derive(Clone, Copy)]
                    to_payload(("some description of the closure")))));
                Edit { ref inserts, ref deletes, ref undo_group, .. } => {
    pub fn max_samples(&self) -> usize {
            }
            utf16_count += 1;
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);
                        deletes_from_union
        let deletes_from_union_a = parse_subset("-#---");
/// # Performance
            Assert(0, "zacbd".to_owned()),
        // is the new edit in an undo group that was already undone due to concurrency?
    enabled: AtomicBool,
            write!(f, "{}", String::from(self))
            HighlightFind { visible } => {
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
                        let _ = s.pop();
    /// If `modify` is `true`, the selections are modified, otherwise the results
    DurationEnd,
        let cur_deletes_from_union = &self.deletes_from_union;
    #[serde(skip_serializing_if = "Option::is_none")]
        let inserts_1 = parse_subset_list("
    #[test]
        result
        }
        Some(&leaf[start_pos .. end])
#[derive(Clone, Copy)]
    FlowStart,
        assert_eq!(4, a.offset_of_line(2));
    pub(crate) fn offset_to_line_col(&self, text: &Rope, offset: usize) -> (usize, usize) {
        b.iter(|| sys_pid::current_pid());

        let trace = Trace::enabled(Config::with_limit_count(10));
        engine.edit_rev(1, 1, first_rev, d1.clone());
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
            }
    fn measure(info: &RopeInfo, _: usize) -> usize {
    pub fn instant<S, C>(&self, name: S, categories: C)
        let mut engine = Engine::new(Rope::from(TEST_STR));
    fn undo_4() {
    }
}
///
        assert_eq!(Some(17), a.next_grapheme_offset(9));


    #[bench]
/// conforms to is currently determined by the feature this library is compiled
    /// New offset to be scrolled into position after an edit.
    pub fn new_instant<S, C>(name: S, categories: C,
}
    }



                            max_undo_so_far: rev.max_undo_so_far,
}
    /// You could construct the "union string" from `text`, `tombstones` and
    type L = String;
    }
    }
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("999"));
}
                    }
    find: Vec<Find>,
        let b = a.slice(1, 10);
        assert!(r == a_rope.clone() + b_rope.clone());
        let first_rev = engine.get_head_rev_id().token();
                client.replace_status(self.view_id, &json!(replace))
    #[cfg(feature = "benchmarks")]
    } else if x < max {
    }
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
use std::string::ParseError;
}
            scroll_to: Some(0),
    /// of the chunks is indeterminate but for large strings will generally be
#[macro_use]
        Some(&leaf[start_pos .. end])
        assert_eq!(None, a.next_codepoint_offset(10));
        assert_eq!(trace.get_samples_limit(), 11);
        for _i in 0..50 {
        };
    pub thread_name: Option<StrCow>,
                        Err(e) => {
    inner: LinesRaw<'a>
    #[cfg(feature = "benchmarks")]


pub fn trace_payload<S, C, P>(name: S, categories: C, payload: P)
        assert_eq!(None, a.prev_grapheme_offset(0));
        assert_eq!(2, expand_by[1].0.priority);
    /// Generally racy since the underlying storage might be mutated in a separate thread.
    /// next occurrence before (`true`) or after (`false`) the last cursor is selected. `wrapped`
    /// We attempt to reduce duplicate renders by setting a small timeout
/// However, anything that can be converted into a Cow string can be passed as
/// Conceptually, see the diagram below, with `.` being base revs and `n` being
        d_builder.replace(Interval::new_closed_open(39, 42), Rope::from("DEEF"));
    sample: Option<Sample>,

        Self {

                }
            // copy the current state
            ix = sel_end as isize;
        use self::MergeTestOp::*;
    fn delta_rev_head() {
            update["lines"] = json!(lines);
    Bytes(usize),
    }
///
struct DragState {

/// A rope data structure.
                                deletes.transform_shrink(&gc_dels))
    }
///

            a.push('a');
    pub fn get_samples_limit(&self) -> usize {
pub struct Lines<'a> {
            enabled: AtomicBool::new(false),
            Assert(1, "pb".to_owned()),
use width_cache::WidthCache;
/// required). Mutations are generally copy-on-write, though in-place edits are
    /// Time complexity: O(log n)
        b.add_span(height, 0, 0);
    }
                            rendered_lines.push(line);

        let mut d_builder = Builder::new(TEST_STR.len());
        let b = a.slice(1, 10);
/// std::mem::drop(trace_guard); // finalize explicitly if
/// fn something_expensive() {
///
        #[derive(Serialize, Deserialize)]
            Assert(2, "ab".to_owned()),
            view_id: view_id,
                    self.set_selection(text, selection);
    fn merge_insert_only_whiteboard() {
        ];
        self.lc_shadow = b.build();
}
/// }
    TRACE.block(name, categories)
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
#[inline]
        let mut b = TreeBuilder::new();
}
categories_from_constant_array!(2);
            DeltaElement::Copy(ref start, ref end) => {
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("!!") },
    }
    TRACE.enable_config(config);
                // merge logic.
    pub fn select_word(&mut self, text: &Rope, offset: usize, multi_select: bool) {
    Matches


                    if !deletes.is_empty() {

        where S: Into<StrCow>, C: Into<CategoriesT>
    }
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
    move_delta.apply(tombstones)

                },
            Merge(0,2), Merge(1, 2),
        }
                            }
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
categories_from_constant_array!(5);
    (out, text, tombstones, deletes_from_union)
            Assert(0, "adc".to_owned()),
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
        samples[1].timestamp_us = 5;
        ----
        Some(&leaf[start_pos .. end])
    }
    /// For safety, this will panic if any revisions have already been added to the Engine.
    }
        let mut leaf_offset = pos - offset;

        }
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },

            Scroll(range) => self.set_scroll(range.first, range.last),
    pub fn enabled(config: Config) -> Self {
    /// Replacement string.
    }
/// # Performance
            Assert(0, "acrbd".to_owned()),
            }
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
    },
        }
        min
        tombstones = new_tombstones;
    #[serde(skip_serializing_if = "Option::is_none")]

    }
            revs: vec![rev],
    // TODO: insert from keyboard or input method shouldn't break undo group,
            replace_changed: false,
    fn push_maybe_split(&mut self, other: &String, iv: Interval) -> Option<String> {
            black_box(trace.block_payload(
        let first_rev = engine.get_head_rev_id().token();
///
    fn deserialize<D>(deserializer: D)
        }
        let trace = Trace::enabled(Config::with_limit_count(10));
        } else {
/// from multiple distributed sources (i.e. you want to sort the merged result
        for i in 0..5_000 {
            }
    }
        // TODO: want to let caller retain more rev_id's.
        assert_eq!(Some(0), b.prev_codepoint_offset(2));
        if s.len() <= MAX_LEAF {
                l = nl;
        }
/// fn something_expensive() -> u32 {
    /// of a certain `rev_index`. In other words, the deletes from the union string at that time.
                         hls: &[(usize, usize)],
        trace.closure_payload("z", &["test"], || {},
        ");
use xi_trace::trace_block;
        assert_eq!(Some(5), b.next_codepoint_offset(2));
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
use std::collections::hash_map::DefaultHasher;
    #[inline]
        engine.edit_rev(1, 3, new_head_2, d3);
        // move deleted or undone-inserted things from text to tombstones
        };
        let undone = self.undone_groups.contains(&undo_group);
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
                //self.end - prev_pos
                    }

            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));
/// # use xi_rope::Rope;
        }
use xi_trace::trace_block;
                    let mut e = &mut self.peers[ei];
    /// Sets the selection to a new value, invalidating the line cache as needed.
    /// Selects a specific range (eg. when the user performs SHIFT + click).
        } else {
                break;
    fn from_str(s: &str) -> Result<Rope, Self::Err> {
        } else {
categories_from_constant_array!(5);
                    } else {
    fn prev(s: &String, offset: usize) -> Option<usize> {
    fn do_selection_for_replace(&mut self, text: &Rope) {
    }
    }
        }
    fn lines_small() {


        self.utf16_size += other.utf16_size;
        for rev in self.revs[rev_index..].iter().rev() {
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
    pub categories: Option<CategoriesT>,
    pub fn new_duration<S, C>(name: S,
            Assert(1, "abc".to_owned()),
        next_expand_by = Vec::with_capacity(expand_by.len());
                    let sel_start = cursor.pos();
            self.record(Sample::new_duration(

        let result = closure();
        let sample_name = to_cow_str(meta.sample_name());
    fn test_trace_disabled() {
/// Is tracing enabled.  Technically doesn't guarantee any samples will be
        let mut d = TracePayloadT::with_capacity(1);

        let trace = Trace::enabled(Config::with_limit_count(11));
            //let prev_pos = self.cursor.pos();
    }
const MIN_LEAF: usize = 511;
    /// how many times it has been deleted, so if a character is deleted twice
// Licensed under the Apache License, Version 2.0 (the "License");
}
            offset,

        let DeltaOp { rev_id, priority, undo_group, mut inserts, mut deletes } = op;
            Assert(1, "apbj".to_owned()),
    /// The largest undo group number of any edit in the history up to this
                        Some(end) => max(0, end - 1),
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    breaks: Option<Breaks>,
    for r in revs {
        assert_eq!(None, a.next_codepoint_offset(10));
    }
        // rebase the deletion to be after the inserts instead of directly on the head union
                    } else {
            Merge(1,0),
    #[serde(serialize_with = "serialize_event_type")]
            Merge(0,1),
/// let a = Rope::from("hello world");
        if offset == 0 {
                if self.fragment.is_empty() {
        while !leaf.is_char_boundary(end) {
        let last = max(last, 0) as usize;
            Merge(0,2), Merge(1, 2),
}
        engine.edit_rev(1, 2, first_rev, d1.clone());
/// A guard that when dropped will update the Sample with the timestamp & then
            Assert(0, "acbd".to_owned()),
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        ];
/// ```

        // invert the changes to deletes_from_union starting in the present and working backwards

                warn!("Usage of click is deprecated; use do_gesture");



    Edit {
                    s = &s[..s.len() - 1];
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
use width_cache::WidthCache;
    /// finer grain invalidation.
            Find { chars, case_sensitive, regex, whole_words } =>
            let new_end = self.line_of_offset(text, iv.start() + new_len) + 1;
                        sample.tid));
impl Metric<RopeInfo> for BaseMetric {
        /// Used to order concurrent inserts, for example auto-indentation
    pub(crate) fn get_buffer_id(&self) -> BufferId {
        assert!(a == a2);
                    let sel_end_ix = clamp(region.max(), start_pos, pos) - start_pos;
    }
        self.revs.last().unwrap().rev_id
}
    pub fn slice_to_string(&self, start: usize, end: usize) -> String {
    fn test_disable_drops_all_samples() {
            duration_us: None,
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);


    selection: Selection,
    /// Selects the next find match.
        let next_line_offset = self.offset_of_line(text, line + 1);
        assert_eq!(snapshot[1].name, "thread_name");
        let mut cursor = Cursor::new(self, offset);
}
use std::cmp::{min,max};
#[derive(Clone, Copy)]
            trace: None,
            for i in 0..count {
                                toggled_groups: &toggled_groups - gc_groups,
    enabled: AtomicBool,

    /// Find what the `deletes_from_union` field in Engine would have been at the time
//
use serde::de::{Deserialize, Deserializer};
                metadata_name: None,
        }
                serializer.serialize_newtype_variant("DeltaElement", 1,
        }
        self.subseq(iv)
        tombstones = new_tombstones;
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {

                    text.slice_to_string(region.min(), region.max())
    /// Storage for all the characters that have been deleted  but could
    /// For safety, this will panic if any revisions have already been added to the Engine.
    priority: usize,
        #------
        engine.edit_rev(1, 1, first_rev, d1.clone());
        if self.is_enabled() {
                RenderTactic::Render => {
    edit: Contents,

        trace.instant("2", &["test"]);
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        let s = String::deserialize(deserializer)?;

            base_rev: RevToken, delta: Delta<RopeInfo>) {
    fn measure(_: &RopeInfo, len: usize) -> usize {
impl StringArrayEq<Vec<String>> for &'static [&'static str] {
    }
    ///
    #[serde(rename = "sort_index")]
                        }
    /// Returns a u64 that will be equal for equivalent revision IDs and
        let mut pos = self.pos();
        assert_eq!(snapshot[7].name, "c");
    pub fn get_samples_count(&self) -> usize {
    // Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,
///

            't' => SampleEventType::FlowInstant,
            sample: Some(Sample::new_duration_marker(
    #[test]
        assert_eq!(Some(9), a.prev_grapheme_offset(17));
        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =
                metadata_sort_index: sort_index,

}
                    undo_group: i+1,
                trace.instant_payload("b", &["test"], to_payload("test_get_sorted_samples"));
            MetadataType::ProcessName {name} => (Some(name), None),
        self.pending_render
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
    }
fn shuffle(text: &Rope, tombstones: &Rope,
            } else {
            thread_name: None,
    }
    }

        }
    /// # Panics
                Contents::Edit {inserts, ..} => inserts,
            SampleEventType::AsyncInstant => 'n',
            Assert(1, "zpbj".to_owned()),
pub struct Utf16CodeUnitsMetric(usize);
        assert_eq!(utf16_units, 9);
        trace.instant("5", &["test"]);
            } else {
        // we add the special find highlights (1) and selection (0) styles first.
            last_line -= 1;
        assert_eq!(trace.get_samples_limit(), 11);

            _ => return
///
            panic!("line number {} beyond last line {}", line, max_line);
        }
        }
            DeltaElement::Insert(ref node) =>
            .map(|(i, _)| i)
/// a.edit_str(1, 9, "era");

    /// The session ID used to create new `RevId`s for edits made on this device
///
        let region = SelRegion::caret(offset);
    fn merge_idempotent() {
    /// Invalidate the current selection. Note that we could be even more
    /// Select entire buffer.
    fn undo() {

            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        let initial_rev = engine.get_head_rev_id().token();
        self.do_set_replace(replacement, false);
    }
    fn identity() -> Self {
    /// indicates a search for the next occurrence past the end of the file.
            }
/// Tracing is disabled initially on program launch.
                                     categories: C,
                    }
    }
                                     categories: C,
        let a = Rope::from("a\nb\n");
        AssertMaxUndoSoFar(usize, usize),
        }
                let (ins, _) = delta.factor();
}
        assert_eq!(trace.samples_cloned_unsorted().len(), 4);
        // the front-end, but perhaps not for async edits.
        let text_b = Rope::from("zpbj");
        // We could probably reduce the cloning of selections by being clever.
}
}
    // encourage callers to use Cursor instead?
        let inserts_2 = parse_subset_list("
/// implements `From<Rope> for String` and `From<&Rope> for String`, for easy
            MetadataType::ProcessLabels {..} => (None, None)
        let trace = Trace::disabled();
            MetadataType::ProcessSortIndex {..} => "process_sort_index",
        ");
        Ok(Rope::from(s))
            None
                text.offset_of_line(line)
    }
                                                        &mut line_cursor,
}
    /// in the slice up to `offset`.
            cur_len_utf16 += u.len_utf16();

    }
            }
        let a = Rope::from("");
#[cfg(test)]



        expand_by = next_expand_by;
#[derive(Clone, Copy)]
        // todo: this will be changed once multiple queries are supported
        assert_eq!(0, a.offset_of_line(0));
    Instant,
    #[cfg(feature = "benchmarks")]
        // This might be an over-specified test as it will
        }
                for &region in rest {
                    let _ = s.pop();
            b.push_str(&c);
        self.replace = Some(Replace { chars, preserve_case });
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("z--") },
                let offset = self.selection[0].start;
            // I think it's a precondition that this will never be called
        // likely be improved.
            Assert(0, "ab".to_owned()),
            Assert(0, "adc".to_owned()),
            }
        let mut deletes_from_union = Cow::Borrowed(&self.deletes_from_union);
        deletes_from_union
    where S: Into<StrCow>, C: Into<CategoriesT>
    }
            }
    /// The selection state for this view. Invariant: non-empty.

    }
    /// The `pristine` argument indicates whether or not the buffer has
        let mut deletes_from_union = self.deletes_from_union_for_index(rev_index);
        }
    }
    fn test_trace_disabled() {
        if offset == 0 {
        let end = self.line_col_to_offset(text, line + 1, 0);
                } else {
use std::cmp::{min,max};
    #[test]
        assert_eq!(soln, String::from(engine.get_head()));
            // with offset == 0, but be defensive.
                    text.slice_to_string(region.min(), region.max())
    }
    /// An iterator over the raw lines. The lines, except the last, include the
        self.scroll_to_cursor(text);
/// patterns. Any large runs of typing in the same place by the same user (e.g
                Some(filename) => {
        self.revs.push(new_rev);
            let b_new = rearrange(b_to_merge, &common, other.deletes_from_union.len());
            }),
    fn do_cancel(&mut self, text: &Rope) {
            'O' => SampleEventType::ObjectSnapshot,
            result["cursor"] = json!(cursors);
        if offset == s.len() {
    #[test]
        assert_eq!(output, String::from(engine.get_head()));
            self.unset_find();
    pub fn push_str(&mut self, mut s: &str) {
        self.pending_render
        self.selection = sel;
        client.def_style(&style.to_json(ix));
    }
            SampleEventType::CompleteDuration => 'X',
            match rev.edit {
            }),
#![cfg_attr(feature = "cargo-clippy", allow(

    pub fn byte_at(&self, offset: usize) -> u8 {
            utf16_count += 1;
            self.first_line = line;
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
impl Metric<RopeInfo> for Utf16CodeUnitsMetric {
            }
            Merge(0,2), Merge(1, 2), Merge(3, 2),
    /// The process the sample was captured in.
    }
        if self.len() <= MAX_LEAF {
    }
    /// Tracks whether there has been changes in find results or find parameters.
    fn eq(&self, other: &CategoriesT) -> bool {
    utf16_count
            "ops": ops,
        where S: Into<StrCow>, C: Into<CategoriesT>, F: FnOnce() -> R
        where S: Into<StrCow>, C: Into<CategoriesT>
        } else {
/// Applies an optimization where it combines sequential revisions with the
            Assert(1, "abc".to_owned()),
    #[test]
    }
                   text: &Rope, start_of_line: &mut Cursor<RopeInfo>,
        let (leaf, pos) = cursor.get_leaf().unwrap();
                    }
        #[derive(Serialize, Deserialize)]
        }
                    let e = &mut self.peers[ei];



    /// This case is a regression test reproducing a panic I found while using the UI.
            let a_new = rearrange(a_to_merge, &common, self.deletes_from_union.len());
        Engine {
        assert_eq!(TEST_STR, String::from(engine.get_head()));
    #[test]
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
                            if !inserts.is_empty() {
        self.hash(&mut hasher);
            engine.undo(undos);
//! this central engine. It provides the ability to apply edits that depend on
        if self.scroll_to.is_none() && wrap {
// You may obtain a copy of the License at
                    text.slice_to_string(region.min(), region.max())
fn ns_to_us(ns: u64) -> u64 {
    first_line: usize,
/// first can make it ~1.7x slower than a regular trace.
                    let e = &mut self.peers[ei];

        }
        assert_eq!(0, a.lines_raw_all().count());
    }

            let new_region = region_movement(movement, region, self,
        for region in self.selection.regions_in_range(start_pos, pos) {
    #[test]

        match *self {
            a = a + Rope::from(&c);
    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
    fn test_get_samples_nested_trace() {
    }
                            plan: &RenderPlan, pristine: bool)
                None => {
    max_undo_so_far: usize,
            shuffle(&text_with_inserts, &tombstones, &expanded_deletes_from_union, &new_deletes_from_union);
/// std::mem::drop(trace_guard); // finalize explicitly if

            None => text.line_of_offset(offset)
    /// Tracks whether the replacement string or replace parameters changed.
        };
//
        ];
    pub fn after_edit(&mut self, text: &Rope, last_text: &Rope,
                return None;
fn default_session() -> (u64,u32) {
    }
        } else {
#[inline]
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        let max_undo_so_far = self.revs.last().unwrap().max_undo_so_far;
        // send updated replace status if changed
    /// Find parameters and number of matches changed.
    }
            Assert(1, "apbj".to_owned()),
            SampleEventType::FlowEnd => 'f',
                MergeTestOp::AssertAll(ref correct) => {

        let rev = Revision {
        self.scroll_to = Some(end);
            let d = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), i);
        max
}
            ix = sel_end as isize;
/// Returns all the samples collected so far.  There is no guarantee that the
        &self.selection

    inserts: InsertDelta<RopeInfo>,
                }
}
        let len = match first_rev.edit {
                        };

                        &mut start[bi]
                (drag_state.min, max(offset, drag_state.max))
        // todo: for now only a single search query is supported however in the future
                        };
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
                    deletes_from_union = Cow::Owned(deletes_from_union.transform_union(inserts));
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let b_rope = Rope::from(&b);
        // rebase delta to be on the base_rev union instead of the text
        all_samples.push_back(sample);
    }
        }
    // TODO: maybe switch to using a revision index for `base_rev` once we disable GC
        }, to_payload("test_get_sorted_samples"));
/// # Performance
    // TODO make this faster somehow?
        // insert a character at the beginning
            None
        };
pub struct LinesMetric(usize);  // number of lines

    pub fn collapse_selections(&mut self, text: &Rope) {
    #[serde(default = "default_session", skip_serializing)]
    ///

    fragment: &'a str
        ix
    /// The thread the sample was captured on.  Omitted for Metadata events that
                self.select_word(text, offset, true)
    out
        a.push('\n');
/// Boundary is atomic and determined by codepoint boundary.
/// However, anything that can be converted into a Cow string can be passed as
    pub fn samples_cloned_unsorted<'a>(&'a self) -> Vec<Sample> {
// ======== Merge helpers
                },
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            //if self.cursor.is_boundary::<BaseMetric>() {
        self.height = last - first;
            AssertMaxUndoSoFar(1,3),
mod tests {
        }
    }
// distributed under the License is distributed on an "AS IS" BASIS,
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
}
        let mut selection = match multi_select {
    }
/// Find an index before which everything is the same
    ///
    fn to_payload(value: &'static str) -> TracePayloadT {
    cursor: Cursor<'a, RopeInfo>,
        // expand by each in expand_by
    fn from(r: Rope) -> String {
        engine.gc(&gc);
                        let offset = self.offset_of_line(text, start_line);
}
            rebase(expand_by, b_delta_ops, text_a, tombstones_a, deletes_from_union_a, 0);

        }

        self.deletes_from_union = deletes_from_union;
/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
/// rather than just this processe's samples).
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
        Self {
        if offset == 0 {
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
            self.set_dirty(text);
                         first_line: usize, last_line: usize, pristine: bool) {
            Drag(MouseAction { line, column, .. }) =>
    // TODO(vlovich): Replace all of this with serde flatten + rename once
    fn bench_trace_closure_payload(b: &mut Bencher) {
            max_undo_so_far: std::cmp::max(undo_group, head_rev.max_undo_so_far),
                              to_payload("test_get_samples"));
        debug_subsets(&rebased_inserts);
    #[test]
                trace.instant_payload("b", &["test"], to_payload("test_get_samples_nested_trace"));

                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
                },
    // * Unicode width (so CJK counts as 2)
    }
        assert!(r != b_rope + a_rope);
    fn line_offsets() {
        let is_base = base_revs.contains(&rev.rev_id);
    fn replace_small() {
        let mut new_deletes = deletes.transform_expand(&deletes_at_rev);
                MergeTestOp::Edit { ei, p, u, d: ref delta } => {

        let style = style_map.merge_with_default(style);
        b if b < 0xe0 => 2,
        delta.end()
            Edit { ei: 2, p: 1, u: 1, d: parse_delta("ab") },
        assert_eq!(snapshot[1].args.as_ref().unwrap().metadata_name.as_ref().is_some(), true);
    #[test]
            Merge(0,2), Merge(1, 2),
    #[inline]
        engine.gc(&gc);

    fn test_trace_disabled() {
/// ```rust

                        ops.push(self.build_update_op("copy", None, seg.n));
        }
                        ops.push(self.build_update_op("copy", None, seg.n));
    }
    TRACE.disable();
                                gc_dels = gc_dels.union(deletes);
/// an argument.
}
    // even worth the code complexity.
    /// Returns the regions of the current selection.
        where S: Into<StrCow>, C: Into<CategoriesT>

            replace_changed: false,
    pub fn token(&self) -> RevToken {
        MergeTestState::new(2).run_script(&script[..]);
            SelectionForFind { case_sensitive } =>
        deletes_from_union = new_deletes_from_union;
    }
        let text_a = Rope::from("zcbd");
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
                metadata_name: None,
    /// after an edit is applied, to allow batching with any plugin updates.
        serializer.serialize_str(&String::from(self))
        assert_eq!(rope.line_of_offset(3), 1);
            Assert(0, "ab".to_owned()),
impl NodeInfo for RopeInfo {
                    to_payload(("some payload for the block"))));
    }
            SampleEventType::FlowInstant => 't',
            if self[i] != other[i] {
        let base: BTreeSet<RevId> = [3,5].iter().cloned().map(basic_rev).collect();
use std::borrow::Cow;
    /// Only number of matches changed
                    }
    fn gc_5() {
            edit: Undo { toggled_groups: BTreeSet::new(), deletes_bitxor: deletes_from_union.clone() },
        let len = min(self.end - self.cursor.pos(), leaf.len() - start_pos);
    pub fn iter_chunks(&self, start: usize, end: usize) -> ChunkIter {
    fn next_codepoint_offset_small() {
                        gc_dels = new_gc_dels;
        } else {
}
    }
            trace.closure("something", &[], || ());
    pub fn block_payload<S, C, P>(&self, name: S, categories: C, payload: P)

                   whole_words: bool) {
            _ => return
        }
                        priority, undo_group,
    }
        (self.pid, self.timestamp_us).hash(state);
                    if !deletes.is_empty() {
            MetadataType::ProcessLabels {..} => (None, None)
        self.replace_changed = true;
        // 1 for exe name & 1 for the thread name
                    }
    #[cfg(feature = "benchmarks")]
//     http://www.apache.org/licenses/LICENSE-2.0
#[inline]
    }
    /// Tracks whether the replacement string or replace parameters changed.
                        deletes_from_union
            Some(region) => {
            lines: count_newlines(s),
}
    pub(crate) fn do_edit(&mut self, text: &Rope, cmd: ViewEvent) {
    /// after an edit is applied, to allow batching with any plugin updates.
            pos -= 1;
        }, new_text, new_tombstones, new_deletes_from_union)
                Some(filename) => {
        let inserted = inserts.inserted_subset();
        for op in &delta_ops {
            Merge(0,1),
    }
    /// Selects an entire word and supports multi selection.
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));

        let snapshot = trace.samples_cloned_sorted();
        let r = r + Rope::from(&b[MIN_LEAF..]);
impl fmt::Debug for Rope {
            let head = engine.get_head_rev_id().token();
            let mut sample = self.sample.take().unwrap();
    }
        assert_eq!(Some(9), a.next_grapheme_offset(3));
            }
        all_samples.reset_limit(config.max_samples());
/// Creates a duration sample that measures how long the closure took to execute.
                        deletes_from_union = deletes_from_union.union(deletes);
    /// Set the selection to a new value.
            "styles": styles,
///
    }
            result.push_str(chunk);
            if let Edit { ref inserts, .. } = rev.edit {
        let script = vec![
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
    // if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.
    }
                                                        style_spans, line_num);
    /// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.
            size: Size::default(),
    fn replace_small() {
        trace.closure_payload("x", &["test"], || (),
                let (nl, noffset) = self.next_leaf()?;
use bytecount;
        } else {
pub struct Trace {
        for op in &delta_ops {
    #[test]
/// # Performance
            let b = self.current.unwrap().as_bytes()[self.idx];
                                     categories: C,
        }
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
        b.iter(|| {

            replace_changed: false,

            .map_or(0, |ref s| s.timestamp_us);
            self.collapse_selections(text);
        // since character was inserted after gc, editor gcs all undone things
            } else {
        }
#[inline]
                              payload: Option<TracePayloadT>,
#[inline]
    // in a single session.
        // of the delta so we can set the cursor before or after the edit, as needed.
        let initial_rev = engine.get_head_rev_id().token();
        --#--
    }
    }
pub struct BaseMetric(());
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        let d2 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("a"), TEST_STR.len()+1);
pub fn samples_cloned_unsorted() -> Vec<Sample> {
/// creation.  Roughly corresponds to start_ns but instead there's a
                },
            inner: self.iter_chunks(start, end),
                out.push((prio, inserts));

        // todo: for now only a single search query is supported however in the future
    session1: u64,
        &self.text
                if let Edit { ref undo_group, ref inserts, ref deletes, .. } = rev.edit {
    }
        rendered_styles
            rev_id: self.next_rev_id(),
        }
/// with.  By default, the type is string-like just like name.  If compiled with
            Some(ref breaks) => {
        if let Some(new_scroll_pos) = self.scroll_to.take() {
categories_from_constant_array!(9);
    }
                                  _allow_same: bool, modify_selection: &SelectionModifier) {
        mut deletes_from_union: Subset, mut max_undo_so_far: usize) -> (Vec<Revision>, Rope, Rope, Subset) {
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    }
                }
        // set last selection or word under current cursor as replacement string

            SampleEventType::Metadata => 'M'
        let old_tombstones = shuffle_tombstones(&self.text, &self.tombstones, &self.deletes_from_union, &prev_from_union);
        inserts: Subset,
            false

                let to_gc : BTreeSet<usize> = [i-max_undos].iter().cloned().collect();
//
    }
        while !leaf.is_char_boundary(end) {

    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

            } else if incomp == GraphemeIncomplete::PrevChunk {
        for (iv, style) in style_spans.iter() {
    #[test]
            Assert(0, "ab".to_owned()),
            MetadataType::ThreadSortIndex {..} => "thread_sort_index",

/// ```

            ModifySelection(movement) => self.do_move(text, movement, true),
        let line_len = MAX_LEAF + MIN_LEAF - 1;


    fn to_payload(value: &'static str) -> &'static str {
    DynamicArray(Vec<String>),
        }



/// ```
            }
            }
            self.deletes_from_union = self.deletes_from_union.transform_shrink(&gc_dels);
    }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
// Licensed under the Apache License, Version 2.0 (the "License");
/// When compiling with `dict_payload` or `json_payload`, this is ~2.1x slower
        let mut r = Rope::from("27");
        // This might be an over-specified test as it will

            MetadataType::ThreadName {..} => "thread_name",
            .find(|&(_, ref rev)| rev.rev_id == rev_id)
            }
    1
///     let _guard = xi_trace::trace_block("something_else_expensive", &["rpc", "response"]);
/// Replace part of a `Rope`:
            SampleEventType::Instant => 'i',
        let old_deletes_from_union = self.deletes_from_cur_union_for_index(rev_index);
                                           client, iv, new_len, px),
        result
/// RFC reference : https://tools.ietf.org/html/rfc3629#section-4
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
                }
        let offset = self.line_col_to_offset(text, line as usize, 0);
            tid: sys_tid::current_tid().unwrap(),
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
    ///
    }
/// Internally, the implementation uses reference counting (not thread safe, though
        for i in 1..(s1.len() * 3) {
                        let (inserts, deletes) = if gc_dels.is_empty() {
            self.pid == other.pid &&
/// of Sample that determines order.
    /// tiny it is effectively O(n). This iterator does not allocate.
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
        a.lines_all().collect::<Vec<_>>());
    }
        offset
            name: name.into(),
        assert_eq!(Some(10), a.next_codepoint_offset(6));
        update


    #[should_panic]
        assert_eq!(1, expand_by[0].0.priority);
    for rev in revs.iter().rev() {
        }
        let pos = soft_breaks.map_or(start_of_line.next::<LinesMetric>(), |bc| {
    }
    pub fn set_dirty(&mut self, text: &Rope) {
        let chars_left = (edits-max_undos)+1;
    // * Unicode codepoints
            'E' => SampleEventType::DurationEnd,
        #------
            SampleGuard::new(&self, name, categories, Some(payload.into()))
        };
    #[test]
        assert_eq!(utf16_units, 17);
    /// A delta that, when applied to `base_rev`, results in the current head. Panics
    /// Determines the current number of find results and search parameters to send them to
    // this is the cost contributed by the timestamp to trace()
    }
    /// Does a drag gesture, setting the selection from a combination of the drag
//! this central engine. It provides the ability to apply edits that depend on
        engine.edit_rev(1, 3, new_head_2, d3);
    fn test_get_samples() {
        self.set_selection(text, new_sel);
            categories: Some(categories.into()),

    fn merge_session_priorities() {
        }
        let d = RopeDelta_::deserialize(deserializer)?;
    Instant,
            SelectAll => self.select_all(text),
            engine.undo(to_undo.clone());
categories_from_constant_array!(10);
/// some way.
                MergeTestOp::Merge(ai, bi) => {
}
                    }
}
    fn next(s: &String, offset: usize) -> Option<usize> {

    }
        MergeTestState::new(6).run_script(&script[..]);
                el.end()
            MergeTestState { peers }

    pub fn next_utf8_chunk_in_leaf(&mut self, chunk_size: usize) -> &'a str {


        delta.apply(&self.text)
                           style: &Style) -> usize {
    }
        let offset = self.line_col_to_offset(text, line, col);
                                                        style_spans, line_num);
    fn measure(info: &RopeInfo, _: usize) -> usize {
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        b.iter(|| black_box(time::precise_time_ns()));
    ObjectSnapshot,
        info.lines
    ProcessLabels { labels: String },
        }
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
    fn merge_simple_delete_1() {
            let (start, end) = if offset < drag_state.offset {
                                                    style_spans, client,
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
// Unless required by applicable law or agreed to in writing, software

                        deletes_from_union
    pub(crate) fn get_replace(&self) -> Option<Replace> {
            duration_us: None,
    pub fn find_status(&mut self, matches_only: bool) -> Vec<FindStatus> {
        trace.instant("2", &["test"]);
        let new_sel = self.selection.apply_delta(delta, true, keep_selections);
fn deserialize_event_type<'de, D>(d: D) -> Result<SampleEventType, D::Error>
    #[test]
/// See `trace_payload` for a more complete discussion.
fn find_leaf_split_for_bulk(s: &str) -> usize {
        // a, b, y, z, c, x
            MetadataType::ThreadName {..} => "thread_name",
    pub duration_us: Option<u64>,
        for _ in 0..line_len {
            client.find_status(self.view_id, &json!(self.find_status(matches_only)));
/// * `name` - A string that provides some meaningful name to this sample.
        }
        assert_eq!(soln, String::from(engine.get_head()));
        ];
pub type TracePayloadT = std::collections::HashMap<StrCow, StrCow>;
                        None
}
struct FullPriority {
fn find_base_index(a: &[Revision], b: &[Revision]) -> usize {

/// `dict_payload` then a Rust HashMap is expected while the `json_payload`
            engine.undo(undos);
            fn visit_str<E>(self, v: &str) -> Result<CategoriesT, E>
///
        assert_eq!(correct, rearranged_inserts);
                            ops.push(self.build_update_op("skip", None, n_skip));
        let thread = std::thread::current();

    // this is the cost contributed by the timestamp to trace()
/// as opposed to thousands of revisions.

    }

pub fn disable_tracing() {
            offset = text.len();
}
/// typing a paragraph) will be combined into a single segment in a transform
        ]);
    #[cfg(feature = "benchmarks")]
use std::str::FromStr;
    /// want to set the process name (if provided then sets the thread name).
            Edit { ei: 2, p: 2, u: 1, d: parse_delta("z--") },
    }
    fn can_fragment() -> bool { true }
mod tests {
                if !inserts.is_empty() {

        let script = vec![
    fn eq_small() {


        -##-
        assert_eq!(snapshot[8].name, "x");
    /// Return the offset of the codepoint after `offset`.
    }
        true
        let chars_left = (edits-max_undos)+1;

    // of the union string length *before* the first revision.
        // interior of last line should be last line
    first_line: usize,

                    self.fragment = &self.fragment[i + 1 ..];
        assert_eq!(Some(6), a.next_codepoint_offset(3));
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
        if b >= 0xf0 {

    /// For safety, this will panic if any revisions have already been added to the Engine.
            self.event_type == other.event_type &&
/// # Performance
///
        for r in &self.revs[ix + 1..] {
use std::cell::RefCell;
}
    TRACE.samples_cloned_unsorted()
    #[test]
enum FindStatusChange {
        assert_eq!(vec!["a", "b", "c"], a.lines_all().collect::<Vec<_>>());
    #[serde(default = "initial_revision_counter", skip_serializing)]
        if self.is_enabled() {
            thread_name: Sample::thread_name(),
        if self.is_enabled() {
    } else if x < max {
            last_line -= 1;
            Some(right_str)

        let deletes_from_union = Subset::new(0);
        Merge(usize, usize),
    buffer_id: BufferId,
    /// Exposed for unit tests.
    }

                //// if we aren't on a boundary we can't be at the end of the chunk
    #[test]
        }

        } else {
                return;
        let end = time::precise_time_ns();

            lines: 0,
            deletes_from_union = match rev.edit {
/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new

            if Some(priority) == last_priority {
            self.pid == other.pid &&
    /// We attempt to reduce duplicate renders by setting a small timeout
    }
        
            rev_id: RevId { session1: 0, session2: 0, num: 0 },

        assert_eq!(String::from(&r).lines().collect::<Vec<_>>(),
    }
        fn run_script(&mut self, script: &[MergeTestOp]) {

    TRACE.enable_config(config);
                              to_payload("test_get_samples"));
    #[test]
        self.find.first_mut().unwrap().do_find(text, search_query, case_sensitive, false, true);
/// # Examples
        let inserts = parse_subset_list("
            Assert(0, "acrbd".to_owned()),
            trace.instant_payload("a", &["test"], to_payload("test_get_sorted_samples"));
    }
        let b = Rope::from("b");
    // allowing us to use the same method to insert the text into the tombstones.
        let result = closure();
    All,
// The advantage of using a session ID over random numbers is that it can be
// See the License for the specific language governing permissions and
        engine.gc(&to_undo);
        }
/// Find an index before which everything is the same
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
        assert_eq!(trace.get_samples_limit(), 20);
        assert_eq!(2, a.line_of_offset(4));
    #[serde(skip_serializing_if = "Option::is_none")]
            Merge(1,0), Merge(2,0),
        let mut engine = Engine::new(Rope::from(TEST_STR));

        let mut cursor = Cursor::new(self, offset);
///
        engine.undo([1,2].iter().cloned().collect());
            }
        assert_eq!(snapshot.len(), 9);
                        gc_dels = gc_dels.transform_expand(inserts);
        // the front-end, but perhaps not for async edits.
        assert_eq!(vec!["a\n", "b\n"], a.lines_raw_all().collect::<Vec<_>>());

    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        delta.serialize_field("els", &self.els)?;
/// than a string that needs to be copied (or ~4.5x slower than a static string)
        plan.request_lines(first_line, last_line);
            name: sample_name,
    ///
    /// Returns a tuple of a new `Revision` representing the edit based on the
                        },
        assert_eq!(samples[0].name, "remote pid");
        self.first_line = first;
            self.find.push(Find::new());
                                          closure: F, payload: P)
        b.iter(|| black_box(trace.instant("something", &["benchmark"])));
            trace: None,
            Merge(0,5), Merge(2,5), Merge(4,5), Merge(1,4),
{
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
            if let Edit { ref inserts, .. } = rev.edit {
    #[cfg(feature = "dict_payload")]
            Merge(1,0),
    fn test_get_samples() {
}
        assert_eq!(0, r.line_of_offset(a.len() - 1));
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
                            ops.push(self.build_update_op("skip", None, n_skip));
    // and partly because you need to retain more undo history, to supply input to the
                    b.add_span(seg.n, 0, 0);
        self.tombstones = tombstones;
        assert_eq!(String::from(engine.get_head()), d.apply_to_string("0123456789abcDEEFghijklmnopqr999stuvz"));
    first_line: usize,
fn find_leaf_split_for_bulk(s: &str) -> usize {
    fn is_boundary(s: &String, offset: usize) -> bool {
    /// The maximum number of entries the tracing data should allow.  Total
        if (b as i8) >= -0x40 {
    //
        let all_samples = self.samples.lock().unwrap();


                        let n_skip = seg.their_line_num - line_num;
        (line, offset - self.offset_of_line(text, line))
                                deletes,
        self.join(",").serialize(serializer)
    }
    CompleteDuration,
        undo_test(false, [1].iter().cloned().collect(), "0!3456789abcdefGIjklmnopqr888stuvwHIyz");
            Assert(3, "ab".to_owned()),
        let (mut l, mut offset) = self.get_leaf()?;
}
        let script = vec![
    /// Does a drag gesture, setting the selection from a combination of the drag
    }


    bytecount::count(s.as_bytes(), b'\n')
        ---#--
        assert_eq!(1, a.line_of_offset(3));
        assert_eq!("-#-----", format!("{:#?}", deletes_from_union_2));

            Assert(0, "acbd".to_owned()),
        Self {
            edit: Contents::Edit {
}
                payload: payload,

        let mut selection = Selection::new();
    /// When merging between multiple concurrently-editing sessions, each session should have a unique ID
            a.push('a');
    }

use std::string::ParseError;
        }
impl Add<Rope> for Rope {
    fn new_metadata(timestamp_ns: u64, meta: MetadataType, tid: u64) -> Self {
/// typing a paragraph) will be combined into a single segment in a transform
    ///

                        let mut rendered_lines = Vec::new();
    }
fn find_leaf_split_for_merge(s: &str) -> usize {
        if initial_contents.len() > 0 {
    }
        #[derive(Serialize, Deserialize)]

    fn add(self, rhs: Rope) -> Rope {
            _ => panic!("Unexpected chrome sample type '{}'", symbol)
#[inline]

            SampleEventType::CompleteDuration => 'X',
/// an argument.
                    } else {
                }
    /// Selects an entire word and supports multi selection.
    }
    pub fn new(initial_contents: Rope) -> Engine {
        let mut result = String::new();
        assert_eq!(soln, String::from(engine.get_head()));
    /// Sorting priority between processes/threads in the view.
        assert_eq!(b, String::from(a));

    pub fn scroll_height(&self) -> usize {
/// between two utf8 code units that form a code point is considered invalid.
            }
            pos += 1;
    let mut utf16_count = 0;
    fn edit_rev_simple() {

/// The payload associated with any sample is by default a string but may be
        ---#--
        inserts: Subset,

        assert_eq!(Some(6), a.prev_codepoint_offset(10));
            engine.edit_rev(0, 0, first_rev, delta);
    }
        if self.find.is_empty() {
        engine.undo([1,2].iter().cloned().collect());
        /// Used to store a reversible difference between the old
    /// they would be if they hadn't been deleted.
        // of the delta so we can set the cursor before or after the edit, as needed.
/// the session ID component of a `RevId`
            MergeTestState { peers }
                where E: serde::de::Error
    /// part of the initial contents since any two `Engine`s need a common
                }

        self.invalidate_selection(text);
        json!({"test": value})
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,


    }
// distributed under the License is distributed on an "AS IS" BASIS,

        b.iter(|| black_box(trace.block("something", &["benchmark"])));
    }
                        Some(end) if end >= region.max() => max(0, region.max() - 1),
impl NodeInfo for RopeInfo {
/// An element in a `RopeDelta`.
        // TODO: simplify this through the use of scopeguard crate
        assert_eq!(snapshot[0].name, "process_name");
    }
        let a = Rope::from("a\nb\n");
        -> Result<CategoriesT, D::Error>

        }
                } else {
            tombstones: Rope::default(),
            let dels_from_tombstones = gc_dels.transform_shrink(&not_in_tombstones);
    }

                serializer.serialize_newtype_variant("DeltaElement", 1,
        ----#
            }
            selection.delete_range(offset, offset, true);
                        deletes_from_union
}
        match *self {
        assert_eq!(0, b.line_of_offset(1));

        assert_eq!(1, res);
        Merge(usize, usize),
//     http://www.apache.org/licenses/LICENSE-2.0
        self.samples.lock().unwrap().limit()

        let (iv, new_len) = delta.summary();
        String::from(&r)
        assert_eq!("#-####-", &subset_str);
            height: 10,
    }
        loop {
impl PartialEq for Sample {
impl<'a> SampleGuard<'a> {
        self.drag_state = None;
    use test::black_box;
        }, deletes_from_union)
        };

            }
        for mut find in self.find.iter_mut() {
            Assert(0, "acrbd".to_owned()),
    min: usize,
                        let mut soft_breaks = self.breaks.as_ref().map(|breaks|
enum FindStatusChange {
    #[bench]

    }
        }
        match self.breaks {
    pub fn render_styles(&self, client: &Client, styles: &StyleMap,
            AssertAll("ac".to_owned()),
        for region in self.selection.regions_in_range(start_pos, pos) {

        }
pub fn enable_tracing() {
        match symbol {

}

/// are shared.
                let (ins, _) = delta.factor();
    fn empty_subset_before_first_rev(&self) -> Subset {
    }
        }
        Merge(usize, usize),
fn clamp(x: usize, min: usize, max: usize) -> usize {
        let (mut last_line, last_col) = self.offset_to_line_col(text, end);
/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.

        use std::hash::{Hash, Hasher};
            pending_render: false,
        self.set_dirty(text);
    #[test]
/// * `categories` - A static array of static strings that tags the samples in


//

}
    /// if it is non-empty. It needs to be a separate commit rather than just
    ///
                _ => { }
            return self.len();

/// Usage of static strings is encouraged for best performance to avoid copies.
    session1: u64,

    /// This function will panic if `offset > self.len()`. Callers are expected to
        let inserts_1 = parse_subset_list("


/// Find a set of revisions common to both lists
            base_rev: RevToken, delta: Delta<RopeInfo>) {
        self.set_selection(text, SelRegion::caret(offset));
                    CategoriesT::StaticArray(ref other_arr) => self_arr.arr_eq(other_arr),
use xi_trace::trace_block;
                    let full_path = exe_name.into_os_string();
    /// Get the line range of a selected region.
    }
    fn next_codepoint_offset_small() {
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
// distributed under the License is distributed on an "AS IS" BASIS,

        let mut result = Cow::from("");
        ];
        for i in ((edits-max_undos)..edits).rev() {

        let mut b = TreeBuilder::new();


                        DeltaElement::Insert(Rope::from(s)),
            match self.wrap_col {


    fn merge_max_undo_so_far() {
            trace.block_payload("z", &["test"], to_payload("test_get_samples_nested_trace"));
}
///
        // the generated JSON.
//! There is also a full CRDT merge operation implemented under
            Merge(5,4),
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
                } else {
    }
        &self.text
            assert_eq!(Some(i / 8 * 8 + 8), a.next_grapheme_offset(i));
    // TODO make this faster somehow?
#[derive(Serialize, Deserialize, Debug)]
        match self {
pub fn trace_block<'a, S, C>(name: S, categories: C) -> SampleGuard<'a>
        }
    fn line_of_offset_small() {

            thread_name: Sample::thread_name(),
/// with.  By default, the type is string-like just like name.  If compiled with
/// }
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);


}
                    let b = if bi < ai {
        // +2 for exe & thread name.
    // revision might hold content from an undo group that would otherwise be gc'ed),
/// discussion on payload.
    /// # Panics
                    let mut selection = self.selection.clone();
        if offset == 0 {

                        } else {
        assert_eq!(utf16_units, 17);
        while !leaf.is_char_boundary(end) {
        let d = RopeDelta_::deserialize(deserializer)?;
    ///
    ObjectDestroyed,
    undone_groups: BTreeSet<usize>,  // set of undo_group id's
    /// Selects all find matches.
    pub tid: u64,
        }
            MetadataType::ProcessName {..} => "process_name",
    TRACE.samples_cloned_unsorted()
    }
                },
    }
            }
            SelectionForFind { case_sensitive } =>
    // and partly because you need to retain more undo history, to supply input to the
pub struct ByteIter<'a> {
                if groups.contains(undo_group) {

            pos

        let ix = style_map.add(style);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let text_b = Rope::from("zpbj");
    /// We attempt to reduce duplicate renders by setting a small timeout
                }
    // revision might hold content from an undo group that would otherwise be gc'ed),
/// }
            self.unset_find();
    }
/// Get a slice of a `Rope`:
    #[inline]
pub enum CategoriesT {
                    Some(Contents::Edit {
        RopeInfo {
    fn undo_5() {
    }
        rope.offset_of_line(5);
        //} else {
    }
    }
}

        engine.undo([].iter().cloned().collect());
// Licensed under the Apache License, Version 2.0 (the "License");
    s.serialize_char(ph.into_chrome_id())
        gc_scenario(4,3);
/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.
/// some way.
        where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>
        (line, offset - self.offset_of_line(text, line))
        let deletes_from_union_a = parse_subset("-#---");
    fn next(&mut self) -> Option<u8> {
        let inserts = parse_subset_list("
            offset -= 1;
/// However, anything that can be converted into a Cow string can be passed as
            Click(MouseAction { line, column, flags, click_count }) => {
    use test_helpers::{parse_subset_list, parse_subset, parse_delta, debug_subsets};
                    if s.ends_with('\r') {
            Merge(0,1),
            Assert(1, "pbj".to_owned()),
                    RopeDeltaElement_::Insert(s) =>
    #[serde(skip_serializing_if = "Option::is_none")]
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
        engine.undo([1,2].iter().cloned().collect());
}
    /// If `modify` is `true`, the selections are modified, otherwise the results
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
                if is_base {
                    };
            Assert(0, "zacpb".to_owned()),
}
        assert!(a.slice(0, 0) == empty);
    // * Actual measurement in text layout
    }
                let mut el = serializer.serialize_tuple_variant("DeltaElement",
// Unless required by applicable law or agreed to in writing, software
//
        let new_head = engine.get_head_rev_id().token();
            SelectionIntoLines => self.do_split_selection_into_lines(text),
            timestamp_us: ns_to_us(start_ns),
            Merge(1,2),
/// However, anything that can be converted into a Cow string can be passed as
    #[cfg(feature = "benchmarks")]

        engine.edit_rev(1, 1, first_rev, d1.clone());
        assert_eq!(0, r.line_of_offset(a.len() - 1));
        as_vec.extend(all_samples.iter().cloned());
        deletes_from_union
impl From<Vec<String>> for CategoriesT {
                priority, undo_group, deletes,
    type Item = &'a str;
        };
        }).collect::<Vec<FindStatus>>()
    /// Return the offset of the codepoint before `offset`.
        }
    /// Determines whether the offset is in any selection (counting carets and
            Assert(0, "acpbdj".to_owned()),

    /// height of visible portion
        let deletes_at_rev = self.deletes_from_union_for_index(ix);
// ======== Generic helpers
        assert_eq!(1, expand_by[0].0.priority);
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.arr_eq(other_arr),
    // partly because the reachability calculation would become more complicated (a
/// ```

    pub event_type: SampleEventType,
        #------
    pub fn invalidate_styles(&mut self, text: &Rope, start: usize, end: usize) {
            utf16_size: 0,
    where S: Into<StrCow>, C: Into<CategoriesT>
                    let mut e = &mut self.peers[ei];
            Token::Str("a\u{00A1}\u{4E00}\u{1F4A9}"),
    pub(crate) fn get_view_id(&self) -> ViewId {
}
    /// Move the selection by the given movement. Return value is the offset of

    a_ids.intersection(&b_ids).cloned().collect()
    fn do_selection_for_replace(&mut self, text: &Rope) {
use tree::{Leaf, Node, NodeInfo, Metric, TreeBuilder, Cursor};
    }
fn default_session() -> (u64,u32) {
        }
    let mut out = Vec::new();
    /// The default amount of storage to allocate for tracing.  Currently 1 MB.
        }
/// Returns all the samples collected so far ordered chronologically by
// Licensed under the Apache License, Version 2.0 (the "License");
/// Boundary is trailing and determined by a newline char.
}
        hasher.finish()
            self.current = None;

    find_leaf_split(s, MIN_LEAF)
    }
            AssertMaxUndoSoFar(0,2),
            }
    /// An iterator over the lines of a rope.

    fn lines_med() {
            let b = s.as_bytes()[offset];
                SelectionModifier::Set => self.set_selection(text, occ),

        impl<'de> Visitor<'de> for CategoriesTVisitor {
        assert_eq!(rope.line_of_offset(15), 3);
        self.find.first_mut().unwrap().do_find(text, chars, case_sensitive, is_regex, whole_words);
                sel

            }
#[cfg(feature = "json_payload")]

            SampleEventType::ObjectSnapshot => 'O',
                    self.do_gesture(text, line, column, GestureType::LineSelect)
        MergeTestState::new(3).run_script(&script[..]);
    #[should_panic]
impl CategoriesT {
    }
    #[bench]
mod tests {
        let result = closure();
                    if s.ends_with('\r') {
use xi_rope::tree::Cursor;

    }
    // possible to fix it so that's not necessary.

impl Hash for Sample {
                Undo { ref toggled_groups, ref deletes_bitxor } => {
impl Eq for CategoriesT {}
        }
                (!region.is_upstream() && c == start_pos) ||
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
///
// Licensed under the Apache License, Version 2.0 (the "License");
        -#-
                            }
/// Returns all the samples collected so far ordered chronologically by

        let utf16_units = rope.measure::<Utf16CodeUnitsMetric>();
pub struct Engine {
    /// Selects an entire word and supports multi selection.
    fn build_delta_2() -> Delta<RopeInfo> {
            self.categories == other.categories &&
    ProcessName { name: String },
        }

        self.subseq(iv)
            let style_id = self.get_or_def_style_id(client, styles, &style);
// distributed under the License is distributed on an "AS IS" BASIS,
            SampleGuard::new(&self, name, categories, Some(payload.into()))

        cursor.prev::<BaseMetric>()

        len


        let first_candidate = self.find_first_undo_candidate_index(&toggled_groups);
    }
            Replace { chars, preserve_case } =>
        b.iter(|| black_box(trace.block("something", &["benchmark"])));

#[macro_use]
    }
        assert_eq!(Some(9), a.next_grapheme_offset(3));

                Edit { priority, undo_group, inserts, deletes } => {

#[derive(Clone, Debug)]
            Assert(1, "pbj".to_owned()),
        // todo: this will be changed once multiple queries are supported
        match self.inner.next() {
                rev_id: basic_rev(i),
    }
                        } else {
        let (leaf, offset) = match self.get_leaf() {
        // NOTE: 1 us sleeps are inserted as the first line of a closure to
pub struct View {
//See ../docs/MetricsAndBoundaries.md for more information.
            GestureType::RangeSelect => self.select_range(text, offset),
            }
        if let Some(new_scroll_pos) = self.scroll_to.take() {
        a.lines_all().collect::<Vec<_>>());
        let expand_by = compute_transforms(a_revs);
        assert_eq!(trace.is_enabled(), true);
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            lines: count_newlines(s),
        }
/// Create a `Rope` from a `String`:
    fn do_drag(&mut self, text: &Rope, line: u64, col: u64, affinity: Affinity) {
/// fn something_else_expensive() {
    fn eq_small() {
/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions
        let search_query = match self.selection.last() {
        self.session = session;
    assert!(!a.is_empty() && !b.is_empty());

    pub fn next_codepoint_offset(&self, offset: usize) -> Option<usize> {
    {
            Assert(0, "acpbdj".to_owned()),
        } else {
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
    }
    }
            let splitpoint = if s.len() > MAX_LEAF {
    }
            Assert(1, "arpb".to_owned()),
        let (mut last_line, last_col) = self.offset_to_line_col(text, region.max());
    }
            "text": &l_str,
            line_cache_shadow::CURSOR_VALID
        engine.undo([1,2].iter().cloned().collect());
        }
    }
}
            .map(|pos| offset + pos + 1)
        let mut hls = Vec::new();

    undone_groups: BTreeSet<usize>,  // set of undo_group id's
                } else if click_count == Some(3) {
    /// selection edges).
                    // TODO: update (rather than re-render) in cases of text valid
        }
    /// want to set the process name (if provided then sets the thread name).
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
            "pristine": pristine,
        assert_tokens(&rope, &[
            };
                            selection.delete_range(last_selection.min(), last_selection.max(), false);
    for op in b_new {
    session1: u64,
            sample_limit_count: limit
    }
        self.find_changed = FindStatusChange::All;
        /// Used to store a reversible difference between the old
    }
                self.set_selection(text, SelRegion::caret(offset));
    idx: usize,
            type Value = CategoriesT;
                rev_id: basic_rev(i),
        self.invalidate_selection(text);
        if offset == 0 {
        };
            r = op.inserts.apply(&r);
        }
        let script = vec![
        },
        assert_eq!(vec!["a\rb\rc"], a.lines_all().collect::<Vec<_>>());
        d
    }

        d
        let start_pos = start_of_line.pos();
        } else if self.first_line + self.height <= line {
    #[serde(rename = "ph")]
        if self.is_enabled() {
        while !leaf.is_char_boundary(end) {
                }
        old_deletes_from_union: &Subset, new_deletes_from_union: &Subset) -> (Rope,Rope) {
        } else {
            }
    pub fn join(&self, sep: &str) -> String {
            Assert(0, "acpbdj".to_owned()),
            categories: Some(categories.into()),
    #[bench]
        self.select_region(text, offset, SelRegion::new(start, end), multi_select);
        let line_len = MAX_LEAF + MIN_LEAF - 1;
        // that into our actual target.

        let mut deletes_from_union = self.deletes_from_union_before_index(first_candidate, false).into_owned();
    pub fn instant_payload<S, C, P>(&self, name: S, categories: C, payload: P)
                        self.revs.push(Revision {
        let script = vec![
                self.do_find(text, chars, case_sensitive, regex, whole_words),
    pub fn undo(&mut self, groups: BTreeSet<usize>) {
        undo_test(true, [2].iter().cloned().collect(), "0123456789abcDEEFghijklmnopqr999stuvz");
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },

                    }
    Undo {
    }
        }
        }
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
    ThreadSortIndex { sort_index: i32 },
}
/// returned value is dropped.  `trace_closure` may be prettier to read.
                if rev.max_undo_so_far < lowest_group {
        self.cursor.next_leaf();
    #[test]
        assert_eq!(Some(1), a.next_codepoint_offset(0));
    /// update cycle. This should be a last resort, updates should generally cause

                if (flags & FLAG_SELECT) != 0 {
    }
pub struct Trace {
                            Cursor::new(breaks, offset));
        let a = Rope::from("a\r\nb\r\nc");
                // sanitize input
        MergeTestState::new(3).run_script(&script[..]);
        let utf8_offset = 19;
        self.iter_chunks(0, self.len())
    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
        self.subseq(iv)
                // Deprecated (kept for client compatibility):
    use serde_test::{Token, assert_tokens};
        let d = engine.delta_rev_head(after_first_edit);
        };

}
        }
        let (mut new_revs, text, tombstones, deletes_from_union) = {
                find_leaf_split_for_bulk(s)
                    if s.ends_with('\r') {
    }
        let a = Rope::from("A\u{030a}\u{110b}\u{1161}\u{1f1fa}\u{1f1f8}");
            }
}
        // the front-end, but perhaps not for async edits.
    }
            engine.undo(undos);
    }
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
                    }

#![cfg_attr(feature = "cargo-clippy", allow(
        let mut undone_groups = Cow::Borrowed(&self.undone_groups);
            }
        let iv = Interval::new_closed_open(start, end);
            Edit { ei: 1, p: 5, u: 1, d: parse_delta("-p-") },
            MetadataType::ProcessLabels {..} => (None, None)
        self.lines_raw(0, self.len())
/// # use xi_rope::Rope;
                           styles: &StyleMap, style_spans: &Spans<Style>,
    tombstones: Rope,
        cursor.prev::<BaseMetric>()

                         styles: &StyleMap, style_spans: &Spans<Style>,
    fn from(c: Vec<String>) -> CategoriesT {
        let line = line as usize;
                WrapWidth::Width(px) =>
        if self.len() != other.len() {
        for i in 0..5_000 {
            Contents::Undo { .. } => panic!("can't merge undo yet"),
    }
    }
            a.push('a');
    #[cfg(feature = "benchmarks")]
    /// The maximum number of samples that should be stored.

    fn bench_trace_instant_with_payload(b: &mut Bencher) {
        if !self.is_point_in_selection(offset) {
            },
    /// Each instance represents a separate search query.
        self.revs.iter().enumerate().rev()
                    }

            for i in 0..count {
    for op in b_new {
pub fn trace_closure_payload<S, C, P, F, R>(name: S, categories: C,
                        } else {
            Assert(0, "zacpbdj".to_owned()),

    /// Time complexity: O(log n)
    pub fn scroll_height(&self) -> usize {
        let mut b = String::new();
        ];
    ///
                pos = leaf_offset + pl.len();
    }
        }
                let prio = FullPriority { priority, session_id: r.rev_id.session_id() };
///
                }
        self.tombstones = new_tombstones;
        for _ in 0..in_measured_units {
    fn merge_insert_only_whiteboard() {
        engine.undo([1,2].iter().cloned().collect());
/// * `categories` - A static array of static strings that tags the samples in
        let s = String::deserialize(deserializer)?;
        self.cursor.next_leaf();
            // shouldn't be called with this, but be defensive
/// xi_trace::trace_payload("my event", &["rpc", "response"], json!({"key": "value"}));
            let pos = bc.next::<BreaksMetric>();
#[cfg(feature = "json_payload")]

    }
        let rope_with_emoji = Rope::from("hi\ni'm\nðŸ˜€ four\nlines");
            Assert(0, "adc".to_owned()),
    /// Tracks whether find highlights should be rendered.
use std::borrow::Cow;
    #[cfg(feature = "benchmarks")]
use multiset::{Subset, CountMatcher};

        self.find_changed = FindStatusChange::Matches;
                if rev.max_undo_so_far < lowest_group {
        let head = engine.get_head_rev_id().token();
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
                                inserts,
    #[test]

    /// The largest undo group number of any edit in the history up to this
    }
        let mut engine = Engine::new(Rope::from(TEST_STR));
    offset: usize,

///
        assert_eq!(TEST_STR, String::from(engine.get_head()));
// Licensed under the Apache License, Version 2.0 (the "License");
    pub fn closure<S, C, F, R>(&self, name: S, categories: C, closure: F) -> R
/// first can make it ~1.7x slower than a regular trace.

            shuffle(&self.text, &self.tombstones, &self.deletes_from_union, &new_deletes_from_union);
        self.revs.iter().enumerate().rev()

    pub fn scroll_height(&self) -> usize {
const FLAG_SELECT: u64 = 2;
    }
///

    fn select_region(&mut self, text: &Rope, offset: usize, region: SelRegion, multi_select: bool) {
            fn from(mut delta: RopeDelta_) -> Delta<RopeInfo> {
            word_cursor.select_word()
        assert!(empty == empty);
    fn merge_simple_delete_2() {
            name: name.into(),

                            let line = self.render_line(client, styles, text,
/// xi_trace::trace_payload("something happened", &["rpc", "response"], "a note about this");
        let mut cursors = Vec::new();
            "op": op,
        let undone = self.undone_groups.contains(&undo_group);
            self.collapse_selections(text);
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);


    for rev in revs.iter().rev() {
    for rev in revs.iter().rev() {
pub type RopeDeltaElement = DeltaElement<RopeInfo>;
        }
                            plan: &RenderPlan, pristine: bool)
    /// The maximum amount of space the tracing data will take up.  This does
    // encourage callers to use Cursor instead?
    /// of the chunks is indeterminate but for large strings will generally be
        where S: Serializer
            if let Some(pos) = pos { start_of_line.set(pos) }
            pos

        self.find_changed = FindStatusChange::Matches;
                WrapWidth::None => (),

#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]

        assert_eq!("zcpbdj", String::from(&text_2));
/// A flag used to indicate when legacy actions should modify selections
    // * Unicode codepoints
        assert_eq!(snapshot[2].name, "x");
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};

        assert_eq!(snapshot[3].name, "y");
        MergeTestState::new(3).run_script(&script[..]);

            fn from(c: &'static[&'static str; $num_args]) -> CategoriesT {
                RenderTactic::Render => {
        let mut engine = Engine::new(Rope::from(TEST_STR));
        revs.append(&mut revs_3);
//
}
    }
    }
///
    fn offset_of_line_small() {
                inserts: new_inserts,


        assert!(r == a_rope.clone() + b_rope.clone());

        }
                undo_group,
    let mut next_expand_by = Vec::with_capacity(expand_by.len());
            self.pid == other.pid &&
}
        MergeTestState::new(3).run_script(&script[..]);
            }
        assert_eq!(snapshot.len(), 9);
        let (leaf, start_pos) = self.cursor.get_leaf().unwrap();
    }
            Merge(1,2),
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,
    }
                pos = leaf_offset + nl.len();
    pub metadata_sort_index: Option<i32>,
        self.buffer_id
    /// Time complexity: O(log n)
            }),
    match std::env::current_exe() {
    }

    }
///
    }
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {
    fn next(&mut self) -> Option<Cow<'a, str>> {
        b.build()
            {
        -> Self
        }
        ];
enum Contents {
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
    }

    /// should be constructed via SampleGuard.
    let mut splitpoint = min(MAX_LEAF, s.len() - MIN_LEAF);
    #[serde(serialize_with = "serialize_event_type")]

        let new_pos = self.pos() + (end - offset);
        match *self {
    pub fn is_enabled(&self) -> bool {
                // TODO create InsertDelta directly and more efficiently instead of factoring
                // should be removed in favor of do_gesture
    }
                std::thread::sleep(std::time::Duration::new(0, 1000));
        let text = Rope::from("13456");
                    } else {
            while !s.is_char_boundary(offset - len) {
///
            Assert(0, "acbd".to_owned()),
                max_undo_so_far: i+1,

    /// Updates the view after the text has been modified by the given `delta`.
    fn is_boundary(s: &String, offset: usize) -> bool {
    fn consume(self) -> (Option<String>, Option<i32>) {
        if let Some(lowest_group) = toggled_groups.iter().cloned().next() {

        } else {
        true
        let _t = trace_block("View::wrap_width", &["core"]);
        trace.record(guard.sample.as_ref().unwrap().clone());
        }
                            edit: Edit {
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
use std::str::FromStr;
    /// The revision history of the document
    pub fn push_str(&mut self, mut s: &str) {
        let mut rendered_styles = Vec::new();
    // this is the cost contributed by the timestamp to
        }
            self.set_selection(text, sel);
                } else if click_count == Some(3) {
    /// won't be exceeded by the underlying storage itself (i.e. rounds down).
                } else {
        let mut a = String::new();
            MetadataType::ProcessLabels {..} => "process_labels",
use std::ops::Range;
use word_boundaries::WordCursor;
    }
    /// Invalidates the styles of the given range (start and end are offsets within
        let new_head = engine.get_head_rev_id().token();
        };

            .map(|pos| pos + 1)
            Move(movement) => self.do_move(text, movement, false),
                    as_vec.push(Sample::new_metadata(
                            deletes_bitxor.transform_shrink(&gc_dels)

    pub fn set_scroll(&mut self, first: i64, last: i64) {
    idx: usize,


    #[serde(skip_serializing_if = "Option::is_none")]
/// some way.
        }
    }
    #[bench]
        let mut a = String::new();
            AssertAll("zacpb".to_owned()),
        ------#
impl Eq for CategoriesT {}
    }
    ($num_args: expr) => {
            Merge(2,1),
        assert_eq!(Some(2), b.prev_codepoint_offset(5));
            }
        }

        Delta::synthesize(&old_tombstones, &prev_from_union, &self.deletes_from_union)
        -> Result<CategoriesT, D::Error>
                self.do_gesture(text, line, col, ty),
    /// If `line` is equal to one plus the current number of lines,
                    CategoriesT::DynamicArray(ref other_arr) => self_arr.eq(other_arr),
                        gc_dels = new_gc_dels;
    let b_ids: BTreeSet<RevId> = b.iter().map(|r| r.rev_id).collect();

        {
        let r = r + Rope::from(&b[MIN_LEAF..]);
        let mut engine = Engine::new(Rope::from(TEST_STR));
        let script = vec![
/// * `categories` - A static array of static strings that tags the samples in


    fn thread_name() -> Option<StrCow> {
            warn!("Failed to get path to current exe: {:?}", e);

    current: Option<&'a str>,
    /// Width in bytes (utf-8 code units).
            let sel_start_ix = clamp(region.min(), start_pos, pos) - start_pos;
        match ty {
        if line < self.first_line {
        ---#--
        if let Some(edit) = contents {
        assert_eq!(utf16_units, 20);
        let (new_text, new_tombstones) = shuffle(&text_with_inserts, &self.tombstones,
        let mut result = String::new();


        engine.edit_rev(1, edits+1, head2, d2);
        assert_eq!("zcpbdj", String::from(&text_2));
        engine.undo([].iter().cloned().collect());
    // `session1==session2==0` is reserved for initialization which is the same on all sessions.
            // The deletes are already after our inserts, but we need to include the other inserts
                let older_all_inserts = inserts.transform_union(&cur_all_inserts);
///
/// std::mem::drop(trace_guard); // finalize explicitly if
use std::sync::atomic::{AtomicBool, Ordering as AtomicOrdering};
/// # Examples
    /// revision, and so needs a way to get the deletion set before then.
            return;
use std::borrow::Cow;
    pub fn new_duration_marker<S, C>(name: S,
        if wrap_col > 0 {
            timestamp_us: ns_to_us(start_ns),
//!
    fn partial_cmp(&self, other: &Sample) -> Option<cmp::Ordering> {
impl<T: AsRef<str>> From<T> for Rope {
                                                    self.size.width));
        self.send_update_for_plan(text, client, styles,
                Delta {
                         hls: &[(usize, usize)],
#[cfg(feature = "benchmarks")]

        }
                    if !inserts.is_empty() {
/// # Performance
        ];
    view_id: ViewId,
        assert_eq!(None, a.next_codepoint_offset(10));
//! There is also a full CRDT merge operation implemented under
fn compute_transforms(revs: Vec<Revision>) -> Vec<(FullPriority, Subset)> {
    }
        assert_eq!(utf16_units, 11);



/// Tracing is disabled initially on program launch.
        // Note: for committing plugin edits, we probably want to know the priority

            Merge(0,1),

                    RopeDeltaElement_::Copy(start, end) =>
/// Usage of static strings is encouraged for best performance to avoid copies.
    fn edit_rev_simple() {
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        let a = Rope::from("a\r\nb\r\nc");
{
            Some(Cow::Owned(mut s)) => {

                                  style_spans, &plan, pristine);
    }
            edit: Undo { toggled_groups, deletes_bitxor }
    fn ids_to_fake_revs(ids: &[usize]) -> Vec<Revision> {
        } else {
    let mut last_priority: Option<usize> = None;
    fn merge_idempotent() {
        });
        let all_samples = self.samples.lock().unwrap();


        assert_eq!(utf16_units, 17);

            replace_changed: false,

                },
    }
    }
    #[test]
                self.select_line(text, offset, line, true),
    fn deserialize<D>(deserializer: D)
    fn mk_new_rev(&self, new_priority: usize, undo_group: usize,
    /// Get the Subset to delete from the current union string in order to obtain a revision's content
            DeltaElement::Insert(ref node) =>
    base_sel: Selection,
    /// Start of the region selected when drag was started (region is
        let last_line = self.line_of_offset(text, self.selection.last().unwrap().max()) + 1;
        }
    max_undo_so_far: usize,
            'N' => SampleEventType::ObjectCreated,
    s.serialize_char(ph.into_chrome_id())
            GestureType::LineSelect =>
    pub fn get_caret_offset(&self) -> Option<usize> {
        assert_eq!(rope.line_of_offset(1), 0);
        a.lines_all().collect::<Vec<_>>());

    /// Generate line breaks based on width measurement. Currently batch-mode,
    pub event_type: SampleEventType,

    }
            match exe_name.clone().file_name() {
}
        let d3 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("b"), TEST_STR.len()+1);
use line_cache_shadow::{self, LineCacheShadow, RenderPlan, RenderTactic};
            MetadataType::ProcessLabels {..} => "process_labels",
        } else {
        assert_eq!("a0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
    /// All the selection regions other than the one being dragged.

use xi_rope::interval::Interval;
    }
        value
    }
            tid: sys_tid::current_tid().unwrap(),
                    CategoriesT::StaticArray(ref other_arr) => self_arr.eq(other_arr),
        -##-
    }
            }
                        deletes: transformed_deletes,
                    } else if !inserts.is_empty() {
    // this is the cost contributed by the timestamp to
    /// Create a new Engine with a single edit that inserts `initial_contents`
            let deletes = Subset::new(inserts.len());
    pub fn new_instant<S, C>(name: S, categories: C,
    }
        let a = Rope::from("");
            edit: Undo { toggled_groups, deletes_bitxor }
                let (pl, poffset) = self.prev_leaf()?;
}
        let trace = Trace::enabled(Config::with_limit_count(10));
//
                RenderTactic::Render => {
//! which is sufficient for asynchronous plugins that can only have one
        max_undo_so_far = std::cmp::max(max_undo_so_far, undo_group);
    /// Generally racy since the underlying storage might be mutated in a separate thread.

    rev_id: RevId,
        engine.edit_rev(1, 2, initial_rev, d1.clone());

            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ac") },
        // clamp to end of line

        // This might be an over-specified test as it will
/// of Sample that determines order.
        // rather than emitting an explicit start/stop to reduce the size of
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
        -----#
    #[serde(deserialize_with = "deserialize_event_type")]
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("ab") },
            Assert(0, "acbd".to_owned()),
    pub(crate) fn line_col_to_offset(&self, text: &Rope, line: usize, col: usize) -> usize {
        let rope = Rope::from("a\u{00A1}\u{4E00}\u{1F4A9}");
        assert!(a != b);
    const TEST_STR: &'static str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
}
            Token::String("a\u{00A1}\u{4E00}\u{1F4A9}"),
        Cow::from(a.into_owned() + b)
    #[test]

extern crate lazy_static;
        d_builder.build()
        }
        }
            SampleGuard::new_disabled()

                    }
                            max_undo_so_far: rev.max_undo_so_far,
        assert_eq!(2, expand_by.len());
        let mut cursor = Cursor::new(self, offset);
    fn gc_3() {
    fn from(r: &Rope) -> String {
        assert_eq!(1, res);
pub type SessionId = (u64, u32);
    type Err = ParseError;
    #[serde(rename = "xi_payload")]

        engine.edit_rev(1, 1, first_rev, d1.clone());

        } else if self.first_line + self.height <= line {
                          payload: Option<TracePayloadT>) -> Self

            Edit { ei: 0, p: 3, u: 1, d: parse_delta("---d") },
        self.deletes_from_union = deletes_from_union;
    Metadata

    pub fn offset_of_line(&self, line: usize) -> usize {
            Merge(0,1),

    pub fn prev_codepoint(&mut self) -> Option<char> {
    (new_text, shuffle_tombstones(text,tombstones,old_deletes_from_union,new_deletes_from_union))
    ObjectCreated,
    #[test]
        // probably change as the recording internals change.
        ");


    }



    }
    pub fn next_grapheme_offset(&self, offset: usize) -> Option<usize> {
            MetadataType::ProcessSortIndex {sort_index} => (None, Some(sort_index)),

    /// is optional.
        let thread = std::thread::current();
            Edit { ei: 0, p: 1, u: 1, d: parse_delta("!-d-") },

        assert_eq!(Some(3), a.next_grapheme_offset(0));
    /// Splits current selections into lines.
        trace.closure_payload("z", &["test"], || {},

                        Some(end) => max(0, end - 1),
            Assert(1, "ab".to_owned()),
            'M' => SampleEventType::Metadata,

        let mut d = TracePayloadT::with_capacity(1);
            }
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
    priority: usize,
    fn line_offsets() {
/// assert_eq!("herald", String::from(a));

                        sample.tid));
    }
            Edit { ei: 0, p: 3, u: 1, d: parse_delta("-c-") },
            Edit { ref inserts, .. } => inserts.count(CountMatcher::Zero),
        self.join(",").serialize(serializer)
///
}
    #[cfg(feature = "benchmarks")]
        let gc : BTreeSet<usize> = [1].iter().cloned().collect();
            trace.instant("something", &[]);
    /// Edit the string, replacing the byte range [`start`..`end`] with `new`.
            None => text.line_of_offset(offset)
    fn test_samples_block() {
            {
                },
    fn build_update_op(&self, op: &str, lines: Option<Vec<Value>>, n: usize) -> Value {
        //let len = if self.end - self.cursor.pos() < leaf.len() - start_pos {
                                        &selections, &hls, style_spans);
        Self::with_limit_bytes(1 * 1024 * 1024)
        while offset < l.len() && !l.is_char_boundary(offset) {
                        &mut start[bi]
    wrap_col: WrapWidth,
    pub fn line_of_offset(&self, text: &Rope, offset: usize) -> usize {

        engine.edit_rev(1, 1, initial_rev, d1.clone());
}
            size: Size::default(),
        d_builder.delete(Interval::new_closed_open(10, 36));
                    assert_eq!(correct, &String::from(e.get_head()), "for peer {}", ei);
    #[test]
    fn edit_rev_concurrent() {
    #[bench]
    }
            Assert(1, "arpbzj".to_owned()),
    fn get_or_def_style_id(&self, client: &Client, style_map: &StyleMap,

            SelectionForFind { case_sensitive } =>
        let b_revs = basic_insert_ops(inserts, 2);
use unicode_segmentation::GraphemeCursor;
    }
pub fn samples_cloned_sorted() -> Vec<Sample> {

    }

        if b >= 0xf0 {
        let mut a = Rope::from("");
}
        let a2 = Rope::from("a");
        (self.session1, self.session2)
}
            None
        for &region in self.sel_regions() {
//     http://www.apache.org/licenses/LICENSE-2.0
        let script = vec![
        let mut prev_boundary = c.prev_boundary(&l, leaf_offset);
        self.deletes_from_union = deletes_from_union;
            }),
            rev_id: RevId { session1: 0, session2: 0, num: 0 },
///
        let revs = basic_insert_ops(inserts, 1);
    }
            .find(|&(_, ref rev)| rev.rev_id.token() == rev_token)
        let (leaf, offset) = match self.get_leaf() {
/// Create an instantaneous sample without any payload.  This is the lowest
            HighlightFind { visible } => {

    // use own breaks if present, or text if not (no line wrapping)
    }
///
        }
    /// in the range of 511-1024 bytes.
    samples: Mutex<FixedLifoDeque<Sample>>,
                    if let Some(last_selection) = self.selection.last() {

            rev_id, max_undo_so_far,
        assert_eq!(trace.get_samples_count(), 5);
#[derive(Clone, Debug)]
        b.iter(|| black_box(trace.instant_payload(
}
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>

        engine.edit_rev(1, 3, new_head_2, d3);
    pub metadata_name: Option<StrCow>,
fn default_session() -> (u64,u32) {
        // stable order since the resolution of timestamps is 1us.
                           styles: &StyleMap, style_spans: &Spans<Style>,

}
    fn delta_rev_head() {
    // * Code units in some encoding
        engine.undo([1,2].iter().cloned().collect());
    TRACE.is_enabled()
        Engine {
            Assert(1, "zpbj".to_owned()),
        self.timestamp_us.cmp(&other.timestamp_us)
        assert_eq!(2, a.line_of_offset(5));
    }
    pub(crate) fn record(&self, sample: Sample) {
    TRACE.is_enabled()
            Merge(1,0),
        assert_eq!(vec![""], a.lines_all().collect::<Vec<_>>());
        // the generated JSON.
            timestamp_us: ns_to_us(time::precise_time_ns()),
        let line = line as usize;

            // recurse at most once; this doesn't feel great but I wrote myself into a
        self.set_selection_raw(text, selection);
        } else {
            end += 1;
        client.def_style(&style.to_json(ix));
                                                        soft_breaks.as_mut(),
            SampleGuard::new(&self, name, categories, Some(payload.into()))
/// * `categories` - A static array of static strings that tags the samples in
        where D: serde::Deserializer<'de>
        while !leaf.is_char_boundary(end) {

                    .with_horiz(horiz)
    (1, 0)
        let mut thread_names: HashMap<u64, StrCow> = HashMap::new();
use std::collections::HashMap;
        let first_rev = engine.get_head_rev_id().token();

                first_sample_timestamp,
            line_cache_shadow::CURSOR_VALID | line_cache_shadow::STYLES_VALID
        for &(trans_priority, ref trans_inserts) in &expand_by {
                    if retain_revs.contains(&rev.rev_id) || !gc_groups.contains(&undo_group) {
            } else {
        }

                for region in find.occurrences().regions_in_range(start_pos, pos) {
    ///
        assert_eq!(correct, rebased_inserts);
        while offset < l.len() && !l.is_char_boundary(offset) {
    }
pub fn trace<S, C>(name: S, categories: C)
    }
        let d = engine.delta_rev_head(after_first_edit);
            Merge(0,2), Merge(1, 2),
    // 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.
        self.prev::<BaseMetric>();
    }
                len += 1;
    pub(crate) fn get_buffer_id(&self) -> BufferId {
        }
    for op in b_new {
        b.push('\n');
            // with offset == s.len(), but be defensive.
            Merge(0,1),
    }

        let guard = Self {
        let len = match first_rev.edit {
    }
    type Item = Cow<'a, str>;
            match *op {
                    let (start, end) = self.peers.split_at_mut(ai);
                match self.inner.next() {
        Rope::from_str(s.as_ref()).unwrap()
        assert_eq!(snapshot.len(), 9);
        b.push_str(new);
    }
            edit: Undo { toggled_groups, deletes_bitxor }
    pub fn lines_raw(&self, start: usize, end: usize) -> LinesRaw {
        let empty = Rope::from("");
            let b_to_merge = &other.revs[base_index..];
    }
    TRACE.block(name, categories)
    #[test]
                (drag_state.max, min(offset, drag_state.min))
            for (i,rev) in self.revs.iter().enumerate().rev() {
///
        let offset = self.line_col_to_offset(text, line as usize, col as usize);
        let (new_rev, new_deletes_from_union) = self.compute_undo(&groups);
        use self::MergeTestOp::*;
        samples
    -> SampleGuard<'a>
    }
    #[bench]
        let mut engine = Engine::new(Rope::from(TEST_STR));
                if groups.contains(undo_group) {
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
        if offset == 0 {
//! There is also a full CRDT merge operation implemented under
            }
    use super::*;
            },
        let mut selection = Selection::new();
    {
            // about what wrapped.
        // +2 for exe & thread name.
    #[serde(serialize_with = "serialize_event_type")]
/// However, anything that can be converted into a Cow string can be passed as
//!

        self.selection = sel;
                Contents::Edit {inserts, ..} => inserts,
// Copyright 2016 The xi-editor Authors.
        trace.closure_payload("x", &["test"], || {
        let expanded_deletes_from_union = deletes_from_union.transform_expand(&inserted);
    #[bench]
                }
    TRACE.closure_payload(name, categories, closure, payload)
/// xi_trace::trace_closure("something_else_expensive", &["rpc", "response"], || {
    }

    use super::*;
            Some(region) => {
    }
        a.lines_all().collect::<Vec<_>>());
    enum MergeTestOp {
impl Trace {
impl From<Vec<String>> for CategoriesT {
            CategoriesT::DynamicArray(ref self_arr) => {
}
                self.set_dirty(text);
        let deletes_bitxor = self.deletes_from_union.bitxor(&deletes_from_union);

    /// Selects the next find match.
pub struct Size {
pub struct RevId {
use std::collections::HashMap;
        let line = self.line_of_offset(text, offset);

                },
                            if !deletes.is_empty() {
    /// the other doesn't make it re-appear.
        d_builder.replace(Interval::new_closed_open(1, 3), Rope::from("!"));
    edit: Contents,
    /// Set the selection to a new value.
        let head2 = engine.get_head_rev_id().token();
        for _ in 0..(edits-max_undos) {
        // same span exists in both sets (as when there is an active selection)
            let head = engine.get_head_rev_id().token();
            self.breaks = Some(linewrap::linewrap(text, wrap_col));
        assert_eq!(Some(5), b.prev_codepoint_offset(9));
                                gc_dels = gc_dels.transform_union(inserts);
        assert_eq!(output, String::from(engine.get_head()));
fn count_utf16_code_units(s: &str) -> usize {
                self.do_find_next(text, true, wrap_around, allow_same, &modify_selection),
            engine.undo(to_undo.clone());
            if let GraphemeIncomplete::PreContext(_) = incomp {
            Assert(0, "acbd".to_owned()),
        self.join(",").serialize(serializer)
    fn undo_test(before: bool, undos : BTreeSet<usize>, output: &str) {
            }
        self.height = last - first;
        self.deletes_from_union_before_index(rev_index + 1, true)
use std::hash::{Hash, Hasher};
        }
        b.push(self);
        engine.edit_rev(0, 1, first_rev, build_delta_1());
            if i >= max_undos {
        let mut engine = Engine::new(Rope::from(TEST_STR));
            end -= 1;
impl Metric<RopeInfo> for LinesMetric {
    #[test]
    let del_delta = Delta::synthesize(tombstones, old_deletes_from_union, new_deletes_from_union);
        }
    }

/// How tracing should be configured.
        }
            let b = s.as_bytes()[offset];
    // Delta that deletes the right bits from the text
mod tests {
    fn undo_3() {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        self.find_rev_token(rev).map(|rev_index| self.rev_content_for_index(rev_index))
    }
#[inline]
        let new_head_2 = engine.get_head_rev_id().token();
    /// If the cursor is at the end of the leaf, advances to the next leaf.
pub fn enable_tracing_with_config(config: Config) {
        let (mut l, mut offset) = self.get_leaf()?;
}

    }
    }
///
        self.revs.push(new_rev);
use rpc::{GestureType, MouseAction, SelectionModifier};
        assert_eq!(snapshot[2].name, "x");
        ");
        // is the new edit in an undo group that was already undone due to concurrency?
    where S: Into<StrCow>, C: Into<CategoriesT>, P: Into<TracePayloadT>,
        }
pub struct BaseMetric(());
        d.insert(StrCow::from("test"), StrCow::from(value));
    fn test_samples_closure() {
        }
    (out, text, tombstones, deletes_from_union)


        let (leaf, offset) = match self.get_leaf() {
        let cur_deletes_from_union = &self.deletes_from_union;
    }

    }
        #[derive(Serialize, Deserialize)]
        }
            offset,
            let c = i.to_string() + "\n";
pub struct RevId {
        assert_eq!(None, a.next_codepoint_offset(10));
        trace.disable();
    /// controlled by features (default string).

        where S: Serializer
        if self.find_changed != FindStatusChange::None {
    pub fn next_codepoint(&mut self) -> Option<char> {
        }
        priority: usize,
    }
        assert_eq!(String::from(&a).lines().collect::<Vec<_>>(),
        for find in &mut self.find {

        assert_eq!(None, a.prev_grapheme_offset(0));
///

            Merge(2,0),
        match *self {


            Assert(1, "cb".to_owned()),
    fn merge_associative() {
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
        assert_eq!(Some(2), b.prev_codepoint_offset(5));

        a.edit_str(1, 9, "era");
            Assert(1, "acpbdj".to_owned()),
                }
            sel.add_region(

        let trace = Trace::disabled();
    fn bench_two_timestamps(b: &mut Bencher) {
        }
            GotoLine { line } => self.goto_line(text, line),
                        let un_deleted = deletes_from_union.subtract(deletes);
    #[test]
    /// Garbage collection means undo can sometimes need to replay the very first
    sample: Option<Sample>,
        }
        ");
        assert_eq!(2, a.offset_of_line(1));
        gc_scenario(4,3);
            }
        let r = r + Rope::from(String::from(&a[MAX_LEAF..]) + &b[..MIN_LEAF]);
        engine
    /// Merge may panic or return incorrect results if session IDs collide, which is why they can be
        self.replace = Some(Replace { chars, preserve_case });
        let d2 = Delta::simple_edit(Interval::new_closed_open(chars_left, chars_left), Rope::from("f"), engine.get_head().len());
    /// Start of the region selected when drag was started (region is
        if self.is_enabled() {
    }
                (drag_state.min, max(offset, drag_state.max))

                rev_id: basic_rev(i),
struct FullPriority {
mod tests {
        match *self {
                // TODO could probably be more efficient by avoiding shuffling from head every time
    #[test]
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
    }
    /// Return the line number corresponding to the byte index `offset`.
                    if let Some(new_gc_dels) = new_gc_dels {
        Self::with_limit_count(size / size_of::<Sample>())
}
            black_box(time::precise_time_ns());
        assert_eq!(2, r.line_of_offset(r.len()));
    /// If the cursor is at the end of the leaf, advances to the next leaf.
        let snapshot = trace.samples_cloned_unsorted();

            // which we can do with another peer that inserts before a and merges.
            engine.undo(to_undo.clone());
        let utf16_units = rope.convert_metrics::<BaseMetric, Utf16CodeUnitsMetric>(utf8_offset);
        self.rev_id_counter += 1;
    fn to_base_units(_: &String, in_measured_units: usize) -> usize {
        // todo: for now only a single search query is supported however in the future
            Edit { ei: 0, p: 1, u: 2, d: parse_delta("!-") },
    /// Get revision id of head revision.
use std::borrow::Cow;
        if let Some(edit) = contents {

    /// state and new offset.
        #------
        assert_eq!(snapshot[6].name, "z");
    fn gc_6() {
                        None
        memchr(b'\n', &s.as_bytes()[offset..])
        let (mut new_revs, text, tombstones, deletes_from_union) = {
    /// Constructs a Begin or End sample.  Should not be used directly.  Instead

                    let head = e.get_head_rev_id().token();
// Unless required by applicable law or agreed to in writing, software
        Subset::new(len)
        undo_group: usize,
        }
    #[test]

        *self = b.build();
        match cmd {

        self.enabled.store(false, AtomicOrdering::Relaxed);
    fn delta_rev_head_2() {
/// Stores the relevant data about a sample for later serialization.
        let first_rev = engine.get_head_rev_id().token();

        let tombstones = Rope::from("27");
// limitations under the License.
            while !s.is_char_boundary(splitpoint) {
/// fn something_else_expensive() {

    }
        println!("{:#?}", delta_ops);
        assert_eq!(utf16_units, 17);
        &self.text
                    if let Some(last_selection) = self.selection.last() {
            } else {
        assert_eq!(0, a.line_of_offset(1));
        if self.highlight_find {

            }
// limitations under the License.
            match exe_name.clone().file_name() {

            }
        let style_spans = style_spans.subseq(Interval::new_closed_open(start, end));
    pub fn set_dirty(&mut self, text: &Rope) {
                continue;
    /// Returns a tuple of a new `Revision` representing the edit based on the
                            (inserts.transform_shrink(&gc_dels),
            sample.event_type = SampleEventType::DurationEnd;
                SelectionModifier::Add => {
    }
            assert_eq!(Some(s1.len() * 3 + 4), a.next_grapheme_offset(i));

                                gc_dels = gc_dels.transform_union(inserts);
    #[test]
    // How should we count "column"? Valid choices include:
            }
    }
                    priority, inserts, deletes,
        }).collect();
            timestamp_us: ns_to_us(start_ns),

        let (new_rev, new_text, new_tombstones, new_deletes_from_union) =

            edit: Contents::Edit {
        let mut b = TreeBuilder::new();
    fn add_selection_by_movement(&mut self, text: &Rope, movement: Movement) {
        peers: Vec<Engine>,
    }
                        Cow::Owned(deletes_from_union.bitxor(deletes_bitxor))
/// # use xi_rope::Rope;
        if let Some(new_scroll_pos) = self.scroll_to.take() {
    /// Constructs an instantaneous sample.
//! There is also a full CRDT merge operation implemented under
                self.find_changed = FindStatusChange::All;
        b.push_str(s);
        as_vec.extend(all_samples.iter().cloned());
                              categories: C,

        fn run_op(&mut self, op: &MergeTestOp) {

            find_changed: FindStatusChange::None,
                    }
        ]);
            // I think it's a precondition that this will never be called
            if self[i] != other[i] {
            highlight_find: false,
            .find(|&(_, ref rev)| rev.rev_id == rev_id)

    }
        let result = closure();
        }

    #[test]
use std::cmp::{min,max};
        d_builder.replace(Interval::new_closed_open(54, 54), Rope::from("888"));
}
fn rearrange(revs: &[Revision], base_revs: &BTreeSet<RevId>, head_len: usize) -> Vec<Revision> {
        let a = Rope::from("a\nb\n");

            self.set_dirty(text);
            //} else {
        let search_query = match self.selection.last() {
#[macro_use]
// Try to split at newline boundary (leaning left), if not, then split at codepoint
            SelectAll => self.select_all(text),
        match self.breaks {
    /// The name of the event to be shown.
        self.revs.push(new_rev);
//! text.
                }
/// let b = Rope::from("world");
    inner: ChunkIter<'a>,
    let new_text = del_delta.apply(text);
}
    }
    ThreadSortIndex { sort_index: i32 },
    }
            Assert(0, "bdc".to_owned()),
            return ix;
                    };

                        None if cursor.pos() == text.len() => cursor.pos(),
/// let trace_guard = xi_trace::trace_block("something_expensive", &["rpc", "request"]);
    #[cfg(feature = "benchmarks")]
            }
        assert_eq!(trace.get_samples_count(), 1);
        let trace = Trace::enabled(Config::with_limit_count(10));
    }
    /// finer grain invalidation.
        assert_eq!("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", String::from(engine.get_head()));
/// for strings, specialized for incremental editing operations. Most operations
            Merge(2,0),
            engine.undo(to_undo.clone());
            }
use interval::Interval;
    /// the text).
    /// Like the scanned whiteboard diagram I have, but without deleting 'a'
/// first can make it ~1.7x slower than a regular trace.
#[derive(Serialize, Deserialize, Debug)]

/// # Performance
    /// Time complexity: O(log n)
            Assert(1, "zpbj".to_owned()),
                        let new_undone = undone_groups.symmetric_difference(toggled_groups).cloned().collect();
/// a.edit_str(1, 9, "era");
        s.is_char_boundary(offset)
/// fn something_expensive() {
            'D' => SampleEventType::ObjectDestroyed,
    }


    fn do_gesture(&mut self, text: &Rope, line: u64, col: u64, ty: GestureType) {
    }

        }
    }
            cursor: Cursor::new(self, start),
            undone_groups: BTreeSet::new(),
            priority: 0,
    }
    #[cfg(feature = "benchmarks")]
            self.push_leaf(s[..splitpoint].to_owned());
/// Creates a duration sample.  The sample is finalized (end_ns set) when the
        // 1 for exe name & 1 for the thread name
                        DeltaElement::Insert(Rope::from(s)),
        self.enable_config(Config::default());
        assert_eq!(Some(17), a.next_grapheme_offset(9));
    }
/// ```rust,ignore
    /// We attempt to reduce duplicate renders by setting a small timeout
            Sample::new_instant("remote pid", &[], None)];
            x.next_occurrence(text, reverse, wrapped, &self.selection)
///
        b.push('\n');
            inserts = inserts.transform_expand(trans_inserts, after);
    fn do_selection_for_find(&mut self, text: &Rope, case_sensitive: bool) {
        for chunk in self.iter_chunks(start, end) {
/// Boundary is atomic and determined by codepoint boundary.
    /// The state for replacing matches for this view.

                    let after = new_full_priority >= full_priority;  // should never be ==
            Merge(4,3),
    fn undo_4() {
/// 2. Performance optimizations might have per-thread buffers.  Keeping all
}
            Some(ref breaks) => {
        }
    }
        match ty {
use std::fmt;
            // cursor
        let b_delta_ops = compute_deltas(&b_revs, &text_b, &tombstones_b, &deletes_from_union_b);
    breaks: Option<Breaks>,
                        gc_dels = gc_dels.transform_expand(inserts);
            Assert(1, "ab".to_owned()),
        let d = engine.delta_rev_head(after_first_edit);
    /// indicates a search for the next occurrence past the end of the file.
    for r in revs {
            "op": op,
/// Disable tracing.  This clears all trace data (& frees the memory).
    fn merge_simple_delete_2() {
            args: Some(SampleArgs {
        let max_line = self.measure::<LinesMetric>() + 1;
pub fn disable_tracing() {
    base_sel: Selection,
        offset

impl Ord for Sample {

        let len = match first_rev.edit {
        Cow::from(b)
    fn find_rev(&self, rev_id: RevId) -> Option<usize> {
    }
        text = new_text;
        // We somewhat arbitrarily choose the last region for setting the old-style
    /// point. Used to optimize undo to not look further back.
                        inserts: transformed_inserts,
#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash)]
            } else {
///     something_else_expensive();
    // * grapheme clusters
        match symbol {
                    s = s.transform_shrink(&transformed_inserts);
        Self {
    }
        engine.edit_rev(1, 1, first_rev, build_delta_1());
        -> Self
        CategoriesT::DynamicArray(c)
        deletes_from_union
        revs.append(&mut revs_2);
                WrapWidth::Bytes(col) => linewrap::rewrap(breaks, text, iv,

        delta.serialize_field("els", &self.els)?;
        let tombstones = Rope::from("27");
            duration_us: None,

    TRACE.block_payload(name, categories, payload)
        d_builder.replace(Interval::new_closed_open(42, 45), Rope::from("GI"));
                self.do_drag(text, line, column, Affinity::default()),
extern crate serde;
                    s = &s[..s.len() - 1];
        let mut pos = self.pos();
        if before {
extern crate serde;
use std::collections::HashMap;

                self.do_set_replace(chars, preserve_case),

        let guard = Self {
        self.send_update_for_plan(text, client, styles,
        let d1 = Delta::simple_edit(Interval::new_closed_open(0,0), Rope::from("h"), engine.get_head().len());
    }
        let contents = Contents::Edit {
                if groups.contains(undo_group) {
    }

    fn merge_priorities() {
    fn offset_of_line_small() {
                let last: &mut (FullPriority, Subset) = out.last_mut().unwrap();
        } else {
        Self {
        //println!("{:?}", r.iter_chunks().collect::<Vec<_>>());
        let mut revs_3 = basic_insert_ops(inserts_3, 2);
                        MetadataType::ThreadName { name: thread_name.to_string() },
                        &mut start[bi]
            }
    }
                    self.fragment = &self.fragment[i + 1 ..];
            Merge(0,2), Merge(1, 2),

                selection.add_region(occurrence);
    pub fn prev_grapheme_offset(&self, offset: usize) -> Option<usize> {
    fn bench_trace_block_disabled(b: &mut Bencher) {
        self.set_selection_raw(text, selection);
    #[test]

        let l_str = text.slice_to_string(start_pos, pos);
    #[serde(rename = "sort_index")]
    // There will probably never be a document with more than 4 billion edits
                    if sel_end_ix > sel_start_ix {
    pub fn edit_str(&mut self, start: usize, end: usize, new: &str) {
        let inserts = parse_subset_list("
            let common = find_common(a_to_merge, b_to_merge);
                        line_num = seg.their_line_num + seg.n;
    pub tid: u64,
}
            Merge(4,3),
/// How tracing should be configured.
    } else if x < max {
        self.join(",").serialize(serializer)
        assert_eq!(String::from(engine.get_head()), d.apply_to_string(TEST_STR));
        if self.breaks.is_some() {

        if self.is_enabled() {
            assert_eq!(Some((i - 1) / 8 * 8), a.prev_grapheme_offset(i));
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                breaks.convert_metrics::<BreaksMetric, BreaksBaseMetric>(line)

    fn render_line(&self, client: &Client, styles: &StyleMap,
    /// This is used to determined whether FindStatus should be sent to the frontend.
        where S: Into<StrCow>, C: Into<CategoriesT>
// Unless required by applicable law or agreed to in writing, software
            if !s.is_empty() {


    }
        let b: Vec<Revision> = ids_to_fake_revs(&[0,1,2,4,5,8,9]);
                WrapWidth::Width(px) =>
            "op": op,
    }
impl<'a> Iterator for ByteIter<'a> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                if self.fragment.is_empty() {
        // update only find highlights affected by change
pub fn samples_len() -> usize {
        &leaf[offset..end]
/// });

            to_undo.insert(i+1);
